<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>15</ID>
      <Description>"Table Help"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Auto"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(damage, "ROTTR.exe", 48 8B 83 A8 02 00 00 0F ?? ?? F3 0F ?? ?? ?? ?? ?? ?? F3)
registersymbol(damage)
registersymbol(inf_hp)
alloc(inf_hp, 256, "ROTTR.exe")
registersymbol(ez_kill)
label(ez_kill)
label(damage_new_code)
label(damage_ret_point)
label(enemy)
label(lara)
label(player)
label(exit)
label(lara_flag)
registersymbol(lara_flag)

inf_hp:
  db 00 00 00 00
ez_kill:
  db 00 00 00 00
lara:
  db 00 00 00 00 00 00 00 00
lara_flag:
  db 00 00 00 00 00 00 00 00

damage_new_code:
  mov [lara_flag], 00
  mov rax,[rbx+000002A8]
  pushfq

  // check if its the same adress we saved earlier, in a call where rcx==17
  push rbx
  mov rbx, [lara]
  cmp rbx, rax
  pop rbx
  je player

  cmp rcx,17
  jne enemy
  mov [lara], rax // remmember lara

player:
  mov [lara_flag], 01
  cmp DWORD PTR [inf_hp], 00
  je exit
  popfq
  mov [rax+2C],(float)300
  jmp damage_ret_point

enemy:
  cmp DWORD PTR [ez_kill], 00
  je exit
  popfq
  mov [rax+2C],(float)0
  jmp damage_ret_point

exit:
  popfq
  jmp damage_ret_point

damage:
  jmp damage_new_code
  nop
  nop
damage_ret_point:

[DISABLE]
damage:
  db 48 8B 83 A8 02 00 00
unregistersymbol(*)
dealloc(*)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>13</ID>
          <Description>"H - inf HP"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(real_damage, "ROTTR.exe", F3 0F 11 70 2C 48 8B 8B A8 02 00 00)
registersymbol(real_damage)
alloc(real_damage_newcode, 256, "ROTTR.exe")
label(real_damage_retpoint)
label(real_damage_exit)

real_damage_newcode:
  movss [rax+2C],xmm6
  pushfq
  cmp [lara_flag], 01
  jne real_damage_exit
  movss [rax+2C],xmm0
real_damage_exit:
  popfq
jmp real_damage_retpoint

real_damage:
  jmp real_damage_newcode
real_damage_retpoint:

inf_hp:
  db 00 00 00 01

[DISABLE]
inf_hp:
  db 00 00 00 00
real_damage:
  db F3 0F 11 70 2C
unregistersymbol(*)
dealloc(*)


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"K - easy Kills"</Description>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>16</ID>
              <Description>"Auto - easy kills"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
ez_kill:
  db 00 00 00 01

[DISABLE]
ez_kill:
  db 00 00 00 00


</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"P - gain skill Points"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(points, "ROTTR.exe", 8B 48 44 89 8E C0 01 00 00)
registersymbol(points)
alloc(points_newcode, 128, "ROTTR.exe")
label(points_retpoint)

points_newcode:
  add DWORD PTR [rax+44], 1
  mov ecx,[rax+44]
  mov [rsi+000001C0],ecx
jmp points_retpoint

points:
  jmp points_newcode
  db 90 90 90 90
points_retpoint:

[DISABLE]
points:
  mov ecx,[rax+44]
  mov [rsi+000001C0],ecx
unregistersymbol(points)


</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>"B - inf Bullets"</Description>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>11</ID>
          <Description>"Auto - inf Bullets"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(fire, "ROTTR.exe", 66 89 18 48 8B 8D A8 03 00 00)
registersymbol(fire)

fire:
  nop
  nop
  nop

[DISABLE]
fire:
  mov [rax],bx
unregistersymbol(fire)



</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"G - Gain coins"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(coins, "ROTTR.exe", 74 05 0F B7 40 0C C3 33 C0)
registersymbol(coins)
registersymbol(coins_flag)
alloc(coins_flag, 128, "ROTTR.exe")
label(coins_newcode)
label(coins_origcode)
label(coins_retpoint)

coins_flag:
  db 00 00 00 01
coins_newcode:
  cmp DWORD PTR [coins_flag], 0
  mov DWORD PTR [coins_flag], 0
  je coins_origcode
  add word ptr [rax+0C], 32
coins_origcode:
  movzx eax,word ptr [rax+0C]
  ret

coins+2:
  jmp coins_newcode
coins_retpoint:

[DISABLE]
coins+2:
  movzx eax,word ptr [rax+0C]
  ret
unregistersymbol(coins)
dealloc(coins_flag)


</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>12</ID>
          <Description>"Coins flag"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>coins_flag</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>19</ID>
      <Description>"No description"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>Float</VariableType>
      <Address>19D497159FC</Address>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of movss [rax+2C],xmm6</Description>
      <AddressString>ROTTR.exe+248FA9</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>2E</Byte>
        <Byte>F0</Byte>
        <Byte>74</Byte>
        <Byte>20</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>70</Byte>
        <Byte>2C</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>8B</Byte>
        <Byte>A8</Byte>
        <Byte>02</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
  <Comments>Version: Epic, 20 Year Celebration, v1.0 build 1027.0_64
HP:           Float.    Full HP starts at 300, code shared with enemies
Ammo:         2 bytes.  Same as the value seen on the HUD 
Skill Points: 4 bytes.  Same as the value seen on the campfire menu
Coins:        4 bytes.  Same as the value seen on shops
</Comments>
</CheatTable>

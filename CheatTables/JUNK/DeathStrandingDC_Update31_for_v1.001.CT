<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <Files>
    <OCTfooterlogo.png Encoding="Ascii85">Em^R!8[m-WQYgg:w79#wJH?3*AvhGLw73:xZpGbcaVhR?#U.4AOMv1U?{:,pyWC})H,PxYeRg*^ncSt*0^^]}s]8j]h}EGJ08B+%nNI*!LLB@D@fe0nTLB,)3U5%%l.vdruz#PQ9mR:o37VsVo)lkgj]#0C0Ayql!iA]:iXUZB[mRjE2;^R%-8Q)0%tlMsRocPM(eGl$?NbiLwlsCMw4n5]as5ImulP}jg544o0H6dY%1CK[Up}$D%,l)gyXz^p:cwc48LQ?N@Ovj)r#4(7/LvvA6u^5EI_YfDQZU5j8#Y)DytMEgW2TQ4wdb1p!@kMi,9QabpNIQy2ZdJz5eW(22V-n}=XDf/iha##0Pf8LLw(]Oe9tQk,;U2Uh22!w%8.-}1sylLr3fgC%S;]5^z^wB^/NEHXk$%-nHNX:yS8}9eDW@ES74IFP8JjnAVnd4wcQ/ngc@fr6Ofct=-!Nf!]DbA=lnV5u)I*4[2!otlj[w!ojphBF3fLk9,0E}I$sAQd!rj/KHSK_.BA4]J%BY:f@+%58ug$3cM76K2:sg_Z[C^4P_Nr]xKX8D$#%K[XTMv6a^OI+S?c5Y^IT=CcJMNezj8Lc@JaHIklIhgiw7iM-/R)EY#)]l@tl+H=Gt6rl*c]0(Td)8P]4^L;.c^!?Kzwf4P[O+p;2%OKv}[rLT$W%4tU9CoH?Uwr7;GpNl40i#fe.vTfi]SfNhI;22g?4RVel)]v)B.CrWXUq{ho1kLAWWheKM3!k2f_D,k!mi},3lfP@KOiv9+7Vr0S+$)qbY67rWv[Ub[[ftVu!3+53sgg_kSiN*Bq*8.=W#G,KOE8zmhYK;Ec%fAsiaT))Np^;k}plZa1KL2*16%O:$9g4ekf]Ie/TV$Z,=C#R^gy_JlhFRUwl!hNTIB*Tg^S5HOK#+q94oNh{0Lm/]Bc,5-,?/B;-M4o-lmonocq4%i23bY!^}+#Vk?R]#er:My=0*)8La5-HTwz8_k[,E+W!{+d;:m^520.MnTR:-UX1t?h,+dD/mnCMt(UpZBp?o{z;!.6{iXVYQ@33iUn!wP#OD!ZYA[#c@DRw2@?zZ;F(Aps4K*(k][c#V)J:mIx!-d)s*Lm3-)kcA$=B8%1@a9^G[jGHE.NIqNT^wT?[95.1VfaVgyCBPmB,?Js:}V,w!JSypOCSA=s+=22^@GV%%]b0%+8Ix2%s(4F=8M}4^}4{{aihk-+SA2ehV$!IL1.zdJDT{#(P[N{4sIE%a64FDDB5^w-ZwWJn7bC3q^^Q%PEK^ueeIx=#1CD,5:,X)!{l(ZeYUNKNI8kkTOukwUFTnicbe/jPd^NW%m^:(9wRj.(Ir0V1DY5L$3={}dDSypY4%X!j+(:o1pj_9ONbGAROQt113%:m,}{BWpdy@4tjN^+PeS[Ly5w(s6]Eb{6%joJes#76,MToYH.X!=zPc)F9zXqW;cb{dLik2(MQ[;y;8AQmZy[im)+ppGS/;bH^e.{:orc[6(/Tson#R/#?JJK1J)DFpyN5bz6c5Ep[}U.niYNc_K%n$E_HwC#%VMlByOvxgc#_Zy,CvkE+g#@b!yB8x+a;_-iIo]JPOd%ue!x(l;CwMZM,w8bv2*?VbOk5A4elLX9vRF3U^kGl@,Asl#*aeAc--wCqXkj(Q5Rq+KKV{{AYNfMkdWKrZ9eMkU*8A}$m%l,g;Q4#SS!e@rQMa!Q1Nt(n_ZX6l3JN.Z_gsVP[%W7kLMP0Im_je3e1YjVbw0n4IlpKLe^j#9)yUK7CJJiq^9,YQU*(fMwhBhkxu3-Xb3Uji(.u8hE(nZOIS!}$;-[Yk{eQtwlQ)1FhLj}!jvt8zZtz{deU].gY${BhhmY=J!9#:StmDIFFd[Mbq,{FU]me=d{6LP)4pQM(_m-TE(;cI(*mQct1(-sHk^)A$=-lD,8.{oc5}z7:z8W{Fm%C.j;dd8e^ep7LX_?AIT%*T7mBEH%oi[ulxKky$gh*LU8M=sg#2$^YeFhqh;=Sth;eXlzL0xIq0bK@3.LoiEr#Dk$wkSr2MD9MY{ea}^4,9$D[i!70ixs[I-px)=hg*iEq_ZdJGP7Mj;Q[?HwiQ-[6TO8^1.e_@F)max*^v3Tn,i%3*nc}YoCG(pPg?hx$]hHGMX$?8m,p3#Q;tP:c{:7ktV$iiggbPPft%$A*hooozFqvcI^,)G1+2*xZR0Kv=ZdKx4iue#fE:FAR$3An*dIdD?)E;zMwDznQh/KQ_2^bzb61MT]9heVqw:!BU1g=DXS%p6op5HSD-ZIThh*ZW6aE$166qzX%QODWI7GZOQ#rh8H%Zr(pTA_Z5ydmds9XBOi{,YqL:]mBE@FSn)^=WU?;z)j_of#1,,+SO;.b8)HRvdm2BbU%S-3Z,lH#G8!rS#R#w^-HBQ1m2S0Kqb5e39KIeQ-YBGM2F1K8ce,v!G3R#X/hDY3z91@XRRa:E6tEgx7I5nzk1ShI%96@d+ap^r9*hs#z({s.@fcKJHd^Pn[%9S!si.B!,P.*=Mpvv2:)eRtQSUae5%D3lS9t:T8M]yM.haXN.4*.P_3T}i.;{t%J8)yLEu!GdWvlc[hVom.%aV)W_sN,tw0C}rHlLN*hK:ikih1C]p(#e%G7-MV-?xVTBi9gN@cxZDCjBV#{5u{X16e74SsLc(,DjD$_+Z7;U6]97ePHOl237VT_5;3qxzn%/@p,f5IS0]KWF28#;=zg,c[+O[r]M[V4WiYB$;{@Y1/.9RPyH3f3-5pUG^tV{SdG4)0*Uxe+]h_$(r1:_{b44*m?[w%nBk*N8w]^%dK;V*7O0Dx?,].,0/Bq)8T,GY0=m*!j%:Ti!9_37-Xh[h?NKX%KODT%0zNm9HCN9SfCHbkzXXXHV;}w-Ea.8X3g3#h,sy,GCw9Va0aX2euvBIND6jtTARliQ+j{cqMg;7ZcVR-B0Vr{F,,{nxb]K*WyAlK]q+Hd1%qsFt2]^X?#Bo5ElZwfU3J_J}9oxUc5%8^;Od;3UM9i4B2jU=,Bxy]c81wULJ2)%fuI9t{8h/V=;eT@Jr%%NNDA4cv}qL.Dpyf5%Q.nOnfXW.OmK.VdPrsVH1[{sG?0jb$^)n%UvWA=:+R6POJX5$1gyH+[DZ=}EN*Y{aT;FCeZr$i6}dh5p*4]Qw,W)*#TfxqATe?%a]GV*gD:]uMhR0eCMuExaCa2f)d5iNg}(o*x9vZh0.Vywp.)pMo(P31$UB@c7K3=oP)^hqLyB;Le+QGx:UnTGJ@n$5X)d)sdIHDTsD5w_QZ-y?wrX$.#+ZJ7FO*xfR7$ARUI3Vpr/NdwU%#gn_c]uf2-nY{zQ+NEJi6f5(_hd_Z$fBOf+kQh)i8dLRd2PU,.Wp63F-zL.WrHQDws035{%(R8Zdr#u,:X3$V7XBKmULZPbdDB6$Cl}j-cRQWkpGlM4-O;u96Mc);QCiBqOpcsc_6$@JHLJAIoGa(h8h=@Z0,?pE?CsFY=,Vra?(O6mOam1-[tMCPUwUMh8#1R0N^bYu.Pk$Q.Dhnm@k+UZGHG1qC=x#0^^o8W^bta3j;N-mqJ?/e-03?gMY][$IjT:N.rTz4x1a#Kn-CrNMB*z+tBnuO0rK#+J{wU0]}atGLkHNj9z#?IJlh/0knQ/_5FmQyib:vsrvap0g4i5N9=zxmiY^N$FMi4UZ^qk2,XJHggQU#aTMI-54jj=feQ#TE%saSfydSWIN!4qMC+.R]q$b_:.6XpX5W4C0mqk9P*CtQ[bGXVk/1+D5xV[]4Xkj(#p)TqSrgnCy6{VX(m4I%=B}B-Lg^Q!ghl(b:!T-X-56ej8N]hUCING-a.n=w^ak)bLVcB0^?Jj_{@KYCJU+]u^#1+8G]mEvB?yGK=r[P.(16P?-p*xV2Mxzk1T[(6siIiNO.Hd%KuH1Ovb(Bj=)05F4.fxsRC,T9*?mJuJ#%AV#bL=f(brEdRg.2:G3ZihM=Tst4=u+as=7AgF4i/l6O_j(w!.g%NB$V)I=F,;.pDP2{Zgi6Q!=RVj+Ui[!p3SLi9b-;AzpmU*-$(Q#2w5U0cXFiAkMvA+c.,qgl$V(mCsVBrfKmVy4+S8Wb-wk$XMWzp,xY}#IW4_64kc9dd+^-RJ89Kxf:bEQu{+6CL(JK]n3Ad!30K^ZF7-S=c}zm+TRa};e#Af297JLE%So*]owVl+W?6rwD!T;oJFvB_oH=uT6o!+QVjSr^S:{9%5b?uV?!!xG/y5Sz7Yr1SsBPn7G;TQi2qe)$=C6)WyDARQ/^LHZUFF%ArBfeD:Y0qDF1n):SOE4-nBymfOg0Mts]ieUd%eh)%=B/H5_mt.j)SBH%/0EvL$@c7u6usS[N8i+E{z/e(0U39E{%Wj8*n=[N1NLc5Bgh)NI#Xjm_}*O)cK+5iHUc;7!7l?X0ZfBx}tjl./?mjB:nIaWo2c59N@KbY+sX[Z$Dpw8A$DI.syBmxt%Sp9QWbDyYKw2(il@ZzIh9U,.bPl?3HPluLZagFVvryBsc%[!UB@xmJofk]E{UW)#5W58dP[69p9e;oOx=!ti0%%f=p.-e:_[lNv$oMAD^h;nJ}qEa605GOP9Mw;PE*ef.}DSF)TbykAjarf46OI+tp!3oP@vsV2E[5Yvy}Q;vTy++:6TeCc)})0qNKd42fMVErpTEAExc_4#wu5YkMdM)5hQ]9P8=4-7W1zt[t]*[vT]fr#/d8d$3Cok)Ca9QIup}PF]TY*a,pxd^mV,buw-bxip4wT$l(@X+Hm:4[ub)kl^;eJwvFpGl,w/eKscge%g#@_8./WisIdS+)*(I8FEd.(N0r59WgCtm,E59;b_sW/cVbt2tQiR*;?9/AL_)S^pRt!v/U2;Ok[}oABv_zvn0VlY1s?!Z,@ZUWny9J*BQlZ;R+FvFrXpwVKK(E+8-Dp-2a#LRnNCrkLMg]-QeHm-+]VO1jw=X%/nGqX!hES7i_DfWAH-fF1jlA@ShG^L59Sj72Ff)YSx}eO^;d[-C?SE2Y?)Xo,3ua6*{DM3.rXi=.xM{d%.!9Ev27hXR{-*PyOi8%=EitZwOiQh8/U)Ci0Nf/m8W.@l^@V,]d.;xMw/iqCDtd9ns?*PGQr?@avgjx%m}kfNRhdkt@yLL2Jm-)rlFTx}ks!seOk(%7GsmBXj((K*Z}mHTMmHw#Tpdw;i6qyWSVu^lE3/irilDeSH@)O/^GpI{9i(EHqVF+?ZV3]/V^TYi/i/F45UhmR#^xKZcB{;c7@@7F$ILPWaB*U-#A4K90:$4X(S(J$0$_T71y:2E$sspj7=_37*6fL0zRwKtUTr58YJVbfa:{*rn}#lso1Cj(M%;.3Rw][py*8d9nozHi_0j%clWG,t$eYfhqkhW0l-.evAVRg2RdW^50N6*5]36ivkz,F1FLjk^z_nqvg%[+[Ybyw9XqZ*l{KbT_.j+Z3A5O0!qgJ+xXgq!_Va/t%ua{6$XQgHRc8%VG_/f*h0cNIp4R?j6qPhP*rgzJw2?$]B=I3?PYaD.S@ivIxd%P3c:h@#9rKTNVpK{FbXRjtNz}k4.@;D:fP}=Z7rGT.,!_sYXrfkvtVqeb;mmsjV9Fxn7I.?Xh{6@b/=-@:=hyrUm}FiChSo:7jxZRtrP9YBM;vP:n;IvL*xz:r;0[m4[{}6x0=Z[)F_[+@Fj5r*C3HHx(8f}4tx9JLP}ud*?Eb/dD{W$*B+J,$_^!$Vob3JIt:[,yv6xJUO-pv7-Xy-u5UstKQJ{^l1AAaGj;};J6^3-1r{JAe_BNv;4]W4u?qo9WnQp*G.ruh=t)$j4METw$XZ*!Z7p_Mc^v)NQ2XO=x#-LN(h[zJdEx79WOQ0v0r7$_Os9.KnAKGV(FvYL%tlUN$jZ+xQK**;sZ/+oE2L#{5nv)iwyMy^e_r+b#n)6vWSCv7^eUi6zEiN%xT;6+.}A+8,90fS*lfdtR}Va]/Wp$s2m.=DqX?KlK8;HOJI-M0w:xolfz@Kg,+ED_VX?_5W+vEQm%11OGu}KJ2%O{SgVxSs^Nfkzs!{]GL)/m[E[4)tlgtxES(q!Czex1shZCazsmFP0?6!^Z0YgdQ/WODXk-X8*1$wiPn47zCT-?:Iy{}-zH-+FZNLlp3V);F-V/RB/dze7D.?CYiQ%fVSfcKFRWlaY/x6/iv%b8+hXyb8Dw7u68+BPomPt5q@t[U67LW.Y_Hca$xx^#z-dlA16yq(vbCPC}H1l6AG:JE)^0S#O}N4Cnn$vflaS.j45,P=}s/pG}ma:v=KsF^:50ih3G@yHaFZ%Tp[xHf}2r+H1I/S;h]$(2zdx%NrmH?B@6v;D1/lJrg=w0fNP/c@OU8UAcMSs*u^$$O$AoOL{-VOrv;.;7t.iaAp.TJI^$u8J)-QkU8lAoKDY+RP;fxSi%++{K1fkAll1cvaz01FcH=y!.BUQnMd(ek+z?D]pa3tHtpImL49ik2sKxa8jlAiUr%mRnuQl0{M7i18VJH,v+S6$KRNxkW*p3wgLoj=Kgiz(UbFfUB+!n5nir}B@n-L7Ebm8P_1J7x4vhOGv?w1RV7Is-R4!ra4z0ia/}TmTRVfk^RS_dcr]xQ;vcodoJGWI=lsFXZ}OAkVku8X!8SD$li_x7%+,]rKX/so792Cj+;^%Sa5J5}/mKh+fsx,5-;dj:!$0Zx,ww8oiA]0{nM?IW*ck2j,V{V^[?g^xf$v.Tt4e3CsQ.:bT$Cn5_Gny^XcQeqB$wK2!($sNw}m.^w+5d;P}YvDyqnHo],^{G9paU/^e*KA$$@/$c1q/=KiXEYBb6?p4:.g(!lHT08{d*z.:2A_Uzgps%baNF3ZC5TyAJ8GofMkBw]b8M]ksH}%.R0t%QKjinYF^6Q[)zbHK}+J3p(db2Ld=E(uKY,+_55]+BigZ*[!XU/=Z1ES$kBcm0j9{yV}CTu.kjR70FzCdR+vQ-;({i-NMqcp}V/C7F*npx{hUIYwK?7;;].?Nc6WH%f3vI]N_W[/UB;7bhW9J$!dsr]QiHJI}^H#iCpP(m+fo[umXTt^#6$8m]eYS7@p6K?,),a[hO_fz(DjSGe0uSuIv^34pQ.)e6c4tE3T6*ufA5GWcOS1Omj_0;ohmi=g@6fE.4Yt^XpvjjU=#jVR?N87V!t6?MABnTp1dHYeUcMDs!oe--C0FU6IGAl4OVSWx@b]Ri{;T87pn4#:z_2!]8#LwW2P#KLXjkGIDXERX+*8OdYg-P7W^QXKa/.B8u_0F{.9vxi:a]1cNo[2Bn$.:Y![,ZIOHf74F,+:nd=CT}3}H$lVbhX#/JhuOZ$V.T-$98%_44sDlDm+H6W,ACRQO^qP0R)lG7:OjAaKV44E-+Pc}-s^4K0pX)e{%B:3-RDQJOAZH}sRzH*hd678bNo6.$8*Uk(#XoXW;oi[h1JHsX?+}1f*:]aF)Dy.E,)f6O0_)tb!%^!YEhhte@V(zrCay*7Z^)9-U3nm;4ZdU}jcibFg[4_n!]i.RJzh,HU*Bd2HoSEJ/=9].FliQ5oA#kR],-;IrJu{C%BxZ*L4S(=Pt]MptA90=DSEQ9qwjw^.cY-d(1L.pw_xXs@yFE9b6RVud[_FLQ+Vf)9*MR..TwXh!k,BEV.rlN]R9?(D0o;0%+/^+3_1*w;]4m=3$y7;+4uNrZ]*6n]F=*II,e.7IRHU.;*=82U:fDY1ENe^-Lc5imP@R++tzznilWQPmVY+];,2?m*%N_KkqJnGk0]RnSgaoOP2_9o3;El?A(%NqtW(OJ0Vn08.#rHK2g(]fY%8vD$_P1{42hWU=4,V?(TCCxgp1S31n,mHXyVb.y%EYt!Yjo;?:sjbOTWTC6q+]tjkLqu1l/tbzUvsni=09$,UxDb)uEyo1[tdoLM4IswMWtOJFIIU7{V$7d+g(NclbcH?UEb3g;Ee-813c6CTj1,M}?R]@Uuz_KbNZ_(2,8w(PI%SlF/yP%J]Awjqr:rgVFHlIYBQzT6_P^P8,@:8eWWO:AO$yEs,HRQ(tbL;LHu$SO)QQ$2wI)!!QY}+6(G+dYls5SE%IWRYKQm$0K3_Ru}G4Z*_!WZ%z!1BqfR+lbSaCGD_h^!}Pn1pEj?;x2L(OJrcRo(hC4:(7qc+3x$V@8sm;*-^@*7]ErLS=0/_jq#2Tt.mOODul+;aV/Q7w*^o0k8!-XE=m9[DjE,wyw;I$#CCwJ.5tA*R6vzJ{kg4)WrqGLtWpkMixc..aj:+E!c0E+AQdTz4y)RX-CXHQFr7Vr=Aj!Dhv[G$jaXFginM/+x:DyVh#}0/VgAs){S=!UmVc+nxhzhc9T@t_tmDyQyB[:6!O]/YQcU+8kkyD3u800gsgC1vc=eBKi:xG?k;b?.h:4%i6Yot/:MNLT$s)y2Jg3;p{7Otd)wOXcAnro}TG)zcYFfiHH40h0Dzk1/JMevWwx.4/K^)A)$8W+Esu_g%6lf6)W!bI+*D,7GM0/d;ByT}([kJLbB,kYY}u)D*mr)d;..uXT/6D!STmJhfFZr-?QBdSJ^.da1^uPL!t+YuV$-O9=)1yy]jd#y_GWDr+{ys-;jJyLeTabY.53.)XZ-XIIo)n]^qU2c0H:3Z:ZLw=NyOh:k7W;R(96KqnIIfZ:,$x1xh.J;/3QwDeZ,34?j2V-DlYEMxRy3YWY#BQNT,8;APK;V:NzhGshN[%[*x}ck#OGc;-grbk56nnM5H{WmeKUE#Nm.qNq*^5!liJYl##D#kf^Zl3]8F36f[kwcN]?,vD[faBb6SNj-4;y$V:EbZ1pjqmvyVXb!$1!c=Jf^o9MJk=xLOkY@9pPhAmW+F=/M;R#9E;;*5Uoo)^9LF)xDO7nE1VE$6m,?Lo9wBqmPG0UVf_M*@8mfga.5Mt:!,TdQ]C)bP^YYP#BHVvRFggT*2+k:b+h4Y.^#F!lKrIVe_=RGM=GxUFezqdHh)r?4r9-2ALX:E94qPs1X;!yFDCs[HV,j!F3HJU[e]8k5el(T+RI+*?-%uN9Inql2F^DH_3Zmoz*#v^GT:mbeF=(:$-#^ueLMWN2Z;urrt[rMunL?3!]X3VBl0B=;r3ZuLWr-=fY--3J=ezWNqHH2s*QRYH35Uc:aUvM3e6bMZ78ukes}%TUywurB[Y3SPbUba:-K7?K4dL2Xu8NJ](}^$%vcl@y3ANCG7-xMB=y!#T,fU7f!pu-gNN05(#3G!LI4wW!W-HjLzZS1!x0HVvDyEgSkVMLiLM+pPY70xS2wcFhH+hwUijUc5pYc5d[0=a]s5{dDM@MFSIIVBD+2?k,*sjO;sAb:NLzHXu^Lux#HtYWOPM{%n$KpFyAi4)DGsLIQ#5UJO6o/Yv{auqv%5#.m/+rzU4dQP4@C;011ls=;itqEX:09+ak$u/w@_);#LVUL9a,F;)U?BMD!*I:H,x,!ST91C[v=qcuW{q)Ua7;P=K1N7uhZ!*$VX@rIEI#MSfpw;TxIEDy$tmu-KX:3$!WYB?lM.,qboZp[E%U-jeeLjlN9j%zO^?T-^NsIfNA4werPh%$Bo0vXIu2!6CWZMRoBYwtVN5cLC4{RwO[6GT9:k[9D7)(=5GuTry[-1yu9z2*FQteQUiT!2KQj+kY46$8miEkQG0h+#S/TX]5E3;t.t38kJ6[B,(CAQWWx0]!CoE4z0nO@+#tHzpmL.IGSkIoQvQyP+XAuSG;o(1b^X=L9j(C=Nk.3Ce$RzLBm2;DBOmm{ySftNRWE376F}}^%hZ{rxXeC(iXoIr)+3p/R.$pVM@(Q]Oi!GuzZII7T)@TQ.[dQyP4Lo3ms3$?i1ch-Jnep^ZJTQ*YmF9IvTm%-TYh9QuVbb1+{aW0/?!sX,n:tS-+,16NhJB*CZOUkd%q/Hy{jWi[RWxa,3M?)*:_6,^?s(.zrRmCO/P]fNY(CXG1/67iCDbve80{,$@NJmEA,v6p!Ub}c;f,8Dd7zJxLL:bge9+1:Fb847=PaT/3K]EMg$pJ6WwYs?wX,_l+l!aXnfK(0%YU/P0C)rxp=)a=m!xccgMOaUPe.VpLisZ;Q(;f+ylUlXV]{l+QBe89m]s?X9c^ESUC!@O9N8kAQLHghMJ!sp;(p@/Pj386Q}KdwtIAM3%8ls+Go{)hza+0w{@VpH28sBv3x[pzzvg5EM6?w)j)K4fS[t4Gm_Gd4J^]ebk2(5aj9=M*FgWyrCNLnAe.W36)DJ{vjrUY*NUJ5JzdgWBAc0Zxryl]@nX-et4#@S)GNV8l@Jj@Hm)=6P}6eW,%9U$6J=_3d6gcad(SJs+-q!Nd^D+0+z)w,+]Hd{fNxIx84{-lspx77Co%@J6u]3.nf^!c?mp6=7oeV2vV-.2azCkfbE4fj])C}qho+1IyG/hzLxIK9vkY]?CZ-6Q/hF,_YooRg9@zrxet-5sU6TEsA1h_4L#3bioqoEKbsKLQ7%{U+iAg4}l#+O/;=@jzT0](!4xr0}SKn{i7;L!^)qGLUR{O/Jb2OLm9,HxL:+_?OCSGabD+nkQj7C}duP6H?!h6RnoL9)jvgTXQ5k?w:Fubj2z^otpQudo!Oqxa+Z,]@25()F0^?:R+0LxfP;oO/Umg}Xj5glsrL/rvq.X/X?$}:Zl?EC%++$HJJ8CuO%P-.n4spKCm1c4tleuhSR!c?e5@N)VGS).YXwrtuesKms]*[jBEjDXPG4$,U,=8RfFkuN:LBoHIlQ5JG#@a]hJr0G-Z9%j@?Fd(K+eSgKsG[I[Zk)$6/=:G66%Te{OhZJoSFzK.eUx$+Mr2fW4(zHU[.cQd]Pqz!;mu38rH!#J]J,#NAI(t=[OPnnmHC!c:AI!^?P7u-7ffav6U3Ne}aL[R*g($FT$^tMCy:bBKNY[2JRFa,G.{kpF:AxGs=(W_.?7ckmgD}Ffv23cA!{YU[q;VDHSZuzsqcG.nSRQCBEgr[Au_OX4YEYQYM]JFU,Bqh44PmoJlO0xEju;$(Nnsz:.0vCg3)@=6j@0z*V_TCMkYgnX7X^+v!9GEfL+UMh](YtyL89sP[to0gTPb-jFX64p6z5cd)-EWd7fU/CmstK.vIj56n.C8kLw,LPP_XGqdZB@wAmIXn$#+??uFi6d%ULZkQq;dROv)f7,rrN6E4Bwk@PTuP8ynPbeSFp!pHk84cVNp:lM9yZ5+b_PTX)cs,+,{r17Z^BsDyitLzQJXLf+_9cU6ZzqO(:{#f1,;0h5EZ@x*:}#{jmXHhl{E#Sv,[]$Rg^bS}ecSlYah[k7-Wg?vAW?nc(9x}W9TRrv3}=Ik:mZ5.Eh7#6=H$lFCly2[@PzYm)XA1tS#7NQ:n5y4=CKc1oHR+XY,c21d@RDZ)ur{c2oA$%}h9e8pr-uufdZ,}0,zT{0yz_A4{gRzF25u3)BtWdHK(i6NhsOEkGG}Vd}wgT/1/+^[NbBFUTp{pJf.2gsT2{}nhCnZ^B41s{$D%-(oTjM9uHi6Da-OAUT^HmV3g]h6hG=;j#=6]R#dVx-raq!nsfqtggqUSDzC^A^??8Eslzu$N[LeaS?nN8H.(@C%-:-2F^%Ts;@f0^FTO]va9p;TU!i6Id4wcE}*ARbjx]s,zWg}GgfjT01qYL:PxL0!uL5:Suip6k]$z=Ea2b9kMqbRdxpDfQ7mmNFuGkH4TC#?vZ)qkqMupMHltLLup6HkRL9ajMr5HY,#kZpS-BGo?adt-NBiSk^HehG!Zac;-*o+00$10#4qU@S$vXUeE4^DDhYnzxQXZLbD+:/rrR^y_i%n;d6{Z$sq_h*q3T5Vr0t)J05H?Hfqn)AWS#x[NQCACRE;t]Qekk[7kes59Dc=-B@1Tn/jWC9XK5#hvtmpgBm+[5D0WeHGo%-T1May7%Y7QU[nsR.^/7X3.z?eE-EOfx8dr}L-z]J(+fDXz}gny]g=nOi6Z#*uO7VK*$la^VwX;sjJN{R7wLI[HJIn4N3MGzHdE}V=8VW[#aL:!6W6Jyb8RbwHhoDm#0n7CSa_zjR+X79K2j^)IlCTld^x8QIZnfZ4^q/1vo1Myk!1Svx/u18yX,-K.V]SR.MB[dv/b}9veqzJA6TKjhhxxtH$bYHyjJ01Jvnp3(h)%py}qxZ4sr37AZAVxp1cFzJh7k8vuOWr(abI,^?zNHw^:t@9[!3G(:vhtqOyd!._QMip@rkprfZj3;^edvHCxK]gFfXoPKYmE!fFD+6o-3PsO$:y4_M+wCktwAfd:,1vH?ghle{^W+abV=Jx+y^zDss3LZf@F-VaJ*Bv[:b6l,2%?wFy=d}t[F;Op_sEyoXB.8:M%ITT4bMBa]*-tr)gG30m=zp-4jCHA,dOy84HB37UBvAvH96-%]S?rYIqftR1)^b/h+]iSs7i^2(ftqfu$3nlS.rwC_%@=Y^yDNdNwKU4d)DQ?/Oh+Rv%iKy7+7]z*Ro83_daMC67P,WEfEW}jwFMA.[9gevR5]kBFI_14L#OC!yMMX2.C__vLr9@!(0GD=M1SJN-u(L807Sr#$dH%g0rYNf[Q}ALp?c#e</OCTfooterlogo.png>
    <License.txt Encoding="Ascii85">=OjWA,);fvc[a2e.3hHxq9x7FjCbeMB3q-5rAV2iq{6Ey-KZvEp?CjJNVQM/L,n4df5R8(mznhf)9+8$2w!lT5xY;2tbFHJRe$:gfBL5jlXVZbU6WOLQQcph_M_l^(pPwtpSN{M:f^[4FJ8PjJHJcL;.0iA=jO43/oq.w[2Sj5WYc8rLs9,w!w*}aOtLPy-ka,Dfx5fP*{=9B;gN8pzxnNN=jDLZ;F{py-[)yqZt}/YYl@yWllyFE5;q^7*yC^h*wKytBiW!6]le302g7atknl7UH[zmvXw0Uon]dou-gg-1ePgm6jUr;3/kzbY$+-m_O.#rF]+m4tlFMRas?5blp*A:p#-z!H*;WEqmz4S(EjwxJZTFNlhG$dLB%0)*QRQt=Z/D9G]O::+LG-JZKik!9H{(nl$u=cFp=UDf34YB?TijPf3am2wLd}DDLvpD5h9^QSJN)i/+q$}-qkF;ykr@bf4;b9T2-0;b_NYwwE}=H^xeR#UXGF*(nC{mmm1Xj1nzpDbUVes6yl:AI@XJrjhncrMeNuEuV_H0Vt/aq)0_/jo3fj?WrJl{]PevyE1]Tg+!#8zb5$DlBDH=unNsiz(DJ.Sc[zR_z=e{FtyONb^jb(xkLH7d0qnVZ[Ye5U{CJ4Vi?C38Id#EwR(vl/^vWh#xPw0ecrK?jg1$E7A?ae%,$rG*3Z=Z3#O_/=LKVf-_+[x(S;rz*r?ieLGj:H2Joh8?Q]{A7J9OLQUJ(?$l%#w%fQD[$IW=r.iQ;@;WfX[jY.q.Od-RtIFNJ;5Il48qUJ^9f5Y3hd^i8I9]KJJ=hy39;NpMXyHrURAihs0d.(*]$E30T,-PoHD2X;J;t9XhF!$}=)DJ-IPY+WH)?escZhtS6Xbh]cJBH9qY}MaZ[X;S{p2DkC*9H_CL4j[=JzmS}on;VPdm+V3nah/Rr17xz.Q.x}^drkJ*mOGqWqKG*cGw/jCZbR-u/y;=GRRIH1#:(%/]tjSFZiIie:ZM;]VVhe],!=-]175.]bhkO9{.3YC*-cVoWYqr}$*bF:u)Ds]LFYQFR2g3qH_LO]R2upUdHM-bcPr_s+TKcWBx_:wrpbnwfc_{n7I/I!bSGkBC[cLH^]uM.SmpUd47+B{hc:9Y,5U.o=wGYHA%,_@!rlG-Gp5Q=@iT/y!Ji:7EAl4{BJ?_shkMz._%PHO;X)0pEJrQekX5aoHIeB=XJVP3/V/RKR6Qqf?7Hoa.;Xax;;OuLA$ZNISeer0St}B=g8E8)sqJ:sJjnQ!$=jLpc(#V{gP28Si*ZDG:8IP.l=wMT/t6p9vEpbCCvLW4PzV1s[;vkg:HYZh0Qr@Id98[-/1I;SyVB9tFp6LC-m?VzFAFVNe;B+w(C[McFeuA_.YeOv2e4#(Ottyf^l{)gc6_9:c^O[/6WN*BZ;8q=$)(P!L-={p7cF=L_6J#dfb+KXNN9:e@w%dBgG%Gd{8W?@F*_F%%YQW-0Wa=n,Xx(X.O*O(_,4z9]A=8kEg[0*J-#;7ZT}[s5avMkl8mr}n8X5,,oJb90373h,qm8aM@:=ms2]?[,k@0DrovcoFm-t9GA{_pXN{1JI)jJJ9chu#Egt^Z4sk}NLLmukQrf:X@$XMik;0o*k;BJ!-pNaT4?5u}fEcyz1q?XTn1$!um+3j(qgsD3Gl{(nIfu=)Q8Y87j;YH[^-wBXI$!n/#eq#MzKag?1@]I]8wQ,T8,*U4sm9EP%5P7F9*X$o;v,4;Zv3d_hILHG{2EXUTyjjjHWxm44l1Z[zYvoi%*GyK1w#Uwn7:xysg2Q2;td$Z=GtlVbNwIJj73P.FB.3ux;T8g*d!UKYgs3BO6nQBndpeH([V@hTxb5iwTBypt%vp4)Pg0E9Kurrt63s-l2zZYrnt5Rxm}/#+c4MCJ]){?YgE;hA8zLHsqOeTes(3C}CMBE:7R$%F$b{!tlo9Qd930w6V;:.n?R(kb/SEctSOVJ+,IvH4l^WqnY)[1{*iPby9EhpB1Ay*Fnut[)=-Y=8js#HkN#Dw-f$[H@S9SFqQ+pt8a:2O=cC;1eh;mw0j0p8jVi^.}?CzD;;e#S5Oii(F))Ur+-EFeCx:7BiuP#:1tLv-V-}Q(s8O2B2qLQw..otuHA9sNv]P+OrQ#=?KODixxIKDgTXWPzP^D,;^t:@f8mf:j;@Rgh4m*Vn(PCRECY$_=ARgn/OnOy.?@a$o=,uAR_^7u5}WWoVuyaagkZfp*N+_XPpjJQ([$CKbJS!Oh+wvZq((uOb$u[]nonOPd.4F9VinU;c{J3?c,-VFY?L*c(/9Y-smpf^[Ef6x3+5U0[%Vv*HsnW;OZZMb-!?Tc-?(%%d*=6an]JH,3R.1IVX;aHs[nb7Lqz3_;as(uElsMMga]-%^+f)N){w=vdZQK2u^LdZDa[[73D,{r}?hE=da.3E[@tYUwV_BpUebATm^hb?@d3$*tQ*F-vWUzw.)6.tTkN!{[qdcX[8P/9,^9W*7O55dpwNtCC@pEECU:pdGpEk.Jc3.tF2F.Snqb]j4RSqS2DBn:Gsm]n%#vn,U*Vgt9;Bu.NASF-Zja0_b6BsrwRzryU%f6S*m=I[q}%$x;IoO6d=.hq/dnfUFrmG5/-U:MN$%AV{x5hZiNYo+?oDnpG!L7%cq[LvnV(s077J!:Q=TZtW8[)-I3E9x0;1MeG5=W4pbBv))SEQ8G.B0ZY1AV8j;Bh-g+%V1q%D$Xd]bP9:u#yh,b?U{E4knrU!dB,Y#MFh+)t)Be4+lfZsvYQo9wK5(%B6_,s7I}%=9yzBx#LZ?{7gB:-5OIWyD=iSokpcJ+/h(V;oV?1*E0?Jy3:p;Kl70EB8ZHSd6QwRY5W.@F3F^taGHO+:qf1?wipsD;hnvCNM!fGLCPW]?bV,2m)LK^uJOdwvbhK9zswt)u=eeQyI#ITrScHC1s0VEmfHtdOm2u13R4D8F9qVwJDF/_9#R}JJn/MHd*b%UTPkt-N7]Ng()5R9(.x!TvkguJK@4[!B[SPvQ=yUM$.$R@-=F%v[qHnmToiQBWLTfhkYeRi7Z?eVOO2X1{gr)LkAYKTfRqX!Ot25P0.yoZ@M9PhR-bHqRb6,B$q1Z_c)y^%zUjLh66*z*rA%mBq!]ptdfl_JOSDQ6=va-_+y9j71!YRtS.NK^WE!b(mZ67%t6IulMof,h]z9.iY_F#V%wyX04avZ6p;LwGH)hby#FUVFvXvI2U*0dgc$n8Lll3c_.yGP2T)(-[:M:Vz!#C6MdHMR4RFfW{ot=C-vMYvtJ919V1t)y#bP7NR%QfO-Lf2hPdlQJ@H,:?Bt;7g!-%E3u=DmhyII:6)VXoHBBcAxgy:1X:jivL}qZ$yZ5QeZW;QXFd,TX9.@c?H$es5wjg]jo6z@9apaiL*k{+822r!WvRebp%B}T!)}]gapZ$eR$Jka@N4@Rt.5q%+u#=?wrCO.VfYm9ZZ8ZM7ak-Skt(*X::*]Br0eOM}^O!R^Q*{a]J]ZT2n(rS2/{F33]P)/l;SgbRoMi.3fgrWNe$IadJ_C6Aq@@*UrlVf-z$;J?g9mE]}2k*3^hdB2k}+mv$sfUWP;$NF^W@cgQhlibomsylx}d$TbpCJ[7_*#QidFDWS.g9Hi2MKvZJ74p}FVawrdNWv,wup7P_-TR0f!aBG^L@2-(zXPS{+-FNC2lT%Tb8Y,69.w+VvKOxvnVIuR_2*kR!v%NlRlcCr$U5Bx0SJ(dX;klLco+kncwB[JNqrkv5C882rfR;!#AIvzAO=)@,r[5H8WiBy0wU6E#2;c5d@)EV*WPhuzH!$,K$gI]$^9_aeZ9=4*B{[@^Ihi*48aK:jRklM3i:EpFiMY03JIYu]!G#Z2T:.]9Z;EVpZ);n-A,g-SG0C%z#bei3HumKxSr{o9jKrEeHDhc7A*G?^ZzJNi5p{JIOwyGL0wD^zc*.d/8[odG,@rBGd02CDj29?.,j#7$.l4eWSWt)]PqI2RCr,fhmAyJkUS{:oruQyVk/fEN60O/kdoK7+#l[5%[Gil=NLgSNqs).;VF=Ry8k1J=Sa0GQFY^K%tQe#^)0pe*O:Q_BAjwRA1H9RcJP4#qIJMqaWw9(JMV$Ax%4Iq[l$e%,8glMsZ;W7Gb}6k)InLF8uMaU%+dP_NjnY$!WW1?kPRJ$)*^hfwMb}%gr2EbXD/soh*lU;s-/vin8:xYW6.cL,3)8ysA$iP7vDB?n;G{^yjJ)TSG$HqS#}F2yMk53XdZSqdRTm0.eK[Nz-C)cC0,#TWGM%w4k?Fm%klC@(Ut}0EFn3{nqrUuL=Ale@l,W54ETgKJNb!)8ir_sn:HM;(Zz/3y](QC/:z@xjN=i%0RZG%*q#bQpY%AIL%4:p#K=R(?tCVD!k(m[sbV:L_Vhb$R#ei%yp{U$w95vPRF?afqxs3y7NcOXDU0Nob/8aG#rBcq}IzU7S5))a)wRy/OZK?+9f0F!!O*Bb4QkG=2nj_?cMEOqS#YX;/WYdZu[vlt)a:(ik8)YUf9nF-oT?S?xXh}l)r:B}qX)Ggx/u@sM;34[..O!%Q4teh_3Rnc+yUVwR94h*^ZIB.LZrN,3Jz^@p@=7WQ_AO:k6XN9yW};(?15q4x:N1]Z%/l)Iq1a-^2Pu_FtbQZX]UcclkiB_-(ND@:8NFVrEMC;Ih9P5046:r$CYLvNb^](-O-/8YY#yq+tnV2kLe3Z$K0S$od:bffvh7Q/:OwcZE%.t#L*#-RqJ{SDS_jvn[5M208XbxP*Mrk=t_ZQ0y,_(I47*Xb^[@+}_A^54CB2L2iW9n*LoBCiDS(g25gBZSNY}JMfP^z[;x5WOrivH/A,T62bJC]9U[rdUF7oj)lQe4wDF}iR^3*?85MHz=xvkBnV1]kBJYgW2hh1sC9!aPeLan54N_fEO5:Pu}YO(ak,2BF@nkdH}Mq8SA$fPc0DyUYDB{t#d]3],t[D*ifO*0{Rxy[J0Q*24M^$XnJ=*}m8?nZYYG.5mg4sftS8w?o5qiqs^83ObCtc?HSu]Vu!2iOSm,)bYUn4.fJE9$D/Q}WQ+Ty^fzehZ{?XoB[u,-.Eb:N!;?vS7a=UyRvf+N[^{q:d{1UuYTU4#ut%M%JW=@-vyN!6).HKHF@S#yaGxhJN-15?DzO8xv3)W@0OIH%9cw!6oB/.c48n0Kwt(n2YJ.7]3WxvU?6N=lx3VK@Tf5O5m?m+8hi1?{vznhP==Z5a;ss4Q.;Q+HC[q(mwx/fd]ZD6n,eu=wxh/*JOgp7U;7v[no4Eq$=iGIBjNQ?IpPt)TAFnvALL#gS{}T4ujq1-%W9@md{h9dbSEo?pkPGSXp,.ZmeVlVfi.iwnLDJoMcZ265[B[6FrI_$r$,d2yhl4o/zU)_7Z-U*H?K{R7jz65jy?X4bs+LfjY=:6mtGZC+LZ5$p3)N$Wj$M[P4,O#{Ro!4ez)V+[=Vfk?Z}JHjvh9To4;(.wIK1g,{BOsSVsiiN1,l;b5nlMIB[WlonYH$*@Z+LBu?]Wp7}G1I;@N)MT0DL#0,r?I+sXp(@+UD;=QALh3$i?*DR7c,]S#I!OMVGl*Q1-3=GioJAQ#Ss}S2^m}.SvxAoNqbv-CEd^tsAr-zu1*DK]qct;FQPmdwC7G:J*MoB@z:y2.MtOzS$_@_wVkvecN6Rd}fE1cH8rh]LNI}vdQ3_{i=}bCTm{l:23mnO=cP%I$/k:,*:#2j$GL]Ba*7jEWOK!Q?1A0ILp/zs%SmHPqUU))NAoheJjLFz?iF:?ltvO=FtD!biBmTn/1r!+D#$y8u[Gh=I]B/0zPD}Ujjk,Oj!+5aT)c1N)%v=d7v-@ASuGDD?J6lgCCP3E**oO3U=d*xCRQxTrngY,FNkraIJ=h[jQ^:9b$b(4J*bb@M4ag*oIZIX+M]4pY$g,}SC3z9qWP(CfsF}0km]EkLj?at]6xzotaz4}FzM:g(Vi$+#8zq5^Td_fDE?:PbQDYWV=sg:R#6Hgfiekx^%yUf*7T5VO!@)K$NZQ7k#dAMeoFZrQPJs-W5ca(daQAR%+^fB(S90RB(B3n_40?Wf:eFBtRbewk$I@DiSMfKpB/}x@gV}.=vt(a]s??4afSEKpXu#?5uy_sY_KHX}:CDEFU5Ve8CaloKKO.j+Cck53nMn;NYb5O(G-//;k#,s^VtX0@QVS(lmr#.Hl8NBylMjHR45_)q7FrXmc30hlkTP0@WYlfo[I?kR;gpYC6D+#KXJN}SM@c38_IvP?wxr2@b%pYX6!A5!LxR-Sm7,zYaBaszq!X4Mr1,)3!8xhSF^ti*psG6U$A_,5IJ2M#DG}DSSG5KO.$A6[2I=]6]NHi^07kem5ud3K^-_lB;D0M,Em.XPY9=m7wHY4C+w(j)+0SrQaUn%!C?3Jx7nmfM2^gGIg3qUCEVj=d!Z4WY+Vb$MX*WH%5xHG!7^n4O,n]jI.s}d*$g=2op9}T9Lh?6cIupz1hl5Q$x{VC_QZ(d84gll,C/Ds_Z}I0va/b9vLpw*C^qYFb_2:LRM4JIs97.pR4__GqUOQsO@!RWJ%M.lwKrPM$2?ju00!D/H6%,^UlO}5#t+=k=YC{RRjw)nk2j*.;U4$aY4g*(xbFYB(eszhXaAj?AJqrFA=p2^RxoPgdi5z:(Pjp:mq!],xU#80Fn4nD:ikC!s%pry)stanLu^!sa.1:vD[1iWI)cpQQqax6AmThlL@SrB^/G,Hka?e_vm[.R#ws:B?ks3m#iJI}xBSaZB]fzPTD^fht,rxzldR4$dsN-y]8pwFgp1U}Ytn-OSg5,H:Ex6?epbXLkh1M@yM4w{r6d7:QRJ_s{/%Do.BA_%Z[#,J#p=Z,cMtU2zjUDVZwwZ#;Yx_ve[S)$G7al.:k/ntj8Q=P/q#[hDBs=Mh1i,Qh@4Z2?=Xq1[GT=^UmVT$0Hn%09+4rvugLTDYHlJm#ph^B0M12c(WEgl3q#/y5/d?TDa4d@T/x6mh(a?W[sf$+dl8?f6yKP?G0.%:Md*lG8d:zqTv(XuT)kMwDfI=ilA3}CN7-w79uL;F/(PYM:h*?HBbJ895;]}N$QlphRTn.hnrp)$lIC3!z^B8ZUcmEnpAdz+jkYs$o!NXUEO;q+%(QmtYd[[8)%?i}CUUKU8m]C790kZQ:!Ve}Hw:49.5S_C.F%oanVU,V8j.(A%saQ9F%)kz%YqsV13yr5{KoJ;u17I?F2ucddC[d1UPM4z4@p!whg#A^ms](ps*,Us.KzMevv@p2du]xNa=5UnaQqXwv#T/mfqWcQpyVbRMc-9E_Prx@3]oPgR@kepkCaAv1?OwFs+(cPqOf*,:ZPx//Xoki];vj}h[fQCZ#Tr%JRG+NAn8%hMhe2yW1nPMWQ3aBpk!1/cg^y;XBjI(aTLJT_0UFt53d3A(qk;d5Qk!8i)5iopy*c{V$U:/ER![1?Ko%0$BW)iTT,U8qtuF_QG0f}xfh.QiVjCtMgM(9^5@W_xA[]v*ES,:N6s*v2U0-yE.2/Z+unhb-nM?)ZGvs4/$d-^*]_pbAJz}ye-EpSa5_x:_ZKfjaV=uV8yzaFQ6Xu6qf/?14Z@;eceZy8*wbW7rUyr]-@kgGyD^$%#p:3=6q{CK7f-=rrVYi};C9_D(DE8y#]rWC,0EP1p0-$3nAEVu{VHZ{(!tQLG4QG,z-nIb4Y}1sG4^ZoNVv,Sy/LJ-=OVLeoY=WG08uO!N:Hh#ulBICbjCc9fqt6X9$J2wUMkO3+DN{A8BEc2}b0^),s3NvjtnYmhR.0%cL^oVz;XNC!YwJsezoAf7ZvYhBsxkHmwQSSWZ5wu@Sch+(g6M;!,iX4IQNTGVI(vzAKXy3[?n=a)t2g}lv=d=++UG}Xg!;O5a5WI,)QQ0PD%zgb!wK+wOqd8orc4xLg}9]uu#py27:Z;/Os$]3;wVSZ(e$_2(Q18g]*Yz5%W6!BV+#5h2;Cd8XMM2X7CE#aXYm-nR}f0wH@$mMU%rZ[7feIXx?mn!D;*W}Acdx_%HTXoMq$XgGk?rp9B4VW5}9Gvgww/U3s;5a9Ng%D5kO*Hv$N@xi;_cj=,{$56,iVbWYbw.WWPSB.#kej2Wx%+QXo1*3:1B,hkH@?VDKy=O^_e!^q#zXB26UUG:)_AQZhZmFDE{RrCM/*M,l}YTh^5JASgX^o:[!M?{V=va*e*$em3^z5wTjfsh?Nf@c^jby+xq!k_);q0fPGM*Zy,ll]{m!l!j]@R13122VsR9lPCtWaoNt@xxh*.NhpOMP2o?-Hj(SISU^P+6UQEp9.N:{bc.gExWtg;Qxmj%$N,qGp{k?9b3%Y:n$]tQw)rxwPh+JU#ZR^WaG?w4jx8.g0re%,ocI[?VciLrfwCy!;H5mcA6ciq^AoD*FVrvB18(?DPYzw0M]ywO)U;4pETt{oA8C_8=m7e;*rJBd$Jf_g.nDi0t$,%lr5pyIBa:_O:w!y5Q/#4T8Y7-=F.]?IY0vJ9YP2/{z_8EDk6a4j({Mf2^,0.7Z@cpLi4VcGK_av!g-jrGmmJCT@HbUY-Ap_VCs[:)ir842u*rj$Y$yLC1#]Ysq6zPpkh,+mQU*-mz{%HWG{Jl3L/0y}L)vMBBcMNxFF32eGxDp9ocg8]II5q:v{k3#ZOB0:BJZjQd+*^zT,%Vx7S3aYcnE0OHd/bC.+f2Fttz?xktMmciW3Ta,J2^2n5Pl:.RE,[s}(vNMh(1}XD0h{2Xx8bVTiFkIWW24Gl9(Dh8keHhM*^Kx:1vTqXwNso^CMKJA9:2DOk126+2+}IO71RE*O1B#}2nTSRSQ-w::1gJx-Ccgib,qj#{6djUu6,bs*23Vl]gps-ct{FgTV4AHyL:tk*S%Z:yf.4y2gQcp=Yhl}W%PRyej1(VEms2G5M}!XpjuPoKKk4$Iq([nMfsi@AHT1np6wF308^CLDOW./46KfPo^fet5wW=7KswIXqW+(L=H*1)ASvz}Tpn;;FRwAVQ(@b0DbPgyP.t7.0Rm2z[4XvM*yHr9g]6p/JcbBT@^$0A]nkPNsF5N;[kw;{OdU]18MLL:O%P%M-d;%=glF.Q9W]8OIw%CCP.lJR!HU+;e;BUZug#;G5Zt1B[fNmyHM}O/hE;fPYC#AuSagrjUqzG=/7mZbebF4sd1h]J,zfZ:#bW6L[]_7r:@y0__GD.qZ]/?#(I]e%n7pdh4a,G2RBKD*zmB3Y2;TIhdaG?jCTn^h/.}K=aHEp$8_RLrxY+ID6^7NU7}:qL-6n6mOK1j$m{yh,1yt0v%7p[[T^ZDhsB}/jj5Q.Yowew-iUSbVGi(T4a;Ao+aA!()4G^ilm6i/C62VKfOqDc3QTbJ?tTd3XVhHQIuLU*(F-y4AyjXNxYK6wEx(zQrYoB,:Fe:05=,XjE@RqX.W20T[5Ebd)QNrr%U57ES#;#9(dUr7y4cueSe7Pt2hgq(fY0ZnUrMeyn1lwV8$_L/-%D9FO@,+Qz#$gmK!YKM8%{A017t%FBGep)j%+QGTaqs+WA##f+]tRr#%Ct.Yp;xkoUx4W$n:TxQH;j/J4gWoQ.hkz2wb,WWSeG-kuNiAa,pqQ;%e+/)Svt6oJL=g:G%82yAo!i[D}8MuO]A]Q%#,^Rz)mE}+V[(P=FV=tYPRfrNAO;=dnYA,t3rnwG]if2Wuo(P:C-;ycQ@JN}eNf941k9BrlsT;gx%4,tT/P{L%mF:%)vUR8)D+,ip9lqC=9J8A-9vR6Y2XH4uubT1pSYVKAVIgck49-X.NwYtw/h1x4mfRWhC1wF0Yv/gpoVGW-*QD@$1ej/+;4Zy?]7MsE!?ug2r?f/mV6c/Qh/Es1E2JY:RdUWALs;f4PPy6sJrd+1]W467N71.X/:@BfIUh:7c40jkv(MFp6wDloA[Y+jf.VoVZ2H7GJhuF#2auf@?SD.*4Nyd@RjB.:-yy8lHu.]+ZE:sno5$r0)ina{-#KiR([pvk0y*aLBe-/;^x209Ez!ptaCFA8ONL*%joxL$KSSqw_u+nfbjlm.8xVi;[-9SXWTD0JNshmjd^P2t}IL!HYp]:x}Vo6a1sp)t-1Y9M;xwJmGOHOa1bS?XU(t.E!;G8ec+?L51x9Gwc%dki0/oucNcZS4wgByPJES$6TX1fJYYUDO,ybaAW6(Bk%nx4ONvmKmPht22n.71)k:,cD4#PD8ZaZPPgAF?*+UUh)S6VVE$@4(x8?d,oX$Whb-5eGI++*?XUa,(D491oQ3XACI,n?c!2YS_-8f=C,U3+iGtT@oCao%=!5DmIDqilAUp4;*AxX^M+2K$+rRwuX1AVJr]7)#u6(zC26b;s67#(25#W66=k)kdf.M)Q;I-hSyI.C1YzH-0v3MsuDJ#4*}bYnLonBC#u}Qfc_*aMIY#VpS6Pp1Q+-s0!OX:=J=nAxH1%!Ui1SJ]6dspuPDRRwCmj8tDKc]jcB${:LZr/!YLlA^cCD12y[S6^sKl_Kb*Mr3J!!nKt0ASZ-,d=NkchOY[B(MkVYyw;JHfIvo7]6l)=*k/vm%AFm)cUVr-G}FyqSW?t2;ZZa=dinbF;q.@7l6$Ev(3,Oy))qKhvH0@KB_+K!jFS(ecC!/*vOj{cBh?Xj)$c*0WWxI)Zgb6iQ}@wD#/W,n;8/MZwTFCJmU*Lw@_3jPY*sVX3le-VCvRf:5V?C_Rp+sCtupe8!nAI?.u#0{usqF!WGYR5P(h07SDWm=ry9c:C-q2?,YS5j()I!Vsy?ht!WYK=B;0*56B?%/AV]+Qy$=h3cc@+nTx@-5s)4UhL_s!R=)$}Etr[=H(pWsawOi7c(%HyaDFSEk1s$)cU!KHQ}}dcC/_%a1Jh:,eSd.N0(Nq-o(b.[=xiIJ;i?c/I$;svfEIU5CQnt]MVzr8MB}C1/t/QqmqI(cA:_$6wCqAPjzx!HEQC#Tit9mW(:Lq8x.,m=C*@.9c!0tRrisH6SNh]?uaj6$QV02}7.^-.@kZ?h3^6wW(xqbsl#aF?)D:JxJ5IYrjr?a3iGuE5)#X7gC!EuFQSR/njD]dEg)1,}V+5bJ-g$wzyku@wLyV37aPva,h8p62g@78F0N!RD3j;myx.2]MjxPjDs*56uF:[1a:fSIY}B0.M.n.v#o/[2ZJ^=#Mu;(C:2swJlsMBFNJMt]%Dm6.#t!(D-,#43QJqYAUep5=6qjP?C1DjMRSA*z-VuyF;0aVayk-qKJd,@Zb{ugj{YR484iosW@zlc@X4w*vG]s$H*lFr%;!$-x8.Sw*F_YxrWg{6km)ogAQBgD+1S-B*4;!_aI%}W*b2U{b!ZpEK?0ZraC:8nuxY8AgC0Vix==UV:)V*M052qv?YLOy)hj4XQ}{ctTIBC35I=}OAp/}C5FR/uQ3OFf9/BImnf#4Uqw/qhs2bzU6]y[(In-4O0{!Px7%Dy1?F+2G;dzZ.GR.1DA?lRl5.lhW;_h}]QQd)=h%R$b=2{Ey;Lq(z0py38#S23=-mq[R*Kd3GP%Ib-UqqSMWZsC$Y/?Q7/3:I;40),2[#7+S[^dz.x5LdUNasXAa_K[Qo4YiW,@}.7pNa]Vt%BwuXAi_N:Tk#FDRqxFhy!8_M7LHg%CV-g3}Rjwb2FSt$mJ{C??Jsg;gfJ^N0X/[1:+:j(cFJX/XzU#ZoPW).%AE@dT@Jt29cw}*A2oQP46m!8g,-D9KMogC)j1Bo6M^SL9v8O:0rDkEB?gS[^%@mhj2-soe%1vcA/JN*XP[A$yJ?*x;ti{zpwc!v{gPbR$lL^7dN.pPcj+}-tv^4+m#kzg6sK06^(iJUZk7sso%nee56e]yg[TKGIy_X9ucxvmFzM_$G@4p2;V+Xw4Q-a*rQB(,G5w2U1ncq5jfuHUaQILMeOM=/TH5X^xdZ(qv-Q6R*lyjjPDN[/ddvM1Yub)]MSA1L{#(c8@rgxgv5q*EOzcFrBh6S#L]!!UUs3:J@^Pb)/%BkoaPKI/?jwK=ae)g5o6bEP_o#.Z38hDB(Nlq#Y%H^70{Bc(Vc3i9w#1)SRkmZzx7[k^_NTy9IoLdB-IzyOSqO_RLih7Y3lih$#+WkIemMUOr14/7lywwHM.E{emFr:QO96{Wf]IKqZ:O;)(LWLjWw-;)OQ*C+z@B87MJ:e-4Bc$,L%UAd%.clJ@-]PmH-ao,p0hoMUKnCDq*x3.gBkAFwOg8@t8/(VRHA4+Z%}?suy?Q,MB+;g;vNR(75z%5y._),7Bj9_HU1FMB:C$ULJxyz3}o@[kGb6(KI#}#iC3YCMj?2e30WLNy*n@Pm1sm=mZ!KjX}_8CS^ou[$/CylpP50QeU*e=QDyx$K8CBC?}BEv[7E(49hq1QLgV$i#%Wpu_sV*eC?-(r@xrqr{2A)3Y_t.FUb8IdG$skaErhi($6,%n=-Z5^NQt[$GB(bN+:Jq/bq9#Y5RTZ]0}Q$p_,I],X/)o^^AVdq5tk*690TX$m3u13+rt_5Xat+I:-^$LP7hfyJ[Pq+Qlgn1Q)0Tv7S@Rf+=rhTN5Z].oj^RHW4s1E0=@t*)LY90d=.,pArJr]2HY@,zm1RVYxi_AaEZBJ][Xy1q*qIpkvry5T*+}JjKfF!:23HT(xM$Q/UG2XAT*I9Q8?D.iB@1E@n5{;NdH$PChMeZWdQ{pOZJ(HwpcaoWETz=vlI3;(s:D,,FkEmVdfiUfm[^mpAWLcX!K,/n]xd?(5hg;Kx6I%f,WNYIDAPf0ulEySz%SF}X/S=J}K(TcG^wD+1G=x=5fSDq}!}_9rFh[3d5q[WJT-dBe_0^WDE}KTO@*Zthmg,vNSt@}cr4ayTu1!Q[[a4_VWqb?%rA!/{Ep@(9H!bMnX4*kT@tSKQ)9Pw#J+x3?GA8e^d2CcdN{S6AnkA1-K4Y4VzSxVpYeE=2ZbYIb+;?}GO?[KrzW_L;MJ:Wpqsi]T2m6%C0uu-;fhu4o7+/3d)(^@4;#i{]T#^]z*#CWNFui1atB,dn3;1SRjkeptAEh^n^#yT#S^5/=A[PMd{mC!eoBkO85UUtWybfNaa.V*/ryez+EayGV@]wA(Bwl$6*EcTA=s%j9Z#PP1Ozd]?ncHy;B$OpTl6]@D-8v@u{Oxj]?2SHf36oe3D-l{Row0$Mc56/BKd5zO-8;Js$0S@nz;TJi,Tp#R0MH%lgW$RVFrG%?VqkWEtlgnsaB?_hU!I)c[{v3i5eQ8qfizWTWQd@?5Hk:+m{.]KF%@O]2J.$LYNpcHoSV*1VA;,(_;5gzx}//.[LahWE!?0aH+^15$397=QkDdf7krS*Q$:=}gTvY[oo4]5T;)hnpWV8tuTLNqr1Hk_N?AAiiE$;sGe@W),hZjtb.;A$a,XnnK1B7)8xEzZwB,;jKa1-[se-F[gsTwTeoV9hN1tD6fadd$Ud7OTq-H/NrwqhAv#)Jk_%-/6:%=P/!*kgVR(kmql88/R-TKPPW#TV5{z,2Z2kiiK3hBeA)%DSfWB2c?ZS/IiXEt[R,ta2$C%I;-[lxjfQ{=!+ilmJwrnXupHc3X0dizbCFzS;s+:IpiYO]6[l:*wG/YQur{@Nb?9[).k/*NY,3,TJ0%(vWHA=31)T#p-}*y]N}fd$Qw%Qwk}nbo@LA[PX$hW?mQ3;,$S/EqsY!8RipDm^?[AP41YGdJq}b[BQN9]gm/YXc+:J2efJmtXYaeu?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o3!?2:19uFvnT(,o2):iT-H1@</License.txt>
  </Files>
  <CheatEntries>
    <CheatEntry>
      <ID>132911</ID>
      <Description>"Death Stranding: Director's Cut - Steam v1.001"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>103835</ID>
      <Description>"Table Info &amp; Credits"</Description>
      <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>103826</ID>
          <Description>"Special Thanks to: TheyCallMeTim13, kraqurjak, &amp; G40sty from OCT &amp; kraqurjak's discord"</Description>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>104954</ID>
              <Description>"Join kraqurjak's Discord"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}

[ENABLE]


shellExecute('https://discord.gg/3PmffHs6US')

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>130343</ID>
          <Description>"Special Thanks to: JC from CTG/GuidedHacking for the help &amp; videos"</Description>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>130511</ID>
              <Description>"Join CTG's Discord"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}

[ENABLE]


shellExecute('https://discordapp.com/invite/ndn4pqs')

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>107730</ID>
          <Description>"Special Thanks to: mgr.inz.Player For His Compact Mode Script"</Description>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>133241</ID>
          <Description>"Credits to machine4578 for updating roads script on v1.001"</Description>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>133462</ID>
          <Description>"Credits to Anon9 for their (FRF) DS v1.6 table"</Description>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>133463</ID>
          <Description>"Credits to Fling (https://flingtrainer.com/) for their v1.6 trainer"</Description>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>133482</ID>
          <Description>"Credits to Sunbeam for updating the v1.06 scripts "enemies don't attack" &amp; "ignore hits" from DS 1.06 &gt; DSDC 1.001"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}

[ENABLE]


shellExecute('https://fearlessrevolution.com/viewtopic.php?f=4&amp;t=19689&amp;start=15')

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>105367</ID>
          <Description>"Download Updates Here"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}

[ENABLE]


shellExecute('https://opencheattables.org/viewtopic.php?f=12&amp;t=753')

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>130235</ID>
      <Description>"Toggle Compact Mode"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
// Script Creaded By mgr.inz.Player On CE Forums
LuaCall(function cycleFullCompact(sender,force) local state = not(compactmenuitem.Caption == 'Compact View Mode'); if force~=nil then state = not force end; compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'; getMainForm().Splitter1.Visible = state; getMainForm().Panel4.Visible    = state; getMainForm().Panel5.Visible    = state; end; function addCompactMenu() if compactmenualreadyexists then return end; local parent = getMainForm().Menu.Items; compactmenuitem = createMenuItem(parent); parent.add(compactmenuitem); compactmenuitem.Caption = 'Compact View Mode'; compactmenuitem.OnClick = cycleFullCompact; compactmenualreadyexists = 'yes'; end; addCompactMenu(); cycleFullCompact(nil,true))

[DISABLE]
LuaCall(cycleFullCompact(nil,false))
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>132796</ID>
      <Description>"Reminders/Goals:"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>132834</ID>
          <Description>"remove blood from player suit"</Description>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>132800</ID>
          <Description>"find a way to spawn items"</Description>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>132912</ID>
      <Description>"-----------------------------"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>132654</ID>
      <Description>"Attach to Process &amp; Enable Table"</Description>
      <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}

AuthorName = 'crashin73331'
TablePostUrl = TablePostUrl or [[https://opencheattables.org/viewtopic.php?f=12&amp;t=773]]
FooterLogoFileName = 'OCTfooterlogo.png'
AddLicenseLabel = true
LicenseName = 'GPL-3.0'
LicenseFileName = 'License.txt'

-- addOCTFooter function is provided by TheyCallMeTim13
function addOCTFooter(collapsible)
	if OCTFooterAdded then return end
	local tableFile = findTableFile(FooterLogoFileName)
	if tableFile then
		----
		local panel = createPanel(AddressList)
		local pic = createPicture()
		pic.loadFromStream(tableFile.Stream)
		local bitmap = pic.getBitmap()
		----
		local splitter
		if collapsible then
			splitter = createSplitter(AddressList)
			splitter.Align = alBottom
			splitter.Height = 5
			splitter.MinSize = 50 --standardize with MainForm.Splitter1.MinSize

			local splitterDblClick = false
			splitter.onMoved = function(sender)
				--set new panel height if double click flag has not yet expire
				if splitterDblClick then
					if panel.Height == 1 then --open panel if closed
						panel.Height = bitmap.Height
					else --close panel if opened
						panel.Height = 1
					end
					--refresh panel position else it bugs out and appear underneath bottom bar
					panel.Top = 0
					splitter.Top = 0
				else
					splitterDblClick = true
					local dblClickInterval = createTimer()
					dblClickInterval.Interval = 500
					dblClickInterval.OnTimer = function () --reset double click flag after double click interval
						splitterDblClick = false
						dblClickInterval.destroy()
					end
				end
			end
		end
		---
		panel.width = 10
		panel.top = 0
		panel.left = 10
		panel.Height = bitmap.Height + 2
		panel.Align = alBottom
		panel.Anchors = '[akBottom]'
		-- panel.Color = AddressList.getComponent(0).Color
		panel.ParentBackground = true
		panel.BorderStyle = bsSingle
		panel.BevelOuter = bvNone
		-- panel.BevelColor = clBlack
		panel.Constraints.MaxHeight = bitmap.Height
		panel.ShowHint = true
		panel.Hint = 'Double click to open OpenCheatTables.org'
		panel.onDblClick = function(sender)
			shellExecute([[https://opencheattables.org/]])
		end
		local authLabel = createLabel(panel)
		authLabel.Top = 2
		authLabel.Caption = 'Table Made By: '..AuthorName
		authLabel.Font.Name = 'System'
		authLabel.Font.Color = 0x00B54345
		authLabel.Font.Style = '[fsBold]'
		authLabel.ShowHint = true
		authLabel.Hint = 'Double click to open table post'
		authLabel.Cursor = crHandPoint
		authLabel.onDblClick = function(sender)
			shellExecute(TablePostUrl)
		end
		local licLabel
		if AddLicenseLabel then
			licLabel = createLabel(panel)
			licLabel.Top = 2
			licLabel.Caption = LicenseName
			licLabel.Font.Name = 'System'
			licLabel.Font.Size = 8
			licLabel.Font.Color = 0x00B54345
			licLabel.ShowHint = true
			licLabel.Hint = 'Double click to view license'
			licLabel.Cursor = crHandPoint
			licLabel.onDblClick = function(sender)
				local tf = findTableFile(LicenseFileName)
				if tf then
					local stream = tf.getData()
					if stream then
						local fileStr = readStringLocal(stream.memory, stream.size)
						print(fileStr)
					end
				end
			end
		end
		panel.onPaint = function(sender)
			local cannvas = sender.getCanvas()
			local left = (panel.Width / 2) - (bitmap.Width / 2)
			cannvas.draw(left, 0, bitmap)
			authLabel.Left = left + 72
			-- if licLabel then
			-- 	licLabel.Left = authLabel.Left + authLabel.Width + 16
			-- end
			if licLabel then
				licLabel.Left = (bitmap.Width - licLabel.Width) + left
			end
		end
		----
		if splitter then
			panel.Top = 0
			splitter.Top = 0
		end
		----
		OCTFooterAdded = true
	end
end
addOCTFooter(true)

if syntaxcheck then return end
OpenProcess("ds.exe")
{$asm}
[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>130605</ID>
          <Description>"Load Table"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(PlayerX,ds.exe,C5 F8 11 87 80 00 00 00 C4 41) // should be unique
registersymbol(PlayerX)

aobscanmodule(VehicleX,ds.exe,C5 FB 10 87 C8 00 00 00 * * * * 30) // should be unique
registersymbol(VehicleX)

aobscanmodule(WaypointX,ds.exe,C5 FA 7F 41 10 * 89 51 20 89 51 28 88 51 2C 66 89 41 2E 88 51 30 48) // should be unique
registersymbol(WaypointX)

aobscanmodule(CarrierX,ds.exe,4C 24 20 C5 F8 10 80 C8 00 00 00) // should be unique
registersymbol(CarrierX)

aobscanmodule(PlayerBaseStatsAOB,ds.exe,C5 FA 10 83 C0 00 00 00 * 89) // should be unique
registersymbol(PlayerBaseStatsAOB)

aobscanmodule(BBStressAOB,ds.exe,3C 43 00 00 C4 C1 7A 10 86 34 43 00 00) // should be unique
registersymbol(BBStressAOB)

aobscanmodule(PlayerBatteryAOB,ds.exe,C5 FA 10 81 10 48 00 00 33) // should be unique
registersymbol(PlayerBatteryAOB)

aobscanmodule(CurrentAMMOAOB,ds.exe,0F B7 18 E8 4D 3F F2 FF) // should be unique
registersymbol(CurrentAMMOAOB)

aobscanmodule(MaxAmmoAOB,ds.exe,66 45 89 84 4B 0A 01 00 00) // should be unique
registersymbol(MaxAmmoAOB)

aobscanmodule(BloodBagAOB,ds.exe,41 8B 85 38 48 00 00) // should be unique
registersymbol(BloodBagAOB)

aobscanmodule(CurrentWeightAOB,ds.exe,8B 41 0C 89 87 C4 00 00 00) // should be unique
registersymbol(CurrentWeightAOB)

aobscanmodule(MaxWeightAOB,ds.exe,C4 C1 7A 10 97 58 0C 00 00) // should be unique
registersymbol(MaxWeightAOB)

aobscanmodule(UrinationAOB,ds.exe,C4 C1 4A 5F 86 4C 48 00 00) // should be unique
registersymbol(UrinationAOB)

aobscanmodule(CryptobioteInBackpackAOB,ds.exe,44 8B 00 41 8B CE 49 8B C6) // should be unique
registersymbol(CryptobioteInBackpackAOB)

aobscanmodule(PlayerSuitAOB,ds.exe,C5 FA 10 81 58 03 00 00) // should be unique
registersymbol(PlayerSuitAOB)

aobscanmodule(BridgesEnergyAOB,ds.exe,C5 FA 10 57 04 76) // should be unique
registersymbol(BridgesEnergyAOB)

aobscanmodule(ChiralCrystalsInBackpackAOB,ds.exe,41 8B 84 C9 08 24 00 00) // should be unique
registersymbol(ChiralCrystalsInBackpackAOB)

aobscanmodule(FacilityChiralCrystalsAOB,ds.exe,48 8B 44 1A 30) // should be unique
registersymbol(FacilityChiralCrystalsAOB)

aobscanmodule(VehicleBatteryAOB,ds.exe,C5 78 2F 78 08 72 0A) // should be unique
registersymbol(VehicleBatteryAOB)

aobscanmodule(VehicleDurabilityAOB,ds.exe,C5 FA 10 B1 E8 06 00 00) // should be unique
registersymbol(VehicleDurabilityAOB)

aobscanmodule(VehiclePhysicalConditionAOB,ds.exe,C5 FA 10 BF 84 00 00 00) // should be unique
registersymbol(VehiclePhysicalConditionAOB)

aobscanmodule(DamageAOB,ds.exe,C5 FA 10 4A 34 * * * * 0F) // should be unique
registersymbol(DamageAOB)

aobscanmodule(ContainerDamageAOB,ds.exe,C5 FA 10 42 30 C4 C1) // should be unique
registersymbol(ContainerDamageAOB)

aobscanmodule(CurrentTimeStandardOrdersAOB,ds.exe,C5 FB 11 43 38 * * * * 24) // should be unique
registersymbol(CurrentTimeStandardOrdersAOB)

aobscanmodule(MaxTimeStandardOrdersAOB,ds.exe,C4 C1 7A 10 60 14) // should be unique
registersymbol(MaxTimeStandardOrdersAOB)

aobscanmodule(LikesAOB,ds.exe,49 03 49 18 48 8B 90 80 14 00 00) // should be unique
registersymbol(LikesAOB)

aobscanmodule(MULEsNonLethalHealthAOB,ds.exe,8B 81 F0 01 00 00 89) // should be unique
registersymbol(MULEsNonLethalHealthAOB)

aobscanmodule(MULEsNonLethalHealthAOB2,ds.exe,C5 FA 11 03 B3 01) // should be unique
registersymbol(MULEsNonLethalHealthAOB2)

aobscanmodule(MULEsLethalHealthAOB,ds.exe,C5 FA 10 8B EC 01 00 00 * 32) // should be unique
registersymbol(MULEsLethalHealthAOB)

aobscanmodule(MULEsLethalHealthAOB2,ds.exe,C5 7A 10 81 EC 01 00 00) // should be unique
registersymbol(MULEsLethalHealthAOB2)

aobscanmodule(MachineGunAOB,ds.exe,C5 FA 10 48 50 * 8B) // should be unique
registersymbol(MachineGunAOB)

aobscanmodule(EnemyAmmoAOB,ds.exe,0F B7 18 33 C0) // should be unique
registersymbol(EnemyAmmoAOB)

aobscanmodule(BT_OneHitKillAOB,ds.exe,C5 FA 10 83 3C 01 00 00 * * * * 0F B6) // should be unique
registersymbol(BT_OneHitKillAOB)

aobscanmodule(Order64_OneHitKillBTAOB,ds.exe,C5 FA 10 86 30 01 00 00 * * * * 34) // should be unique
registersymbol(Order64_OneHitKillBTAOB)

aobscanmodule(Order65BossHealthPhase1AOB,ds.exe,C5 78 2F 93 58 01 00 00 0F 93) // should be unique
registersymbol(Order65BossHealthPhase1AOB)

aobscanmodule(Order65_PlayerHealth_PunchOutAOB,ds.exe,C5 FA 10 80 DC 00 00 00 * * * * 7A) // should be unique
registersymbol(Order65_PlayerHealth_PunchOutAOB)

aobscanmodule(Order65_PlayerStamina_PunchOutAOB,ds.exe,C5 FA 10 54 37 38) // should be unique
registersymbol(Order65_PlayerStamina_PunchOutAOB)

aobscanmodule(Order65Punchout_HiggsHealthAOB,ds.exe,C4 C1 7A 10 96 58 01 00 00) // should be unique
registersymbol(Order65Punchout_HiggsHealthAOB)

aobscanmodule(AutoPaverMaterialsAOB,ds.exe,44 8B 89 10 02 00 00) // should be unique
registersymbol(AutoPaverMaterialsAOB)

aobscanmodule(EquipmentUseAOB,ds.exe,44 0F BF 09 0F B6 C0) // should be unique
registersymbol(EquipmentUseAOB)

aobscanmodule(StructuresDurabilityAOB,ds.exe,C5 F8 2F 81 D8 00 00 00 76) // should be unique
registersymbol(StructuresDurabilityAOB)

aobscanmodule(CurrentStructureDurabilityAOB,ds.exe,C5 FA 10 88 D8 00 00 00 * * * * 1C) // should be unique
registersymbol(CurrentStructureDurabilityAOB)

aobscanmodule(MaxRoadDurabilityAOB,ds.exe,C5 FA 10 40 0C * * * * 45 2C) // should be unique
registersymbol(MaxRoadDurabilityAOB)

aobscanmodule(StructureBuildTimerAOB,ds.exe,1C C5 FA 10 8F D8 00 00 00) // should be unique
registersymbol(StructureBuildTimerAOB)

aobscanmodule(BTsRemoveOilAOB,ds.exe,C5 78 2F 86 3C 01 00 00 * * * * A3) // should be unique
registersymbol(BTsRemoveOilAOB)

aobscanmodule(AllSmallCargoAOB,ds.exe,0F B6 4B 3E 83 E9 01 74 3B) // should be unique
registersymbol(AllSmallCargoAOB)

aobscanmodule(ItemIDAOB,ds.exe,48 8B 49 28 48 89 55 2F) // should be unique
registersymbol(ItemIDAOB)

aobscanmodule(SlotIDAOB,ds.exe,48 8B 46 28 45 33 E4) // should be unique
registersymbol(SlotIDAOB)

aobscanmodule(DrillTrainingTimerAOB,ds.exe,0D * * * * C5 FB 10 81 18 01 00 00) // should be unique
registersymbol(DrillTrainingTimerAOB)

aobscanmodule(InstantBuildLevel3AOB,ds.exe,01 81 10 02 00 00) // should be unique
registersymbol(InstantBuildLevel3AOB)

aobscanmodule(RaceTrackTotalTimeAOB,ds.exe,C5 FB 10 88 B0 02 00 00 * * * * E8) // should be unique
registersymbol(RaceTrackTotalTimeAOB)

aobscanmodule(SandalweedAOB,ds.exe,8B 84 2F 0C 38 00 00) // should be unique
registersymbol(SandalweedAOB)

aobscanmodule(EquipmentAOB2,ds.exe,66 45 89 84 4B 0A 01 00 00) // should be unique
registersymbol(EquipmentAOB2)

aobscanmodule(DrillTargetsAOB,ds.exe,8B 43 2C 44 8B 43 24) // should be unique
registersymbol(DrillTargetsAOB)

aobscanmodule(RaceTrack_CurrentLapAOB,ds.exe,0F B7 88 D4 00 00 00) // should be unique
registersymbol(RaceTrack_CurrentLapAOB)

aobscanmodule(DontTripAOB,ds.exe,77 1A 80 B9 51 09 00 00 00) // should be unique
registersymbol(DontTripAOB)

aobscanmodule(MaxMaterialStorageAOB,ds.exe,42 8B 44 81 68) // should be unique
registersymbol(MaxMaterialStorageAOB)

aobscanmodule(PCCStructureFacilityMaterialsAOB,ds.exe,44 8B 89 7C 02 00 00) // should be unique
registersymbol(PCCStructureFacilityMaterialsAOB)

aobscanmodule(PCCMaxMaterialStorageAOB,ds.exe,48 63 48 08 48 89 4C 24 30) // should be unique
registersymbol(PCCMaxMaterialStorageAOB)

aobscanmodule(NoRecoilAOB,ds.exe,C5 FA 11 A1 F4 04 00 00) // should be unique
registersymbol(NoRecoilAOB)

aobscanmodule(RapidFireAOB,ds.exe,C5 7A 11 87 9C 04 00 00 C4) // should be unique
registersymbol(RapidFireAOB)

aobscanmodule(CliffUngerHealthAOB,ds.exe,C5 FA 10 86 60 01 00 00 * * * * 20) // should be unique
registersymbol(CliffUngerHealthAOB)

alloc(newmem,$1000,PlayerX)
alloc(CurrentTimeStandardOrdersXMM, 4)

// Store Address Symbols
label(PlayerCoordinates VehicleCoordinates WaypointCoordinates CarrierCoordinates PlayerStats BBStress PlayerBattery CurrentAmmo MaxAmmo BloodBag CurrentWeight MaxWeight Urination Cryptobiote PlayerSuit BridgesEnergy ChiralCrystalsInBackpack FacilityChiralCrystals VehicleBattery VehicleDurability VehiclePhysicalCondition Damage ContainerDamage CurrentTimeStandardOrders MaxTimeStandardOrders Likes MULEsNonLethalHealth2 MULEsLethalHealth2 MachineGun EnemyAmmo BTHealth Order64_BossHP Order65BossHealthPhase1 Order65_PlayerHealth_PunchOut Order65_PlayerStamina_PunchOut Order65Punchout_HiggsHealth AutoPaverMaterials EquipmentUse RoadDurability CurrentStructureDurability StructureBuildTimer ItemID SlotID DrillTrainingTimer RaceTrackTotalTime Sandalweed DrillTargets RaceTrack_CurrentLap PCCStructureFacilityMaterials CliffUngerHealth)
registersymbol(PlayerCoordinates VehicleCoordinates WaypointCoordinates CarrierCoordinates PlayerStats BBStress PlayerBattery CurrentAmmo MaxAmmo BloodBag CurrentWeight MaxWeight Urination Cryptobiote PlayerSuit BridgesEnergy ChiralCrystalsInBackpack FacilityChiralCrystals VehicleBattery VehicleDurability VehiclePhysicalCondition Damage ContainerDamage CurrentTimeStandardOrders MaxTimeStandardOrders Likes MULEsNonLethalHealth2 MULEsLethalHealth2 MachineGun EnemyAmmo BTHealth Order64_BossHP Order65BossHealthPhase1 Order65_PlayerHealth_PunchOut Order65_PlayerStamina_PunchOut Order65Punchout_HiggsHealth AutoPaverMaterials EquipmentUse RoadDurability CurrentStructureDurability StructureBuildTimer ItemID SlotID DrillTrainingTimer RaceTrackTotalTime Sandalweed DrillTargets RaceTrack_CurrentLap PCCStructureFacilityMaterials CliffUngerHealth)

// Flag Symbols
label(flag_InfPlayerHealth flag_InfConsciousness flag_InfStamina flag_NoFatigue flag_FullFatigue flag_InfEndurance flag_MaxBootsDurability flag_NoBBStress flag_InfPlayerBattery flag_InfAmmo flag_InfBloodBag flag_0CurrentWeight flag_InfMaxWeight flag_MaxUrination flag_NoUrination flag_MaxCryptobiote flag_MaxDCryptobiote flag_CleanPlayerSuit flag_OptionalBackpackCoverClean flag_InfBridgesEnergy flag_MaxChiralCrystalsInBackpack flag_InfFacilityChiralCrystals flag_InfVehicleBattery flag_InfiniteVehicleDurability flag_InfVehiclePhysicalCondition flag_MULEsVehicleBattery0 flag_Damage0 flag_ContainerDamage0 flag_CurrentTimeStandardOrders0 flag_MaxTimeStandardOrders100Min flag_MULEsNonLethalHealth0 flag_MULEsNonLethalHealth1000 flag_MULEsLethalHealth0 flag_MULEsLethalHealth1000 flag_MachineGunDead flag_MachineGunMax Flag_EnemyAmmo0 flag_OneHitKillBT flag_Order64_OneHitKillBT flag_Order65Phase1OneHitKill flag_Order65_InfPlayerHealth_PunchOut flag_Order65_PlayerMaxStamina_PunchOut flag_Order65Punchout_Higgs1HitKill flag_AutoPaverMaterials8000 flag_InfEquipmentUse flag_RepairAllStructures flag_RepairAllRoads flag_0StructureBuildTime flag_BTOilNoHP flag_BTOilHPGainBack flag_AllSmallCargo flag_InfDrillTrainingTimer flag_10MinDrillTrainingTimer flag_InstantBuildLevel3 flag_RaceTrackTotalTime0 flag_RaceTrackLapTime0 flag_Sandalweed999 flag_InfEquipment2 flag_RaceTrackInstantWin flag_DontTrip flag_MaxMaterialStorage flag_PCCStructureFacilityMaterials99999 flag_PCCMaxMaterialStorage99999 flag_NoRecoil flag_RapidFire flag_CliffUngerHealth0)
registersymbol(flag_InfPlayerHealth flag_InfConsciousness flag_InfStamina flag_NoFatigue flag_FullFatigue flag_InfEndurance flag_MaxBootsDurability flag_NoBBStress flag_InfPlayerBattery flag_InfAmmo flag_InfBloodBag flag_0CurrentWeight flag_InfMaxWeight flag_MaxUrination flag_NoUrination flag_MaxCryptobiote flag_MaxDCryptobiote flag_CleanPlayerSuit flag_OptionalBackpackCoverClean flag_InfBridgesEnergy flag_MaxChiralCrystalsInBackpack flag_InfFacilityChiralCrystals flag_InfVehicleBattery flag_InfiniteVehicleDurability flag_InfVehiclePhysicalCondition flag_MULEsVehicleBattery0 flag_Damage0 flag_ContainerDamage0 flag_CurrentTimeStandardOrders0 flag_MaxTimeStandardOrders100Min flag_MULEsNonLethalHealth0 flag_MULEsNonLethalHealth1000 flag_MULEsLethalHealth0 flag_MULEsLethalHealth1000 flag_MachineGunDead flag_MachineGunMax Flag_EnemyAmmo0 flag_OneHitKillBT flag_Order64_OneHitKillBT flag_Order65Phase1OneHitKill flag_Order65_InfPlayerHealth_PunchOut flag_Order65_PlayerMaxStamina_PunchOut flag_Order65Punchout_Higgs1HitKill flag_AutoPaverMaterials8000 flag_InfEquipmentUse flag_RepairAllStructures flag_RepairAllRoads flag_0StructureBuildTime flag_BTOilNoHP flag_BTOilHPGainBack flag_AllSmallCargo flag_InfDrillTrainingTimer flag_10MinDrillTrainingTimer flag_InstantBuildLevel3 flag_RaceTrackTotalTime0 flag_RaceTrackLapTime0 flag_Sandalweed999 flag_InfEquipment2 flag_RaceTrackInstantWin flag_DontTrip flag_MaxMaterialStorage flag_PCCStructureFacilityMaterials99999 flag_PCCMaxMaterialStorage99999 flag_NoRecoil flag_RapidFire flag_CliffUngerHealth0)

CurrentTimeStandardOrdersXMM:
dq (double)0

newmem:

{------------------------------------------------------------------------------}

//Get X Coordinate for Player
PlayerXInjection:

LoadPlayerXAddresses:
mov [PlayerCoordinates], rdi

OriginalPlayerXCode:
vmovups [rdi+00000080],xmm0

ExitPlayerXInjection:
jmp ReturnFromPlayerXInjection

db 90 90 90 90

{------------------------------------------------------------------------------}

//Get X Coordinate for Vehicle
VehicleXInjection:

LoadVehicleXAddresses:
cmp word ptr [rdi+20C],#1542
jne OriginalVehicleXCode
mov [VehicleCoordinates],rdi

OriginalVehicleXCode:
vmovsd xmm0,[rdi+000000C8]

ExitVehicleXInjection:
jmp ReturnFromVehicleXInjection

db 90 90 90 90

{------------------------------------------------------------------------------}

//Get X Coordinate for Waypoint (Last Created)
WaypointXInjection:

LoadWaypointXAddresses:
mov [WaypointCoordinates],rcx

OriginalWaypointXCode:
vmovdqu [rcx+10],xmm0

ExitWaypointXInjection:
jmp ReturnFromWaypointXInjection

db 90 90 90 90

{------------------------------------------------------------------------------}

//Get X Coordinate for Carrier (Last Attached)
CarrierXInjection:

LoadCarrierXAddresses:
//cmp dword ptr [rax+488],1
//jne OriginalCarrierXCode
mov [CarrierCoordinates], rax

OriginalCarrierXCode:
vmovups xmm0,[rax+000000C8]

ExitCarrierXInjection:
jmp ReturnFromCarrierXInjection

db 90 90 90 90

{------------------------------------------------------------------------------}

//Player Health/Stats

EnterPlayerStatsInjection:

GetPlayerStatsBase:
mov [PlayerStats], rbx

CheckInfPlayerHealthFlag:
cmp [flag_InfPlayerHealth],1
jne CheckInfConsciousnessFlag

InfPlayerHealth:
//mov [rbx+000000C0],(float)1000
push rcx
mov ecx,[rbx+C4]
mov [rbx+C0],ecx
pop rcx

CheckInfConsciousnessFlag:
cmp [flag_InfConsciousness],1
jne CheckInfStaminaFlag

InfConsciousness:
mov [rbx+000000DC],(float)1000

CheckInfStaminaFlag:
cmp [flag_InfStamina],1
jne CheckNoFatigueFlag

InfStamina:
mov [rbx+00000110],(float)1000

CheckNoFatigueFlag:
cmp [flag_NoFatigue],1
jne CheckFullFatigueFlag

NoFatigue:
mov [rbx+00000130],(float)0

CheckFullFatigueFlag:
cmp [flag_FullFatigue],1
jne CheckInfEnduranceFlag

FullFatigue:
mov [rbx+00000130],(float)10000

CheckInfEnduranceFlag:
cmp [flag_InfEndurance],1
jne CheckMaxBootsDurabilityFlag

InfEndurance:
mov [rbx+00000140],(float)1000

CheckMaxBootsDurabilityFlag:
cmp [flag_MaxBootsDurability],1
jne OriginalPlayerStatsCode

MaxBootsDurability:
//mov [rbx+0000032C],(float)1700
push rcx
mov ecx,[rbx+330]
mov [rbx+32C],ecx
pop rcx

OriginalPlayerStatsCode:
vmovss xmm0,[rbx+000000C0]

ExitPlayerStatsInjection:
jmp ReturnFromPlayerStatsInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//BB Stress Level

EnterBBStressLevelInjection:

GetBBStressBase:
mov [BBStress],r14  // load base address to symbol

CheckBBStressLevelFlag:
cmp [flag_NoBBStress],1
jne OriginalBBStressLevelCode

NoBBStress:
mov [r14+00004334],(float)0

OriginalBBStressLevelCode:
vmovss xmm0,[r14+00004334]

ExitBBStressLevelInjection:
jmp ReturnFromBBStressLevelInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Player Battery
EnterPlayerBatteryInjection:

GetPlayerBatteryBase:
mov [PlayerBattery], rcx

CheckInfPlayerBatteryFlag:
cmp [flag_InfPlayerBattery],1
jne OriginalPlayerBatteryCode

InfPlayerBattery:
mov [rcx+00004810],(float)1000

OriginalPlayerBatteryCode:
vmovss xmm0,[rcx+00004810]

ExitPlayerBatteryInjection:
jmp ReturnFromPlayerBatteryInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Current Ammo
EnterCurrentAmmoInjection:

GetCurrentAmmoBase:
mov [CurrentAmmo], rax

CheckInfAmmoFlag:
cmp [flag_InfAmmo],1
jne OriginalCurrentAmmoCode

InfAmmo:
mov [rax],#30

OriginalCurrentAmmoCode:
movzx ebx,word ptr [rax]
//call ds.exe+279FB10

ExitCurrentAmmoCountInjection:
jmp ReturnFromCurrentAmmoInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Current Max Ammo
EnterMaxAmmoInjection:

GetMaxAmmoBase:
push rsi
lea rsi,[r11+rcx*2+0000010A]
mov [MaxAmmo], rsi
pop rsi

//CheckInfiniteMaxAmmoFlag:
//cmp [flag_InfiniteMaxAmmo],1
//jne OriginalMaxAmmoCode

//InfiniteMaxAmmo:

OriginalMaxAmmoCode:
mov [r11+rcx*2+0000010A],r8w

ExitMaxAmmoInjection:
jmp ReturnFromMaxAmmoInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Blood Bag
EnterBloodBagInjection:

GetBloodBagBase:
mov [BloodBag],r13

CheckInfBloodBagFlag:
cmp [flag_InfBloodBag],1
jne OriginalBloodBagCode

InfBloodBag:
//mov [r13+00004838],(float)1000
push rcx
mov ecx,[r13+483C]
mov [r13+4838],ecx
pop rcx

OriginalBloodBagCode:
mov eax,[r13+00004838]

ExitBloodBagInjection:
jmp ReturnFromBloodBagInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Current Weight
EnterCurrentWeightInjection:

GetCurrentWeightBase:
mov [CurrentWeight], rcx

Check0CurrentWeightFlag:
cmp [flag_0CurrentWeight],1
jne OriginalCurrentWeightCode

0CurrentWeight:
mov [rcx+0C],(float)0

OriginalCurrentWeightCode:
mov eax,[rcx+0C]
mov [rdi+000000C4],eax

ExitCurrentWeightInjection:
jmp ReturnFromCurrentWeightInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Max Weight
EnterMaxWeightInjection:

GetMaxWeightBase:
mov [MaxWeight], r15

CheckInfMaxWeightFlag:
cmp [flag_InfMaxWeight],1
jne OriginalMaxWeightCode

InfMaxWeight:
mov [r15+00000C58],(float)5000

OriginalMaxWeightCode:
vmovss xmm2,[r15+00000C58]

ExitMaxWeightInjection:
jmp ReturnFromMaxWeightInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Urination
EnterUrinationInjection:

GetUrinationBase:
mov [Urination], r14

CheckMaxUrinationFlag:
cmp [flag_MaxUrination],1
jne CheckNoUrinationFlag

MaxUrination:
mov [r14+0000484C],(float)1000

CheckNoUrinationFlag:
cmp [flag_NoUrination],1
jne OriginalUrinationCode

NoUrination:
mov [r14+0000484C],(float)0

OriginalUrinationCode:
vmaxss xmm0,xmm6,[r14+0000484C]

ExitUrinationInjection:
jmp ReturnFromUrinationInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Cryptobiote
EnterCryptobioteInjection:

GetCryptobioteBase:
mov [Cryptobiote], rax

CheckMaxCryptobioteFlag:
cmp [flag_MaxCryptobiote],1
jne CheckMaxDCryptobioteFlag

MaxCryptobiote:
mov [rax],(int)999

CheckMaxDCryptobioteFlag:
cmp [flag_MaxDCryptobiote],1
jne OriginalCryptobioteCode

MaxDCryptobiote:
mov [rax+48],(int)999

OriginalCryptobioteCode:
mov r8d,[rax]
mov ecx,r14d

ExitCryptobioteInjection:
jmp ReturnFromCryptobioteInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Player Suit Condition
EnterPlayerSuitInjection:

GetPlayerSuitBase:
mov [PlayerSuit], rcx

CheckCleanPlayerSuitFlag:
cmp [flag_CleanPlayerSuit],1
jne CheckOptionalBackpackCoverCleanFlag

CleanPlayerSuit:
mov [rcx+00000358],(float)5000

CheckOptionalBackpackCoverCleanFlag:
cmp [flag_OptionalBackpackCoverClean],1
jne OriginalPlayerSuitCode

OptionalBackpackCoverClean:
mov [rcx+000047A8],(float)4500

OriginalPlayerSuitCode:
vmovss xmm0,[rcx+00000358]

ExitPlayerSuitInjection:
jmp ReturnFromPlayerSuitInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Bridges Energy (formerly Monster Drink)
EnterBridgesEnergyInjection:

GetBridgesEnergyBase:
mov [BridgesEnergy], rdi

CheckInfBridgesEnergykFlag:
cmp [flag_InfBridgesEnergy],1
jne OriginalBridgesEnergyCode

InfBridgesEnergy:
mov [rdi+04],(float)1000

OriginalBridgesEnergyCode:
vmovss xmm2,[rdi+04]

ExitBridgesEnergyInjection:
jmp ReturnFromBridgesEnergyInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Chiral Crystals In Backpack
EnterChiralCrystalsInBackpackInjection:

GetChiralCrystalsInBackpackBase:
push rbx
lea rbx,[r9+rcx*8+00002408]
mov [ChiralCrystalsInBackpack],rbx
pop rbx

CheckMaxChiralCrystalsInBackpackFlag:
cmp [flag_MaxChiralCrystalsInBackpack],1
jne OriginalChiralCrystalsInBackpackCode

MaxChiralCrystalsInBackpack:
mov [r9+rcx*8+00002408],(int)99999

OriginalChiralCrystalsInBackpackCode:
mov eax,[r9+rcx*8+00002408]

ExitChiralCrystalsInBackpackInjection:
jmp ReturnFromChiralCrystalsInBackpackInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Facility Materials
EnterFacilityChiralCrystalsInjection:

GetFacilityChiralCrystalsBase:
push rax
lea rax,[rdx+rbx+30]
mov [FacilityChiralCrystals],rax
pop rax

CheckInfFacilityChiralCrystalsFlag:
cmp [flag_InfFacilityChiralCrystals],1
jne OriginalFacilityChiralCrystalsCode

InfFacilityChiralCrystals:
mov rax,(int)99999
mov [rdx+rbx+30],rax
jmp ReturnFromFacilityChiralCrystalsInject
//push rax
//lea rax,[rdx+rbx+30]
//mov [rax],(int)99999
//mov [rax+08],(int)99999
//mov [rax+10],(int)99999
//mov [rax+18],(int)99999
//mov [rax+28],(int)99999
//pop rax

OriginalFacilityChiralCrystalsCode:
mov rax,[rdx+rbx+30]

ExitFacilityChiralCrystalsInjection:
jmp ReturnFromFacilityChiralCrystalsInject

db 90 90 90 90

{------------------------------------------------------------------------------}


//Vehicle Battery
EnterVehicleBatteryInjection:

GetVehicleBatteryBase:
mov [VehicleBattery],rax  // load base address to symbol

CheckInfVehicleBatteryFlag:
cmp [flag_InfVehicleBattery],1
jne OriginalVehicleBatteryCode

InfVehicleBattery:
//mov [rax+08],(float)9000
push rcx
mov ecx,[rax+0C]
mov [rax+08],ecx
pop rcx

OriginalVehicleBatteryCode:
vcomiss xmm15,[rax+08]

ExitVehicleBatteryInjection:
jmp ReturnFromVehicleBatteryInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Vehicle Durability

EnterVehicleDurabilityInjection:

GetVehicleDurabilityBase:
mov [VehicleDurability],rcx  // load base address to symbol

CheckInfiniteVehicleDurabilityFlag:
cmp [flag_InfiniteVehicleDurability],1
jne OriginalVehicleDurabilityCode

InfiniteVehicleDurability:
//mov [rcx+000006E8],(float)15000
push rax
mov eax,[rcx+6EC]
mov [rcx+6E8],eax
pop rax

OriginalVehicleDurabilityCode:
vmovss xmm6,[rcx+000006E8]

ExitVehicleDurabilityInjection:
jmp ReturnFromVehicleDurabilityInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Vehicle Physical Conition (Rust Removal)

EnterVehiclePhysicalConditionInjection:

GetVehiclePhysicalConditionBase:
cmp dword ptr [rbx+240],5
jne OriginalVehiclePhysicalConditionCode
mov [VehiclePhysicalCondition],rdi  // load base address to symbol

CheckInfVehiclePhysicalConditionFlag:
cmp [flag_InfVehiclePhysicalCondition],1
jne OriginalVehiclePhysicalConditionCode

InfVehiclePhysicalCondition:
//remove the cmp/jne to clean all vehicles the address finds
cmp dword ptr [rbx+240],5
jne OriginalVehiclePhysicalConditionCode
mov [rdi+00000084],(float)1

OriginalVehiclePhysicalConditionCode:
vmovss xmm7,[rdi+00000084]

ExitVehiclePhysicalConditionInjection:
jmp ReturnFromVehiclePhysicalConditionInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Damage % on Equipment

EnterDamageInjection:

GetDamageBase:
mov [Damage],rdx  // load base address to symbol

CheckDamage0Flag:
cmp [flag_Damage0],1
jne OriginalDamage0Code

Damage0:
mov [rdx+34],(float)30000

OriginalDamage0Code:
vmovss xmm1,[rdx+34]

ExitDamage0Injection:
jmp ReturnFromDamage0Inject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Container Damage on Equipment

EnterContainerDamageInjection:

GetContainerDamageBase:
mov [ContainerDamage],rdx  // load base address to symbol

CheckContainerDamage0Flag:
cmp [flag_ContainerDamage0],1
jne OriginalContainerDamage0Code

ContainerDamage0:
mov [rdx+30],(float)1000

OriginalContainerDamage0Code:
vmovss xmm0,[rdx+30]

ExitContainerDamage0Injection:
jmp ReturnFromContainerDamage0Inject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Current Time on Standard Orders

EnterCurrentTimeStandardOrdersInjection:

GetCurrentTimeStandardOrdersBase:
mov [CurrentTimeStandardOrders],rbx

CheckCurrentTimeStandardOrders0Flag:
cmp [flag_CurrentTimeStandardOrders0],1
jne OriginalCurrentTimeStandardOrdersCode

CurrentTimeStandardOrders0:
vmovsd xmm0,[CurrentTimeStandardOrdersXMM]

OriginalCurrentTimeStandardOrdersCode:
vmovsd [rbx+38],xmm0

ExitCurrentTimeStandardOrdersInjection:
jmp ReturnCurrentTimeStandardOrdersInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Max Time on Standard Orders

EnterMaxTimeStandardOrdersInjection:

GetMaxTimeStandardOrdersBase:
mov [MaxTimeStandardOrders],r8

CheckMaxTimeStandardOrders100MinFlag:
cmp [flag_MaxTimeStandardOrders100Min],1
jne OriginalMaxTimeStandardOrdersCode

MaxTimeStandardOrders100Min:
mov [r8+14],(float)5999.990234

OriginalMaxTimeStandardOrdersCode:
vmovss xmm4,[r8+14]

ExitMaxTimeStandardOrdersInjection:
jmp ReturnMaxTimeStandardOrdersInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Likes
EnterLikesInjection:

GetLikesBase:
mov [Likes],r9

OriginalLikesCode:
add rcx,[r9+18]
mov rdx,[rax+00001480]

ExitLikesInjection:
jmp ReturnFromLikesInjection

db 90 90 90 90

{------------------------------------------------------------------------------}

//One Hit Kill for Mules / Respawn (Non-Lethal Weapons)
//Always writes, using MULEsNonLethalHealthAOB2 to get specific Current Health pointer

EnterMULEsNonLethalHealthInjection:

//GetMULEsNonLethalHealthBase:
//mov [MULEsNonLethalHealth],rcx

CheckMULEsNonLethalHealth0Flag:
cmp [flag_MULEsNonLethalHealth0],1
jne CheckMULEsNonLethalHealth1000Flag

MULEsNonLethalHealth0:
mov [rcx+000001F0],(float)0

CheckMULEsNonLethalHealth1000Flag:
cmp [flag_MULEsNonLethalHealth1000],1
jne OriginalMULEsNonLethalHealthCode

MULEsNonLethalHealth1000:
mov [rcx+000001F0],(float)1000

OriginalMULEsNonLethalHealthCode:
mov eax,[rcx+000001F0]

ExitMULEsNonLethalHealthInjection:
jmp ReturnFromMULEsNonLethalHealthInject

db 90 90 90 90

{------------------------------------------------------------------------------}

////Get Pointer for Current Health of Mule (Non-Lethal)
EnterMULEsNonLethalHealth2Injection:

GetMULEsNonLethalHealth2Base:
mov [MULEsNonLethalHealth2],rbx

OriginalMULEsNonLethalHealth2Code:
vmovss [rbx],xmm0
mov bl,01

ExitMULEsNonLethalHealth2Injection:
jmp ReturnFromMULEsNonLethalHealth2Inject

db 90 90 90 90

{------------------------------------------------------------------------------}

//One Hit Kill MULEs (Lethal Weapons)

EnterMULEsLethalHealthInjection:

//GetMULEsLethalHealthBase:
//mov [MULEsLethalHealth],rbx

CheckMULEsLethalHealth0Flag:
cmp [flag_MULEsLethalHealth0],1
jne CheckMULEsLethalHealth1000Flag

MULEsLethalHealth0:
mov [rbx+000001EC],(float)0

CheckMULEsLethalHealth1000Flag:
cmp [flag_MULEsLethalHealth1000],1
jne OriginalMULEsLethalHealthCode

MULEsLethalHealth1000:
mov [rbx+000001EC],(float)1000

OriginalMULEsLethalHealthCode:
vmovss xmm1,[rbx+000001EC]

ExitMULEsLethalHealthInjection:
jmp ReturnMULEsLethalHealthInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Get Pointer for Current Health of Mule (Lethal)

EnterMULEsLethalHealth2Injection:

GetMULEsLethalHealth2Base:
mov [MULEsLethalHealth2],rcx

OriginalMULEsLethalHealth2Code:
vmovss xmm8,[rcx+000001EC]

ExitMULEsLethalHealth2Injection:
jmp ReturnMULEsLethalHealth2Inject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Machine Gun

EnterMachineGunInjection:

GetMachineGunBase:
mov [MachineGun],rax

CheckMachineGun0Flag:
cmp [flag_MachineGunDead],1
jne CheckMachineGunMaxFlag

MachineGunDead:
mov [rax+50],(float)101

CheckMachineGunMaxFlag:
cmp [flag_MachineGunMax],1
jne OriginalMachineGunCode

MachineGunMax:
mov [rax+50],(float)0

OriginalMachineGunCode:
vmovss xmm1,[rax+50]

ExitMachineGunInjection:
jmp ReturnFromMachineGunInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Enemy Ammo, set to 0

EnterEnemyAmmoInjection:

GetEnemyAmmoBase:
mov [EnemyAmmo],rax

CheckFlag_EnemyAmmo0Flag:
cmp [Flag_EnemyAmmo0],1
jne OriginalEnemyAmmoCode

EnemyAmmo0:
mov [rax],#0

OriginalEnemyAmmoCode:
movzx ebx,word ptr [rax]
xor eax,eax

ExitEnemyAmmoInjection:
jmp ReturnFromEnemyAmmoInject

db 90 90 90 90

{------------------------------------------------------------------------------}

// Kill all BT's in one hit except Order 64 BT boss

EnterBTKillInjection:

GetBTHealthBase:
mov [BTHealth],rbx

CheckOneHitKillBTFlag:
cmp [flag_OneHitKillBT],1
jne OriginalBTHealthCode

OneHitKillBT:
mov [rbx+0000013C],(float)0

OriginalBTHealthCode:
vmovss xmm0,[rbx+0000013C]

ExitBTKillInjection:
jmp ReturnBTHealthInjection

db 90 90 90 90

{------------------------------------------------------------------------------}

//Kill Order 64 BT Boss in one hit

EnterOrder64BTKillInjection:

GetOrder64_BossHPBase:
mov [Order64_BossHP],rsi

CheckOrder64_OneHitKillBTFlag:
cmp [flag_Order64_OneHitKillBT],1
jne OriginalOrder64BTKillCode

Order64_OneHitKillBT:
mov [rsi+00000130],(float)0

OriginalOrder64BTKillCode:
vmovss xmm0,[rsi+00000130]

ExitOrder64BTKillInjection:
jmp ReturnFromOrder64_OneHitKillBTInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Get the Address for Enemy Health On Order 65 Phase 1 (Shootout &amp; Hand to Hand)

EnterOrder65BossHealthPhase1Injection:

GetOrder65BossHealthPhase1Base:
mov [Order65BossHealthPhase1], rbx

CheckOrder65Phase1OneHitKillFlag:
cmp [flag_Order65Phase1OneHitKill],1
jne OriginalOrder65BossHealthPhase1Code

Order65Phase1OneHitKill:
mov [rbx+00000158],(float)0

OriginalOrder65BossHealthPhase1Code:
vcomiss xmm10,[rbx+00000158]

ExitOriginalOrder65BossHealthPhase1CodeInjection:
jmp ReturnFromOrder65BossHealthPhase1CodeInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Get the Address for Player Health On Order 65 PunchOut

EnterOrder65_PlayerHealth_PunchOutInjection:

GetOrder65_PlayerHealth_PunchOutBase:
mov [Order65_PlayerHealth_PunchOut], rax

CheckOrder65_InfPlayerHealth_PunchOutFlag:
cmp [flag_Order65_InfPlayerHealth_PunchOut],1
jne OriginalOrder65_PlayerHealth_PunchOutCode

Order65_InfPlayerHealth_PunchOut:
mov [rax+000000DC],(float)1000

OriginalOrder65_PlayerHealth_PunchOutCode:
vmovss xmm0,[rax+000000DC]

ExitOrder65_PlayerHealth_PunchOutInjection:
jmp ReturnFromOrder65_PlayerHealth_PunchOutInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Get the Address for Player Stamina On Order 65 PunchOut

EnterOrder65_PlayerStamina_PunchOutInjection:

GetOrder65_PlayerStamina_PunchOutBase:
push rax
lea rax,[rdi+rsi+38]
mov [Order65_PlayerStamina_PunchOut], rax
pop rax

CheckOrder65_PlayerMaxStamina_PunchOutFlag:
cmp [flag_Order65_PlayerMaxStamina_PunchOut],1
jne OriginalOrder65_PlayerStamina_PunchOutCode

Order65_PlayerMaxStamina_PunchOut:
mov [rdi+rsi+38],(float)1

OriginalOrder65_PlayerStamina_PunchOutCode:
vmovss xmm2,[rdi+rsi+38]

ExitOrder65_PlayerStamina_PunchOutInjection:
jmp ReturnFromOrder65_PlayerStamina_PunchOutInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Kill Order 65 Higgs [Punchout] in one combination of attacks

EnterOrder65Punchout_HiggsHealthInjection:

GetOrder65Punchout_HiggsHealthBase:
mov [Order65Punchout_HiggsHealth],r14

CheckOrder65Punchout_Higgs1HitKillFlag:
cmp [flag_Order65Punchout_Higgs1HitKill],1
jne OriginalOrder65Punchout_HiggsHealthCode

Order65Punchout_Higgs1HitKill:
mov [r14+00000158],(float)0

OriginalOrder65Punchout_HiggsHealthCode:
vmovss xmm2,[r14+00000158]

ExitOrder65Punchout_HiggsHealthInjection:
jmp ReturnFromOrder65Punchout_HiggsHealthInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Auto-Paver Materials Needed

EnterAutoPaverMaterialsInjection:

GetAutoPaverMaterialsBase:
mov [AutoPaverMaterials],rcx

CheckAutoPaverMaterials8000Flag:
cmp [flag_AutoPaverMaterials8000],1
jne OriginalAutoPaverMaterialsCode

AutoPaverMaterials8000:
mov [rcx+00000210],#15000 //Chiral Crystals
mov [rcx+00000214],#15000 //Resins
mov [rcx+00000218],#15000 //Metals
mov [rcx+0000021C],#15000 //Ceramics
mov [rcx+00000220],#15000 //Chemicals
mov [rcx+00000224],#15000 //Special Alloys

OriginalAutoPaverMaterialsCode:
mov r9d,[rcx+00000210]

ExitAutoPaverMaterials8000Injection:
jmp ReturnFromAutoPaverMaterials8000Inject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Equipment Use (Ladders, Container Spray, etc)

EnterEquipmentUseInjection:

GetEquipmentUseBase:
mov [EquipmentUse],rax

CheckInfEquipmentUseFlag:
cmp [flag_InfEquipmentUse],1
jne OriginalInfEquipmentUseCode

InfEquipmentUse:
mov [rcx],#10

OriginalInfEquipmentUseCode:
movsx r9d,word ptr [rcx]
movzx eax,al

ExitInfEquipmentUseInjection:
jmp ReturnFromInfEquipmentUseInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Repair All Structures (Temporary, restarting game sets back to original)

EnterRepairAllStructuresInjection:

CheckRepairAllStructuresFlag:
cmp [flag_RepairAllStructures],1
jne OriginalRepairAllStructuresCode

RepairAllStructures:
mov [rcx+000000D8],(float)900000

OriginalRepairAllStructuresCode:
vcomiss xmm0,[rcx+000000D8]

ExitRepairAllStructuresInjection:
jmp ReturnFromRepairAllStructuresInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Current Structure Durability (Temporary, restarting game sets back to original)

EnterCurrentStructureDurabilityInjection:

GetCurrentStructureDurabilityBase:
mov [CurrentStructureDurability],rax

OriginalCurrentStructureDurabilityCode:
vmovss xmm1,[rax+000000D8]

ExitCurrentStructureDurabilityInjection:
jmp ReturnFromCurrentStructureDurabilityInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Repair All Roads

EnterRepairAllRoadsInjection:

GetRoadDurabilityBase:
mov [RoadDurability],rax

CheckRepairAllRoadsFlag:
cmp [flag_RepairAllRoads],1
jne OriginalRepairAllRoadsCode

RepairAllRoads:
mov [rax+0C],(float)100

OriginalRepairAllRoadsCode:
vmovss xmm0,[rax+0C]

ExitRepairAllRoadsInjection:
jmp ReturnFromRepairAllRoadsInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Structure Build Timer

EnterStructureBuildTimerInjection:

GetStructureBuildTimerBase:
mov [StructureBuildTimer],rdi

Check0StructureBuildTimeFlag:
cmp [flag_0StructureBuildTime],1
jne OriginalStructureBuildTimerCode

0StructureBuildTime:
mov [rdi+000000D8],(float)0

OriginalStructureBuildTimerCode:
vmovss xmm1,[rdi+000000D8]
  jmp ReturnFromStructureBuildTimerInject

ExitStructureBuildTimerInjection:
jmp ReturnFromStructureBuildTimerInject

db 90 90 90 90

{------------------------------------------------------------------------------}

EnterBTOilInjection:

CheckBTOilNoHPlag:
cmp [flag_BTOilNoHP],1
jne CheckBTOilHPGainFlag

BTOilNoHP:
mov [rsi+0000013C],(float)0

CheckBTOilHPGainFlag:
cmp [flag_BTOilHPGainBack],1
jne OriginalBTOilCode

BTOilHPGainBack:
mov [rsi+0000013C],(float)100

OriginalBTOilCode:
vcomiss xmm8,[rsi+0000013C]

ExitBTOilInjection:
jmp ReturnFromBTOilInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Make All Cargo Small (Credits Anon-9 for original script)
EnterAllSmallCargoInjection:

CheckAllSmallCargoFlag:
cmp [flag_AllSmallCargo],1
jne OriginalAllSmallCargoCode

AllSmallCargo:
mov byte ptr [rbx+3E],0

OriginalAllSmallCargoCode:
movzx ecx,byte ptr [rbx+3E]
sub ecx,01

ExitAllSmallCargoInjection:
jmp ReturnFromAllSmallCargoInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Item ID (Max)
EnterItemIDInjection:

GetItemIDBase:
mov [ItemID],rcx

OriginalItemIDCode:
  mov rcx,[rcx+28]
  mov [rbp+2F],rdx
  jmp ReturnFromItemIDInject

ExitItemIDInjection:
jmp ReturnFromItemIDInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Slot ID (Current)
EnterSlotIDInjection:

GetSlotIDBase:
mov [SlotID],rsi

OriginalSlotIDCode:
  mov rax,[rsi+28]
  xor r12d,r12d
  jmp ReturnFromSlotIDInject

ExitSlotIDInjection:
jmp ReturnFromSlotIDInject

db 90 90 90 90


{------------------------------------------------------------------------------}

//Drill Training Timer
EnterDrillTrainingTimerInjection:

GetDrillTrainingTimerBase:
mov [DrillTrainingTimer],rcx

CheckInfDrillTrainingTimerFlag:
cmp [flag_InfDrillTrainingTimer],1
jne Check10MinDrillTrainingTimerFlag

InfDrillTrainingTimer:
mov [rcx+0000011C],(int)1085763612

Check10MinDrillTrainingTimerFlag:
cmp [flag_10MinDrillTrainingTimer],1
jne OriginalDrillTrainingTimerCode

10MinDrillTrainingTimer:
mov [rcx+0000011C],(int)1082310656

OriginalDrillTrainingTimerCode:
vmovsd xmm0,[rcx+00000118]

ExitDrillTrainingTimerInjection:
jmp ReturnFromDrillTrainingTimerInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Instant Level 3, Credits to Gregory
EnterInstantBuildLevel3Injection:

CheckInstantBuildLevel3Flag:
cmp [flag_InstantBuildLevel3],1
jne OriginalInstantBuildLevel3Code

InstantBuildLevel3:
mov [rcx+00000210],#15000
mov [rcx+00000214],#15000
mov [rcx+00000218],#15000
mov [rcx+0000021C],#15000
mov [rcx+00000220],#15000
mov [rcx+00000224],#15000

OriginalInstantBuildLevel3Code:
add [rcx+00000210],eax

ExitInstantBuildLevel3Injection:
jmp ReturnFromInstantBuildLevel3Inject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Race Track Total Time &amp; Lap Time

EnterRaceTrackTotalTimeInjection:

GetRaceTrackTotalTimeBase:
mov [RaceTrackTotalTime],rax

CheckRaceTrackTotalTime0Flag:
cmp [flag_RaceTrackTotalTime0],1
jne CheckRaceTrackLapTime0Flag

RaceTrackTotalTime0:
mov [rax+000002B4],(int)0

CheckRaceTrackLapTime0Flag:
cmp [flag_RaceTrackLapTime0],1
jne OriginalRaceTrackTotalTimeCode

RaceTrackLapTime0:
mov [rax+000002BC],(int)0.00

OriginalRaceTrackTotalTimeCode:
vmovsd xmm1,[rax+000002B0]

ExitRaceTrackTotalTimeInjection:
jmp ReturnFromRaceTrackTotalTimeInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Sandalweed
EnterSandalweedInjection:

GetSandalweedBase:
push rbx
lea rbx,[rdi+rbp+0000380C]
mov [Sandalweed], rbx
pop rbx

CheckSandalweed999Flag:
cmp [flag_Sandalweed999],1
jne OriginalSandalweedCode

Sandalweed999:
mov [rdi+rbp+0000380C],#999

OriginalSandalweedCode:
mov eax,[rdi+rbp+0000380C]

ExitSandalweedInjection:
jmp ReturnFromSandalweedInject

db 90 90 90 90

{------------------------------------------------------------------------------}


//Equipment use, don't increase - can increase
EnterInfEquipment2Injection:

CheckInfEquipment2Flag:
cmp [flag_InfEquipment2],1
jne OriginalInfEquipment2Code

InfEquipment2:
cmp [r11+rcx*2+0000010A],r8w
jge ExitInfEquipment2Injection
mov [r11+rcx*2+0000010A],r8w
jmp ExitInfEquipment2Injection

OriginalInfEquipment2Code:
mov [r11+rcx*2+0000010A],r8w

ExitInfEquipment2Injection:
jmp ReturnFromInfEquipment2Inject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Drill Targets (Visual Only)
EnterDrillTargetsInjection:

GetDrillTargetsBase:
mov [DrillTargets],rbx

OriginalDrillTargetsCode:
mov eax,[rbx+2C]
mov r8d,[rbx+24]

ExitDrillTargetsInjection:
jmp ReturnFromDrillTargetsInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Race Track Current Lap

EnterRaceTrack_CurrentLapInjection:

GetRaceTrack_CurrentLapBase:
mov [RaceTrack_CurrentLap],rax

CheckRaceTrackInstantWinFlag:
cmp [flag_RaceTrackInstantWin],1
jne OriginalRaceTrack_CurrentLapCode

RaceTrackInstantWin:
mov [rax+000000D4],(int)3

OriginalRaceTrack_CurrentLapCode:
movzx ecx,word ptr [rax+000000D4]

ExitRaceTrack_CurrentLapInjection:
jmp ReturnFromRaceTrack_CurrentLapInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Don't Trip

EnterDontTripInjection:

CheckDontTripFlag:
cmp [flag_DontTrip],1
jne OriginalDontTripCode

DontTrip:
  jmp ds.exe+28AA6EF
  cmp byte ptr [rcx+00000951],00
  jmp ReturnFromDontTripInject

OriginalDontTripCode:
  ja ds.exe+28AA6FC
  cmp byte ptr [rcx+00000951],00
  jmp ReturnFromDontTripInject

ExitDontTripInjection:
jmp ReturnFromDontTripInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Max Material Storage (99999)

EnterMaxMaterialStorageInjection:

CheckMaxMaterialStorageFlag:
cmp [flag_MaxMaterialStorage],1
jne OriginalMaxMaterialStorageCode

MaxMaterialStorage:
mov eax,(int)99999
mov [rcx+r8*4+68],eax
jmp ds.exe+3435FD1

OriginalMaxMaterialStorageCode:
  mov eax,[rcx+r8*4+68]
  jmp ReturnFromMaxMaterialStorageInject

ExitMaxMaterialStorageInjection:
jmp ReturnFromMaxMaterialStorageInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//PCC Structure Facility Materials

EnterPCCStructureFacilityMaterialsInjection:

GetPCCStructureFacilityMaterialsBase:
mov [PCCStructureFacilityMaterials],rcx

CheckPCCStructureFacilityMaterials99999Flag:
cmp [flag_PCCStructureFacilityMaterials99999],1
jne OriginalPCCStructureFacilityMaterialsCode

PCCStructureFacilityMaterials99999:
mov r9d,(int)99999
mov [rcx+0000027C],r9d
mov [rcx+00000280],r9d
mov [rcx+00000284],r9d
mov [rcx+00000288],r9d
mov [rcx+0000028C],r9d
mov [rcx+00000290],r9d
jmp ReturnFromPCCStructureFacilityMaterialsInject

//push rax
//lea rax, [rcx+0000027C]
//mov [rax],(int)99999
//mov [rax+04],(int)99999
//mov [rax+08],(int)99999
//mov [rax+C],(int)99999
//mov [rax+10],(int)99999
//mov [rax+14],(int)99999
//pop rax

OriginalPCCStructureFacilityMaterialsCode:
  mov r9d,[rcx+0000027C]
  jmp ReturnFromPCCStructureFacilityMaterialsInject

ExitPCCStructureFacilityMaterialsInjection:
jmp ReturnFromPCCStructureFacilityMaterialsInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Max PCC Material Storage (99999)

EnterPCCMaxMaterialStorageInjection:

CheckPCCMaxMaterialStorage99999Flag:
cmp [flag_PCCMaxMaterialStorage99999],1
jne OriginalPCCMaxMaterialStorageCode

PCCMaxMaterialStorage99999:
mov [rax],(int)99999
mov [rax+04],(int)99999
mov [rax+08],(int)99999
mov [rax+C],(int)99999
mov [rax+10],(int)99999
mov [rax+14],(int)99999

OriginalPCCMaxMaterialStorageCode:
  movsxd  rcx,dword ptr [rax+08]
  mov [rsp+30],rcx
  jmp ReturnFromPCCMaxMaterialStorageInject

ExitPCCMaxMaterialStorageInjection:
jmp ReturnFromPCCMaxMaterialStorageInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//No Recoil

EnterNoRecoilInjection:

CheckNoRecoilFlag:
cmp [flag_NoRecoil],1
jne OriginalNoRecoilCode

NoRecoil:
subss xmm7,xmm7
jmp ReturnFromNoRecoilInject

OriginalNoRecoilCode:
vmovss [rcx+000004F4],xmm4

ExitNoRecoilInjection:
jmp ReturnFromNoRecoilInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Rapid Fire

EnterRapidFireInjection:

CheckRapidFireFlag:
cmp [flag_RapidFire],1
jne OriginalRapidFireCode

RapidFire:
subss xmm8,xmm8

OriginalRapidFireCode:
vmovss [rdi+0000049C],xmm8

ExitRapidFireInjection:
jmp ReturnFromRapidFireInject

db 90 90 90 90

{------------------------------------------------------------------------------}

//Kill Cliff Unger In One Hit

EnterCliffUngerHealthInjection:

GetCliffUngerHealthBase:
mov [CliffUngerHealth],rsi

CheckCliffUngerHealth0Flag:
cmp [flag_CliffUngerHealth0],1
jne OriginalCliffUngerHealthCode

CliffUngerHealth0:
mov [rsi+00000160],(int)0

OriginalCliffUngerHealthCode:
vmovss xmm0,[rsi+00000160]
jmp ReturnFromCliffUngerHealthInject

ExitCliffUngerHealthInjection:
jmp ReturnFromCliffUngerHealthInject

db 90 90 90 90

{------------------------------------------------------------------------------}
{------------------------------------------------------------------------------}
// Address Data Declarations / Reserved Bytes

align 8,cc

PlayerCoordinates:
resb 8

VehicleCoordinates:
resb 8

WaypointCoordinates:
resb 8

CarrierCoordinates:
resb 8

PlayerStats:
resb 8

BBStress:
resb 8

PlayerBattery:
resb 8

CurrentAmmo:
resb 8

MaxAmmo:
resb 8

BloodBag:
resb 8

CurrentWeight:
resb 8

MaxWeight:
resb 8

Urination:
resb 8

Cryptobiote:
resb 8

PlayerSuit:
resb 8

BridgesEnergy:
resb 8

ChiralCrystalsInBackpack:
resb 8

FacilityChiralCrystals:
resb 8

VehicleBattery:
resb 8

VehicleDurability:
resb 8

VehiclePhysicalCondition:
resb 8

Damage:
resb 8

ContainerDamage:
resb 8

CurrentTimeStandardOrders:
resb 8

MaxTimeStandardOrders:
resb 8

Likes:
resb 8

MULEsNonLethalHealth2:
resb 8

MULEsLethalHealth2:
resb 8

MachineGun:
resb 8

EnemyAmmo:
resb 8

BTHealth:
resb 8

Order64_BossHP:
resb 8

Order65BossHealthPhase1:
resb 8

Order65_PlayerHealth_PunchOut:
resb 8

Order65_PlayerStamina_PunchOut:
resb 8

Order65Punchout_HiggsHealth:
resb 8

AutoPaverMaterials:
resb 8

EquipmentUse:
resb 8

RoadDurability:
resb 8

CurrentStructureDurability:
resb 8

StructureBuildTimer:
resb 8

ItemID:
resb 8

SlotID:
resb 8

DrillTrainingTimer:
resb 8

RaceTrackTotalTime:
resb 8

Sandalweed:
resb 8

DrillTargets:
resb 8

RaceTrack_CurrentLap:
resb 8

PCCStructureFacilityMaterials:
resb 8

CliffUngerHealth:
resb 8

flag_InfPlayerHealth:
dd 0
dd 0

flag_InfConsciousness:
dd 0
dd 0

flag_InfStamina:
dd 0
dd 0

flag_NoFatigue:
dd 0
dd 0

flag_FullFatigue:
dd 0
dd 0

flag_InfEndurance:
dd 0
dd 0

flag_MaxBootsDurability:
dd 0
dd 0

flag_NoBBStress:
dd 0
dd 0

flag_InfPlayerBattery:
dd 0
dd 0

flag_InfAmmo:
dd 0
dd 0

flag_InfBloodBag:
dd 0
dd 0

flag_0CurrentWeight:
dd 0
dd 0

flag_InfMaxWeight:
dd 0
dd 0

flag_NoUrination:
dd 0
dd 0

flag_MaxUrination:
dd 0
dd 0

flag_MaxCryptobiote:
dd 0
dd 0

flag_MaxDCryptobiote:
dd 0
dd 0

flag_CleanPlayerSuit:
dd 0
dd 0

flag_OptionalBackpackCoverClean:
dd 0
dd 0

flag_InfBridgesEnergy:
dd 0
dd 0

flag_MaxChiralCrystalsInBackpack:
dd 0
dd 0

flag_InfFacilityChiralCrystals:
dd 0
dd 0

flag_InfVehicleBattery:
dd 0
dd 0

flag_MULEsVehicleBattery0:
dd 0
dd 0

flag_InfiniteVehicleDurability:
dd 0
dd 0

flag_InfVehiclePhysicalCondition:
dd 0
dd 0

flag_Damage0:
dd 0
dd 0

flag_ContainerDamage0:
dd 0
dd 0

flag_CurrentTimeStandardOrders0:
dd 0
dd 0

flag_MaxTimeStandardOrders100Min:
dd 0
dd 0

flag_MULEsNonLethalHealth0:
dd 0
dd 0

flag_MULEsNonLethalHealth1000:
dd 0
dd 0

flag_MULEsLethalHealth0:
dd 0
dd 0

flag_MULEsLethalHealth1000:
dd 0
dd 0

flag_MachineGunDead:
dd 0
dd 0

flag_MachineGunMax:
dd 0
dd 0

Flag_EnemyAmmo0:
dd 0
dd 0

flag_OneHitKillBT:
dd 0
dd 0

flag_Order64_OneHitKillBT:
dd 0
dd 0

flag_Order65Phase1OneHitKill:
dd 0
dd 0

flag_Order65_InfPlayerHealth_PunchOut:
dd 0
dd 0

flag_Order65_PlayerMaxStamina_PunchOut:
dd 0
dd 0

flag_Order65Punchout_Higgs1HitKill:
dd 0
dd 0

flag_AutoPaverMaterials8000:
dd 0
dd 0

flag_InfEquipmentUse:
dd 0
dd 0

flag_RepairAllStructures:
dd 0
dd 0

flag_RepairAllRoads:
dd 0
dd 0

flag_0StructureBuildTime:
dd 0
dd 0

flag_BTOilNoHP:
dd 0
dd 0

flag_BTOilHPGainBack:
dd 0
dd 0

flag_AllSmallCargo:
dd 0
dd 0

flag_InfDrillTrainingTimer:
dd 0
dd 0

flag_10MinDrillTrainingTimer:
dd 0
dd 0

flag_InstantBuildLevel3:
dd 0
dd 0

flag_RaceTrackTotalTime0:
dd 0
dd 0

flag_RaceTrackLapTime0:
dd 0
dd 0

flag_Sandalweed999:
dd 0
dd 0

flag_InfEquipment2:
dd 0
dd 0

flag_RaceTrackInstantWin:
dd 0
dd 0

flag_DontTrip:
dd 0
dd 0

flag_MaxMaterialStorage:
dd 0
dd 0

flag_PCCStructureFacilityMaterials99999:
dd 0
dd 0

flag_PCCMaxMaterialStorage99999:
dd 0
dd 0

flag_NoRecoil:
dd 0
dd 0

flag_RapidFire:
dd 0
dd 0

flag_CliffUngerHealth0:
dd 0
dd 0

{------------------------------------------------------------------------------}
{------------------------------------------------------------------------------}

//Injection Point
PlayerX:
jmp PlayerXInjection
nop 3
ReturnFromPlayerXInjection:

{------------------------------------------------------------------------------}

//Injection Point
VehicleX:
jmp VehicleXInjection
nop 3
ReturnFromVehicleXInjection:

{------------------------------------------------------------------------------}

//Injection Point
WaypointX:
jmp WaypointXInjection
ReturnFromWaypointXInjection:

{------------------------------------------------------------------------------}

//Injection Point
CarrierX+03:
jmp CarrierXInjection
nop 3
ReturnFromCarrierXInjection:

{------------------------------------------------------------------------------}

//Injection Point
PlayerBaseStatsAOB:
jmp EnterPlayerStatsInjection
nop 3
ReturnFromPlayerStatsInject:

{------------------------------------------------------------------------------}

//Injection Point
BBStressAOB+04:
jmp EnterBBStressLevelInjection
nop 4
ReturnFromBBStressLevelInject:

{------------------------------------------------------------------------------}

//Injection Point
PlayerBatteryAOB:
jmp EnterPlayerBatteryInjection
nop 3
ReturnFromPlayerBatteryInject:

{------------------------------------------------------------------------------}

//Injection Point
CurrentAMMOAOB:
jmp EnterCurrentAmmoInjection
nop 3
ReturnFromCurrentAmmoInject:

{------------------------------------------------------------------------------}

//Injection Point
MaxAmmoAOB:
jmp EnterMaxAmmoInjection
nop 4
ReturnFromMaxAmmoInject:

{------------------------------------------------------------------------------}

//Injection Point
BloodBagAOB:
jmp EnterBloodBagInjection
nop 2
ReturnFromBloodBagInject:

{------------------------------------------------------------------------------}

//Injection Point
CurrentWeightAOB:
jmp EnterCurrentWeightInjection
nop 4
ReturnFromCurrentWeightInject:

{------------------------------------------------------------------------------}

//Injection Point
MaxWeightAOB:
jmp EnterMaxWeightInjection
nop 4
ReturnFromMaxWeightInject:

{------------------------------------------------------------------------------}

//Injection Point
UrinationAOB:
jmp EnterUrinationInjection
nop 4
ReturnFromUrinationInject:

{------------------------------------------------------------------------------}

//Injection Point
CryptobioteInBackpackAOB:
jmp EnterCryptobioteInjection
nop
ReturnFromCryptobioteInject:

{------------------------------------------------------------------------------}

//Injection Point
PlayerSuitAOB:
jmp EnterPlayerSuitInjection
nop 3
ReturnFromPlayerSuitInject:

{------------------------------------------------------------------------------}

//Injection Point
BridgesEnergyAOB:
jmp EnterBridgesEnergyInjection
ReturnFromBridgesEnergyInject:

{------------------------------------------------------------------------------}

//Injection Point
ChiralCrystalsInBackpackAOB:
jmp EnterChiralCrystalsInBackpackInjection
nop 3
ReturnFromChiralCrystalsInBackpackInject:

{------------------------------------------------------------------------------}

//Injection Point
FacilityChiralCrystalsAOB:
jmp EnterFacilityChiralCrystalsInjection
ReturnFromFacilityChiralCrystalsInject:

{------------------------------------------------------------------------------}

//Injection Point
VehicleBatteryAOB:
jmp EnterVehicleBatteryInjection
ReturnFromVehicleBatteryInject:

{------------------------------------------------------------------------------}

//Injection Point
VehicleDurabilityAOB:
jmp EnterVehicleDurabilityInjection
nop 3
ReturnFromVehicleDurabilityInject:

{------------------------------------------------------------------------------}

//Injection Point
VehiclePhysicalConditionAOB:
jmp EnterVehiclePhysicalConditionInjection
nop 3
ReturnFromVehiclePhysicalConditionInject:

{------------------------------------------------------------------------------}

//Injection Point
DamageAOB:
jmp EnterDamageInjection
ReturnFromDamage0Inject:

{------------------------------------------------------------------------------}

//Injection Point
ContainerDamageAOB:
jmp EnterContainerDamageInjection
ReturnFromContainerDamage0Inject:

{------------------------------------------------------------------------------}

//Injection Point
CurrentTimeStandardOrdersAOB:
jmp EnterCurrentTimeStandardOrdersInjection
ReturnCurrentTimeStandardOrdersInject:

{------------------------------------------------------------------------------}

//Injection Point
MaxTimeStandardOrdersAOB:
jmp EnterMaxTimeStandardOrdersInjection
nop
ReturnMaxTimeStandardOrdersInject:

{------------------------------------------------------------------------------}

//Injection Point
LikesAOB:
jmp EnterLikesInjection
nop 6
ReturnFromLikesInjection:

{------------------------------------------------------------------------------}

//Injection Point
MULEsNonLethalHealthAOB:
jmp EnterMULEsNonLethalHealthInjection
nop
ReturnFromMULEsNonLethalHealthInject:

{------------------------------------------------------------------------------}

//Injection Point
MULEsNonLethalHealthAOB2:
jmp EnterMULEsNonLethalHealth2Injection
nop
ReturnFromMULEsNonLethalHealth2Inject:

{------------------------------------------------------------------------------}

//Injection Point
MULEsLethalHealthAOB:
jmp EnterMULEsLethalHealthInjection
nop 3
ReturnMULEsLethalHealthInject:

{------------------------------------------------------------------------------}

//Injection Point
MULEsLethalHealthAOB2:
jmp EnterMULEsLethalHealth2Injection
nop 3
ReturnMULEsLethalHealth2Inject:

{------------------------------------------------------------------------------}

//Injection Point
MachineGunAOB:
jmp EnterMachineGunInjection
ReturnFromMachineGunInject:

{------------------------------------------------------------------------------}

//Injection Point
EnemyAmmoAOB:
jmp EnterEnemyAmmoInjection
ReturnFromEnemyAmmoInject:

{------------------------------------------------------------------------------}

//Injection Point
BT_OneHitKillAOB:
jmp EnterBTKillInjection
nop 3
ReturnBTHealthInjection:

{------------------------------------------------------------------------------}

//Injection Point
Order64_OneHitKillBTAOB:
jmp EnterOrder64BTKillInjection
nop 3
ReturnFromOrder64_OneHitKillBTInject:

{------------------------------------------------------------------------------}

//Injection Point
Order65BossHealthPhase1AOB:
jmp EnterOrder65BossHealthPhase1Injection
nop 3
ReturnFromOrder65BossHealthPhase1CodeInject:

{------------------------------------------------------------------------------}

//Injection Point
Order65_PlayerHealth_PunchOutAOB:
jmp EnterOrder65_PlayerHealth_PunchOutInjection
nop 3
ReturnFromOrder65_PlayerHealth_PunchOutInject:

{------------------------------------------------------------------------------}

//Injection Point
Order65_PlayerStamina_PunchOutAOB:
jmp EnterOrder65_PlayerStamina_PunchOutInjection
nop
ReturnFromOrder65_PlayerStamina_PunchOutInject:

{------------------------------------------------------------------------------}

//Injection Point
Order65Punchout_HiggsHealthAOB:
jmp EnterOrder65Punchout_HiggsHealthInjection
nop 4
ReturnFromOrder65Punchout_HiggsHealthInject:

{------------------------------------------------------------------------------}

//Injection Point:
AutoPaverMaterialsAOB:
jmp EnterAutoPaverMaterialsInjection
nop 2
ReturnFromAutoPaverMaterials8000Inject:

{------------------------------------------------------------------------------}

//Injection Point:
EquipmentUseAOB:
jmp EnterEquipmentUseInjection
nop 2
ReturnFromInfEquipmentUseInject:

{------------------------------------------------------------------------------}

//Injection Point:
StructuresDurabilityAOB:
jmp EnterRepairAllStructuresInjection
nop 3
ReturnFromRepairAllStructuresInject:

{------------------------------------------------------------------------------}

//Injection Point:
CurrentStructureDurabilityAOB:
jmp EnterCurrentStructureDurabilityInjection
nop 3
ReturnFromCurrentStructureDurabilityInject:

{------------------------------------------------------------------------------}

//Injection Point:
MaxRoadDurabilityAOB:
jmp EnterRepairAllRoadsInjection
ReturnFromRepairAllRoadsInject:

{------------------------------------------------------------------------------}

//Injection Point:
StructureBuildTimerAOB+01:
jmp EnterStructureBuildTimerInjection
nop 3
ReturnFromStructureBuildTimerInject:

{------------------------------------------------------------------------------}

//Injection Point:
BTsRemoveOilAOB:
jmp EnterBTOilInjection
nop 3
ReturnFromBTOilInject:

{------------------------------------------------------------------------------}

//Injection Point:
AllSmallCargoAOB:
jmp EnterAllSmallCargoInjection
nop 2
ReturnFromAllSmallCargoInject:

{------------------------------------------------------------------------------}

//Injection Point:
ItemIDAOB:
jmp EnterItemIDInjection
nop 3
ReturnFromItemIDInject:

{------------------------------------------------------------------------------}

//Injection Point:
SlotIDAOB:
jmp EnterSlotIDInjection
nop 2
ReturnFromSlotIDInject:

{------------------------------------------------------------------------------}

//Injection Point:
DrillTrainingTimerAOB+05:
jmp EnterDrillTrainingTimerInjection
nop 3
ReturnFromDrillTrainingTimerInject:

{------------------------------------------------------------------------------}

//Injection Point:
InstantBuildLevel3AOB:
jmp EnterInstantBuildLevel3Injection
nop
ReturnFromInstantBuildLevel3Inject:

{------------------------------------------------------------------------------}

//Injection Point:
RaceTrackTotalTimeAOB:
jmp EnterRaceTrackTotalTimeInjection
nop 3
ReturnFromRaceTrackTotalTimeInject:

{------------------------------------------------------------------------------}

//Injection Point:
SandalweedAOB:
jmp EnterSandalweedInjection
nop 2
ReturnFromSandalweedInject:

{------------------------------------------------------------------------------}

//Injection Point:
EquipmentAOB2:
jmp EnterInfEquipment2Injection
nop 4
ReturnFromInfEquipment2Inject:

{------------------------------------------------------------------------------}

//Injection Point:
DrillTargetsAOB:
jmp EnterDrillTargetsInjection
nop 2
ReturnFromDrillTargetsInject:

{------------------------------------------------------------------------------}

//Injection Point:
RaceTrack_CurrentLapAOB:
jmp EnterRaceTrack_CurrentLapInjection
nop 2
ReturnFromRaceTrack_CurrentLapInject:

{------------------------------------------------------------------------------}

//Injection Point:
DontTripAOB:
jmp EnterDontTripInjection
nop 4
ReturnFromDontTripInject:

{------------------------------------------------------------------------------}

//Injection Point:
MaxMaterialStorageAOB:
jmp EnterMaxMaterialStorageInjection
ReturnFromMaxMaterialStorageInject:

{------------------------------------------------------------------------------}

//Injection Point:
PCCStructureFacilityMaterialsAOB:
jmp EnterPCCStructureFacilityMaterialsInjection
nop 2
ReturnFromPCCStructureFacilityMaterialsInject:

{------------------------------------------------------------------------------}

//Injection Point:
PCCMaxMaterialStorageAOB:
jmp EnterPCCMaxMaterialStorageInjection
nop 4
ReturnFromPCCMaxMaterialStorageInject:

{------------------------------------------------------------------------------}

//Injection Point:
NoRecoilAOB:
jmp EnterNoRecoilInjection
nop 3
ReturnFromNoRecoilInject:

{------------------------------------------------------------------------------}

//Injection Point:
RapidFireAOB:
jmp EnterRapidFireInjection
nop 3
ReturnFromRapidFireInject:

{------------------------------------------------------------------------------}

//Injection Point:
CliffUngerHealthAOB:
jmp EnterCliffUngerHealthInjection
nop 3
ReturnFromCliffUngerHealthInject:

{------------------------------------------------------------------------------}
{------------------------------------------------------------------------------}

[DISABLE]
PlayerX:
db C5 F8 11 87 80 00 00 00

VehicleX:
db C5 FB 10 87 C8 00 00 00

WaypointX:
db C5 FA 7F 41 10

CarrierX+03:
db C5 F8 10 80 C8 00 00 00

PlayerBaseStatsAOB:
db C5 FA 10 83 C0 00 00 00

BBStressAOB+04:
db C4 C1 7A 10 86 34 43 00 00

PlayerBatteryAOB:
db C5 FA 10 81 10 48 00 00

CurrentAMMOAOB:
db 0F B7 18 E8 4D 3F F2 FF

MaxAmmoAOB:
db 66 45 89 84 4B 0A 01 00 00

BloodBagAOB:
db 41 8B 85 38 48 00 00

CurrentWeightAOB:
db 8B 41 0C 89 87 C4 00 00 00

MaxWeightAOB:
db C4 C1 7A 10 97 58 0C 00 00

UrinationAOB:
db C4 C1 4A 5F 86 4C 48 00 00

CryptobioteInBackpackAOB:
db 44 8B 00 41 8B CE

PlayerSuitAOB:
db C5 FA 10 81 58 03 00 00

BridgesEnergyAOB:
db C5 FA 10 57 04

ChiralCrystalsInBackpackAOB:
db 41 8B 84 C9 08 24 00 00

FacilityChiralCrystalsAOB:
db 48 8B 44 1A 30

VehicleBatteryAOB:
db C5 78 2F 78 08

VehicleDurabilityAOB:
db C5 FA 10 B1 E8 06 00 00

VehiclePhysicalConditionAOB:
db C5 FA 10 BF 84 00 00 00

DamageAOB:
db C5 FA 10 4A 34

ContainerDamageAOB:
db C5 FA 10 42 30

CurrentTimeStandardOrdersAOB:
db C5 FB 11 43 38

MaxTimeStandardOrdersAOB:
db C4 C1 7A 10 60 14

LikesAOB:
db 49 03 49 18 48 8B 90 80 14 00 00

MULEsNonLethalHealthAOB:
db 8B 81 F0 01 00 00

MULEsNonLethalHealthAOB2:
db C5 FA 11 03 B3 01

MULEsLethalHealthAOB:
db C5 FA 10 8B EC 01 00 00

MULEsLethalHealthAOB2:
db C5 7A 10 81 EC 01 00 00

MachineGunAOB:
db C5 FA 10 48 50

EnemyAmmoAOB:
db 0F B7 18 33 C0

BT_OneHitKillAOB:
db C5 FA 10 83 3C 01 00 00

Order64_OneHitKillBTAOB:
db C5 FA 10 86 30 01 00 00

Order65BossHealthPhase1AOB:
db C5 78 2F 93 58 01 00 00

Order65_PlayerHealth_PunchOutAOB:
db C5 FA 10 80 DC 00 00 00

Order65_PlayerStamina_PunchOutAOB:
db C5 FA 10 54 37 38

Order65Punchout_HiggsHealthAOB:
db C4 C1 7A 10 96 58 01 00 00

AutoPaverMaterialsAOB:
db 44 8B 89 10 02 00 00

EquipmentUseAOB:
db 44 0F BF 09 0F B6 C0

StructuresDurabilityAOB:
db C5 F8 2F 81 D8 00 00 00

CurrentStructureDurabilityAOB:
db C5 FA 10 88 D8 00 00 00

MaxRoadDurabilityAOB:
db C5 FA 10 40 0C

StructureBuildTimerAOB+01:
db C5 FA 10 8F D8 00 00 00

BTsRemoveOilAOB:
db C5 78 2F 86 3C 01 00 00

AllSmallCargoAOB:
db 0F B6 4B 3E 83 E9 01

ItemIDAOB:
db 48 8B 49 28 48 89 55 2F

SlotIDAOB:
db 48 8B 46 28 45 33 E4

DrillTrainingTimerAOB+05:
db C5 FB 10 81 18 01 00 00

InstantBuildLevel3AOB:
db 01 81 10 02 00 00

RaceTrackTotalTimeAOB:
db C5 FB 10 88 B0 02 00 00

SandalweedAOB:
db 8B 84 2F 0C 38 00 00

EquipmentAOB2:
db 66 45 89 84 4B 0A 01 00 00

DrillTargetsAOB:
db 8B 43 2C 44 8B 43 24

RaceTrack_CurrentLapAOB:
db 0F B7 88 D4 00 00 00

DontTripAOB:
db 77 1A 80 B9 51 09 00 00 00

MaxMaterialStorageAOB:
db 42 8B 44 81 68

StructureFacilityMaterialsAOB:
db 44 8B 89 7C 02 00 00

PCCMaxMaterialStorageAOB:
db 48 63 48 08 48 89 4C 24 30

NoRecoilAOB:
db C5 FA 11 A1 F4 04 00 00

RapidfireAOB:
db C5 7A 11 87 9C 04 00 00

CliffUngerHealthAOB:
db C5 FA 10 86 60 01 00 00

unregistersymbol(*)
dealloc(*)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>130606</ID>
              <Description>"Pointers"</Description>
              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>130607</ID>
                  <Description>"Player Pointers"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>130608</ID>
                      <Description>"Current Health (Legit Max=1000)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>PlayerStats</Address>
                      <Offsets>
                        <Offset>C0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130609</ID>
                      <Description>"Max Health (Legit Max=1000)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>PlayerStats</Address>
                      <Offsets>
                        <Offset>C4</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130610</ID>
                      <Description>"Current Consciousness (Legit Max=1000)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>PlayerStats</Address>
                      <Offsets>
                        <Offset>DC</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130611</ID>
                      <Description>"Max Consciousness  (Legit Max=1000)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>PlayerStats</Address>
                      <Offsets>
                        <Offset>E8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130612</ID>
                      <Description>"Current Stamina (Legit Max=1000)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>PlayerStats</Address>
                      <Offsets>
                        <Offset>110</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132986</ID>
                      <Description>"Max Stamina (Legit Max=1000)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>PlayerStats</Address>
                      <Offsets>
                        <Offset>104</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130613</ID>
                      <Description>"Fatigue (0=No Fatigue, 10000=Full Fatigue)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>PlayerStats</Address>
                      <Offsets>
                        <Offset>130</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130614</ID>
                      <Description>"Endurance (Legit Max=1000)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>PlayerStats</Address>
                      <Offsets>
                        <Offset>140</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130615</ID>
                      <Description>"Current Boots Durability"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>PlayerStats</Address>
                      <Offsets>
                        <Offset>32C</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130616</ID>
                      <Description>"Max Boots Durability"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>PlayerStats</Address>
                      <Offsets>
                        <Offset>330</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130617</ID>
                      <Description>"Current Player Battery (Legit Max=1000)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>PlayerBattery</Address>
                      <Offsets>
                        <Offset>4810</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133297</ID>
                      <Description>"Max Player Battery (Legit Max=1000)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>PlayerBattery</Address>
                      <Offsets>
                        <Offset>4804</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130618</ID>
                      <Description>"BB Stress Bar (0=No Stress)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>BBStress</Address>
                      <Offsets>
                        <Offset>4334</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130502</ID>
                      <Description>"Current Blood Bag (Amount Stored)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>BloodBag</Address>
                      <Offsets>
                        <Offset>4838</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133518</ID>
                      <Description>"Max Blood Bag (Amount Stored)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>BloodBag</Address>
                      <Offsets>
                        <Offset>483C</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130572</ID>
                      <Description>"Current Weight Carried (Doesn't Change Items Weight)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>CurrentWeight</Address>
                      <Offsets>
                        <Offset>0C</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130445</ID>
                      <Description>"Base Max Carrying Weight Capacity [Base=120]"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>MaxWeight</Address>
                      <Offsets>
                        <Offset>C58</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130448</ID>
                      <Description>"Urination ml (Legit Max= 1000ml)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>Urination</Address>
                      <Offsets>
                        <Offset>484C</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130451</ID>
                      <Description>"Bridges Energy [Formerly Monster Drink] mL (Legit Max= 1000ml)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>BridgesEnergy</Address>
                      <Offsets>
                        <Offset>04</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>3604</ID>
                      <Description>"Cryptobiote's Stored in Backpack (Legit Max=999)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>2 Bytes</VariableType>
                      <Address>Cryptobiote</Address>
                      <Offsets>
                        <Offset>0</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>3605</ID>
                          <Description>"D-Cryptobiote's Stored in Backpack (Legit Max=999)"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>2 Bytes</VariableType>
                          <Address>Cryptobiote</Address>
                          <Offsets>
                            <Offset>48</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132692</ID>
                      <Description>"Player Suit Condition [Rust] (Legit Max=5000)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>PlayerSuit</Address>
                      <Offsets>
                        <Offset>358</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>132694</ID>
                          <Description>"Optional Backpack Cover Condition [Rust]"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>PlayerSuit</Address>
                          <Offsets>
                            <Offset>47A8</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>3609</ID>
                      <Description>"Current Chiral Crystals In Backpack"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>ChiralCrystalsInBackpack</Address>
                      <Offsets>
                        <Offset>0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132984</ID>
                      <Description>"Max Chiral Crystals In Backpack"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>ChiralCrystalsInBackpack</Address>
                      <Offsets>
                        <Offset>4</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133246</ID>
                      <Description>"Sandalweed in Backpack"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>2 Bytes</VariableType>
                      <Address>Sandalweed</Address>
                      <Offsets>
                        <Offset>0</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>132779</ID>
                  <Description>"Weapon &amp; Ammo Pointers"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>130619</ID>
                      <Description>"Current Ammo (Shoot Current Weapon to Update)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>2 Bytes</VariableType>
                      <Address>CurrentAmmo</Address>
                      <Offsets>
                        <Offset>0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130584</ID>
                      <Description>"[Current] Max Ammo (Empty a Ammo Magazine [By Reloading] to Update Pointer)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>2 Bytes</VariableType>
                      <Address>MaxAmmo</Address>
                      <Offsets>
                        <Offset>0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132780</ID>
                      <Description>"Machine Gun Timer [Random machine gun, just to get an address]"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>MachineGun</Address>
                      <Offsets>
                        <Offset>50</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>132714</ID>
                  <Description>"Vehicle Pointers"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>130403</ID>
                      <Description>"Current Vehicle Current Battery"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>VehicleBattery</Address>
                      <Offsets>
                        <Offset>8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130406</ID>
                      <Description>"Current Vehicle Max Battery"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>VehicleBattery</Address>
                      <Offsets>
                        <Offset>C</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130389</ID>
                      <Description>"Current Vehicle Current Durability"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>VehicleDurability</Address>
                      <Offsets>
                        <Offset>6E8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130400</ID>
                      <Description>"Current Vehicle Maximum Durability"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>VehicleDurability</Address>
                      <Offsets>
                        <Offset>6EC</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132722</ID>
                      <Description>"Current Vehicle Physical Condition (Rust) (0-1, 1=No Rust)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>VehiclePhysicalCondition</Address>
                      <Offsets>
                        <Offset>84</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>130620</ID>
                  <Description>"Teleport Pointers - Coordinates"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>130621</ID>
                      <Description>"Player Coordinates"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>130622</ID>
                          <Description>"X Coordinate"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>PlayerCoordinates</Address>
                          <Offsets>
                            <Offset>80</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>130623</ID>
                          <Description>"Y Coordinate"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>PlayerCoordinates</Address>
                          <Offsets>
                            <Offset>84</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>130624</ID>
                          <Description>"Z Coordinate"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>PlayerCoordinates</Address>
                          <Offsets>
                            <Offset>88</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130625</ID>
                      <Description>"Vehicle Coordinates (Must be in Vehicle to Prevent Teleporting Other Vehicles)"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>130626</ID>
                          <Description>"X Coordinate (Moving Position)"</Description>
                          <Options moRecursiveSetValue="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Double</VariableType>
                          <Address>VehicleCoordinates</Address>
                          <Offsets>
                            <Offset>C8</Offset>
                          </Offsets>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>130627</ID>
                              <Description>"X Coordinate (Original Position)"</Description>
                              <Options moRecursiveSetValue="1"/>
                              <ShowAsSigned>0</ShowAsSigned>
                              <VariableType>Double</VariableType>
                              <Address>VehicleCoordinates</Address>
                              <Offsets>
                                <Offset>8F8</Offset>
                              </Offsets>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>130628</ID>
                          <Description>"Y Coordinate (Moving Position)"</Description>
                          <Options moRecursiveSetValue="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Double</VariableType>
                          <Address>VehicleCoordinates</Address>
                          <Offsets>
                            <Offset>D0</Offset>
                          </Offsets>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>130629</ID>
                              <Description>"Y Coordinate (Original Position)"</Description>
                              <Options moRecursiveSetValue="1"/>
                              <ShowAsSigned>0</ShowAsSigned>
                              <VariableType>Double</VariableType>
                              <Address>VehicleCoordinates</Address>
                              <Offsets>
                                <Offset>900</Offset>
                              </Offsets>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>130630</ID>
                          <Description>"Z Coordinate (Moving Position)"</Description>
                          <Options moRecursiveSetValue="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Double</VariableType>
                          <Address>VehicleCoordinates</Address>
                          <Offsets>
                            <Offset>D8</Offset>
                          </Offsets>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>130631</ID>
                              <Description>"Z Coordinate (Original Position)"</Description>
                              <Options moRecursiveSetValue="1"/>
                              <ShowAsSigned>0</ShowAsSigned>
                              <VariableType>Double</VariableType>
                              <Address>VehicleCoordinates</Address>
                              <Offsets>
                                <Offset>908</Offset>
                              </Offsets>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130385</ID>
                      <Description>"Waypoint Coordinates (Last Created)"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>3542</ID>
                          <Description>"X Coordinate"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>WaypointCoordinates</Address>
                          <Offsets>
                            <Offset>10</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>3543</ID>
                          <Description>"Y Coordinate"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>WaypointCoordinates</Address>
                          <Offsets>
                            <Offset>14</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>3544</ID>
                          <Description>"Z Coordinate"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>WaypointCoordinates</Address>
                          <Offsets>
                            <Offset>18</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130384</ID>
                      <Description>"Carrier Coordinates (Last Attached)"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>3555</ID>
                          <Description>"X Coordinate"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Double</VariableType>
                          <Address>CarrierCoordinates</Address>
                          <Offsets>
                            <Offset>C8</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>3556</ID>
                          <Description>"Y Coordinate"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Double</VariableType>
                          <Address>CarrierCoordinates</Address>
                          <Offsets>
                            <Offset>D0</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>3557</ID>
                          <Description>"Z Coordinate"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Double</VariableType>
                          <Address>CarrierCoordinates</Address>
                          <Offsets>
                            <Offset>D8</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>132704</ID>
                  <Description>"Materials/Facilities/Structures Related"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>132703</ID>
                      <Description>"[Facility Materials] Pointer - Per Location"</Description>
                      <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                      <VariableType>4 Bytes</VariableType>
                      <Address>"ds.exe"+079A10F0</Address>
                      <Offsets>
                        <Offset>1168</Offset>
                        <Offset>50</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1332</ID>
                          <Description>"Capitol Knot City - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1138</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1530</ID>
                          <Description>"Capitol Knot City - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1130</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1529</ID>
                          <Description>"Capitol Knot City - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1128</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1528</ID>
                          <Description>"Capitol Knot City - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1120</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1527</ID>
                          <Description>"Capitol Knot City - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1118</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1526</ID>
                          <Description>"Capitol Knot City - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1110</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1525</ID>
                          <Description>"Chiral Artist's Studio - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-A18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1333</ID>
                          <Description>"Chiral Artist's Studio - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-A10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1334</ID>
                          <Description>"Chiral Artist's Studio - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-A08</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1335</ID>
                          <Description>"Chiral Artist's Studio - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-A00</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1336</ID>
                          <Description>"Chiral Artist's Studio - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-9F8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1337</ID>
                          <Description>"Chiral Artist's Studio - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-9F0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1339</ID>
                          <Description>"Collector - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-130</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1340</ID>
                          <Description>"Collector - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-128</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1341</ID>
                          <Description>"Collector - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-120</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1342</ID>
                          <Description>"Collector - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-118</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1343</ID>
                          <Description>"Collector - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-110</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1344</ID>
                          <Description>"Collector - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-108</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1346</ID>
                          <Description>"Cosplayer - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-260</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1347</ID>
                          <Description>"Cosplayer - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-258</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1348</ID>
                          <Description>"Cosplayer - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-250</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1349</ID>
                          <Description>"Cosplayer - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-248</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1350</ID>
                          <Description>"Cosplayer - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-240</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1351</ID>
                          <Description>"Cosplayer - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-238</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1318</ID>
                          <Description>"Craftsman - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-BE0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1319</ID>
                          <Description>"Craftsman - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-BD8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1320</ID>
                          <Description>"Craftsman - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-BD0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1321</ID>
                          <Description>"Craftsman - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-BC8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1322</ID>
                          <Description>"Craftsman - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-BC0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1323</ID>
                          <Description>"Craftsman - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-BB8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1510</ID>
                          <Description>"Distribution Center North of Edge Knot City - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+558</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1512</ID>
                          <Description>"Distribution Center North of Edge Knot City - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+560</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1513</ID>
                          <Description>"Distribution Center North of Edge Knot City - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+568</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1514</ID>
                          <Description>"Distribution Center North of Edge Knot City - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+570</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1515</ID>
                          <Description>"Distribution Center North of Edge Knot City - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+578</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1516</ID>
                          <Description>"Distribution Center North of Edge Knot City - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+580</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1352</ID>
                          <Description>"Distribution Center North of Mountain Knot City - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+2F8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1353</ID>
                          <Description>"Distribution Center North of Mountain Knot City - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+300</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1354</ID>
                          <Description>"Distribution Center North of Mountain Knot City - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+308</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1355</ID>
                          <Description>"Distribution Center North of Mountain Knot City - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+310</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1356</ID>
                          <Description>"Distribution Center North of Mountain Knot City - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+318</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1357</ID>
                          <Description>"Distribution Center North of Mountain Knot City - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+320</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1358</ID>
                          <Description>"Distribution Center South of Lake Knot City - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+98</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1360</ID>
                          <Description>"Distribution Center South of Lake Knot City - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+A0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1361</ID>
                          <Description>"Distribution Center South of Lake Knot City - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+A8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1362</ID>
                          <Description>"Distribution Center South of Lake Knot City - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+B0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1363</ID>
                          <Description>"Distribution Center South of Lake Knot City - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+B8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1364</ID>
                          <Description>"Distribution Center South of Lake Knot City - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+C0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1531</ID>
                          <Description>"Distribution Center West of Capital Knot City - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1008</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1533</ID>
                          <Description>"Distribution Center West of Capital Knot City - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1000</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1534</ID>
                          <Description>"Distribution Center West of Capital Knot City - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-FF8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1535</ID>
                          <Description>"Distribution Center West of Capital Knot City - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-FF0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1536</ID>
                          <Description>"Distribution Center West of Capital Knot City - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-FE8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1537</ID>
                          <Description>"Distribution Center West of Capital Knot City - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-FE0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1366</ID>
                          <Description>"Doctor - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-688</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1367</ID>
                          <Description>"Doctor - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-680</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1368</ID>
                          <Description>"Doctor - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-678</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1369</ID>
                          <Description>"Doctor - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-670</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1370</ID>
                          <Description>"Doctor - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-668</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1371</ID>
                          <Description>"Doctor - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-660</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1517</ID>
                          <Description>"Edge Knot City - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+5F0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1519</ID>
                          <Description>"Edge Knot City - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+5F8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1520</ID>
                          <Description>"Edge Knot City - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+600</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1521</ID>
                          <Description>"Edge Knot City - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+608</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1522</ID>
                          <Description>"Edge Knot City - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+610</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1523</ID>
                          <Description>"Edge Knot City - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+618</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1325</ID>
                          <Description>"Elder - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-C78</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1326</ID>
                          <Description>"Elder - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-C70</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1327</ID>
                          <Description>"Elder - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-C68</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1328</ID>
                          <Description>"Elder - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-C60</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1329</ID>
                          <Description>"Elder - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-C58</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1330</ID>
                          <Description>"Elder - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-C50</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1312</ID>
                          <Description>"Engineer - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-D10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1313</ID>
                          <Description>"Engineer - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-D08</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1314</ID>
                          <Description>"Engineer - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-D00</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1315</ID>
                          <Description>"Engineer - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-CF8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1316</ID>
                          <Description>"Engineer - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-CF0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>3663</ID>
                          <Description>"Engineer - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-CE8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1372</ID>
                          <Description>"Evo-devo Biologist - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-428</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1374</ID>
                          <Description>"Evo-devo Biologist - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-420</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1375</ID>
                          <Description>"Evo-devo Biologist - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-418</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1376</ID>
                          <Description>"Evo-devo Biologist - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-410</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1377</ID>
                          <Description>"Evo-devo Biologist - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-408</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1378</ID>
                          <Description>"Evo-devo Biologist - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-400</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1380</ID>
                          <Description>"Film Director - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-2F8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1381</ID>
                          <Description>"Film Director - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-2F0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1382</ID>
                          <Description>"Film Director - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-2E8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1383</ID>
                          <Description>"Film Director - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-2E0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1384</ID>
                          <Description>"Film Director - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-2D8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1385</ID>
                          <Description>"Film Director - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-2D0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1386</ID>
                          <Description>"First Prepper - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1C8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1388</ID>
                          <Description>"First Prepper - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1C0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1389</ID>
                          <Description>"First Prepper - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1B8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1390</ID>
                          <Description>"First Prepper - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1B0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1391</ID>
                          <Description>"First Prepper - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1A8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1392</ID>
                          <Description>"First Prepper - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1A0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1394</ID>
                          <Description>"Geologist - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-5F0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1395</ID>
                          <Description>"Geologist - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-5E8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1396</ID>
                          <Description>"Geologist - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-5E0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1397</ID>
                          <Description>"Geologist - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-5D8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1399</ID>
                          <Description>"Geologist - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-5D0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1398</ID>
                          <Description>"Geologist - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-5C8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1401</ID>
                          <Description>"Heartman's Lab - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+428</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1402</ID>
                          <Description>"Heartman's Lab - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+430</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1403</ID>
                          <Description>"Heartman's Lab - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+438</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1404</ID>
                          <Description>"Heartman's Lab - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+440</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1405</ID>
                          <Description>"Heartman's Lab - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+448</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1406</ID>
                          <Description>"Heartman's Lab - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+450</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1407</ID>
                          <Description>"Junk Dealer - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-AB0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1409</ID>
                          <Description>"Junk Dealer - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-AA8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1410</ID>
                          <Description>"Junk Dealer - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-AA0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1411</ID>
                          <Description>"Junk Dealer - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-A98</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1412</ID>
                          <Description>"Junk Dealer - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-A90</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1413</ID>
                          <Description>"Junk Dealer - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-A88</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1297</ID>
                          <Description>"Lake Knot City - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1309</ID>
                          <Description>"Lake Knot City - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1302</ID>
                          <Description>"Lake Knot City - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1303</ID>
                          <Description>"Lake Knot City - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1304</ID>
                          <Description>"Lake Knot City - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1306</ID>
                          <Description>"Lake Knot City - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1539</ID>
                          <Description>"Ludens Fan - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-E40</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1540</ID>
                          <Description>"Ludens Fan - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-E38</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1541</ID>
                          <Description>"Ludens Fan - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-E30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1542</ID>
                          <Description>"Ludens Fan - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-E28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1543</ID>
                          <Description>"Ludens Fan - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-E20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1544</ID>
                          <Description>"Ludens Fan - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-E18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1415</ID>
                          <Description>"Mama's Lab - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+260</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1416</ID>
                          <Description>"Mama's Lab - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+268</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1417</ID>
                          <Description>"Mama's Lab - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+270</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1418</ID>
                          <Description>"Mama's Lab - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+278</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1419</ID>
                          <Description>"Mama's Lab - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+280</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1420</ID>
                          <Description>"Mama's Lab - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+288</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1421</ID>
                          <Description>"Mountain Knot City - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+390</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1423</ID>
                          <Description>"Mountain Knot City - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+398</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1424</ID>
                          <Description>"Mountain Knot City - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+3A0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1425</ID>
                          <Description>"Mountain Knot City - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+3A8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1426</ID>
                          <Description>"Mountain Knot City - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+3B0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1427</ID>
                          <Description>"Mountain Knot City - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+3B8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1428</ID>
                          <Description>"Mountaineer - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-850</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1430</ID>
                          <Description>"Mountaineer - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-848</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1431</ID>
                          <Description>"Mountaineer - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-840</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1432</ID>
                          <Description>"Mountaineer - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-838</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1433</ID>
                          <Description>"Mountaineer - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-830</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1434</ID>
                          <Description>"Mountaineer - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-828</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1545</ID>
                          <Description>"Musician - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-DA8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1547</ID>
                          <Description>"Musician - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-DA0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1548</ID>
                          <Description>"Musician - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-D98</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1549</ID>
                          <Description>"Musician - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-D90</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1550</ID>
                          <Description>"Musician - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-D88</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1551</ID>
                          <Description>"Musician - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-D80</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1435</ID>
                          <Description>"Novelists's Son - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-98</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1437</ID>
                          <Description>"Novelists's Son - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-90</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1438</ID>
                          <Description>"Novelists's Son - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-88</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1439</ID>
                          <Description>"Novelists's Son - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-80</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1440</ID>
                          <Description>"Novelists's Son - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-78</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1441</ID>
                          <Description>"Novelists's Son - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-70</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1442</ID>
                          <Description>"Paleontologist - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-558</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1443</ID>
                          <Description>"Paleontologist - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-550</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1444</ID>
                          <Description>"Paleontologist - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-548</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1445</ID>
                          <Description>"Paleontologist - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-540</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1446</ID>
                          <Description>"Paleontologist - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-538</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1447</ID>
                          <Description>"Paleontologist - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-530</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1449</ID>
                          <Description>"Peter Englert - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-390</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1450</ID>
                          <Description>"Peter Englert - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-388</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1451</ID>
                          <Description>"Peter Englert - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-380</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1452</ID>
                          <Description>"Peter Englert - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-378</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1453</ID>
                          <Description>"Peter Englert - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-370</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1454</ID>
                          <Description>"Peter Englert - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-368</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1455</ID>
                          <Description>"Photographer - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-7B8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1456</ID>
                          <Description>"Photographer -  Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-7B0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1457</ID>
                          <Description>"Photographer - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-7A8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1458</ID>
                          <Description>"Photographer - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-7A0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1459</ID>
                          <Description>"Photographer - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-798</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1460</ID>
                          <Description>"Photographer - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-790</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1553</ID>
                          <Description>"Port Knot City - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-ED8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1554</ID>
                          <Description>"Port Knot City - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-ED0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1555</ID>
                          <Description>"Port Knot City - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-EC8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1556</ID>
                          <Description>"Port Knot City - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-EC0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1557</ID>
                          <Description>"Port Knot City - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-EB8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1558</ID>
                          <Description>"Port Knot City - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-EB0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1461</ID>
                          <Description>"Roboticist - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-8E8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1463</ID>
                          <Description>"Roboticist - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-8E0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1464</ID>
                          <Description>"Roboticist - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-8D8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1465</ID>
                          <Description>"Roboticist - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-8D0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1466</ID>
                          <Description>"Roboticist - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-8C8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1467</ID>
                          <Description>"Roboticist - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-8C0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1468</ID>
                          <Description>"South Knot City - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+1C8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1470</ID>
                          <Description>"South Knot City - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+1D0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1471</ID>
                          <Description>"South Knot City - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+1D8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1472</ID>
                          <Description>"South Knot City - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+1E0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1473</ID>
                          <Description>"South Knot City - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+1E8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1474</ID>
                          <Description>"South Knot City - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+1F0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1475</ID>
                          <Description>"Spiritualist - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-720</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1476</ID>
                          <Description>"Spiritualist - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-718</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1477</ID>
                          <Description>"Spiritualist - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-710</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1478</ID>
                          <Description>"Spiritualist - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-708</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1479</ID>
                          <Description>"Spiritualist - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-700</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1480</ID>
                          <Description>"Spiritualist - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-6F8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1481</ID>
                          <Description>"Timefall Farm - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-B48</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1483</ID>
                          <Description>"Timefall Farm - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-B40</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1484</ID>
                          <Description>"Timefall Farm - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-B38</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1485</ID>
                          <Description>"Timefall Farm - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-B30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1486</ID>
                          <Description>"Timefall Farm - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-B28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1487</ID>
                          <Description>"Timefall Farm - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-B20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1488</ID>
                          <Description>"Veteran Porter - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-4C0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1490</ID>
                          <Description>"Veteran Porter - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-4B8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1491</ID>
                          <Description>"Veteran Porter - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-4B0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1492</ID>
                          <Description>"Veteran Porter - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-4A8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1493</ID>
                          <Description>"Veteran Porter - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-4A0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1494</ID>
                          <Description>"Veteran Porter - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-498</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1495</ID>
                          <Description>"Waystation North of Mountain Knot City - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-980</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1498</ID>
                          <Description>"Waystation North of Mountain Knot City - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-978</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1499</ID>
                          <Description>"Waystation North of Mountain Knot City - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-970</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1500</ID>
                          <Description>"Waystation North of Mountain Knot City - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-968</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1501</ID>
                          <Description>"Waystation North of Mountain Knot City - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-960</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1502</ID>
                          <Description>"Waystation North of Mountain Knot City - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-958</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1560</ID>
                          <Description>"Waystation West of Capital Knot City - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-10A0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1561</ID>
                          <Description>"Waystation West of Capital Knot City - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1098</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1562</ID>
                          <Description>"Waystation West of Capital Knot City - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1090</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1563</ID>
                          <Description>"Waystation West of Capital Knot City - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1088</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1564</ID>
                          <Description>"Waystation West of Capital Knot City - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1080</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1565</ID>
                          <Description>"Waystation West of Capital Knot City - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-1078</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1503</ID>
                          <Description>"Weather Station - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+130</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1505</ID>
                          <Description>"Weather Station - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+138</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1506</ID>
                          <Description>"Weather Station - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+140</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1507</ID>
                          <Description>"Weather Station - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+148</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1508</ID>
                          <Description>"Weather Station - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+150</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1509</ID>
                          <Description>"Weather Station - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+158</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1567</ID>
                          <Description>"Wind Farm - Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-F70</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1568</ID>
                          <Description>"Wind Farm - Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-F68</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1569</ID>
                          <Description>"Wind Farm - Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-F60</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1570</ID>
                          <Description>"Wind Farm - Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-F58</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1571</ID>
                          <Description>"Wind Farm - Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-F50</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1572</ID>
                          <Description>"Wind Farm - Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-F48</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133452</ID>
                      <Description>"[Facility Materials] AOB - Any Facility &amp; Preppers [Open Terminal &amp; It Will Update Addresses]"</Description>
                      <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>133453</ID>
                          <Description>"Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>FacilityChiralCrystals</Address>
                          <Offsets>
                            <Offset>-28</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>133454</ID>
                          <Description>"Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>FacilityChiralCrystals</Address>
                          <Offsets>
                            <Offset>-20</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>133455</ID>
                          <Description>"Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>FacilityChiralCrystals</Address>
                          <Offsets>
                            <Offset>-18</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>133456</ID>
                          <Description>"Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>FacilityChiralCrystals</Address>
                          <Offsets>
                            <Offset>-10</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>133457</ID>
                          <Description>"Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>FacilityChiralCrystals</Address>
                          <Offsets>
                            <Offset>-8</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>133458</ID>
                          <Description>"Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>FacilityChiralCrystals</Address>
                          <Offsets>
                            <Offset>0</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130457</ID>
                      <Description>"[Safe House Materials] AOB - Any PCC Terminal [Open Terminal &amp; It Will Update Addresses]"</Description>
                      <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>4073</ID>
                          <Description>"Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>PCCStructureFacilityMaterials</Address>
                          <Offsets>
                            <Offset>0</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>4074</ID>
                          <Description>"Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>PCCStructureFacilityMaterials</Address>
                          <Offsets>
                            <Offset>4</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>4075</ID>
                          <Description>"Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>PCCStructureFacilityMaterials</Address>
                          <Offsets>
                            <Offset>8</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>4076</ID>
                          <Description>"Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>PCCStructureFacilityMaterials</Address>
                          <Offsets>
                            <Offset>C</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>4077</ID>
                          <Description>"Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>PCCStructureFacilityMaterials</Address>
                          <Offsets>
                            <Offset>10</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>4078</ID>
                          <Description>"Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>PCCStructureFacilityMaterials</Address>
                          <Offsets>
                            <Offset>14</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132868</ID>
                      <Description>"Current Structure - Amount of Materials Already Used By You"</Description>
                      <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>132908</ID>
                          <Description>"You still need at least one material required to upgrade structure"</Description>
                          <Color>0000FF</Color>
                          <GroupHeader>1</GroupHeader>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>132869</ID>
                          <Description>"Chiral Crystals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>2 Bytes</VariableType>
                          <Address>AutoPaverMaterials</Address>
                          <Offsets>
                            <Offset>210</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>132902</ID>
                          <Description>"Resins"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>2 Bytes</VariableType>
                          <Address>AutoPaverMaterials</Address>
                          <Offsets>
                            <Offset>214</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>132870</ID>
                          <Description>"Metals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>2 Bytes</VariableType>
                          <Address>AutoPaverMaterials</Address>
                          <Offsets>
                            <Offset>218</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>132871</ID>
                          <Description>"Ceramics"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>2 Bytes</VariableType>
                          <Address>AutoPaverMaterials</Address>
                          <Offsets>
                            <Offset>21C</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>132903</ID>
                          <Description>"Chemicals"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>2 Bytes</VariableType>
                          <Address>AutoPaverMaterials</Address>
                          <Offsets>
                            <Offset>220</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>132904</ID>
                          <Description>"Special Alloys"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>2 Bytes</VariableType>
                          <Address>AutoPaverMaterials</Address>
                          <Offsets>
                            <Offset>224</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133299</ID>
                      <Description>"Current Structure Type"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Byte</VariableType>
                      <Address>CurrentStructureDurability</Address>
                      <Offsets>
                        <Offset>35</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133298</ID>
                      <Description>"Current Structure Level (resets on reload)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Byte</VariableType>
                      <Address>CurrentStructureDurability</Address>
                      <Offsets>
                        <Offset>84</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132907</ID>
                      <Description>"Current Structure Durability"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>CurrentStructureDurability</Address>
                      <Offsets>
                        <Offset>D8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132935</ID>
                      <Description>"Amount of Time for Current Structure to Build"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>StructureBuildTimer</Address>
                      <Offsets>
                        <Offset>D8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132947</ID>
                      <Description>"Road Durability (Random Address, just to grab one for instructions)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>0000FF</Color>
                      <VariableType>Float</VariableType>
                      <Address>RoadDurability</Address>
                      <Offsets>
                        <Offset>0C</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>132752</ID>
                  <Description>"Timer"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>132753</ID>
                      <Description>"Current Time for Urgent Standard Order (Value In Seconds Going Upwards)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Double</VariableType>
                      <Address>CurrentTimeStandardOrders</Address>
                      <Offsets>
                        <Offset>38</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130529</ID>
                      <Description>"Max Time For Urgent Standard Mission (Value in Seconds)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>MaxTimeStandardOrders</Address>
                      <Offsets>
                        <Offset>14</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>132763</ID>
                  <Description>"Likes [Open Cuff Links "Map" &amp; It Will Update Addresses]"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>132764</ID>
                      <Description>"Likes Received (NPCs)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>8 Bytes</VariableType>
                      <Address>Likes</Address>
                      <Offsets>
                        <Offset>18</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132765</ID>
                      <Description>"Likes Received (Other Players) - Delivery Stats Menu"</Description>
                      <Options moRecursiveSetValue="1" moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>8 Bytes</VariableType>
                      <Address>Likes</Address>
                      <Offsets>
                        <Offset>20</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>132767</ID>
                          <Description>"Total Likes from Other Players - Social (Other Players) Menu"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>8 Bytes</VariableType>
                          <Address>Likes</Address>
                          <Offsets>
                            <Offset>60</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132766</ID>
                      <Description>"Total Likes Given to Other Players"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>8 Bytes</VariableType>
                      <Address>Likes</Address>
                      <Offsets>
                        <Offset>68</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>132777</ID>
                  <Description>"Boss/Enemy Addresses"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>130569</ID>
                      <Description>"MULE Non-Lethal Current Health [Last Attacked Using Non-Lethal Ammo]"</Description>
                      <Options moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>MULEsNonLethalHealth2</Address>
                      <Offsets>
                        <Offset>0</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>132825</ID>
                          <Description>"MULE Non-Lethal Max Health [Last Attacked Using Non-Lethal Ammo]"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>MULEsNonLethalHealth2</Address>
                          <Offsets>
                            <Offset>-10</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>132827</ID>
                          <Description>"MULE Lethal Current Health [Last Attacked Using Non-Lethal Ammo]"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>MULEsNonLethalHealth2</Address>
                          <Offsets>
                            <Offset>-4</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>132828</ID>
                          <Description>"MULE Lethal Max Health [Last Attacked Using Non-Lethal Ammo]"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>MULEsNonLethalHealth2</Address>
                          <Offsets>
                            <Offset>-14</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130559</ID>
                      <Description>"MULE Lethal Current Health [Last Attacked Using Lethal Ammo]"</Description>
                      <Options moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>MULEsLethalHealth2</Address>
                      <Offsets>
                        <Offset>1EC</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>132829</ID>
                          <Description>"MULE Lethal Max Health [Last Attacked Using Lethal Ammo]"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>MULEsLethalHealth2</Address>
                          <Offsets>
                            <Offset>1DC</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>132831</ID>
                          <Description>"MULE Non-Lethal Current Health [Last Attacked Using Lethal Ammo]"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>MULEsLethalHealth2</Address>
                          <Offsets>
                            <Offset>1F0</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>132832</ID>
                          <Description>"MULE Non-Lethal Max Health [Last Attacked Using Lethal Ammo]"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>MULEsLethalHealth2</Address>
                          <Offsets>
                            <Offset>1E0</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132783</ID>
                      <Description>"MULE Current Ammo [Random MULE, just to get an address]"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>2 Bytes</VariableType>
                      <Address>EnemyAmmo</Address>
                      <Offsets>
                        <Offset>0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130472</ID>
                      <Description>"BT Current Health - All Except Order 64 Boss BT [Last Attacked BT]"</Description>
                      <Options moManualExpandCollapse="1"/>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>BTHealth</Address>
                      <Offsets>
                        <Offset>13C</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>132794</ID>
                          <Description>"BT Max Health - All Except Order 64 Boss BT [Last Attacked BT]"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>BTHealth</Address>
                          <Offsets>
                            <Offset>138</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130471</ID>
                      <Description>"Episode 9 - Order 64 - BT Boss Current Health"</Description>
                      <Options moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>Order64_BossHP</Address>
                      <Offsets>
                        <Offset>130</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>132813</ID>
                          <Description>"Episode 9 - Order 64 - BT Boss Max Health"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>Order64_BossHP</Address>
                          <Offsets>
                            <Offset>134</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130470</ID>
                      <Description>"Episode 9 - Order 65 Phase 1 [Shootout &amp; Hand-to-Hand] - Boss Current Health"</Description>
                      <Options moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>Order65BossHealthPhase1</Address>
                      <Offsets>
                        <Offset>158</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>132838</ID>
                          <Description>"Episode 9 - Order 65 Phase 1  [Shootout] - Higgs Max Health"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>Order65BossHealthPhase1</Address>
                          <Offsets>
                            <Offset>160</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>132839</ID>
                          <Description>"Episode 9 - Order 65 Phase 1 [Hand-to-Hand] - Higgs Max Health"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>Order65BossHealthPhase1</Address>
                          <Offsets>
                            <Offset>164</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130508</ID>
                      <Description>"Episode 9 - Order 65 Phase 2 [Punch Out] - Boss Current Health"</Description>
                      <Options moRecursiveSetValue="1" moManualExpandCollapse="1"/>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>Order65Punchout_HiggsHealth</Address>
                      <Offsets>
                        <Offset>158</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>132843</ID>
                          <Description>"Episode 9 - Order 65 Phase 2 [Punch Out] - Higgs Max Health"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>Order65Punchout_HiggsHealth</Address>
                          <Offsets>
                            <Offset>168</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130468</ID>
                      <Description>"Episode 9 - Order 65 Phase 2 [Punch Out] - Boss Current Health"</Description>
                      <Options moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>Order65_PlayerHealth_PunchOut</Address>
                      <Offsets>
                        <Offset>DC</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>132840</ID>
                          <Description>"Episode 9 - Order 65 Phase 2 [Punch Out] - Player Max Health"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>Order65_PlayerHealth_PunchOut</Address>
                          <Offsets>
                            <Offset>E4</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>130466</ID>
                          <Description>"Episode 9 - Order 65 Phase 2 [Punch Out] - Player Current Stamina - [Have to Lock]"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>Order65_PlayerStamina_PunchOut</Address>
                          <Offsets>
                            <Offset>0</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133516</ID>
                      <Description>"Cliff Unger Health"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>2 Bytes</VariableType>
                      <Address>CliffUngerHealth</Address>
                      <Offsets>
                        <Offset>160</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>132972</ID>
                  <Description>"Currently Selected Cargo Editor"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>133257</ID>
                      <Description>"SlotID"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>8 Bytes</VariableType>
                      <Address>SlotID</Address>
                      <Offsets>
                        <Offset>28</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133496</ID>
                      <Description>"ItemID"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>8 Bytes</VariableType>
                      <Address>ItemID</Address>
                      <Offsets>
                        <Offset>28</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133256</ID>
                      <Description>"Type"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Byte</VariableType>
                      <Address>ItemID</Address>
                      <Offsets>
                        <Offset>3D</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132971</ID>
                      <Description>"Size [0-3] 0=Small"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Byte</VariableType>
                      <Address>ItemID</Address>
                      <Offsets>
                        <Offset>3E</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132973</ID>
                      <Description>"Weight"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>ItemID</Address>
                      <Offsets>
                        <Offset>50</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132976</ID>
                      <Description>"Current Cargo Damage"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>SlotID</Address>
                      <Offsets>
                        <Offset>34</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132974</ID>
                      <Description>"Max Cargo Damage"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>ItemID</Address>
                      <Offsets>
                        <Offset>5C</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132977</ID>
                      <Description>"Current Cargo Container Damage"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>SlotID</Address>
                      <Offsets>
                        <Offset>30</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132975</ID>
                      <Description>"Max Container Damage"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>ItemID</Address>
                      <Offsets>
                        <Offset>58</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132980</ID>
                      <Description>"Current Ammo"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>2 Bytes</VariableType>
                      <Address>SlotID</Address>
                      <Offsets>
                        <Offset>108</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132979</ID>
                      <Description>"[Current] Max Ammo"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>2 Bytes</VariableType>
                      <Address>SlotID</Address>
                      <Offsets>
                        <Offset>10A</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132978</ID>
                      <Description>"[Max] Max Ammo"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>SlotID</Address>
                      <Offsets>
                        <Offset>100</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>133160</ID>
                  <Description>"Firing Range Pointers"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>133161</ID>
                      <Description>"Current Drill Time Remaining"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>DrillTrainingTimer</Address>
                      <Offsets>
                        <Offset>11C</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133171</ID>
                      <Description>"Current Drill Score"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>DrillTrainingTimer</Address>
                      <Offsets>
                        <Offset>364</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133261</ID>
                      <Description>"Current Targets Done - Visual Only"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>0000FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>DrillTargets</Address>
                      <Offsets>
                        <Offset>2C</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133264</ID>
                      <Description>"Current Targets Done (Alternate) - Visual Only"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>0000FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>DrillTargets</Address>
                      <Offsets>
                        <Offset>38</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133272</ID>
                      <Description>"Total Targets Needed - Visual Only"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>0000FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>DrillTargets</Address>
                      <Offsets>
                        <Offset>24</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133262</ID>
                      <Description>"Total Targets Needed (Alternate) - Visual Only"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>0000FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>DrillTargets</Address>
                      <Offsets>
                        <Offset>28</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>133237</ID>
                  <Description>"Race Track Pointers"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>133289</ID>
                      <Description>"Race Track - Current Lap"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Byte</VariableType>
                      <Address>RaceTrack_CurrentLap</Address>
                      <Offsets>
                        <Offset>D4</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133238</ID>
                      <Description>"Race Track Total Time - Visual Only"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>0000FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>RaceTrackTotalTime</Address>
                      <Offsets>
                        <Offset>2B4</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133239</ID>
                      <Description>"Race Track Lap Time - Visual Only"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>0000FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>RaceTrackTotalTime</Address>
                      <Offsets>
                        <Offset>2BC</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>130632</ID>
              <Description>"Scripts"</Description>
              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>130633</ID>
                  <Description>"Player Stats Scripts"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>132833</ID>
                      <Description>"Infinite+Max = Health, Consciousness, Stamina, 0 Fatique, Endurance, 0 BB Stress &amp; Battery"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InfPlayerHealth:
  dd 1

flag_InfConsciousness:
  dd 1

flag_InfStamina:
  dd 1

flag_NoFatigue:
  dd 1

flag_InfEndurance:
  dd 1

flag_NoBBStress:
  dd 1

flag_InfPlayerBattery:
  dd 1

[DISABLE]
flag_InfPlayerHealth:
  dd 0

flag_InfConsciousness:
  dd 0

flag_InfStamina:
  dd 0

flag_NoFatigue:
  dd 0

flag_InfEndurance:
  dd 0

flag_NoBBStress:
  dd 0

flag_InfPlayerBattery:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130634</ID>
                      <Description>"Infinite+Max Health"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InfPlayerHealth:
  dd 1

[DISABLE]
flag_InfPlayerHealth:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130635</ID>
                      <Description>"Infinite+Max Consciousness"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InfConsciousness:
  dd 1

[DISABLE]
flag_InfConsciousness:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130636</ID>
                      <Description>"Infinite+Max Stamina"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InfStamina:
  dd 1

[DISABLE]
flag_InfStamina:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130637</ID>
                      <Description>"0 Fatigue"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_NoFatigue:
  dd 1

[DISABLE]
flag_NoFatigue:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130638</ID>
                      <Description>"Full Fatigue"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_FullFatigue:
  dd 1

[DISABLE]
flag_FullFatigue:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130639</ID>
                      <Description>"Infinite+Max Endurance"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InfEndurance:
  dd 1

[DISABLE]
flag_InfEndurance:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130640</ID>
                      <Description>"0 BB Stress"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_NoBBStress:
  dd 1

[DISABLE]
flag_NoBBStress:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133523</ID>
                      <Description>"Boots Durability set to Legit Max every 60 seconds (Stop the constant beeping) [change timer as desired]"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]

Badasstimer = createTimer()
Badasstimer.setInterval(60000)
Badasstimer.onTimer = function(Badass)

local modAddy = readFloat('[PlayerStats]+330')  -- We store the pointer of this address into local variable modAddy
 writeFloat('[PlayerStats]+32C',modAddy)          --  We write the pointer of modAddy to the pointer at this address

end

[DISABLE]

Badasstimer.destroy()
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130641</ID>
                      <Description>"Infinite Boots Durability [Set to Legitimate Max of Equipped Item]"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_MaxBootsDurability:
  dd 1

[DISABLE]
flag_MaxBootsDurability:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130642</ID>
                      <Description>"Infinite+Max Player Battery"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InfPlayerBattery:
  dd 1

[DISABLE]
flag_InfPlayerBattery:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130503</ID>
                      <Description>"Infinite Blood Bag (Legitimate Max)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InfBloodBag:
dd 1

[DISABLE]
flag_InfBloodBag:
dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130573</ID>
                      <Description>"0 Weight Carried [Prevents Shifting Weight] (Doesn't Change Items Weight)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_0CurrentWeight:
  dd 1

[DISABLE]
flag_0CurrentWeight:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130446</ID>
                      <Description>"Base Max Carrying Weight Capacity 5000 [it will reset when you reload save]"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InfMaxWeight:
  dd 1

[DISABLE]
flag_InfMaxWeight:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133310</ID>
                      <Description>"Don't Trip / Remain Balanced"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_DontTrip:
  dd 1

[DISABLE]
flag_DontTrip:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130449</ID>
                      <Description>"Urination (mL) to Full"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_MaxUrination:
  dd 1

[DISABLE]
flag_MaxUrination:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130450</ID>
                      <Description>"Urination (mL) to Empty"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_NoUrination:
  dd 1

[DISABLE]
flag_NoUrination:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130452</ID>
                      <Description>"Infinite+Max Bridges Energy [Formerly Monster Drink]"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InfBridgesEnergy:
  dd 1

[DISABLE]
flag_InfBridgesEnergy:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130453</ID>
                      <Description>"Infinite+Max(999) Cryptobiote's"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_MaxCryptobiote:
  dd 1

[DISABLE]
flag_MaxCryptobiote:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130454</ID>
                      <Description>"Infinite+Max(999) D-Cryptobiote's"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_MaxDCryptobiote:
  dd 1

[DISABLE]
flag_MaxDCryptobiote:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132693</ID>
                      <Description>"Clean Player Suit (Doesn't Remove Blood)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_CleanPlayerSuit:
  dd 1

[DISABLE]
flag_CleanPlayerSuit:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132696</ID>
                      <Description>"Clean Optional Backpack Cover"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_OptionalBackpackCoverClean:
  dd 1

[DISABLE]
flag_OptionalBackpackCoverClean:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132970</ID>
                      <Description>"Infinite+Max Chiral Crystals In Backpack"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_MaxChiralCrystalsInBackpack:
  dd 1

[DISABLE]
flag_MaxChiralCrystalsInBackpack:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133309</ID>
                      <Description>"Infinite+999 Sandalweed"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_Sandalweed999:
  dd 1

[DISABLE]
flag_Sandalweed999:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>0</ID>
                      <Description>""Invisible"/Enemies don't attack, part 1 [Note: MULEs scanner still goes off and they detect you, they just don't attack]"</Description>
                      <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{
  Game   : ds.exe
  Version:
  Date   : 2022-04-21
  Author : pc
  Update : SunBeam
}

[ENABLE]

aobscanmodule(InvisibilityAOB,ds.exe,C4 C1 7A 11 86 04 02 00 00 41) // should be unique
alloc(newmem,$1000,InvisibilityAOB)

label(code)
label(return)
label(hop)

newmem:
  mov [r14+204],4B18967F
  jmp short hop
code:
  vmovss [r14+204],xmm0
hop:
  jmp return

InvisibilityAOB:
  jmp newmem
  nop 4
return:
registersymbol(InvisibilityAOB)

[DISABLE]

InvisibilityAOB:
  db C4 C1 7A 11 86 04 02 00 00

unregistersymbol(InvisibilityAOB)
dealloc(newmem)
</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1</ID>
                          <Description>""Invisible"/Enemies don't attack, part 2 [Note: MULEs scanner still goes off and they detect you, they just don't attack]"</Description>
                          <VariableType>Auto Assembler Script</VariableType>
                          <AssemblerScript>{
  Game   : ds.exe
  Version:
  Date   : 2022-04-21
  Author : pc
  Update : SunBeam
}

[ENABLE]

aobscanmodule(Invisibility2AOB,ds.exe,83 BF 10 01 00 00 05 0F 85 8F) // should be unique
alloc(newmem,$1000,Invisibility2AOB)

label(code)
label(return)

newmem:
  mov [rdi+110],3
code:
  cmp dword ptr [rdi+110],5
  jmp return

Invisibility2AOB:
  jmp newmem
  nop 2
return:
registersymbol(Invisibility2AOB)

[DISABLE]

Invisibility2AOB:
  db 83 BF 10 01 00 00 05

unregistersymbol(Invisibility2AOB)
dealloc(newmem)
</AssemblerScript>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2</ID>
                      <Description>"Ignore Hits/Invulnerable"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{
  Game   : ds.exe
  Version:
  Date   : 2022-04-21
  Author : pc
  Update : SunBeam
}

[ENABLE]

aobscanmodule(IgnoreHitsAOB,ds.exe,84 C0 0F 84 51 04 00 00 8B 47) // should be unique
alloc(newmem,$1000,IgnoreHitsAOB)

label(code)
label(return)

newmem:
  xor al,al
code:
  test al,al
  je short @f
  jmp return
  @@:
  jmp ds.exe+271791A

IgnoreHitsAOB:
  jmp newmem
  nop 3
return:
registersymbol(IgnoreHitsAOB)

[DISABLE]

IgnoreHitsAOB:
  db 84 C0 0F 84 51 04 00 00

unregistersymbol(IgnoreHitsAOB)
dealloc(newmem)
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>132715</ID>
                  <Description>"Vehicle Scripts"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>130405</ID>
                      <Description>"Infinite Current Vehicle Battery"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InfVehicleBattery:
  dd 1

[DISABLE]
flag_InfVehicleBattery:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130390</ID>
                      <Description>"Infinite Current Vehicle Durability [Reactivate if you switch vehicles] (Recommended If Using Vehicle Teleporting Scripts)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InfiniteVehicleDurability:
  dd 1

[DISABLE]
flag_InfiniteVehicleDurability:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130402</ID>
                      <Description>"Clean Current Vehicle Physical Condition (Rust Removal)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InfVehiclePhysicalCondition:
  dd 1

[DISABLE]
flag_InfVehiclePhysicalCondition:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>130644</ID>
                  <Description>"Teleport Scripts - Locations"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>130645</ID>
                      <Description>"Facilities &amp; Prepper Locations"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>130646</ID>
                          <Description>"Player"</Description>
                          <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                          <GroupHeader>1</GroupHeader>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>130647</ID>
                              <Description>"Eastern Region"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>130648</ID>
                                  <Description>"Capital Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1432.995117)
writeFloat('[PlayerCoordinates]+84', 701.8141479)
writeFloat('[PlayerCoordinates]+88', 137.3023224)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130649</ID>
                                  <Description>"Distribution Center West of Capital Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -438.5249329)
writeFloat('[PlayerCoordinates]+84', 266.2165527)
writeFloat('[PlayerCoordinates]+88', 137.3740692)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130650</ID>
                                  <Description>"Incinerator West of Capital Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 547.2946777)
writeFloat('[PlayerCoordinates]+84', 360.9596252)
writeFloat('[PlayerCoordinates]+88', 237.9401093)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130651</ID>
                                  <Description>"Ludens Fan"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 101.4508591)
writeFloat('[PlayerCoordinates]+84', 539.0170288)
writeFloat('[PlayerCoordinates]+88', 207.0962372)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130652</ID>
                                  <Description>"Musician"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -980.53302)
writeFloat('[PlayerCoordinates]+84', -120.1126404)
writeFloat('[PlayerCoordinates]+88', 184.5494537)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130653</ID>
                                  <Description>"Port Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1986.126221)
writeFloat('[PlayerCoordinates]+84', -480.7706299)
writeFloat('[PlayerCoordinates]+88', 139.4775085)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>133021</ID>
                                  <Description>"Ruined Factory"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',343.82635498047) -- X Coord
writeFloat('[PlayerCoordinates]+84',592.18804931641) -- Y Coord
writeFloat('[PlayerCoordinates]+88',291.88571166992) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130654</ID>
                                  <Description>"Waystation West of Capital Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 313.767334)
writeFloat('[PlayerCoordinates]+84', 1160.296875)
writeFloat('[PlayerCoordinates]+88', 162.9519653)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130655</ID>
                                  <Description>"Wind Farm"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1490.662476)
writeFloat('[PlayerCoordinates]+84', 656.2297974)
writeFloat('[PlayerCoordinates]+88', 205.5592499)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>130656</ID>
                              <Description>"Central Region"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>130657</ID>
                                  <Description>"Aaron Hill's Safe House"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2634.5837402344)
writeFloat('[PlayerCoordinates]+84', -2039.8686523438)
writeFloat('[PlayerCoordinates]+88', 86.349998474121)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130658</ID>
                                  <Description>"Chiral Artist's Studio"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2152.3859863281)
writeFloat('[PlayerCoordinates]+84', -910.64288330078)
writeFloat('[PlayerCoordinates]+88', 156.43530273438)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130659</ID>
                                  <Description>"Collector"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1141.8942871094)
writeFloat('[PlayerCoordinates]+84', 29.015502929688)
writeFloat('[PlayerCoordinates]+88', 135.27490234375)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130660</ID>
                                  <Description>"Cosplayer"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 719.26995849609)
writeFloat('[PlayerCoordinates]+84', -663.93426513672)
writeFloat('[PlayerCoordinates]+88', 101.74416351318)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130661</ID>
                                  <Description>"Craftsman"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1226.0323486328)
writeFloat('[PlayerCoordinates]+84', 1317.2032470703)
writeFloat('[PlayerCoordinates]+88', 184.76554870605)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130662</ID>
                                  <Description>"Distribution Center North of Mountain Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130663</ID>
                                  <Description>"Distribution Center South of Lake Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130664</ID>
                                  <Description>"Doctor"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1427.6165771484)
writeFloat('[PlayerCoordinates]+84', 58.272735595703)
writeFloat('[PlayerCoordinates]+88', 360.59719848633)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130665</ID>
                                  <Description>"Elder"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1696.478515625)
writeFloat('[PlayerCoordinates]+84', 701.77563476563)
writeFloat('[PlayerCoordinates]+88', 245.24702453613)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130666</ID>
                                  <Description>"Engineer"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2191.7585449219)
writeFloat('[PlayerCoordinates]+84', 1189.8968505859)
writeFloat('[PlayerCoordinates]+88', 178.52680969238)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130667</ID>
                                  <Description>"Evo-devo Biologist"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1831.9169921875)
writeFloat('[PlayerCoordinates]+84', -705.4521484375)
writeFloat('[PlayerCoordinates]+88', 466.98864746094)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130668</ID>
                                  <Description>"Film Director"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2001.1428222656)
writeFloat('[PlayerCoordinates]+84', -24.001985549927)
writeFloat('[PlayerCoordinates]+88', 153.35623168945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130669</ID>
                                  <Description>"First Prepper"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130670</ID>
                                  <Description>"Geologist"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -898.26202392578)
writeFloat('[PlayerCoordinates]+84', -789.72894287109)
writeFloat('[PlayerCoordinates]+88', 625.56060791016)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130671</ID>
                                  <Description>"Heartman's Lab"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1214.4786376953)
writeFloat('[PlayerCoordinates]+84', -222.15846252441)
writeFloat('[PlayerCoordinates]+88', 532.83221435547)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130672</ID>
                                  <Description>"Incinerator West of Lake Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -322.81805419922)
writeFloat('[PlayerCoordinates]+84', 2191.2136230469)
writeFloat('[PlayerCoordinates]+88', 218.59948730469)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130673</ID>
                                  <Description>"Junk Dealer"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.9134521484)
writeFloat('[PlayerCoordinates]+84', -275.56985473633)
writeFloat('[PlayerCoordinates]+88', 136.38018798828)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130674</ID>
                                  <Description>"Lake Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130675</ID>
                                  <Description>"Mama's Lab"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1022.6657714844)
writeFloat('[PlayerCoordinates]+84', -982.8818359375)
writeFloat('[PlayerCoordinates]+88', 163.03210449219)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130676</ID>
                                  <Description>"Mountain Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130677</ID>
                                  <Description>"Mountaineer"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -921.78460693359)
writeFloat('[PlayerCoordinates]+84', 1063.0844726563)
writeFloat('[PlayerCoordinates]+88', 599.85607910156)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130678</ID>
                                  <Description>"Novelists's Son"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2441.5659179688)
writeFloat('[PlayerCoordinates]+84', 1291.0874023438)
writeFloat('[PlayerCoordinates]+88', 251.06520080566)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130679</ID>
                                  <Description>"Paleontologist"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1242.4761962891)
writeFloat('[PlayerCoordinates]+84', -1248.0733642578)
writeFloat('[PlayerCoordinates]+88', 412.21273803711)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130680</ID>
                                  <Description>"Peter Englert"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1749.9689941406)
writeFloat('[PlayerCoordinates]+84', 1971.5640869141)
writeFloat('[PlayerCoordinates]+88', 211.4801940918)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130681</ID>
                                  <Description>"Photographer"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2168.2016601563)
writeFloat('[PlayerCoordinates]+84', 603.51947021484)
writeFloat('[PlayerCoordinates]+88', 266.14349365234)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>133192</ID>
                                  <Description>"Racetrack Terminal"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',137.00241088867) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1987.1622314453) -- Y Coord
writeFloat('[PlayerCoordinates]+88',100.44399261475) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130682</ID>
                                  <Description>"Roboticist"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -646.64099121094)
writeFloat('[PlayerCoordinates]+84', -144.66549682617)
writeFloat('[PlayerCoordinates]+88', 536.55578613281)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130683</ID>
                                  <Description>"Ruined Shelter"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1326.4937744141)
writeFloat('[PlayerCoordinates]+84', 1787.4482421875)
writeFloat('[PlayerCoordinates]+88', 200.16622924805)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130684</ID>
                                  <Description>"South Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130685</ID>
                                  <Description>"Spiritualist"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -319.4059753418)
writeFloat('[PlayerCoordinates]+84', 989.09338378906)
writeFloat('[PlayerCoordinates]+88', 737.16760253906)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130686</ID>
                                  <Description>"Timefall Farm"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 92.446998596191)
writeFloat('[PlayerCoordinates]+84', -1618.1838378906)
writeFloat('[PlayerCoordinates]+88', 109.72776794434)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130687</ID>
                                  <Description>"Veteran Porter"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -419.83605957031)
writeFloat('[PlayerCoordinates]+84', -1165.1920166016)
writeFloat('[PlayerCoordinates]+88', 250.94882202148)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130688</ID>
                                  <Description>"UCA-41-011: Chiral Relay (Potential Chiral Relay Construction Site)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2557.8117675781)
writeFloat('[PlayerCoordinates]+84', -2013.41796875)
writeFloat('[PlayerCoordinates]+88', 93.716613769531)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130689</ID>
                                  <Description>"Waystation North of Mountain Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 184.68154907227)
writeFloat('[PlayerCoordinates]+84', 1642.2126464844)
writeFloat('[PlayerCoordinates]+88', 261.43435668945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130690</ID>
                                  <Description>"Weather Station"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>130691</ID>
                              <Description>"Western Region"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>130692</ID>
                                  <Description>"Distribution Center North of Edge Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -189.4738922)
writeFloat('[PlayerCoordinates]+84', 952.4784546)
writeFloat('[PlayerCoordinates]+88', 99.27870941)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130693</ID>
                                  <Description>"Edge Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -624.60943603516)
writeFloat('[PlayerCoordinates]+84', 156.75914001465)
writeFloat('[PlayerCoordinates]+88', 99.559226989746)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>130694</ID>
                          <Description>"Vehicle"</Description>
                          <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                          <GroupHeader>1</GroupHeader>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>130695</ID>
                              <Description>"Eastern Region"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>130696</ID>
                                  <Description>"Capital Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1442.88495919048) --X1
writeDouble('[VehicleCoordinates]+8F8', 1442.88495919048) --X2
writeDouble('[VehicleCoordinates]+D0', 690.599788112928) --Y1
writeDouble('[VehicleCoordinates]+900', 690.599788112928) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.302408912237) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.302408912237) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130697</ID>
                                  <Description>"Distribution Center West of Capital Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -434.600480057907) --X1
writeDouble('[VehicleCoordinates]+8F8', -434.600480057907) --X2
writeDouble('[VehicleCoordinates]+D0', 265.06265072403) --Y1
writeDouble('[VehicleCoordinates]+900', 265.06265072403) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.354885042289) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.354885042289) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130698</ID>
                                  <Description>"Incinerator West of Capital Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 547.585388183594) --X1
writeDouble('[VehicleCoordinates]+8F8', 547.585388183594) --X2
writeDouble('[VehicleCoordinates]+D0', 361.8267997735) --Y1
writeDouble('[VehicleCoordinates]+900', 361.8267997735) -- Y2
writeDouble('[VehicleCoordinates]+D8', 236.925926215194) -- Z1
writeDouble('[VehicleCoordinates]+908', 236.925926215194) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130699</ID>
                                  <Description>"Ludens Fan"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 92.6874055161516) --X1
writeDouble('[VehicleCoordinates]+8F8', 92.6874055161516) --X2
writeDouble('[VehicleCoordinates]+D0', 540.118915277497) --Y1
writeDouble('[VehicleCoordinates]+900', 540.118915277497) -- Y2
writeDouble('[VehicleCoordinates]+D8', 206.047497367006) -- Z1
writeDouble('[VehicleCoordinates]+908', 206.047497367006) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130700</ID>
                                  <Description>"Musician"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -981.190973857123) --X1
writeDouble('[VehicleCoordinates]+8F8', -981.190973857123) --X2
writeDouble('[VehicleCoordinates]+D0', -112.683721600795) --Y1
writeDouble('[VehicleCoordinates]+900', -112.683721600795) -- Y2
writeDouble('[VehicleCoordinates]+D8', 183.940941071383) -- Z1
writeDouble('[VehicleCoordinates]+908', 183.940941071383) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130701</ID>
                                  <Description>"Port Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1999.47536045469) --X1
writeDouble('[VehicleCoordinates]+8F8', -1999.47536045469) --X2
writeDouble('[VehicleCoordinates]+D0', -485.056854248047) --Y1
writeDouble('[VehicleCoordinates]+900', -485.056854248047) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.474717650577) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.474717650577) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130702</ID>
                                  <Description>"Waystation West of Capital Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 318.790057202337) --X1
writeDouble('[VehicleCoordinates]+8F8', 318.790057202337) --X2
writeDouble('[VehicleCoordinates]+D0', 1162.37582811471) --Y1
writeDouble('[VehicleCoordinates]+900', 1162.37582811471) -- Y2
writeDouble('[VehicleCoordinates]+D8', 161.919248845007) -- Z1
writeDouble('[VehicleCoordinates]+908', 161.919248845007) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130703</ID>
                                  <Description>"Wind Farm"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1486.93542206135) --X1
writeDouble('[VehicleCoordinates]+8F8', -1486.93542206135) --X2
writeDouble('[VehicleCoordinates]+D0', 652.813289342022) --Y1
writeDouble('[VehicleCoordinates]+900', 652.813289342022) -- Y2
writeDouble('[VehicleCoordinates]+D8', 204.475858193206) -- Z1
writeDouble('[VehicleCoordinates]+908', 204.475858193206) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>130704</ID>
                              <Description>"Central Region"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>130705</ID>
                                  <Description>"Aaron Hill's Safe House"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2632.01806640625) --X1
writeDouble('[VehicleCoordinates]+8F8', -2632.01806640625) --X2
writeDouble('[VehicleCoordinates]+D0', -2038.36877441406) --Y1
writeDouble('[VehicleCoordinates]+900', -2038.36877441406) -- Y2
writeDouble('[VehicleCoordinates]+D8', 85.2701416015625) -- Z1
writeDouble('[VehicleCoordinates]+908', 85.2701416015625) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130706</ID>
                                  <Description>"Chiral Artist's Studio"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2140.7678905886) --X1
writeDouble('[VehicleCoordinates]+8F8', 2140.7678905886) --X2
writeDouble('[VehicleCoordinates]+D0', -891.205335171187) --Y1
writeDouble('[VehicleCoordinates]+900', -891.205335171187) -- Y2
writeDouble('[VehicleCoordinates]+D8', 149.236557576236) -- Z1
writeDouble('[VehicleCoordinates]+908', 149.236557576236) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130707</ID>
                                  <Description>"Collector"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1151.38770162807) --X1
writeDouble('[VehicleCoordinates]+8F8', 1151.38770162807) --X2
writeDouble('[VehicleCoordinates]+D0', 29.2159338650015) --Y1
writeDouble('[VehicleCoordinates]+900', 29.2159338650015) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.269395761401) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.269395761401) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130708</ID>
                                  <Description>"Cosplayer"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 738.7852565107) --X1
writeDouble('[VehicleCoordinates]+8F8', 738.7852565107) --X2
writeDouble('[VehicleCoordinates]+D0', -641.454963174569) --Y1
writeDouble('[VehicleCoordinates]+900', -641.454963174569) -- Y2
writeDouble('[VehicleCoordinates]+D8', 111.161303309287) -- Z1
writeDouble('[VehicleCoordinates]+908', 111.161303309287) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130709</ID>
                                  <Description>"Craftsman"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1226.47027420112) --X1
writeDouble('[VehicleCoordinates]+8F8', 1226.47027420112) --X2
writeDouble('[VehicleCoordinates]+D0', 1307.98022460938) --Y1
writeDouble('[VehicleCoordinates]+900', 1307.98022460938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 183.580974329453) -- Z1
writeDouble('[VehicleCoordinates]+908', 183.580974329453) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130710</ID>
                                  <Description>"Distribution Center North of Mountain Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130711</ID>
                                  <Description>"Distribution Center South of Lake Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130712</ID>
                                  <Description>"Doctor"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1430.92370007196) --X1
writeDouble('[VehicleCoordinates]+8F8', -1430.92370007196) --X2
writeDouble('[VehicleCoordinates]+D0', 66.8332373271705) --Y1
writeDouble('[VehicleCoordinates]+900', 66.8332373271705) -- Y2
writeDouble('[VehicleCoordinates]+D8', 358.963532917869) -- Z1
writeDouble('[VehicleCoordinates]+908', 358.963532917869) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130713</ID>
                                  <Description>"Elder"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1705.35144042969) --X1
writeDouble('[VehicleCoordinates]+8F8', 1705.35144042969) --X2
writeDouble('[VehicleCoordinates]+D0', 699.0947265625) --Y1
writeDouble('[VehicleCoordinates]+900', 699.0947265625) -- Y2
writeDouble('[VehicleCoordinates]+D8', 244.412511481352) -- Z1
writeDouble('[VehicleCoordinates]+908', 244.412511481352) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130714</ID>
                                  <Description>"Engineer"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2184.02127121671) --X1
writeDouble('[VehicleCoordinates]+8F8', 2184.02127121671) --X2
writeDouble('[VehicleCoordinates]+D0', 1189.45777916304) --Y1
writeDouble('[VehicleCoordinates]+900', 1189.45777916304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 177.263346793139) -- Z1
writeDouble('[VehicleCoordinates]+908', 177.263346793139) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130715</ID>
                                  <Description>"Evo-devo Biologist"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1831.26241262823) --X1
writeDouble('[VehicleCoordinates]+8F8', -1831.26241262823) --X2
writeDouble('[VehicleCoordinates]+D0', -712.536589082141) --Y1
writeDouble('[VehicleCoordinates]+900', -712.536589082141) -- Y2
writeDouble('[VehicleCoordinates]+D8', 465.668199942371) -- Z1
writeDouble('[VehicleCoordinates]+908', 465.668199942371) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130716</ID>
                                  <Description>"Film Director"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1997.68957519531) --X1
writeDouble('[VehicleCoordinates]+8F8', 1997.68957519531) --X2
writeDouble('[VehicleCoordinates]+D0', -15.4660186767578) --Y1
writeDouble('[VehicleCoordinates]+900', -15.4660186767578) -- Y2
writeDouble('[VehicleCoordinates]+D8', 151.910415649414) -- Z1
writeDouble('[VehicleCoordinates]+908', 151.910415649414) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130717</ID>
                                  <Description>"First Prepper"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130718</ID>
                                  <Description>"Geologist"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -893.040383008573) --X1
writeDouble('[VehicleCoordinates]+8F8', -893.040383008573) --X2
writeDouble('[VehicleCoordinates]+D0', -783.167170839996) --Y1
writeDouble('[VehicleCoordinates]+900', -783.167170839996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 624.149068809963) -- Z1
writeDouble('[VehicleCoordinates]+908', 624.149068809963) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130719</ID>
                                  <Description>"Heartman's Lab"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1221.86779785156) --X1
writeDouble('[VehicleCoordinates]+8F8', -1221.86779785156) --X2
writeDouble('[VehicleCoordinates]+D0', -229.087647924799) --Y1
writeDouble('[VehicleCoordinates]+900', -229.087647924799) -- Y2
writeDouble('[VehicleCoordinates]+D8', 531.693955322326) -- Z1
writeDouble('[VehicleCoordinates]+908', 531.693955322326) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130720</ID>
                                  <Description>"Incinerator West of Lake Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -322.187921711329) --X1
writeDouble('[VehicleCoordinates]+8F8', -322.187921711329) --X2
writeDouble('[VehicleCoordinates]+D0', 2190.62475585938) --Y1
writeDouble('[VehicleCoordinates]+900', 2190.62475585938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 217.562371936685) -- Z1
writeDouble('[VehicleCoordinates]+908', 217.562371936685) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130721</ID>
                                  <Description>"Junk Dealer"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1607.94860839844) --X1
writeDouble('[VehicleCoordinates]+8F8', 1607.94860839844) --X2
writeDouble('[VehicleCoordinates]+D0', -274.140829576729) --Y1
writeDouble('[VehicleCoordinates]+900', -274.140829576729) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.984857813475) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.984857813475) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130722</ID>
                                  <Description>"Lake Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130723</ID>
                                  <Description>"Mama's Lab"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1013.66293989933) --X1
writeDouble('[VehicleCoordinates]+8F8', 1013.66293989933) --X2
writeDouble('[VehicleCoordinates]+D0', -973.060315833813) --Y1
writeDouble('[VehicleCoordinates]+900', -973.060315833813) -- Y2
writeDouble('[VehicleCoordinates]+D8', 161.76572519014) -- Z1
writeDouble('[VehicleCoordinates]+908', 161.76572519014) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130724</ID>
                                  <Description>"Mountain Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130725</ID>
                                  <Description>"Mountaineer"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -939.111646158212) --X1
writeDouble('[VehicleCoordinates]+8F8', -939.111646158212) --X2
writeDouble('[VehicleCoordinates]+D0', 1058.93283134418) --Y1
writeDouble('[VehicleCoordinates]+900', 1058.93283134418) -- Y2
writeDouble('[VehicleCoordinates]+D8', 596.160614547307) -- Z1
writeDouble('[VehicleCoordinates]+908', 596.160614547307) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130726</ID>
                                  <Description>"Novelists's Son"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2429.98510742188) --X1
writeDouble('[VehicleCoordinates]+8F8', -2429.98510742188) --X2
writeDouble('[VehicleCoordinates]+D0', 1292.8735588775) --Y1
writeDouble('[VehicleCoordinates]+900', 1292.8735588775) -- Y2
writeDouble('[VehicleCoordinates]+D8', 249.609417378204) -- Z1
writeDouble('[VehicleCoordinates]+908', 249.609417378204) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130727</ID>
                                  <Description>"Paleontologist"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1235.27709960938) --X1
writeDouble('[VehicleCoordinates]+8F8', -1235.27709960938) --X2
writeDouble('[VehicleCoordinates]+D0', -1252.37450712258) --Y1
writeDouble('[VehicleCoordinates]+900', -1252.37450712258) -- Y2
writeDouble('[VehicleCoordinates]+D8', 410.93840658829) -- Z1
writeDouble('[VehicleCoordinates]+908', 410.93840658829) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130728</ID>
                                  <Description>"Peter Englert"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1736.88663510808) --X1
writeDouble('[VehicleCoordinates]+8F8', 1736.88663510808) --X2
writeDouble('[VehicleCoordinates]+D0', 1964.92318763108) --Y1
writeDouble('[VehicleCoordinates]+900', 1964.92318763108) -- Y2
writeDouble('[VehicleCoordinates]+D8', 210.988873047901) -- Z1
writeDouble('[VehicleCoordinates]+908', 210.988873047901) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130729</ID>
                                  <Description>"Photographer"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2159.29223628451) --X1
writeDouble('[VehicleCoordinates]+8F8', -2159.29223628451) --X2
writeDouble('[VehicleCoordinates]+D0', 606.801757861564) --Y1
writeDouble('[VehicleCoordinates]+900', 606.801757861564) -- Y2
writeDouble('[VehicleCoordinates]+D8', 264.913360571171) -- Z1
writeDouble('[VehicleCoordinates]+908', 264.913360571171) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130730</ID>
                                  <Description>"Roboticist"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -649.183700512192) --X1
writeDouble('[VehicleCoordinates]+8F8', -649.183700512192) --X2
writeDouble('[VehicleCoordinates]+D0', -136.553804305087) --Y1
writeDouble('[VehicleCoordinates]+900', -136.553804305087) -- Y2
writeDouble('[VehicleCoordinates]+D8', 535.161209155776) -- Z1
writeDouble('[VehicleCoordinates]+908', 535.161209155776) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>133191</ID>
                                  <Description>"Racetrack Terminal"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',127.4136524018) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',127.4136524018) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1989.1642396448) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1989.1642396448) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',98.7200925845) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',98.7200925845) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130731</ID>
                                  <Description>"Ruined Shelter"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1321.75479916266) --X1
writeDouble('[VehicleCoordinates]+8F8', 1321.75479916266) --X2
writeDouble('[VehicleCoordinates]+D0', 1781.333984375) --Y1
writeDouble('[VehicleCoordinates]+900', 1781.333984375) -- Y2
writeDouble('[VehicleCoordinates]+D8', 199.04028204791) -- Z1
writeDouble('[VehicleCoordinates]+908', 199.04028204791) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130732</ID>
                                  <Description>"South Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130733</ID>
                                  <Description>"Spiritualist"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -325.113752107106) --X1
writeDouble('[VehicleCoordinates]+8F8', -325.113752107106) --X2
writeDouble('[VehicleCoordinates]+D0', 983.230529372708) --Y1
writeDouble('[VehicleCoordinates]+900', 983.230529372708) -- Y2
writeDouble('[VehicleCoordinates]+D8', 735.897462587294) -- Z1
writeDouble('[VehicleCoordinates]+908', 735.897462587294) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130734</ID>
                                  <Description>"Timefall Farm"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 115.351102065019) --X1
writeDouble('[VehicleCoordinates]+8F8', 115.351102065019) --X2
writeDouble('[VehicleCoordinates]+D0', -1629.64987632092) --Y1
writeDouble('[VehicleCoordinates]+900', -1629.64987632092) -- Y2
writeDouble('[VehicleCoordinates]+D8', 108.919290458693) -- Z1
writeDouble('[VehicleCoordinates]+908', 108.919290458693) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130735</ID>
                                  <Description>"UCA-41-011: Chiral Relay (Potential Chiral Relay Construction Site)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2560.48546139061) --X1
writeDouble('[VehicleCoordinates]+8F8', -2560.48546139061) --X2
writeDouble('[VehicleCoordinates]+D0', -1977.87025744527) --Y1
writeDouble('[VehicleCoordinates]+900', -1977.87025744527) -- Y2
writeDouble('[VehicleCoordinates]+D8', 84.1606949204215) -- Z1
writeDouble('[VehicleCoordinates]+908', 84.1606949204215) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130736</ID>
                                  <Description>"Veteran Porter"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -402.304512128479) --X1
writeDouble('[VehicleCoordinates]+8F8', -402.304512128479) --X2
writeDouble('[VehicleCoordinates]+D0', -1165.69761503304) --Y1
writeDouble('[VehicleCoordinates]+900', -1165.69761503304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 247.350454353234) -- Z1
writeDouble('[VehicleCoordinates]+908', 247.350454353234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130737</ID>
                                  <Description>"Waystation North of Mountain Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 170.875869750977) --X1
writeDouble('[VehicleCoordinates]+8F8', 170.875869750977) --X2
writeDouble('[VehicleCoordinates]+D0', 1647.17614746094) --Y1
writeDouble('[VehicleCoordinates]+900', 1647.17614746094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 260.368743896484) -- Z1
writeDouble('[VehicleCoordinates]+908', 260.368743896484) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130738</ID>
                                  <Description>"Weather Station"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130739</ID>
                      <Description>"Episode Quests"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>130740</ID>
                          <Description>"Player"</Description>
                          <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                          <GroupHeader>1</GroupHeader>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>130741</ID>
                              <Description>"Episode 0 - Porter (Prologue)"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>130742</ID>
                                  <Description>"Order 1 - Item 1/4 is already in your backpack"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130743</ID>
                                  <Description>"Order 1 - Find Shelter From the Rain"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',199.7405090332) -- X Coord
writeFloat('[PlayerCoordinates]+84',167.70687866211) -- Y Coord
writeFloat('[PlayerCoordinates]+88',187.07148742676) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130744</ID>
                                  <Description>"Order 1 - Item 2/4 (start position of game)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 271.0780029)
writeFloat('[PlayerCoordinates]+84', 100.2480087)
writeFloat('[PlayerCoordinates]+88', 194.905899)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130745</ID>
                                  <Description>"Order 1 - Item 3/4"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 81.33251953)
writeFloat('[PlayerCoordinates]+84', 101.0986786)
writeFloat('[PlayerCoordinates]+88', 140.3443604)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130746</ID>
                                  <Description>"Order 1 - Item 4/4"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -74.51483917)
writeFloat('[PlayerCoordinates]+84', -159.1582489)
writeFloat('[PlayerCoordinates]+88', 128.949173)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130747</ID>
                                  <Description>"Order 1 - Deliver to Central Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -128.5132141)
writeFloat('[PlayerCoordinates]+84', -330.1140137)
writeFloat('[PlayerCoordinates]+88', 132.0313263)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130748</ID>
                                  <Description>"This takes you to Episode 1: Bridget"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>130749</ID>
                              <Description>"Episode 1: Bridget"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>130750</ID>
                                  <Description>"Order 2 - Pick up the Morphine"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130751</ID>
                                      <Description>"Order 2 - Deliver to Central Knot City Isolation Ward"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1691.9838867188) -- X Coord
writeFloat('[PlayerCoordinates]+84',1050.6905517578) -- Y Coord
writeFloat('[PlayerCoordinates]+88',136.55059814453) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130752</ID>
                                  <Description>"Order 3 Part 1 - Cremate President's Body at Incinerator West of Capital Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 526.8500977)
writeFloat('[PlayerCoordinates]+84', 330.2707825)
writeFloat('[PlayerCoordinates]+88', 238.345871)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130753</ID>
                                      <Description>"Order 3 Part 2 - Return to the Capital Knot Distribution Center Terminal"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1438.978394)
writeFloat('[PlayerCoordinates]+84', 780.0618896)
writeFloat('[PlayerCoordinates]+88', 148.1144562)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130754</ID>
                                      <Description>"This takes you to Episode 2: Amelie"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>130755</ID>
                              <Description>"Episode 2: Amelie"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>130756</ID>
                                  <Description>"Order 4 - Accept Order 4 from Capitol Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130757</ID>
                                      <Description>"Order 4 - Deliver to Waystation West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 313.767334)
writeFloat('[PlayerCoordinates]+84', 1160.296875)
writeFloat('[PlayerCoordinates]+88', 162.9519653)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130758</ID>
                                  <Description>"Accept Order 5 &amp; 6 from Waystation West of Capital Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130759</ID>
                                      <Description>"Order 6 - Build Construction: Postbox - Northeast of Waystation West of Capital Knot City "</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 588.8013306)
writeFloat('[PlayerCoordinates]+84', 1223.86792)
writeFloat('[PlayerCoordinates]+88', 139.7748566)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130760</ID>
                                      <Description>"Order 5 Part 1 - Exit Mule Camp Cutscene [if MULEs not chasing, no cutscene]"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 19.9727993)
writeFloat('[PlayerCoordinates]+84', 855.8658447)
writeFloat('[PlayerCoordinates]+88', 137.9019165)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>130761</ID>
                                          <Description>"Order 5 Part 2 - BB Cutscene [move forward until cutscene]"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -375.3905029)
writeFloat('[PlayerCoordinates]+84', 617.4586792)
writeFloat('[PlayerCoordinates]+88', 146.4345398)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>130762</ID>
                                          <Description>"Order 5 Part 3 - Deliver to Distribution Center West of Capital Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -439.4762878)
writeFloat('[PlayerCoordinates]+84', 264.5787659)
writeFloat('[PlayerCoordinates]+88', 137.3742676)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130763</ID>
                                  <Description>"Head to Private Room, then Accept Order 7 &amp; 8"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130764</ID>
                                      <Description>"Order 7 - Retrieve item from MULEs postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -623.3140869)
writeFloat('[PlayerCoordinates]+84', -106.4582138)
writeFloat('[PlayerCoordinates]+88', 223.6954346)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130765</ID>
                                      <Description>"Order 8 - Collect at least 1cg of chiral crystals"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -329.8672485)
writeFloat('[PlayerCoordinates]+84', 424.4443359)
writeFloat('[PlayerCoordinates]+88', 145.6047974)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130766</ID>
                                      <Description>"Order 7 &amp; 8 - Deliver &amp; Recycle at Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -439.3278198)
writeFloat('[PlayerCoordinates]+84', 264.6150818)
writeFloat('[PlayerCoordinates]+88', 137.3740692)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130767</ID>
                                  <Description>"Accept Order 9 &amp; 10"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130768</ID>
                                      <Description>"Order 10 - Build a Bridge West of Distribution Center "</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -509.8740234)
writeFloat('[PlayerCoordinates]+84', 333.1643066)
writeFloat('[PlayerCoordinates]+88', 149.1089172)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130769</ID>
                                      <Description>"Order 9 - Deliver to Wind Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1490.662476)
writeFloat('[PlayerCoordinates]+84', 656.2297974)
writeFloat('[PlayerCoordinates]+88', 205.5592499)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130770</ID>
                                  <Description>"Accept Order 11 - From Wind Farm"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130771</ID>
                                      <Description>"Head down hill towards Distribution Center to receive email "“How About Taking a Break In a Private Room?”"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-703.07580566406) -- X Coord
writeFloat('[PlayerCoordinates]+84',333.38226318359) -- Y Coord
writeFloat('[PlayerCoordinates]+88',153.00730895996) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130772</ID>
                                      <Description>"Order 11 - Deliver to Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -439.3278198)
writeFloat('[PlayerCoordinates]+84', 264.6150818)
writeFloat('[PlayerCoordinates]+88', 137.3740692)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130773</ID>
                                  <Description>"Go to Private Room after turning in Order 11 then read your email: "[Test Order] I Want You to Look for Some Lost Cargo""</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130774</ID>
                                      <Description>"Build a Generator for Access to Bike outside Distribution Center at this Location"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-402.11831665039) -- X Coord
writeFloat('[PlayerCoordinates]+84',353.53024291992) -- Y Coord
writeFloat('[PlayerCoordinates]+88',147.03295898438) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130775</ID>
                                      <Description>"Collect Lost Cargo: Companion Cube: Benjamin (Cube 1)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -223.7529602)
writeFloat('[PlayerCoordinates]+84', 469.90802)
writeFloat('[PlayerCoordinates]+88', 146.6058655)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130776</ID>
                                      <Description>"Deliver Lost Cargo: Companion Cube: Benjamin to Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -439.3278198)
writeFloat('[PlayerCoordinates]+84', 264.6150818)
writeFloat('[PlayerCoordinates]+88', 137.3740692)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130777</ID>
                                  <Description>"Accept Order 12 &amp; 13 From Distribution Center West of Capital Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130778</ID>
                                      <Description>"Order 12 - Pick up item from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 348.9523926)
writeFloat('[PlayerCoordinates]+84', 806.6796265)
writeFloat('[PlayerCoordinates]+88', 164.618454)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>130779</ID>
                                          <Description>"Order 12 - Deliver to Waystation West of Capital Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 304.9683533)
writeFloat('[PlayerCoordinates]+84', 1157.673462)
writeFloat('[PlayerCoordinates]+88', 162.9699249)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130780</ID>
                                      <Description>"Order 13 - Deliver to Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1432.995117)
writeFloat('[PlayerCoordinates]+84', 701.8141479)
writeFloat('[PlayerCoordinates]+88', 137.3023224)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130781</ID>
                                  <Description>"Accept Order 14 which gives you Hematic Grenades, then Accept Order 15 From Capital Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130782</ID>
                                      <Description>"Order 15 Part 1 - Go to the BT Area / Defeat a BT With Hematic Grenades / Collect Chiral Crystals"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 953.0679321)
writeFloat('[PlayerCoordinates]+84', 1085.765625)
writeFloat('[PlayerCoordinates]+88', 136.118988)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>130783</ID>
                                          <Description>"Order 15 Part 2 - Recycle Chiral Crystals at Distribution Center West of Capital Knot City "</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -438.5249329)
writeFloat('[PlayerCoordinates]+84', 266.2165527)
writeFloat('[PlayerCoordinates]+88', 137.3740692)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130784</ID>
                                      <Description>"Order 14 - Deliver to Port Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1986.126221)
writeFloat('[PlayerCoordinates]+84', -480.7706299)
writeFloat('[PlayerCoordinates]+88', 139.4775085)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130785</ID>
                                  <Description>"Head out of Port Knot City - First Boss Battle (BT#1)"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130786</ID>
                                      <Description>"Order 16 - Eliminate BT"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130787</ID>
                                  <Description>"Head Back to Port Knot City to Grab Bike (if desired)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1986.126221)
writeFloat('[PlayerCoordinates]+84', -480.7706299)
writeFloat('[PlayerCoordinates]+88', 139.4775085)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130788</ID>
                                  <Description>"Note: You need Ludens Fan to join UCA to receive Order 17, do standard missions / lost cargo before starting Episode 3"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130789</ID>
                                  <Description>"Head for the Harbor - move forward for codec cutscene"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1976.712646)
writeFloat('[PlayerCoordinates]+84', -690.2081299)
writeFloat('[PlayerCoordinates]+88', 148.8500061)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130790</ID>
                                      <Description>"Head to Episode 3: Fragile / Central Region"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1978.044312)
writeFloat('[PlayerCoordinates]+84', -741.3048706)
writeFloat('[PlayerCoordinates]+88', 148.8501892)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>130791</ID>
                              <Description>"Episode 3: Fragile"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>130792</ID>
                                  <Description>"Pick up your three containers of aid"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130793</ID>
                                      <Description>"Order 18 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130794</ID>
                                  <Description>"Read The Ludens Fan e-mail: "Delivery to Port Knot City" (Requires Ludens Fan having joined UCA)"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130795</ID>
                                      <Description>"Use Fragile Jump in Private Room to go back to Port Knot City"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130796</ID>
                                      <Description>"Head to Ludens Fan for Order 17"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 101.4508591)
writeFloat('[PlayerCoordinates]+84', 539.0170288)
writeFloat('[PlayerCoordinates]+88', 207.0962372)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130797</ID>
                                      <Description>"Order 17 - Deliver to Port Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1986.126221)
writeFloat('[PlayerCoordinates]+84', -480.7706299)
writeFloat('[PlayerCoordinates]+88', 139.4775085)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130798</ID>
                                  <Description>"Use private room &amp; Fragile Jump to go back to Lake Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130799</ID>
                                  <Description>"Accept Order 19, 20, 21 from Lake Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130800</ID>
                                      <Description>"Order 19 - Deliver to Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2191.7585449219)
writeFloat('[PlayerCoordinates]+84', 1189.8968505859)
writeFloat('[PlayerCoordinates]+88', 178.52680969238)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130801</ID>
                                      <Description>"Order 20 - Deliver to Elder"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1696.478515625)
writeFloat('[PlayerCoordinates]+84', 701.77563476563)
writeFloat('[PlayerCoordinates]+88', 245.24702453613)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130802</ID>
                                      <Description>"Order 21 - Deliver to Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1226.0323486328)
writeFloat('[PlayerCoordinates]+84', 1317.2032470703)
writeFloat('[PlayerCoordinates]+88', 184.76554870605)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130803</ID>
                                  <Description>"Accept Order 22 from Craftsman"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130804</ID>
                                      <Description>"Order 22 Part 1 - Recover the toolbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1330.974731)
writeFloat('[PlayerCoordinates]+84', 1794.068848)
writeFloat('[PlayerCoordinates]+88', 199.2028198)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>130805</ID>
                                          <Description>"Order 22 Part 2 - Deliver to Craftsman"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1226.0323486328)
writeFloat('[PlayerCoordinates]+84', 1317.2032470703)
writeFloat('[PlayerCoordinates]+88', 184.76554870605)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130806</ID>
                                  <Description>"Exit Craftsman for codec cutscene that gives you Order 23"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130807</ID>
                                      <Description>"Order 23 - Retrieve item from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.555176)
writeFloat('[PlayerCoordinates]+84', 1064.6875)
writeFloat('[PlayerCoordinates]+88', 176.1872711)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>130808</ID>
                                          <Description>"Order 23 - Deliver to Lake Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130809</ID>
                                  <Description>"Accept Order 25 from Lake Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130810</ID>
                                      <Description>"Order 25 - Reconstruct the road at the Auto Paver South of Lake Knot City "</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2453.14624)
writeFloat('[PlayerCoordinates]+84', 1699.640625)
writeFloat('[PlayerCoordinates]+88', 211.4180145)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130811</ID>
                                  <Description>"Head back to Lake Knot City to Accept Order 24, 26"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130812</ID>
                                      <Description>"Order 26 - Deliver to Peter Englert"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1749.9689941406)
writeFloat('[PlayerCoordinates]+84', 1971.5640869141)
writeFloat('[PlayerCoordinates]+88', 211.4801940918)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130813</ID>
                                      <Description>"read email from William L: [Test Order] Find my Lost Cargo, Please!”"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130814</ID>
                                      <Description>"Pick up "Lost Cargo: Companion Cube: William" (Cube 2)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1752.894043)
writeFloat('[PlayerCoordinates]+84', 1982.041016)
writeFloat('[PlayerCoordinates]+88', 211.5847626)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130815</ID>
                                      <Description>"Deliver "Lost Cargo: Companion Cube: William" to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130816</ID>
                                      <Description>"Order 24 - Deliver to Distribution Center South of Lake Knot City "</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130817</ID>
                                  <Description>"read email from Thomas Southerland [Recovery Request] [V] Track Down a Chip with a Weird Symbol"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130818</ID>
                                      <Description>"Accept Order 71 from Distribution Center South of Lake Knot City"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130819</ID>
                                      <Description>"Order 71 Part 1 - Pick up Item"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1112.9328613281) -- X Coord
writeFloat('[PlayerCoordinates]+84',160.90766906738) -- Y Coord
writeFloat('[PlayerCoordinates]+88',137.19442749023) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>130820</ID>
                                          <Description>"Order 71 Part 2 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130821</ID>
                                  <Description>"Accept Order 27 from Distribution Center South of Lake Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130822</ID>
                                      <Description>"Order 27 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130823</ID>
                                  <Description>"Accept Order 29 from Weather Station"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130824</ID>
                                      <Description>"Order 29 - Build &amp; Upgrade a Safe House near Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 112.3721466)
writeFloat('[PlayerCoordinates]+84', -306.8156738)
writeFloat('[PlayerCoordinates]+88', 268.5441284)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130825</ID>
                                      <Description>"Enter Private Room"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130826</ID>
                                  <Description>"Head back to Weather Station to Accept Order 28"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130827</ID>
                                      <Description>"Order 28 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 92.446998596191)
writeFloat('[PlayerCoordinates]+84', -1618.1838378906)
writeFloat('[PlayerCoordinates]+88', 109.72776794434)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130828</ID>
                                  <Description>"Head to Distribution Center South of Lake Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130829</ID>
                                      <Description>"Read email from Thomas Southerland [Test Order] You've Got to Find my Cube!"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130830</ID>
                                      <Description>"Pick up "Lost Cargo: Companion Cube: Thomas (Cube 3) in Mule Camp"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 580.3560181)
writeFloat('[PlayerCoordinates]+84', 902.6835327)
writeFloat('[PlayerCoordinates]+88', 169.22052)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130831</ID>
                                      <Description>"Deliver Lost Cargo to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130832</ID>
                                  <Description>"Accept Order 30, 31 from Distribution Center South of Lake Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130833</ID>
                                      <Description>"Order 31 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2001.1428222656)
writeFloat('[PlayerCoordinates]+84', -24.001985549927)
writeFloat('[PlayerCoordinates]+88', 153.35623168945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130834</ID>
                                      <Description>"Order 30 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.9134521484)
writeFloat('[PlayerCoordinates]+84', -275.56985473633)
writeFloat('[PlayerCoordinates]+88', 136.38018798828)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130835</ID>
                                  <Description>"Accept Order 32 from Junk Dealer"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130836</ID>
                                      <Description>"Order 32 Part 1 - Item 1/7 (10kg/110kg)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1280.342285)
writeFloat('[PlayerCoordinates]+84', -740.7521973)
writeFloat('[PlayerCoordinates]+88', 142.1518402)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130837</ID>
                                      <Description>"Order 32 Part 1 - Item 2/7 (20kg/110kg)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1243.190796)
writeFloat('[PlayerCoordinates]+84', -679.7549438)
writeFloat('[PlayerCoordinates]+88', 144.0487366)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130838</ID>
                                      <Description>"Order 32 Part 1 - Item 3/7 (10kg/110kg)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1214.950439)
writeFloat('[PlayerCoordinates]+84', -619.7698975)
writeFloat('[PlayerCoordinates]+88', 139.3390656)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130839</ID>
                                      <Description>"Order 32 Part 1 - Item 4/7 (10kg/110kg)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1233.258667)
writeFloat('[PlayerCoordinates]+84', -609.4537964)
writeFloat('[PlayerCoordinates]+88', 138.0766602)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130840</ID>
                                      <Description>"Order 32 Part 1 - Item 5/7 (30kg/110kg)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1172.618286)
writeFloat('[PlayerCoordinates]+84', -578.3938599)
writeFloat('[PlayerCoordinates]+88', 142.9857941)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130841</ID>
                                      <Description>"Order 32 Part 1 - Item 6/7 (10kg/110kg)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1189.529175)
writeFloat('[PlayerCoordinates]+84', -652.6791992)
writeFloat('[PlayerCoordinates]+88', 141.5029602)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130842</ID>
                                      <Description>"Order 32 Part 1 - Item 7/7 (20kg/110kg)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1212.683716)
writeFloat('[PlayerCoordinates]+84', -657.9247437)
writeFloat('[PlayerCoordinates]+88', 144.5106659)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130843</ID>
                                      <Description>"Order 32 Part 2 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.9134521484)
writeFloat('[PlayerCoordinates]+84', -275.56985473633)
writeFloat('[PlayerCoordinates]+88', 136.38018798828)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130844</ID>
                                  <Description>"Accept Order 33 from Junk Dealer"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130845</ID>
                                      <Description>"Order 33 - Deliver to Chiral Artist (carry by hand/no vehicle allowed)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2152.3859863281)
writeFloat('[PlayerCoordinates]+84', -910.64288330078)
writeFloat('[PlayerCoordinates]+88', 156.43530273438)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130846</ID>
                                  <Description>"Order 34 doesn't allow cargo bag, turn in any lost cargo you have before accepting or drop them"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130847</ID>
                                      <Description>"Order 34 - Reunite Junk Dealer with Chiral Artist (Carrying Live Body)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.9134521484)
writeFloat('[PlayerCoordinates]+84', -275.56985473633)
writeFloat('[PlayerCoordinates]+88', 136.38018798828)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130848</ID>
                                  <Description>"Accept Order 35 from Junk Dealer"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130849</ID>
                                      <Description>"Order 35 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130850</ID>
                                  <Description>"Read email: "[Order] Delivery for a Prepper""</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130851</ID>
                                      <Description>"Accept Order 36, 37 from Distribution Center South of Lake Knot City"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130852</ID>
                                      <Description>"Order 37 - Deliver to Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 719.26995849609)
writeFloat('[PlayerCoordinates]+84', -663.93426513672)
writeFloat('[PlayerCoordinates]+88', 101.74416351318)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130853</ID>
                                      <Description>"Order 36 Part 1 - Recover items 1-3 from MULEs, (MULEs move around - this is original locations)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1381.5128173828) -- X Coord
writeFloat('[PlayerCoordinates]+84',151.97709655762) -- Y Coord
writeFloat('[PlayerCoordinates]+88',134.24496459961) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>130854</ID>
                                          <Description>"Order 36 Part 1 - Recover items 4-6 from MULEs (MULEs move around  - this is original locations)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1431.1962890625) -- X Coord
writeFloat('[PlayerCoordinates]+84',208.53698730469) -- Y Coord
writeFloat('[PlayerCoordinates]+88',134.59356689453) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>130855</ID>
                                          <Description>"Order 36 Part 2 - Deliver to Lake Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130856</ID>
                                  <Description>"***Don't Accept Order 38 Yet***"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130857</ID>
                                  <Description>"Go to Private Room at Lake Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130858</ID>
                                      <Description>"Read email from J: [Recovery Request] [V] Retrieve My Chip from the MULEs, Take Order 72"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130859</ID>
                                      <Description>"Read email from T Southerland [Test Order] Sorry. More Lost Cargo for You..."</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130860</ID>
                                      <Description>"Accept Order 72 from Lake Knot City"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130861</ID>
                                      <Description>"Order 72 - Retrieve V's chip from the MULEs"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2464.028809)
writeFloat('[PlayerCoordinates]+84', 1354.382446)
writeFloat('[PlayerCoordinates]+88', 186.3952332)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130862</ID>
                                      <Description>"Pick up "Lost Cargo: Companion Cube: Southerland" (Cube 4)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 631.1247559)
writeFloat('[PlayerCoordinates]+84', 1512.86377)
writeFloat('[PlayerCoordinates]+88', 172.6147614)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130863</ID>
                                      <Description>"Deliver Lost Cargo (Cube 4) to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130864</ID>
                                      <Description>"Order 72 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130865</ID>
                                  <Description>"Accept Order 38 from Lake Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130866</ID>
                                      <Description>"Order 38 - Head to private room to talk to Fragile at Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>130867</ID>
                                          <Description>"Order 38 - Dispose of the Nuclear Bomb in a Crater Lake"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1667.786865)
writeFloat('[PlayerCoordinates]+84', -762.4283447)
writeFloat('[PlayerCoordinates]+88', 126.5047989)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>130868</ID>
                                          <Description>"Order 38 - Deliver to South Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130869</ID>
                                  <Description>"Walk back up the ramp to move to Episode 4: Unger"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>130870</ID>
                              <Description>"Episode 4: Unger"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>130871</ID>
                                  <Description>"Order 39 Part 1 - [World War I] Escape the Battlefield"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130872</ID>
                                      <Description>"Items - Hematic Grenades (Lvl 1)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-5.9417910575867) -- X Coord
writeFloat('[PlayerCoordinates]+84',263.12982177734) -- Y Coord
writeFloat('[PlayerCoordinates]+88',91.064674377441) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>130873</ID>
                                          <Description>"Items - Blood Bag"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',7.6940546035767) -- X Coord
writeFloat('[PlayerCoordinates]+84',227.98132324219) -- Y Coord
writeFloat('[PlayerCoordinates]+88',91.315788269043) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>130874</ID>
                                          <Description>"Items - Cryptobiote"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 21.54985428)
writeFloat('[PlayerCoordinates]+84', 208.2553101)
writeFloat('[PlayerCoordinates]+88', 91.9463501)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>130875</ID>
                                          <Description>"Items - Cryptobiote"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 64.79664612)
writeFloat('[PlayerCoordinates]+84', 158.5385895)
writeFloat('[PlayerCoordinates]+88', 96.92805481)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                          <CheatEntries>
                                            <CheatEntry>
                                              <ID>130876</ID>
                                              <Description>" Move South and use Odradek Scanner until it locates the blood bag if you want the last one to spawn before going forward"</Description>
                                              <GroupHeader>1</GroupHeader>
                                            </CheatEntry>
                                          </CheatEntries>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>130877</ID>
                                          <Description>"Items - Cryptobiote"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 74.96125031)
writeFloat('[PlayerCoordinates]+84', 105.9614334)
writeFloat('[PlayerCoordinates]+88', 101.1288147)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>130878</ID>
                                          <Description>"Items - Blood Bag &amp; move forward (south into doorway) to begin Part2"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',49.464370727539) -- X Coord
writeFloat('[PlayerCoordinates]+84',20.651393890381) -- Y Coord
writeFloat('[PlayerCoordinates]+88',93.932151794434) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130879</ID>
                                  <Description>"Order 39 Part 2 - [World War I] Find the Mysterious Man (First Cliff Unger Boss Battle)"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130880</ID>
                                      <Description>"Items - Assault Rifle (Lvl 1)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 20.87845802)
writeFloat('[PlayerCoordinates]+84', -7.217926979)
writeFloat('[PlayerCoordinates]+88', 90.74695587)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130881</ID>
                                      <Description>"Items - Blood Bag"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 15.76558113)
writeFloat('[PlayerCoordinates]+84', -23.46003532)
writeFloat('[PlayerCoordinates]+88', 89.58705902)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130882</ID>
                                      <Description>"Items - Shotgun (Lvl 1)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 35.02058792)
writeFloat('[PlayerCoordinates]+84', -46.3934288)
writeFloat('[PlayerCoordinates]+88', 88.71324158)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130883</ID>
                                      <Description>"Items - Grenades"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1.812289357)
writeFloat('[PlayerCoordinates]+84', -32.2932663)
writeFloat('[PlayerCoordinates]+88', 90.08486176)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130884</ID>
                                      <Description>"Minifight 1"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 10.41056061)
writeFloat('[PlayerCoordinates]+84', -75.96162415)
writeFloat('[PlayerCoordinates]+88', 87.30445862)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130885</ID>
                                      <Description>"Minifight 2, 3, &amp; 4 are random locations, follow the fire trail"</Description>
                                      <Color>0000FF</Color>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130886</ID>
                                      <Description>"Items - Cryptobiote"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -34.02104568)
writeFloat('[PlayerCoordinates]+84', -34.71165848)
writeFloat('[PlayerCoordinates]+88', 87.24714661)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130887</ID>
                                      <Description>"Items - Cryptobiote"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 12.78002453)
writeFloat('[PlayerCoordinates]+84', -22.13700485)
writeFloat('[PlayerCoordinates]+88', 89.77045441)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130888</ID>
                                      <Description>"Items - Cryptobiote"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 104.524826)
writeFloat('[PlayerCoordinates]+84', -134.4927368)
writeFloat('[PlayerCoordinates]+88', 88.16183472)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130889</ID>
                                      <Description>"Items - Cryptobiote"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2.931415796)
writeFloat('[PlayerCoordinates]+84', -98.74702454)
writeFloat('[PlayerCoordinates]+88', 87.87839508)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130890</ID>
                                  <Description>"Back in Central Region,pick up your loot and read Peter Englert's email: "A Desperate Plea for a Second Pizza Pie""</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130891</ID>
                                      <Description>"Go to South Knot City terminal and Accept Order 40"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130892</ID>
                                      <Description>"Order 40 - Deliver to Peter Englert"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1749.9689941406)
writeFloat('[PlayerCoordinates]+84', 1971.5640869141)
writeFloat('[PlayerCoordinates]+88', 211.4801940918)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130893</ID>
                                  <Description>"Head to Mama's Lab to begin Episode 5: Mama &amp; Initiate Cutscene"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1012.746277)
writeFloat('[PlayerCoordinates]+84', -973.0059204)
writeFloat('[PlayerCoordinates]+88', 162.7924652)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>130894</ID>
                              <Description>"Episode 5: Mama"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>130895</ID>
                                  <Description>"read email: "[Recovery Request] Resources Scattered by the SuperCell""</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130896</ID>
                                  <Description>"Use Mama's Lab Terminal to Accept Order 42"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130897</ID>
                                      <Description>"Order 42 Part 1 - Item 1/4"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 600.565918)
writeFloat('[PlayerCoordinates]+84', -777.9202881)
writeFloat('[PlayerCoordinates]+88', 83.43596649)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130898</ID>
                                      <Description>"Order 42 Part 1 - Item 2/4"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 519.2785034)
writeFloat('[PlayerCoordinates]+84', -819.0073853)
writeFloat('[PlayerCoordinates]+88', 83.33805847)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130899</ID>
                                      <Description>"Order 42 Part 1 - Item 3/4"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 464.8079224)
writeFloat('[PlayerCoordinates]+84', -816.6542358)
writeFloat('[PlayerCoordinates]+88', 100.8517303)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130900</ID>
                                      <Description>"Order 42 Part 1 - Item 4/4"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 468.8051147)
writeFloat('[PlayerCoordinates]+84', -856.4064331)
writeFloat('[PlayerCoordinates]+88', 101.3171005)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130901</ID>
                                      <Description>"Order 42 Part 2 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130902</ID>
                                  <Description>"Head to Distribution Center South of Lake Knot City to Accept Order 41"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130903</ID>
                                      <Description>"Order 41: Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 184.68154907227)
writeFloat('[PlayerCoordinates]+84', 1642.2126464844)
writeFloat('[PlayerCoordinates]+88', 261.43435668945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130904</ID>
                                  <Description>"Accept Order 43 from Waystation North of Mountain Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130905</ID>
                                      <Description>"Order 43 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130906</ID>
                                  <Description>"read email: "[Recovery Request][X] I've Lost Contact wit the Porter Who Recovered my Chip""</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130907</ID>
                                      <Description>"Accept Order 73 from Distribution Center North of Mountain Knot City, Don't Accept Order 44"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130908</ID>
                                      <Description>"Order 73 Part 1 - Pick up Item"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -803.5339355)
writeFloat('[PlayerCoordinates]+84', 2032.589111)
writeFloat('[PlayerCoordinates]+88', 280.0082703)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130909</ID>
                                      <Description>"Order 73 Part 2 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130910</ID>
                                      <Description>"turn in any lost cargo &amp; deposit backpack / you move a body"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130911</ID>
                                      <Description>"Order 73 Part 3 - Pick Up the Body"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -825.8656616)
writeFloat('[PlayerCoordinates]+84', 2038.21814)
writeFloat('[PlayerCoordinates]+88', 287.9641418)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130912</ID>
                                      <Description>"Order 73 Part 4 - Cremate the Body at Incinerator West of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -322.81805419922)
writeFloat('[PlayerCoordinates]+84', 2191.2136230469)
writeFloat('[PlayerCoordinates]+88', 218.59948730469)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130913</ID>
                                  <Description>"Accept Order 44 at the Distribution Center North of Mountain Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130914</ID>
                                      <Description>"Order 44 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130915</ID>
                                  <Description>"read email: "Yet Another Easnest Entreaty for Pizza""</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130916</ID>
                                      <Description>"Head to Timefall Farm to Accept Order 45 - Fresh Pizza Delivery"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 92.446998596191)
writeFloat('[PlayerCoordinates]+84', -1618.1838378906)
writeFloat('[PlayerCoordinates]+88', 109.72776794434)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130917</ID>
                                      <Description>"Order 45 - Deliver to Peter Englert"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1749.9689941406)
writeFloat('[PlayerCoordinates]+84', 1971.5640869141)
writeFloat('[PlayerCoordinates]+88', 211.4801940918)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130918</ID>
                                  <Description>"Head to Mama's Lab to be given Order 46 to change Lockne's Mind"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1012.746277)
writeFloat('[PlayerCoordinates]+84', -973.0059204)
writeFloat('[PlayerCoordinates]+88', 162.7924652)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130919</ID>
                                      <Description>"Exit Mama's Lab for Second BT Boss Battle (BT#2)"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130920</ID>
                                      <Description>"Pick Mama back up if you dropped her"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130921</ID>
                                      <Description>"Order 46 - Take Mama to Meet Lockne at Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130922</ID>
                                      <Description>"This takes you to Episode 6: Deadman"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>130923</ID>
                              <Description>"Episode 6: Deadman"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>130924</ID>
                                  <Description>"read email: "[Recovery Request][V] The Porter Had Not One, but Two Chips""</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130925</ID>
                                      <Description>"Accept Order 74 at Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130926</ID>
                                      <Description>"Order 74 - Pick up item at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -758.4589233)
writeFloat('[PlayerCoordinates]+84', 1811.8302)
writeFloat('[PlayerCoordinates]+88', 224.3075867)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130927</ID>
                                      <Description>"Order 74 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130928</ID>
                                  <Description>"Accept Order 47 &amp; 48 from Mountain Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130929</ID>
                                      <Description>"Head farther out for a codec cutscene"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1157.564941)
writeFloat('[PlayerCoordinates]+84', 282.0364685)
writeFloat('[PlayerCoordinates]+88', 364.2423706)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130930</ID>
                                      <Description>"Order 47 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -646.64099121094)
writeFloat('[PlayerCoordinates]+84', -144.66549682617)
writeFloat('[PlayerCoordinates]+88', 536.55578613281)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130931</ID>
                                      <Description>"Order 48 - Deliver to Doctor"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1427.6165771484)
writeFloat('[PlayerCoordinates]+84', 58.272735595703)
writeFloat('[PlayerCoordinates]+88', 360.59719848633)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130932</ID>
                                  <Description>"Head Back to Mountain Knot City to Accept Order 49"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130933</ID>
                                      <Description>"Order 49 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -921.78460693359)
writeFloat('[PlayerCoordinates]+84', 1063.0844726563)
writeFloat('[PlayerCoordinates]+88', 599.85607910156)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130934</ID>
                                  <Description>"Accept Order 50 from Mountaineer"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130935</ID>
                                      <Description>"Order 50 Part 1 - Pick up 2 items from Doctor"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1427.6165771484)
writeFloat('[PlayerCoordinates]+84', 58.272735595703)
writeFloat('[PlayerCoordinates]+88', 360.59719848633)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130936</ID>
                                      <Description>"Order 50 Part 2 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -921.78460693359)
writeFloat('[PlayerCoordinates]+84', 1063.0844726563)
writeFloat('[PlayerCoordinates]+88', 599.85607910156)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130937</ID>
                                  <Description>"Accept Order 51 from Mountaineer"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130938</ID>
                                      <Description>"Order 51 - Deliver to Photographer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2168.2016601563)
writeFloat('[PlayerCoordinates]+84', 603.51947021484)
writeFloat('[PlayerCoordinates]+88', 266.14349365234)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130939</ID>
                                  <Description>"Accept Order 52 from Photographer"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130940</ID>
                                      <Description>"Order 52 Part 1 - Recover Camera in Mule Camp from MULE"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1686.0187988281) -- X Coord
writeFloat('[PlayerCoordinates]+84',1073.8552246094) -- Y Coord
writeFloat('[PlayerCoordinates]+88',220.45040893555) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130941</ID>
                                      <Description>"Order 52 Part 2 - Deliver to Photographer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2168.2016601563)
writeFloat('[PlayerCoordinates]+84', 603.51947021484)
writeFloat('[PlayerCoordinates]+88', 266.14349365234)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130942</ID>
                                  <Description>"Head to Mountaineer to Accept Order 53"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -921.78460693359)
writeFloat('[PlayerCoordinates]+84', 1063.0844726563)
writeFloat('[PlayerCoordinates]+88', 599.85607910156)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130943</ID>
                                      <Description>"Order 53 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -319.4059753418)
writeFloat('[PlayerCoordinates]+84', 989.09338378906)
writeFloat('[PlayerCoordinates]+88', 737.16760253906)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130944</ID>
                                  <Description>"Meet up with Deadman at the Cabin near Mountain Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -488.2041321)
writeFloat('[PlayerCoordinates]+84', 511.7808533)
writeFloat('[PlayerCoordinates]+88', 681.1845093)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130945</ID>
                                      <Description>"This takes you to Episode 7: Clifford"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>130946</ID>
                              <Description>"Episode 7: Clifford"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>130947</ID>
                                  <Description>"Items"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130948</ID>
                                      <Description>"Order 54 Part 1 - Anti-BT Handgun (Lvl 1)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',171.32550048828) -- X Coord
writeFloat('[PlayerCoordinates]+84',171.54541015625) -- Y Coord
writeFloat('[PlayerCoordinates]+88',106.21268463135) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130949</ID>
                                      <Description>"Order 54 Part 1 - Cryptobiote"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',161.54278564453) -- X Coord
writeFloat('[PlayerCoordinates]+84',151.14329528809) -- Y Coord
writeFloat('[PlayerCoordinates]+88',107.22196960449) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130950</ID>
                                      <Description>"Order 54 Part 1 - Blood Bag"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',154.8953704834) -- X Coord
writeFloat('[PlayerCoordinates]+84',147.11311340332) -- Y Coord
writeFloat('[PlayerCoordinates]+88',106.16584777832) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130951</ID>
                                      <Description>"Order 54 Part 1 - Cryptobiote"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',128.60760498047) -- X Coord
writeFloat('[PlayerCoordinates]+84',66.32152557373) -- Y Coord
writeFloat('[PlayerCoordinates]+88',108.20802307129) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130952</ID>
                                      <Description>"Order 54 Part 1 - Blood Bag"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',100.65667724609) -- X Coord
writeFloat('[PlayerCoordinates]+84',70.368103027344) -- Y Coord
writeFloat('[PlayerCoordinates]+88',108.15480804443) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130953</ID>
                                  <Description>"Order 54 Part 1 - [World War 2 Battlefield] - Find Sewer Entrance"</Description>
                                  <Color>FF0000</Color>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 65.41815186)
writeFloat('[PlayerCoordinates]+84', 95.5856781)
writeFloat('[PlayerCoordinates]+88', 103.990715)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130954</ID>
                                      <Description>"Order 54 Part 1 - Hematic Grenade (Lvl 1)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',73.924468994141) -- X Coord
writeFloat('[PlayerCoordinates]+84',13.063589096069) -- Y Coord
writeFloat('[PlayerCoordinates]+88',95.515007019043) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130955</ID>
                                      <Description>"Order 54 Part 1 - Blood Bag"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',91.071022033691) -- X Coord
writeFloat('[PlayerCoordinates]+84',17.841133117676) -- Y Coord
writeFloat('[PlayerCoordinates]+88',96.696441650391) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130956</ID>
                                  <Description>"Order 54 Part 2 - [World War 2 Battlefield] - Find BB (Cutscene)"</Description>
                                  <Color>FF0000</Color>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 96.21802521)
writeFloat('[PlayerCoordinates]+84', 10.64340496)
writeFloat('[PlayerCoordinates]+88', 99.19300079)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130957</ID>
                                      <Description>"Order 54 Part 1 - Blood Bag"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',90.847770690918) -- X Coord
writeFloat('[PlayerCoordinates]+84',-7.0623841285706) -- Y Coord
writeFloat('[PlayerCoordinates]+88',104.63076782227) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130958</ID>
                                  <Description>"Order 54 Part 3 - [World War 2 Battlefield] - Exit Sewer"</Description>
                                  <Color>FF0000</Color>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 81.93144989)
writeFloat('[PlayerCoordinates]+84', -12.43567181)
writeFloat('[PlayerCoordinates]+88', 104.5936813)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130959</ID>
                                  <Description>"Defeat Clifford"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130960</ID>
                                      <Description>"Items"</Description>
                                      <GroupHeader>1</GroupHeader>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>130961</ID>
                                          <Description>"Order 54 Part 4 - Assault Rifle (Lvl 2)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',57.192081451416) -- X Coord
writeFloat('[PlayerCoordinates]+84',3.8205513954163) -- Y Coord
writeFloat('[PlayerCoordinates]+88',107.15380859375) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>130962</ID>
                                          <Description>"Order 54 Part 4 - Cryptobiote"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',28.19003868103) -- X Coord
writeFloat('[PlayerCoordinates]+84',-8.2350635528564) -- Y Coord
writeFloat('[PlayerCoordinates]+88',108.73412322998) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>130963</ID>
                                          <Description>"Order 54 Part 4 - Shotgun (Lvl 2)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',25.108293533325) -- X Coord
writeFloat('[PlayerCoordinates]+84',1.0091278553009) -- Y Coord
writeFloat('[PlayerCoordinates]+88',110.26573181152) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>130964</ID>
                                          <Description>"Order 54 Part 4 - Blood Bag"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',13.461980819702) -- X Coord
writeFloat('[PlayerCoordinates]+84',17.466979980469) -- Y Coord
writeFloat('[PlayerCoordinates]+88',109.655128479) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>130965</ID>
                                          <Description>"Order 54 Part 4 - Hematic Grenade (Lvl 1)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',20.577871322632) -- X Coord
writeFloat('[PlayerCoordinates]+84',66.427574157715) -- Y Coord
writeFloat('[PlayerCoordinates]+88',107.59117126465) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>130966</ID>
                                          <Description>"Order 54 Part 4 - Cryptobiote"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2.9534058570862) -- X Coord
writeFloat('[PlayerCoordinates]+84',64.393989562988) -- Y Coord
writeFloat('[PlayerCoordinates]+88',108.06653594971) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>130967</ID>
                                          <Description>"Order 54 Part 4 - Blood Bag"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1.9661084413528) -- X Coord
writeFloat('[PlayerCoordinates]+84',68.388236999512) -- Y Coord
writeFloat('[PlayerCoordinates]+88',108.05534362793) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>130968</ID>
                                          <Description>"Order 54 Part 4 - Cryptobiote"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-54.527851104736) -- X Coord
writeFloat('[PlayerCoordinates]+84',60.937953948975) -- Y Coord
writeFloat('[PlayerCoordinates]+88',108.2183303833) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>130969</ID>
                                          <Description>"Order 54 Part 4 - Armor Plate (Lvl 1)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-56.325424194336) -- X Coord
writeFloat('[PlayerCoordinates]+84',62.175884246826) -- Y Coord
writeFloat('[PlayerCoordinates]+88',108.03351593018) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>130970</ID>
                                          <Description>"Order 54 Part 4 - Blood Bag"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-6.7855658531189) -- X Coord
writeFloat('[PlayerCoordinates]+84',20.243032455444) -- Y Coord
writeFloat('[PlayerCoordinates]+88',108.81187438965) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>130971</ID>
                                          <Description>"Order 54 Part 4 - Cryptobiote"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-0.78732627630234) -- X Coord
writeFloat('[PlayerCoordinates]+84',16.391330718994) -- Y Coord
writeFloat('[PlayerCoordinates]+88',109.08322906494) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130972</ID>
                                      <Description>"Order 54 Part 4 - Encounter 1 Vantage Point"</Description>
                                      <Color>FF0000</Color>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -14.62163544)
writeFloat('[PlayerCoordinates]+84', 21.19772148)
writeFloat('[PlayerCoordinates]+88', 115.4032669)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130973</ID>
                                      <Description>"Order 54 Part 4 - Encounter 2/3/4 Vantage Point"</Description>
                                      <Color>FF0000</Color>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -19.00231171)
writeFloat('[PlayerCoordinates]+84', 40.26580429)
writeFloat('[PlayerCoordinates]+88', 115.4010239)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130974</ID>
                                  <Description>"Accept Order 56 from Mountain Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130975</ID>
                                      <Description>"Order 56 Part 1 - Collect Winter Clothes"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -390.1298828)
writeFloat('[PlayerCoordinates]+84', 327.2009888)
writeFloat('[PlayerCoordinates]+88', 602.1593628)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130976</ID>
                                      <Description>"Order 56 Part 2 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130977</ID>
                                  <Description>"read email: "[Recovery Request] [V] I Need You to Secure a Chip in BT Country""</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130978</ID>
                                      <Description>"Accept Order 75 from Mountain Knot City"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130979</ID>
                                      <Description>"Order 75 Part 1 - Pick up Item"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -899.3306274)
writeFloat('[PlayerCoordinates]+84', 23.67071533)
writeFloat('[PlayerCoordinates]+88', 528.2859497)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130980</ID>
                                      <Description>"Order 75 Part 2 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130981</ID>
                                  <Description>"Accept Order 55 from Mountain Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130982</ID>
                                      <Description>"Order 55 - Deliver Mama's Corpse to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1221.0745849609)
writeFloat('[PlayerCoordinates]+84', -222.158462524411367)
writeFloat('[PlayerCoordinates]+88', 532.82336425781)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130983</ID>
                                      <Description>"This takes you to Episode 8: Heartman"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>130984</ID>
                              <Description>"Episode 8: Heartman"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>130985</ID>
                                  <Description>"Accept Order 58, 59 from Heartman's Lab"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130986</ID>
                                      <Description>"Order 58 - Deliver to Geologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -898.26202392578)
writeFloat('[PlayerCoordinates]+84', -789.72894287109)
writeFloat('[PlayerCoordinates]+88', 625.56060791016)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130987</ID>
                                      <Description>"Order 59 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1242.4761962891)
writeFloat('[PlayerCoordinates]+84', -1248.0733642578)
writeFloat('[PlayerCoordinates]+88', 412.21273803711)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130988</ID>
                                  <Description>"read email: "For a Least Meal, Only Pizza Will Suffice""</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130989</ID>
                                      <Description>"Head to Mountain Knot City to Receive Order 57"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130990</ID>
                                      <Description>"Order 57 - Deliver to Peter Englert"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1749.9689941406)
writeFloat('[PlayerCoordinates]+84', 1971.5640869141)
writeFloat('[PlayerCoordinates]+88', 211.4801940918)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>130991</ID>
                                  <Description>"Head back to Paleontologist to Accept Order 60"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1242.4761962891)
writeFloat('[PlayerCoordinates]+84', -1248.0733642578)
writeFloat('[PlayerCoordinates]+88', 412.21273803711)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>130992</ID>
                                      <Description>"Order 60 Part 1 - Pick Up Item 1/5  (Wear Oxygen Mask)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1371.434082)
writeFloat('[PlayerCoordinates]+84', -1346.460815)
writeFloat('[PlayerCoordinates]+88', 340.1844788)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130993</ID>
                                      <Description>"Order 60 Part 1 - Pick Up Item 2/5  (Wear Oxygen Mask)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1353.569458)
writeFloat('[PlayerCoordinates]+84', -1339.365601)
writeFloat('[PlayerCoordinates]+88', 343.8174438)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130994</ID>
                                      <Description>"Order 60 Part 1 - Pick Up Item 3/5  (Wear Oxygen Mask)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1361.869019)
writeFloat('[PlayerCoordinates]+84', -1338.710327)
writeFloat('[PlayerCoordinates]+88', 340.010376)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130995</ID>
                                      <Description>"Order 60 Part 1 - Pick Up Item 4/5  (Wear Oxygen Mask)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1359.21936)
writeFloat('[PlayerCoordinates]+84', -1337.108765)
writeFloat('[PlayerCoordinates]+88', 340.9216003)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130996</ID>
                                      <Description>"Order 60 Part 1 - Pick Up Item 5/5  (Wear Oxygen Mask)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1378.189209)
writeFloat('[PlayerCoordinates]+84', -1342.410278)
writeFloat('[PlayerCoordinates]+88', 341.2489929)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130997</ID>
                                      <Description>"Order 60 Part 2 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1242.4761962891)
writeFloat('[PlayerCoordinates]+84', -1248.0733642578)
writeFloat('[PlayerCoordinates]+88', 412.21273803711)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>130998</ID>
                                      <Description>"Accept Order 61 from Paleontologist"</Description>
                                      <GroupHeader>1</GroupHeader>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>130999</ID>
                                          <Description>"Order 61 Part 1 - Item 1/5 is provided from Order acceptance"</Description>
                                          <GroupHeader>1</GroupHeader>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131000</ID>
                                          <Description>"Order 61 Part 1 - Pick Up Item 2/5"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2011.03418)
writeFloat('[PlayerCoordinates]+84', -983.1091309)
writeFloat('[PlayerCoordinates]+88', 315.8219299)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131001</ID>
                                          <Description>"Order 61 Part 1 - Pick Up Item 3/5"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2026.147949)
writeFloat('[PlayerCoordinates]+84', -1060.050537)
writeFloat('[PlayerCoordinates]+88', 322.1638184)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131002</ID>
                                          <Description>"Order 61 Part 1 - Pick Up Item 4/5"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1986.995605)
writeFloat('[PlayerCoordinates]+84', -1045.139893)
writeFloat('[PlayerCoordinates]+88', 318.0083313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131003</ID>
                                          <Description>"Order 61 Part 1 - Pick Up Item 5/5"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1928.153442)
writeFloat('[PlayerCoordinates]+84', -1009.481628)
writeFloat('[PlayerCoordinates]+88', 328.285553)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131004</ID>
                                          <Description>"Order 61 Part 2 - Deliver to Evo-devo Biologist"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1831.9169921875)
writeFloat('[PlayerCoordinates]+84', -705.4521484375)
writeFloat('[PlayerCoordinates]+88', 466.98864746094)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131005</ID>
                                  <Description>"Go to Lake Knot City and head to Private Room to receive new emails"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131006</ID>
                                      <Description>"read email: "[Test Order] Could You Please Go Look for My Cube?""</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131007</ID>
                                      <Description>"Collect Lost Cargo (Cube 5)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1127.741089)
writeFloat('[PlayerCoordinates]+84', -706.7249756)
writeFloat('[PlayerCoordinates]+88', 640.6445312)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131008</ID>
                                      <Description>"Deliver Lost Cargo to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1242.4761962891)
writeFloat('[PlayerCoordinates]+84', -1248.0733642578)
writeFloat('[PlayerCoordinates]+88', 412.21273803711)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131009</ID>
                                  <Description>"Head to Heartman's Lab to Accept Order 62 (Inside His Office)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1214.4786376953)
writeFloat('[PlayerCoordinates]+84', -222.15846252441)
writeFloat('[PlayerCoordinates]+88', 532.83221435547)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131010</ID>
                                      <Description>"Order 62 Part 1 - Deliver to Chiral Relay"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2557.8117675781)
writeFloat('[PlayerCoordinates]+84', -2013.41796875)
writeFloat('[PlayerCoordinates]+88', 93.71546936)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131011</ID>
                                      <Description>"Order 62 Part 2 - Start of BT Area (you might have a codec conversation going south)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2640.370117)
writeFloat('[PlayerCoordinates]+84', -2037.759888)
writeFloat('[PlayerCoordinates]+88', 86.67215729)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131012</ID>
                                      <Description>"Order 62 Part 2 - Next to BTs (they wont spawn until the heavy rain starts (let them drown you)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2692.606201)
writeFloat('[PlayerCoordinates]+84', -2152.452148)
writeFloat('[PlayerCoordinates]+88', 83.84473419)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131013</ID>
                                  <Description>"Find a Way to Cross the Tar Belt - Cause Buildings to Spawn"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2688.777832)
writeFloat('[PlayerCoordinates]+84', -2322.387451)
writeFloat('[PlayerCoordinates]+88', 86.26888275)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131014</ID>
                                      <Description>"Die Hard-Man may speak to you after you drop down to the next bulding (East)"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131015</ID>
                                      <Description>"Find a Way to Cross the Tar Belt - Cause Last Buildings to Spawn"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2612.965576)
writeFloat('[PlayerCoordinates]+84', -2598.32251)
writeFloat('[PlayerCoordinates]+88', 87.41194916)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131016</ID>
                                      <Description>"At Waypoint"</Description>
                                      <Color>0000FF</Color>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-2603.3293457031) -- X Coord
writeFloat('[PlayerCoordinates]+84',-2657.1179199219) -- Y Coord
writeFloat('[PlayerCoordinates]+88',81.047027587891) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131017</ID>
                                      <Description>"This takes you to Episode 9: Higgs"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131018</ID>
                              <Description>"Episode 9: Higgs"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131019</ID>
                                  <Description>"Connect to Q-pid: Center North of Edge Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -189.4738922)
writeFloat('[PlayerCoordinates]+84', 952.4784546)
writeFloat('[PlayerCoordinates]+88', 99.27870941)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131020</ID>
                                  <Description>"Order 63 Part 1 - Cutscene (Heading West) after Leaving Distribution Center North of Edge Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -225.0032654)
writeFloat('[PlayerCoordinates]+84', 715.1629028)
writeFloat('[PlayerCoordinates]+88', 109.9954147)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131021</ID>
                                      <Description>"Order 63 Part 2 - Edge Knot City - Activate Chiral Network"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -624.60943603516)
writeFloat('[PlayerCoordinates]+84', 156.75914001465)
writeFloat('[PlayerCoordinates]+88', 99.559226989746)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131022</ID>
                                  <Description>"Find the source of the noise &gt; head up ramp for cutscene &amp; BT Boss Battle #3"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-607.67395019531) -- X Coord
writeFloat('[PlayerCoordinates]+84',184.57713317871) -- Y Coord
writeFloat('[PlayerCoordinates]+88',104.7926940918) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131023</ID>
                                  <Description>"Find the source of the noise &gt; head up ramp for cutscene &amp; Boss Battle #3 (BT#3)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -624.60943603516)
writeFloat('[PlayerCoordinates]+84', 156.75914001465)
writeFloat('[PlayerCoordinates]+88', 99.559226989746)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131024</ID>
                                  <Description>"Order 64 - Eliminate the Big BT"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131025</ID>
                                      <Description>"Disable Infinite Health Before BT Dies (You Repatriate)"</Description>
                                      <Color>0000FF</Color>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131026</ID>
                                  <Description>"Head Back to Edge Knot City and go to Private Room to Fragile Jump to the Beach"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -624.60943603516)
writeFloat('[PlayerCoordinates]+84', 156.75914001465)
writeFloat('[PlayerCoordinates]+88', 99.559226989746)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131027</ID>
                                  <Description>"Order 65 - Elimination: Higgs"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131028</ID>
                                      <Description>"Disable Infinite Health Before Higgs Loses at Punchout (You Repatriate)"</Description>
                                      <Color>0000FF</Color>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131029</ID>
                              <Description>"Episode 10: Die Hard-Man"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131030</ID>
                                  <Description>"Head for Lake Knot City - Cutscene 1 with Deadman (Head North)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1871.51953125) -- X Coord
writeFloat('[PlayerCoordinates]+84',-601.76788330078) -- Y Coord
writeFloat('[PlayerCoordinates]+88',502.23913574219) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131031</ID>
                                      <Description>"(Optional) Head for Lake Knot City - Fabricate a Vehicle at Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131032</ID>
                                      <Description>"Head for Lake Knot City - Cutscene 2 with Deadman (Head North)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1498.0712890625) -- X Coord
writeFloat('[PlayerCoordinates]+84',1568.1669921875) -- Y Coord
writeFloat('[PlayerCoordinates]+88',229.3157043457) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131033</ID>
                                      <Description>"Head for Lake Knot City - Cutscene 3 with Deadman (Head North)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2002.8326416016) -- X Coord
writeFloat('[PlayerCoordinates]+84',1161.9097900391) -- Y Coord
writeFloat('[PlayerCoordinates]+88',180.37614440918) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131034</ID>
                                      <Description>"read e-mail: "A Final Request for Pizza""</Description>
                                      <GroupHeader>1</GroupHeader>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131035</ID>
                                          <Description>"Head to First Prepper to Accept Order 66"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131036</ID>
                                          <Description>"Order 66 - Deliver to Peter Englert"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1749.9689941406)
writeFloat('[PlayerCoordinates]+84', 1971.5640869141)
writeFloat('[PlayerCoordinates]+88', 211.4801940918)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131037</ID>
                                  <Description>"Head for Lake Knot City - Cutscene 4 with Deadman &amp; Heartman (Head North)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2395.6638183594) -- X Coord
writeFloat('[PlayerCoordinates]+84',1612.8059082031) -- Y Coord
writeFloat('[PlayerCoordinates]+88',202.50698852539) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131038</ID>
                                  <Description>"Head for Lake Knot City - Head North for Cutscene &amp; start Episode 11: Clifford Unger"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2461.6921386719) -- X Coord
writeFloat('[PlayerCoordinates]+84',1742.5263671875) -- Y Coord
writeFloat('[PlayerCoordinates]+88',215.24346923828) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131039</ID>
                              <Description>"Episode 11: Clifford Unger"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131040</ID>
                                  <Description>"Items"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131041</ID>
                                      <Description>"Order 67 Part 1 - Blood Bag"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -115.0857162)
writeFloat('[PlayerCoordinates]+84', 218.5013123)
writeFloat('[PlayerCoordinates]+88', 126.7442245)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131042</ID>
                                      <Description>"Order 67 Part 1 - Cryptobiote"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -31.00772667)
writeFloat('[PlayerCoordinates]+84', 173.7985535)
writeFloat('[PlayerCoordinates]+88', 131.13797)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131043</ID>
                                      <Description>"Order 67 Part 1 - Cryptobiote"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -37.74910736)
writeFloat('[PlayerCoordinates]+84', 157.6686554)
writeFloat('[PlayerCoordinates]+88', 129.969101)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131044</ID>
                                      <Description>"Order 67 Part 1 - Blood Bag (use this and walk forward until you see Anti BT Handguns spawn if you want them)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -22.63981056)
writeFloat('[PlayerCoordinates]+84', 159.1943665)
writeFloat('[PlayerCoordinates]+88', 131.0270386)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131045</ID>
                                      <Description>"Order 67 Part 1 - Cryptobiote"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -17.88534546)
writeFloat('[PlayerCoordinates]+84', 124.5670013)
writeFloat('[PlayerCoordinates]+88', 128.9736023)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131046</ID>
                                      <Description>"Order 67 Part 1 - Anti BT Handgun (Lvl 1) Pickup"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 8.052550316)
writeFloat('[PlayerCoordinates]+84', 61.39998627)
writeFloat('[PlayerCoordinates]+88', 128.6885071)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131047</ID>
                                      <Description>"Order 67 Part 1 - Anti BT Handgun (Lvl 1) Pickup"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 62.84210968)
writeFloat('[PlayerCoordinates]+84', 58.78548813)
writeFloat('[PlayerCoordinates]+88', 134.996933)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131048</ID>
                                      <Description>"Order 67 Part 1 - Cryptobiote"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 80.01526642)
writeFloat('[PlayerCoordinates]+84', 48.96261215)
writeFloat('[PlayerCoordinates]+88', 136.4726868)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131049</ID>
                                      <Description>"Order 67 Part 1 - Blood Bag"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 144.4800568)
writeFloat('[PlayerCoordinates]+84', 23.28774643)
writeFloat('[PlayerCoordinates]+88', 144.5024719)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131050</ID>
                                      <Description>"Order 67 Part 1 - Cryptobiote"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 157.6137238)
writeFloat('[PlayerCoordinates]+84', -23.66797256)
writeFloat('[PlayerCoordinates]+88', 155.6232758)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131051</ID>
                                      <Description>"Order 67 Part 1 - Move forward for Waypoint/Cutscene"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 157.6137238)
writeFloat('[PlayerCoordinates]+84', -23.66797256)
writeFloat('[PlayerCoordinates]+88', 155.6232758)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131052</ID>
                                  <Description>"Items"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131053</ID>
                                      <Description>"Order 67 Part 2 - Boss Fight - Assault Rifle 3 &amp; Blood Bag"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 142.2155914)
writeFloat('[PlayerCoordinates]+84', -73.06476593)
writeFloat('[PlayerCoordinates]+88', 152.4251404)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131054</ID>
                                          <Description>"Order 67 Part 2 - Boss Fight - Hematic Grenade (Lvl 2)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',87.689529418945) -- X Coord
writeFloat('[PlayerCoordinates]+84',-251.10562133789) -- Y Coord
writeFloat('[PlayerCoordinates]+88',146.15476989746) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131055</ID>
                                          <Description>"Order 67 Part 2 - Boss Fight - Anti-BT Handgun (Lvl 2)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',88.140602111816) -- X Coord
writeFloat('[PlayerCoordinates]+84',-197.3458404541) -- Y Coord
writeFloat('[PlayerCoordinates]+88',157.58711242676) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131056</ID>
                                  <Description>"Order 67 Part 2 - Boss Fight - 1st Location Vantage Point"</Description>
                                  <Color>0000FF</Color>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 85.27231598)
writeFloat('[PlayerCoordinates]+84', -158.7615051)
writeFloat('[PlayerCoordinates]+88', 160.6088867)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131057</ID>
                                      <Description>"Order 67 Part 2 - Boss Fight - 1st Location (Directly Behind Cliff)"</Description>
                                      <Color>0000FF</Color>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',73.313987731934) -- X Coord
writeFloat('[PlayerCoordinates]+84',-124.9591217041) -- Y Coord
writeFloat('[PlayerCoordinates]+88',144.91435241699) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131058</ID>
                                  <Description>"Items"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131059</ID>
                                      <Description>"Order 67 Part 2 - Boss Fight - Blood Bag"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 76.16706848)
writeFloat('[PlayerCoordinates]+84', -183.7270203)
writeFloat('[PlayerCoordinates]+88', 151.8994751)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131060</ID>
                                      <Description>"Order 67 Part 2 - Boss Fight - Armor Plate (Lvl 2)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 128.9989166)
writeFloat('[PlayerCoordinates]+84', -177.8865509)
writeFloat('[PlayerCoordinates]+88', 162.1077271)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131061</ID>
                                      <Description>"Order 67 Part 2 - Boss Fight - Blood Bag"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 150.1482086)
writeFloat('[PlayerCoordinates]+84', -196.3136749)
writeFloat('[PlayerCoordinates]+88', 150.5882568)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131062</ID>
                                      <Description>"Order 67 Part 2 - Boss Fight - Assault Rifle (Lvl 3)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 156.012085)
writeFloat('[PlayerCoordinates]+84', -191.0361938)
writeFloat('[PlayerCoordinates]+88', 151.2233734)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131063</ID>
                                  <Description>"Order 67 Part 2 - Boss Fight - 2nd Location Vantage Point: North Side"</Description>
                                  <Color>0000FF</Color>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 87.70005035)
writeFloat('[PlayerCoordinates]+84', -197.7876892)
writeFloat('[PlayerCoordinates]+88', 157.3880157)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131064</ID>
                                      <Description>"Note: Spawns in Multiple Locations"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131065</ID>
                                      <Description>"Order 67 Part 2 - Boss Fight - 2nd Location Vantage Point: On top of House (you can't jump off)"</Description>
                                      <Color>0000FF</Color>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',169.31996154785) -- X Coord
writeFloat('[PlayerCoordinates]+84',-211.42315673828) -- Y Coord
writeFloat('[PlayerCoordinates]+88',159.67163085938) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131066</ID>
                                          <Description>"Order 67 Part 2 - Boss Fight - 2nd Location Vantage Point: Behind House (that you can't jump off of)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',175.53594970703) -- X Coord
writeFloat('[PlayerCoordinates]+84',-216.82836914063) -- Y Coord
writeFloat('[PlayerCoordinates]+88',152.92219543457) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131067</ID>
                                          <Description>"Order 67 Part 2 - Boss Fight - 2nd Location Vantage Point: Behind fallen tree"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',128.99089050293) -- X Coord
writeFloat('[PlayerCoordinates]+84',-242.39428710938) -- Y Coord
writeFloat('[PlayerCoordinates]+88',147.87367248535) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131068</ID>
                                          <Description>"Order 67 Part 2 - Boss Fight - 2nd Location Vantage Point: Behind fallen tree behind a Potential Boss Spawn Location"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',113.89720916748) -- X Coord
writeFloat('[PlayerCoordinates]+84',-250.7696685791) -- Y Coord
writeFloat('[PlayerCoordinates]+88',147.6918182373) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>133503</ID>
                                  <Description>"Order 67 Part 2 - Boss Fight - 3rd Location (Get in Crawl Position)"</Description>
                                  <Color>0000FF</Color>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',106.48251342773) -- X Coord
writeFloat('[PlayerCoordinates]+84',-180.63412475586) -- Y Coord
writeFloat('[PlayerCoordinates]+88',162.69920349121) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131070</ID>
                                  <Description>"Order 67 Part 2 - Boss Fight - 4th Location Vantage Point"</Description>
                                  <Color>0000FF</Color>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 133.1217957)
writeFloat('[PlayerCoordinates]+84', -181.3889923)
writeFloat('[PlayerCoordinates]+88', 162.4309082)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131071</ID>
                                  <Description>"This takes you to Episode 12: Bridges"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131072</ID>
                              <Description>"Episode 12: Bridges"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131073</ID>
                                  <Description>"Order 68 - Part 1 - BT #1 [Go down the hill (east), can avoid and not kill]"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-969.38354492188) -- X Coord
writeFloat('[PlayerCoordinates]+84',85.045257568359) -- Y Coord
writeFloat('[PlayerCoordinates]+88',197.7833404541) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131074</ID>
                                  <Description>"Order 68 - Part 2 - BT #2 Final BT Battle [head towards waypoint]"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1157.4947509766) -- X Coord
writeFloat('[PlayerCoordinates]+84',816.10302734375) -- Y Coord
writeFloat('[PlayerCoordinates]+88',139.15963745117) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131075</ID>
                                      <Description>"Item Spawns [Random Spawns based on start of fight, items may not be there]"</Description>
                                      <GroupHeader>1</GroupHeader>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131076</ID>
                                          <Description>"Order 68 - Part 2 - BT #2 Final BT Battle - Quadruple Rocket Launcher"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1205.170166)
writeFloat('[PlayerCoordinates]+84', 804.644104)
writeFloat('[PlayerCoordinates]+88', 142.6672668)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131077</ID>
                                          <Description>"Order 68 - Part 2 - BT #2 Final BT Battle - Quadruple Rocket Launcher"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1205.1315917969) -- X Coord
writeFloat('[PlayerCoordinates]+84',862.7451171875) -- Y Coord
writeFloat('[PlayerCoordinates]+88',136.91021728516) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131078</ID>
                                          <Description>"Order 68 - Part 2 - BT #2 Final BT Battle - Quadruple Rocket Launcher"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1212.5667724609) -- X Coord
writeFloat('[PlayerCoordinates]+84',847.30108642578) -- Y Coord
writeFloat('[PlayerCoordinates]+88',138.07791137695) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131079</ID>
                                          <Description>"Order 68 - Part 2 - BT #2 Final BT Battle - Blood Bag"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1220.4798583984) -- X Coord
writeFloat('[PlayerCoordinates]+84',840.71368408203) -- Y Coord
writeFloat('[PlayerCoordinates]+88',139.10534667969) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131080</ID>
                                  <Description>"Order 68 - Part 3 - Deliver to Capital Knot City Isolation Ward"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1694.714844)
writeFloat('[PlayerCoordinates]+84', 1056.515259)
writeFloat('[PlayerCoordinates]+88', 136.5499115)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131081</ID>
                                  <Description>"This takes you to Episode 13: Sam Strand"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131082</ID>
                              <Description>"Episode 13: Sam Strand"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131083</ID>
                                  <Description>"Order 69 Part 1 - Walk around aimlessly, game will automatically trigger cutscene"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131084</ID>
                                  <Description>"Order 69 Part 2 - De-equip gun &amp; head towards Amelie to hug her"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131085</ID>
                                  <Description>"Order 69 Part 3 - [Repeats 5 Times] After credits stop you can move a few steps to start the next cutscene"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>133505</ID>
                                  <Description>"Order 69 Part 4 - Head towards Amelie [Towards the Water] (after cutscene requiring you to press button to reconnect with the living)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',83.479370117188) -- X Coord
writeFloat('[PlayerCoordinates]+84',31.043361663818) -- Y Coord
writeFloat('[PlayerCoordinates]+88',103.44848632813) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131087</ID>
                                  <Description>"This takes you to Episode 14: Lou"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131088</ID>
                              <Description>"Episode 14: Lou"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131089</ID>
                                  <Description>"Order 70 Part 1 - Cutscene Outside of Incinerator West of Capital Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',574.25170898438) -- X Coord
writeFloat('[PlayerCoordinates]+84',365.76181030273) -- Y Coord
writeFloat('[PlayerCoordinates]+88',238.32539367676) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131090</ID>
                                      <Description>"Order 70 Part 2 - Deliver to Incinerator West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 526.4191284)
writeFloat('[PlayerCoordinates]+84', 328.3183594)
writeFloat('[PlayerCoordinates]+88', 238.3401031)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131091</ID>
                                  <Description>"This takes you to Episode 15: Tomorrow Is In Your Hands"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131092</ID>
                              <Description>"Episode 15: Tomorrow Is In Your Hands"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131093</ID>
                                  <Description>"Fragile Jump to Distribution Center South of Lake Knot City and Accept Order 76"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131094</ID>
                                      <Description>"read email: [Recovery Request] [V] My Chip! Grab it Back from the Terrorists!"</Description>
                                      <GroupHeader>1</GroupHeader>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131095</ID>
                                          <Description>"Order 76 Part 1 - [V] Neutralize the terrorists in the Ruins (Entrance of Lower Area)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1191.055664)
writeFloat('[PlayerCoordinates]+84', 1673.424194)
writeFloat('[PlayerCoordinates]+88', 200.9716797)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                          <CheatEntries>
                                            <CheatEntry>
                                              <ID>131096</ID>
                                              <Description>"Order 76 Part 1 - [V] Neutralize the terrorists in the Ruins (Exit of Lower Area, On Top)"</Description>
                                              <VariableType>Auto Assembler Script</VariableType>
                                              <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1231.9338378906) -- X Coord
writeFloat('[PlayerCoordinates]+84',1772.9545898438) -- Y Coord
writeFloat('[PlayerCoordinates]+88',205.79541015625) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                            </CheatEntry>
                                          </CheatEntries>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131097</ID>
                                          <Description>"Order 76 Part 2 - [V] Recover the Chip from Ruined Shelter Private Locker"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1322.494751)
writeFloat('[PlayerCoordinates]+84', 1781.724731)
writeFloat('[PlayerCoordinates]+88', 200.0786896)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131098</ID>
                                          <Description>"Order 76 Part 3 - [V] Deliver to Distribution Center South of Lake Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131099</ID>
                                      <Description>"read email: Have You Been Getting Some Weird Emails?"</Description>
                                      <GroupHeader>1</GroupHeader>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131100</ID>
                                          <Description>"Fabricate a PCC Lv.2 and withdraw 800 metal to build a bridge and a ladder"</Description>
                                          <GroupHeader>1</GroupHeader>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133506</ID>
                                          <Description>"Cube 6 Part 1 - build a bridge at this location, 80m long (change bridge length) or just use last teleport"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',954.42932128906) -- X Coord
writeFloat('[PlayerCoordinates]+84',1930.2130126953) -- Y Coord
writeFloat('[PlayerCoordinates]+88',169.4111328125) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                          <CheatEntries>
                                            <CheatEntry>
                                              <ID>131102</ID>
                                              <Description>"Cube 6 Part 1 - place a ladder to the other side"</Description>
                                              <VariableType>Auto Assembler Script</VariableType>
                                              <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 972.3163452)
writeFloat('[PlayerCoordinates]+84', 2064.905762)
writeFloat('[PlayerCoordinates]+88', 168.3616333)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                            </CheatEntry>
                                            <CheatEntry>
                                              <ID>131103</ID>
                                              <Description>"Cube 6 Part 1 - Pick-up Lost Cargo: Final Companion Cube (Cube 6)"</Description>
                                              <VariableType>Auto Assembler Script</VariableType>
                                              <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 982.8112183)
writeFloat('[PlayerCoordinates]+84', 2123.182861)
writeFloat('[PlayerCoordinates]+88', 187.7253876)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                            </CheatEntry>
                                            <CheatEntry>
                                              <ID>131104</ID>
                                              <Description>"Cube 6 Part 2 - Deliver to the Incinerator West of Lake Knot City"</Description>
                                              <VariableType>Auto Assembler Script</VariableType>
                                              <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -322.81805419922)
writeFloat('[PlayerCoordinates]+84', 2191.2136230469)
writeFloat('[PlayerCoordinates]+88', 218.59948730469)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                            </CheatEntry>
                                          </CheatEntries>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>132989</ID>
                              <Description>"Director's Cut Episode Quests"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <Color>008000</Color>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>133003</ID>
                                  <Description>"Eastern Region"</Description>
                                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132990</ID>
                                      <Description>"Accept Order 77 from Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -438.5249329)
writeFloat('[PlayerCoordinates]+84', 266.2165527)
writeFloat('[PlayerCoordinates]+88', 137.3740692)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133173</ID>
                                          <Description>"Order 77 - Outside Entrance of Ruined Factory"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',120.52124786377) -- X Coord
writeFloat('[PlayerCoordinates]+84',452.49322509766) -- Y Coord
writeFloat('[PlayerCoordinates]+88',252.72410583496) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132991</ID>
                                          <Description>"Note: I had to do standard missions from this location to get Order 77 to unlock in late-game"</Description>
                                          <GroupHeader>1</GroupHeader>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132999</ID>
                                          <Description>"Order 77 - Pick up item 4 items at Ruined Factory MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',277.41485595703) -- X Coord
writeFloat('[PlayerCoordinates]+84',519.83526611328) -- Y Coord
writeFloat('[PlayerCoordinates]+88',298.10589599609) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133000</ID>
                                          <Description>"Order 77 - Deliver to Distribution Center West of Capital Knot City &amp; Accept Order 78"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -438.5249329)
writeFloat('[PlayerCoordinates]+84', 266.2165527)
writeFloat('[PlayerCoordinates]+88', 137.3740692)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133004</ID>
                                      <Description>"Order 78 - Open Control Panel #1 at Ruined Factory"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',277.41485595703) -- X Coord
writeFloat('[PlayerCoordinates]+84',519.83526611328) -- Y Coord
writeFloat('[PlayerCoordinates]+88',298.10589599609) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133007</ID>
                                          <Description>"Order 78 - Pick up 5 item from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',341.39114379883) -- X Coord
writeFloat('[PlayerCoordinates]+84',517.20544433594) -- Y Coord
writeFloat('[PlayerCoordinates]+88',298.10589599609) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133008</ID>
                                          <Description>"Order 78 - Teleport back to Vehicle (if you used it)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',241.1863861084) -- X Coord
writeFloat('[PlayerCoordinates]+84',539.00946044922) -- Y Coord
writeFloat('[PlayerCoordinates]+88',307.48614501953) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133012</ID>
                                          <Description>"Order 78 - Deliver to Distribution Center West of Capital Knot City &amp; Accept Order 79"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -438.5249329)
writeFloat('[PlayerCoordinates]+84', 266.2165527)
writeFloat('[PlayerCoordinates]+88', 137.3740692)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133507</ID>
                                      <Description>"Order 79 - Beginning"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',253.6429901123) -- X Coord
writeFloat('[PlayerCoordinates]+84',522.22625732422) -- Y Coord
writeFloat('[PlayerCoordinates]+88',301.75085449219) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133014</ID>
                                          <Description>"Order 79 - Open Control Panel #2 at Ruined Factory and Neutralize all Targets"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',341.39114379883) -- X Coord
writeFloat('[PlayerCoordinates]+84',517.20544433594) -- Y Coord
writeFloat('[PlayerCoordinates]+88',298.10589599609) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133017</ID>
                                          <Description>"Order 79 - Open Control Panel #3 at Ruined Factory"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',370.11755371094) -- X Coord
writeFloat('[PlayerCoordinates]+84',582.50012207031) -- Y Coord
writeFloat('[PlayerCoordinates]+88',291.35571289063) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133019</ID>
                                          <Description>"Order 79 - Deliver items to Ruined Factory Terminal"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',343.82635498047) -- X Coord
writeFloat('[PlayerCoordinates]+84',592.18804931641) -- Y Coord
writeFloat('[PlayerCoordinates]+88',291.88571166992) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133022</ID>
                                          <Description>"Head up ladder for a cutscene"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',358.80374145508) -- X Coord
writeFloat('[PlayerCoordinates]+84',583.99438476563) -- Y Coord
writeFloat('[PlayerCoordinates]+88',291.38488769531) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133024</ID>
                                          <Description>"Teleport back to Vehicle (if you used it)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',241.1863861084) -- X Coord
writeFloat('[PlayerCoordinates]+84',539.00946044922) -- Y Coord
writeFloat('[PlayerCoordinates]+88',307.48614501953) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>133027</ID>
                                  <Description>"Central Region"</Description>
                                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>133029</ID>
                                      <Description>"Accept Order 80 from Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133032</ID>
                                          <Description>"Order 80 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133034</ID>
                                      <Description>"Accept Order 81 from Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2152.3859863281)
writeFloat('[PlayerCoordinates]+84', -910.64288330078)
writeFloat('[PlayerCoordinates]+88', 156.43530273438)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133036</ID>
                                          <Description>"Order 81 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133038</ID>
                                      <Description>"Accept Order 82 from Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -319.4059753418)
writeFloat('[PlayerCoordinates]+84', 989.09338378906)
writeFloat('[PlayerCoordinates]+88', 737.16760253906)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133039</ID>
                                          <Description>"Order 82 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133176</ID>
                                      <Description>"Accept Order 83 from Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133174</ID>
                                          <Description>"Order 83 - Near Rescue Area (Conversation/cutscene moving southeast, near the water)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2123.7663574219) -- X Coord
writeFloat('[PlayerCoordinates]+84',-697.38775634766) -- Y Coord
writeFloat('[PlayerCoordinates]+88',185.66040039063) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133186</ID>
                                          <Description>"Order 83 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133179</ID>
                                      <Description>"Order 84 - Move forward for a chat to be told about Order 84, then go accept"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1225.0921630859) -- X Coord
writeFloat('[PlayerCoordinates]+84',280.92181396484) -- Y Coord
writeFloat('[PlayerCoordinates]+88',362.28427124023) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133181</ID>
                                          <Description>"Order 84 - Head east to rescue porter"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-879.98309326172) -- X Coord
writeFloat('[PlayerCoordinates]+84',454.32437133789) -- Y Coord
writeFloat('[PlayerCoordinates]+88',466.90200805664) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133183</ID>
                                          <Description>"Order 84 - Deliver to Mountain Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133185</ID>
                                      <Description>"After turning in Order 82, Die-Hardman should tell you about Order 85, accept"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133189</ID>
                                          <Description>"Order 85 - Head south (up hill) to rescue porter+cutscene"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-2131.6853027344) -- X Coord
writeFloat('[PlayerCoordinates]+84',-302.28720092773) -- Y Coord
writeFloat('[PlayerCoordinates]+88',522.76147460938) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133497</ID>
                                          <Description>"Order 85 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>131105</ID>
                          <Description>"Vehicle"</Description>
                          <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                          <GroupHeader>1</GroupHeader>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>131106</ID>
                              <Description>"Episode 2: Amelie"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131107</ID>
                                  <Description>"Begins from turning in Order 11 &amp; using Private Room to start cube 1"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131108</ID>
                                  <Description>"Collect Lost Cargo: Companion Cube: Benjamin (Cube 1)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-221.97820219091) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-221.97820219091) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',466.27209304945) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',466.27209304945) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',146.09909057617) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',146.09909057617) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131109</ID>
                                      <Description>"Deliver Lost Cargo: Companion Cube: Benjamin to Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -434.600480057907) --X1
writeDouble('[VehicleCoordinates]+8F8', -434.600480057907) --X2
writeDouble('[VehicleCoordinates]+D0', 265.06265072403) --Y1
writeDouble('[VehicleCoordinates]+900', 265.06265072403) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.354885042289) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.354885042289) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131110</ID>
                                  <Description>"Accept Order 12 &amp; 13 From Distribution Center West of Capital Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131111</ID>
                                      <Description>"Order 12 - Pick up item from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 353.032836914063) --X1
writeDouble('[VehicleCoordinates]+8F8', 353.032836914063) --X2
writeDouble('[VehicleCoordinates]+D0', 810.902099609375) --Y1
writeDouble('[VehicleCoordinates]+900', 810.902099609375) -- Y2
writeDouble('[VehicleCoordinates]+D8', 162.930827675191) -- Z1
writeDouble('[VehicleCoordinates]+908', 162.930827675191) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131112</ID>
                                          <Description>"Order 12 - Deliver to Waystation West of Capital Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 318.790057202337) --X1
writeDouble('[VehicleCoordinates]+8F8', 318.790057202337) --X2
writeDouble('[VehicleCoordinates]+D0', 1162.37582811471) --Y1
writeDouble('[VehicleCoordinates]+900', 1162.37582811471) -- Y2
writeDouble('[VehicleCoordinates]+D8', 161.919248845007) -- Z1
writeDouble('[VehicleCoordinates]+908', 161.919248845007) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131113</ID>
                                      <Description>"Order 13 - Deliver to Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1442.88495919048) --X1
writeDouble('[VehicleCoordinates]+8F8', 1442.88495919048) --X2
writeDouble('[VehicleCoordinates]+D0', 690.599788112928) --Y1
writeDouble('[VehicleCoordinates]+900', 690.599788112928) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.302408912237) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.302408912237) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131114</ID>
                                  <Description>"Accept Order 14 which gives you Hematic Grenades, then Accept Order 15 From Capital Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131115</ID>
                                      <Description>"Order 15 Part 1 - Go to the BT Area / Defeat a BT With Hematic Grenades / Collect Chiral Crystals"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',950.59212994762) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',950.59212994762) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1090.0296475571) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1090.0296475571) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',134.83911188273) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',134.83911188273) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131116</ID>
                                          <Description>"Order 15 Part 2 - Recycle Chiral Crystals at Distribution Center West of Capital Knot City "</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -434.600480057907) --X1
writeDouble('[VehicleCoordinates]+8F8', -434.600480057907) --X2
writeDouble('[VehicleCoordinates]+D0', 265.06265072403) --Y1
writeDouble('[VehicleCoordinates]+900', 265.06265072403) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.354885042289) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.354885042289) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131117</ID>
                                      <Description>"Order 14 - Deliver to Port Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1999.47536045469) --X1
writeDouble('[VehicleCoordinates]+8F8', -1999.47536045469) --X2
writeDouble('[VehicleCoordinates]+D0', -485.056854248047) --Y1
writeDouble('[VehicleCoordinates]+900', -485.056854248047) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.474717650577) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.474717650577) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131118</ID>
                                      <Description>"Head out of Port Knot City - First Boss Battle (BT#1)"</Description>
                                      <GroupHeader>1</GroupHeader>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131119</ID>
                                          <Description>"Order 16 - Eliminate BT"</Description>
                                          <GroupHeader>1</GroupHeader>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131120</ID>
                                  <Description>"(Player Only) Head Back to Port Knot City to Grab Bike"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1986.126221)
writeFloat('[PlayerCoordinates]+84', -480.7706299)
writeFloat('[PlayerCoordinates]+88', 139.4775085)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131121</ID>
                                  <Description>"Note: You need Ludens Fan to join UCA to receive Order 17, do standard missions / lost cargo before starting Episode 3"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131122</ID>
                                  <Description>"Head for the Harbor - move forward for codec cutscene"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1974.3158114535) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1974.3158114535) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-688.10751520531) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-688.10751520531) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',147.96973239564) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',147.96973239564) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131123</ID>
                                      <Description>"Head to Episode 3: Fragile / Central Region"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1983.4135742188) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1983.4135742188) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-743.91803722265) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-743.91803722265) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',147.96984863281) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',147.96984863281) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131124</ID>
                              <Description>"Episode 3: Fragile"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131125</ID>
                                  <Description>"Read The Ludens Fan e-mail: "Delivery to Port Knot City" (Requires Ludens Fan having joined UCA)"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131126</ID>
                                      <Description>"Use Fragile Jump in Private Room to go back to Port Knot City"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131127</ID>
                                      <Description>"Head to Ludens Fan for Order 17"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 92.6874055161516) --X1
writeDouble('[VehicleCoordinates]+8F8', 92.6874055161516) --X2
writeDouble('[VehicleCoordinates]+D0', 540.118915277497) --Y1
writeDouble('[VehicleCoordinates]+900', 540.118915277497) -- Y2
writeDouble('[VehicleCoordinates]+D8', 206.047497367006) -- Z1
writeDouble('[VehicleCoordinates]+908', 206.047497367006) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131128</ID>
                                      <Description>"Order 17 - Deliver to Port Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1999.47536045469) --X1
writeDouble('[VehicleCoordinates]+8F8', -1999.47536045469) --X2
writeDouble('[VehicleCoordinates]+D0', -485.056854248047) --Y1
writeDouble('[VehicleCoordinates]+900', -485.056854248047) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.474717650577) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.474717650577) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131129</ID>
                                  <Description>"Switch Back to Player until Order 23"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131130</ID>
                                  <Description>"Accept Order 25 from Lake Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131131</ID>
                                      <Description>"Order 25 - Reconstruct the road at the Auto Paver South of Lake Knot City "</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2442.0808190761) --X1
writeDouble('[VehicleCoordinates]+8F8', 2442.0808190761) --X2
writeDouble('[VehicleCoordinates]+D0', 1704.68666043396) --Y1
writeDouble('[VehicleCoordinates]+900', 1704.68666043396) -- Y2
writeDouble('[VehicleCoordinates]+D8', 210.021445795168) -- Z1
writeDouble('[VehicleCoordinates]+908', 210.021445795168) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131132</ID>
                                  <Description>"Head back to Lake Knot City to Accept Order 24, 26"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131133</ID>
                                      <Description>"Order 26 - Deliver to Peter Englert"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1736.88663510808) --X1
writeDouble('[VehicleCoordinates]+8F8', 1736.88663510808) --X2
writeDouble('[VehicleCoordinates]+D0', 1964.92318763108) --Y1
writeDouble('[VehicleCoordinates]+900', 1964.92318763108) -- Y2
writeDouble('[VehicleCoordinates]+D8', 210.988873047901) -- Z1
writeDouble('[VehicleCoordinates]+908', 210.988873047901) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131134</ID>
                                      <Description>"read email from William L: [Test Order] Find my Lost Cargo, Please!”"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131135</ID>
                                      <Description>"Pick up "Lost Cargo: Companion Cube: William" (Cube 2)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1752.5912585269) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1752.5912585269) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1978.5656738281) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1978.5656738281) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',210.96188706119) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',210.96188706119) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131136</ID>
                                      <Description>"Deliver "Lost Cargo: Companion Cube: William" to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131137</ID>
                                      <Description>"Order 24 - Deliver to Distribution Center South of Lake Knot City "</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131138</ID>
                                  <Description>"read email from Thomas Southerland [Recovery Request] [V] Track Down a Chip with a Weird Symbol"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131139</ID>
                                      <Description>"Accept Order 71 from Distribution Center South of Lake Knot City"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131140</ID>
                                      <Description>"Order 71 Part 1 - Pick up Item"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1108.594193971) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1108.594193971) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',154.57180915374) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',154.57180915374) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',130.02378983142) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',130.02378983142) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131141</ID>
                                          <Description>"Order 71 Part 2 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131142</ID>
                                  <Description>"Accept Order 27 from Distribution Center South of Lake Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131143</ID>
                                      <Description>"Order 27 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131144</ID>
                                  <Description>"Accept Order 29 from Weather Station"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131145</ID>
                                      <Description>"Order 29 - Build &amp; Upgrade a Safe House near Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',101.15994984375) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',101.15994984375) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-300.59229862793) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-300.59229862793) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',269.10366326416) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',269.10366326416) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131146</ID>
                                      <Description>"Enter Private Room"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131147</ID>
                                  <Description>"Head back to Weather Station to Accept Order 28"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131148</ID>
                                      <Description>"Order 28 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 115.351102065019) --X1
writeDouble('[VehicleCoordinates]+8F8', 115.351102065019) --X2
writeDouble('[VehicleCoordinates]+D0', -1629.64987632092) --Y1
writeDouble('[VehicleCoordinates]+900', -1629.64987632092) -- Y2
writeDouble('[VehicleCoordinates]+D8', 108.919290458693) -- Z1
writeDouble('[VehicleCoordinates]+908', 108.919290458693) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131149</ID>
                                  <Description>"Head to Distribution Center South of Lake Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131150</ID>
                                      <Description>"Read email from Thomas Southerland [Test Order] You've Got to Find my Cube!"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131151</ID>
                                      <Description>"Pick up "Lost Cargo: Companion Cube: Thomas (Cube 3) in Mule Camp"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',583.15432411758) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',583.15432411758) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',899.5262385672) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',899.5262385672) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',168.24000290659) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',168.24000290659) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131152</ID>
                                      <Description>"Deliver Lost Cargo to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131153</ID>
                                  <Description>"Accept Order 30, 31 from Distribution Center South of Lake Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131154</ID>
                                      <Description>"Order 31 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1997.68957519531) --X1
writeDouble('[VehicleCoordinates]+8F8', 1997.68957519531) --X2
writeDouble('[VehicleCoordinates]+D0', -15.4660186767578) --Y1
writeDouble('[VehicleCoordinates]+900', -15.4660186767578) -- Y2
writeDouble('[VehicleCoordinates]+D8', 151.910415649414) -- Z1
writeDouble('[VehicleCoordinates]+908', 151.910415649414) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131155</ID>
                                      <Description>"Order 30 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1607.94860839844) --X1
writeDouble('[VehicleCoordinates]+8F8', 1607.94860839844) --X2
writeDouble('[VehicleCoordinates]+D0', -274.140829576729) --Y1
writeDouble('[VehicleCoordinates]+900', -274.140829576729) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.984857813475) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.984857813475) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131156</ID>
                                  <Description>"Accept Order 32 from Junk Dealer"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131157</ID>
                                      <Description>"Order 32 Part 1 - Item 1/7 (10kg/110kg)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1281.7566740454) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1281.7566740454) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-743.00415039063) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-743.00415039063) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',141.23886606171) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',141.23886606171) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131158</ID>
                                      <Description>"Order 32 Part 1 - Item 2/7 (20kg/110kg)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1245.0435807217) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1245.0435807217) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-680.15679648117) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-680.15679648117) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',142.60170003162) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',142.60170003162) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131159</ID>
                                      <Description>"Order 32 Part 1 - Item 3/7 (10kg/110kg)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1217.1066622753) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1217.1066622753) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-616.66609910759) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-616.66609910759) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',138.00972885772) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',138.00972885772) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131160</ID>
                                      <Description>"Order 32 Part 1 - Item 4/7 (10kg/110kg)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1238.0110824557) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1238.0110824557) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-608.06921004559) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-608.06921004559) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',137.07388725488) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',137.07388725488) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131161</ID>
                                      <Description>"Order 32 Part 1 - Item 5/7 (30kg/110kg)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1168.9775680847) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1168.9775680847) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-579.42477566535) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-579.42477566535) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',142.06197344716) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',142.06197344716) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131162</ID>
                                      <Description>"Order 32 Part 1 - Item 6/7 (10kg/110kg)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1193.2856167388) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1193.2856167388) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-654.93442739786) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-654.93442739786) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',140.89786320647) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',140.89786320647) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131163</ID>
                                      <Description>"Order 32 Part 1 - Item 7/7 (20kg/110kg)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1219.5497174326) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1219.5497174326) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-664.57678826063) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-664.57678826063) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',144.67206680931) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',144.67206680931) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131164</ID>
                                      <Description>"Order 32 Part 2 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1607.94860839844) --X1
writeDouble('[VehicleCoordinates]+8F8', 1607.94860839844) --X2
writeDouble('[VehicleCoordinates]+D0', -274.140829576729) --Y1
writeDouble('[VehicleCoordinates]+900', -274.140829576729) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.984857813475) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.984857813475) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131165</ID>
                                  <Description>"Accept Order 33 from Junk Dealer"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131166</ID>
                                      <Description>"(Player Only) Order 33 - Deliver to Chiral Artist (carry by hand/no vehicle allowed)"</Description>
                                      <Color>0000FF</Color>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2152.3859863281)
writeFloat('[PlayerCoordinates]+84', -910.64288330078)
writeFloat('[PlayerCoordinates]+88', 156.43530273438)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131167</ID>
                                  <Description>"Accept Order 34 from Chiral Artist"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131168</ID>
                                      <Description>"Order 34 doesn't allow cargo bag, turn in any lost cargo you have before accepting or drop them"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131169</ID>
                                      <Description>"(Player Only) Order 34 - Reunite Junk Dealer with Chiral Artist (Carrying Live Body)"</Description>
                                      <Color>0000FF</Color>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.9134521484)
writeFloat('[PlayerCoordinates]+84', -275.56985473633)
writeFloat('[PlayerCoordinates]+88', 136.38018798828)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131170</ID>
                                  <Description>"Accept Order 35 from Junk Dealer"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131171</ID>
                                      <Description>"Order 35 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131172</ID>
                                  <Description>"Read email: "[Order] Delivery for a Prepper""</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131173</ID>
                                      <Description>"Accept Order 36, 37 from Distribution Center South of Lake Knot City"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131174</ID>
                                      <Description>"Order 37 - Deliver to Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 738.7852565107) --X1
writeDouble('[VehicleCoordinates]+8F8', 738.7852565107) --X2
writeDouble('[VehicleCoordinates]+D0', -641.454963174569) --Y1
writeDouble('[VehicleCoordinates]+900', -641.454963174569) -- Y2
writeDouble('[VehicleCoordinates]+D8', 111.161303309287) -- Z1
writeDouble('[VehicleCoordinates]+908', 111.161303309287) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131175</ID>
                                      <Description>"Order 36 Part 1 - Recover items 1-3 from MULEs, (MULEs move around - this is original locations)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1382.5038065446) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1382.5038065446) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',151.73718180497) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',151.73718180497) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',133.25426710393) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',133.25426710393) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131176</ID>
                                          <Description>"Order 36 Part 1 - Recover items 4-6 from MULEs (MULEs move around  - this is original locations)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1430.8962281211) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1430.8962281211) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',207.7404221401) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',207.7404221401) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',133.71465610204) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',133.71465610204) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131177</ID>
                                          <Description>"Order 36 Part 2 - Deliver to Lake Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131178</ID>
                                  <Description>"***Don't Accept Order 38 Yet***"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131179</ID>
                                  <Description>"Go to Private Room at Lake Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131180</ID>
                                      <Description>"Read email from J: [Recovery Request] [V] Retrieve My Chip from the MULEs, Take Order 72"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131181</ID>
                                      <Description>"Read email from T Southerland [Test Order] Sorry. More Lost Cargo for You..."</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131182</ID>
                                      <Description>"Accept Order 72 from Lake Knot City"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131183</ID>
                                      <Description>"Order 72 - Retrieve V's chip from the MULEs"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2463.60405191884) --X1
writeDouble('[VehicleCoordinates]+8F8', 2463.60405191884) --X2
writeDouble('[VehicleCoordinates]+D0', 1354.73044474371) --Y1
writeDouble('[VehicleCoordinates]+900', 1354.73044474371) -- Y2
writeDouble('[VehicleCoordinates]+D8', 185.547360344177) -- Z1
writeDouble('[VehicleCoordinates]+908', 185.547360344177) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131184</ID>
                                      <Description>"Pick up "Lost Cargo: Companion Cube: Southerland" (Cube 4)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',630.79047037213) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',630.79047037213) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1519.4968261719) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1519.4968261719) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',171.7691141011) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',171.7691141011) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131185</ID>
                                      <Description>"Deliver Lost Cargo (Cube 4) to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131186</ID>
                                      <Description>"Order 72 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131187</ID>
                                  <Description>"Accept Order 38 from Lake Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131188</ID>
                                      <Description>"Order 38 - Head to private room to talk to Fragile at Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131189</ID>
                                      <Description>"Order 38 - Dispose of the Nuclear Bomb in a Crater Lake"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1666.062105244) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1666.062105244) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-740.76295635564) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-740.76295635564) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',129.80041794971) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',129.80041794971) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131190</ID>
                                      <Description>"Order 38 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131191</ID>
                                      <Description>"Walk back up the ramp to move to Episode 4: Unger"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131192</ID>
                              <Description>"Episode 4: Unger"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131193</ID>
                                  <Description>"Begins after First Cliff Unger Boss Battle"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131194</ID>
                                  <Description>"Back in Central Region,pick up your loot and read Peter Englert's email: "A Desperate Plea for a Second Pizza Pie""</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131195</ID>
                                      <Description>"Go to South Knot City terminal and Accept Order 40"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131196</ID>
                                      <Description>"Order 40 - Deliver to Peter Englert"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1736.88663510808) --X1
writeDouble('[VehicleCoordinates]+8F8', 1736.88663510808) --X2
writeDouble('[VehicleCoordinates]+D0', 1964.92318763108) --Y1
writeDouble('[VehicleCoordinates]+900', 1964.92318763108) -- Y2
writeDouble('[VehicleCoordinates]+D8', 210.988873047901) -- Z1
writeDouble('[VehicleCoordinates]+908', 210.988873047901) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131197</ID>
                                  <Description>"Head to Mama's Lab to begin Episode 5: Mama &amp; Initiate Cutscene"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1009.396828436) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1009.396828436) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-971.98017095754) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-971.98017095754) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',161.91209227038) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',161.91209227038) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131198</ID>
                              <Description>"Episode 5: Mama"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131199</ID>
                                  <Description>"read email: "[Recovery Request] Resources Scattered by the SuperCell""</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131200</ID>
                                  <Description>"Accept Order 42 from Use Mama's Lab Terminal"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131201</ID>
                                      <Description>"Order 42 Part 1 - Item 1/4"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',600.64973149795) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',600.64973149795) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-794.1964415188) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-794.1964415188) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',82.427926642322) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',82.427926642322) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131202</ID>
                                      <Description>"Order 42 Part 1 - Item 2/4"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',520.04400634766) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',520.04400634766) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-824.94596513189) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-824.94596513189) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',82.515612609331) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',82.515612609331) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131203</ID>
                                      <Description>"Order 42 Part 1 - Item 3/4 (up the hill)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',474.76308602824) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',474.76308602824) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-808.12756147231) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-808.12756147231) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',93.431674148964) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',93.431674148964) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131204</ID>
                                      <Description>"Order 42 Part 1 - Item 4/4"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',475.29597478376) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',475.29597478376) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-860.88427797152) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-860.88427797152) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',99.614696594235) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',99.614696594235) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131205</ID>
                                      <Description>"Order 42 Part 2 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131206</ID>
                                  <Description>"Head to Distribution Center South of Lake Knot City to Accept Order 41"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131207</ID>
                                      <Description>"Order 41: Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 170.875869750977) --X1
writeDouble('[VehicleCoordinates]+8F8', 170.875869750977) --X2
writeDouble('[VehicleCoordinates]+D0', 1647.17614746094) --Y1
writeDouble('[VehicleCoordinates]+900', 1647.17614746094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 260.368743896484) -- Z1
writeDouble('[VehicleCoordinates]+908', 260.368743896484) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131208</ID>
                                  <Description>"Accept Order 43 from Waystation North of Mountain Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131209</ID>
                                      <Description>"Order 43 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131210</ID>
                                  <Description>"read email: "[Recovery Request][X] I've Lost Contact wit the Porter Who Recovered my Chip""</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131211</ID>
                                      <Description>"Accept Order 73 from Distribution Center North of Mountain Knot City, Don't Accept Order 44"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131212</ID>
                                      <Description>"Order 73 Part 1 - Pick up Item"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-813.31788909051) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-813.31788909051) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',2036.3410017922) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',2036.3410017922) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',283.13757774138) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',283.13757774138) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131213</ID>
                                      <Description>"Order 73 Part 2 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131214</ID>
                                      <Description>"Order 73 Part 3 - Pick Up the Body"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-828.03678531223) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-828.03678531223) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',2039.5769724147) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',2039.5769724147) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',286.91788191901) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',286.91788191901) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131215</ID>
                                      <Description>"Order 73 Part 4 - Cremate the Body at Incinerator West of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -322.187921711329) --X1
writeDouble('[VehicleCoordinates]+8F8', -322.187921711329) --X2
writeDouble('[VehicleCoordinates]+D0', 2190.62475585938) --Y1
writeDouble('[VehicleCoordinates]+900', 2190.62475585938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 217.562371936685) -- Z1
writeDouble('[VehicleCoordinates]+908', 217.562371936685) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131216</ID>
                                  <Description>"Accept Order 44 at the Distribution Center North of Mountain Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131217</ID>
                                      <Description>"Order 44 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131218</ID>
                                  <Description>"read email: "Yet Another Easnest Entreaty for Pizza""</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131219</ID>
                                      <Description>"Head to Timefall Farm to Accept Order 45 - Fresh Pizza Delivery"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 115.351102065019) --X1
writeDouble('[VehicleCoordinates]+8F8', 115.351102065019) --X2
writeDouble('[VehicleCoordinates]+D0', -1629.64987632092) --Y1
writeDouble('[VehicleCoordinates]+900', -1629.64987632092) -- Y2
writeDouble('[VehicleCoordinates]+D8', 108.919290458693) -- Z1
writeDouble('[VehicleCoordinates]+908', 108.919290458693) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131220</ID>
                                      <Description>"(Player Only) Order 45 - Deliver to Peter Englert (Have to carry item with hand)"</Description>
                                      <Color>0000FF</Color>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1749.9689941406)
writeFloat('[PlayerCoordinates]+84', 1971.5640869141)
writeFloat('[PlayerCoordinates]+88', 211.4801940918)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131221</ID>
                                      <Description>"(Player Only) Teleport back to Timefall Farm to get Vehicle back"</Description>
                                      <Color>0000FF</Color>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 92.446998596191)
writeFloat('[PlayerCoordinates]+84', -1618.1838378906)
writeFloat('[PlayerCoordinates]+88', 109.72776794434)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131222</ID>
                                  <Description>"Head to Mama's Lab to be given Order 46 to change Lockne's Mind"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1013.66293989933) --X1
writeDouble('[VehicleCoordinates]+8F8', 1013.66293989933) --X2
writeDouble('[VehicleCoordinates]+D0', -973.060315833813) --Y1
writeDouble('[VehicleCoordinates]+900', -973.060315833813) -- Y2
writeDouble('[VehicleCoordinates]+D8', 161.76572519014) -- Z1
writeDouble('[VehicleCoordinates]+908', 161.76572519014) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131223</ID>
                                      <Description>"Exit Mama's Lab for Second BT Boss Battle (BT#2)"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131224</ID>
                                      <Description>"Pick Mama back up if you dropped her"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131225</ID>
                                      <Description>"Order 46 - Take Mama to Meet Lockne at Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131226</ID>
                                      <Description>"This takes you to Episode 6: Deadman"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131227</ID>
                              <Description>"Episode 6: Deadman"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131228</ID>
                                  <Description>"Fabricate a new Vehicle at Mountain Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131229</ID>
                                  <Description>"read email: "[Recovery Request][V] The Porter Had Not One, but Two Chips""</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131230</ID>
                                      <Description>"Accept Order 74 at Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131231</ID>
                                      <Description>"Order 74 - Pick up item at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -762.880743824688) --X1
writeDouble('[VehicleCoordinates]+8F8', -762.880743824688) --X2
writeDouble('[VehicleCoordinates]+D0', 1811.14760256781) --Y1
writeDouble('[VehicleCoordinates]+900', 1811.14760256781) -- Y2
writeDouble('[VehicleCoordinates]+D8', 223.408607687459) -- Z1
writeDouble('[VehicleCoordinates]+908', 223.408607687459) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131232</ID>
                                      <Description>"Order 74 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131233</ID>
                                  <Description>"Accept Order 47 &amp; 48 from Mountain Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131234</ID>
                                      <Description>"Head farther out for a codec cutscene"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1163.2700195313) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1163.2700195313) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',283.28322965674) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',283.28322965674) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',363.33783843376) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',363.33783843376) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131235</ID>
                                      <Description>"Order 47 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -649.183700512192) --X1
writeDouble('[VehicleCoordinates]+8F8', -649.183700512192) --X2
writeDouble('[VehicleCoordinates]+D0', -136.553804305087) --Y1
writeDouble('[VehicleCoordinates]+900', -136.553804305087) -- Y2
writeDouble('[VehicleCoordinates]+D8', 535.161209155776) -- Z1
writeDouble('[VehicleCoordinates]+908', 535.161209155776) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131236</ID>
                                      <Description>"Order 48 - Deliver to Doctor"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1430.92370007196) --X1
writeDouble('[VehicleCoordinates]+8F8', -1430.92370007196) --X2
writeDouble('[VehicleCoordinates]+D0', 66.8332373271705) --Y1
writeDouble('[VehicleCoordinates]+900', 66.8332373271705) -- Y2
writeDouble('[VehicleCoordinates]+D8', 358.963532917869) -- Z1
writeDouble('[VehicleCoordinates]+908', 358.963532917869) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131237</ID>
                                  <Description>"Head Back to Mountain Knot City to Accept Order 49"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131238</ID>
                                      <Description>"Order 49 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -939.111646158212) --X1
writeDouble('[VehicleCoordinates]+8F8', -939.111646158212) --X2
writeDouble('[VehicleCoordinates]+D0', 1058.93283134418) --Y1
writeDouble('[VehicleCoordinates]+900', 1058.93283134418) -- Y2
writeDouble('[VehicleCoordinates]+D8', 596.160614547307) -- Z1
writeDouble('[VehicleCoordinates]+908', 596.160614547307) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131239</ID>
                                  <Description>"Accept Order 50 from Mountaineer"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131240</ID>
                                      <Description>"Order 50 Part 1 - Pick up 2 items from Doctor"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1430.92370007196) --X1
writeDouble('[VehicleCoordinates]+8F8', -1430.92370007196) --X2
writeDouble('[VehicleCoordinates]+D0', 66.8332373271705) --Y1
writeDouble('[VehicleCoordinates]+900', 66.8332373271705) -- Y2
writeDouble('[VehicleCoordinates]+D8', 358.963532917869) -- Z1
writeDouble('[VehicleCoordinates]+908', 358.963532917869) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131241</ID>
                                      <Description>"Order 50 Part 2 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -939.111646158212) --X1
writeDouble('[VehicleCoordinates]+8F8', -939.111646158212) --X2
writeDouble('[VehicleCoordinates]+D0', 1058.93283134418) --Y1
writeDouble('[VehicleCoordinates]+900', 1058.93283134418) -- Y2
writeDouble('[VehicleCoordinates]+D8', 596.160614547307) -- Z1
writeDouble('[VehicleCoordinates]+908', 596.160614547307) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131242</ID>
                                  <Description>"Accept Order 51 from Mountaineer"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131243</ID>
                                      <Description>"Order 51 - Deliver to Photographer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2159.29223628451) --X1
writeDouble('[VehicleCoordinates]+8F8', -2159.29223628451) --X2
writeDouble('[VehicleCoordinates]+D0', 606.801757861564) --Y1
writeDouble('[VehicleCoordinates]+900', 606.801757861564) -- Y2
writeDouble('[VehicleCoordinates]+D8', 264.913360571171) -- Z1
writeDouble('[VehicleCoordinates]+908', 264.913360571171) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131244</ID>
                                  <Description>"Accept Order 52 from Photographer"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131245</ID>
                                      <Description>"Order 52 Part 1 - Recover Camera in Mule Camp from MULE"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1684.5021777782) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1684.5021777782) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1073.3250537547) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1073.3250537547) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',219.57021851133) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',219.57021851133) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131246</ID>
                                      <Description>"Order 52 - Deliver to Photographer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2159.29223628451) --X1
writeDouble('[VehicleCoordinates]+8F8', -2159.29223628451) --X2
writeDouble('[VehicleCoordinates]+D0', 606.801757861564) --Y1
writeDouble('[VehicleCoordinates]+900', 606.801757861564) -- Y2
writeDouble('[VehicleCoordinates]+D8', 264.913360571171) -- Z1
writeDouble('[VehicleCoordinates]+908', 264.913360571171) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131247</ID>
                                  <Description>"Head to Mountaineer to Accept Order 53"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -939.111646158212) --X1
writeDouble('[VehicleCoordinates]+8F8', -939.111646158212) --X2
writeDouble('[VehicleCoordinates]+D0', 1058.93283134418) --Y1
writeDouble('[VehicleCoordinates]+900', 1058.93283134418) -- Y2
writeDouble('[VehicleCoordinates]+D8', 596.160614547307) -- Z1
writeDouble('[VehicleCoordinates]+908', 596.160614547307) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131248</ID>
                                      <Description>"Order 53 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -325.113752107106) --X1
writeDouble('[VehicleCoordinates]+8F8', -325.113752107106) --X2
writeDouble('[VehicleCoordinates]+D0', 983.230529372708) --Y1
writeDouble('[VehicleCoordinates]+900', 983.230529372708) -- Y2
writeDouble('[VehicleCoordinates]+D8', 735.897462587294) -- Z1
writeDouble('[VehicleCoordinates]+908', 735.897462587294) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131249</ID>
                                  <Description>"Meet up with Deadman at the Cabin near Mountain Knot City"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-488.57446041625) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-488.57446041625) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',511.5093916701) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',511.5093916701) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',680.09379701355) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',680.09379701355) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131250</ID>
                                      <Description>"This takes you to Episode 7: Clifford"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131251</ID>
                              <Description>"Episode 7: Clifford"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131252</ID>
                                  <Description>"Switch back to Player until Order 54 complete [beating Clifford Unger]"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131253</ID>
                                  <Description>"Fabricate a new Vehicle at Mountain Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131254</ID>
                                  <Description>"Accept Order 56 from Mountain Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131255</ID>
                                      <Description>"Order 56 Part 1 - Collect Winter Clothes [Bike, truck may not have room to land]"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-388.35748291016) -- X Coord
writeFloat('[PlayerCoordinates]+84',326.97692871094) -- Y Coord
writeFloat('[PlayerCoordinates]+88',601.85400390625) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131256</ID>
                                      <Description>"Order 56 Part 2 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131257</ID>
                                  <Description>"read email: "[Recovery Request] [V] I Need You to Secure a Chip in BT Country""</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131258</ID>
                                      <Description>"Accept Order 75 from Mountain Knot City"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131259</ID>
                                      <Description>"Order 75 Part 1 - Pick up Item"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-896.79904027848) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-896.79904027848) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',23.231763137342) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',23.231763137342) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',527.0592234669) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',527.0592234669) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131260</ID>
                                      <Description>"Order 75 Part 2 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131261</ID>
                                  <Description>"Accept Order 55 from Mountain Knot City"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131262</ID>
                                      <Description>"Order 55 - Deliver Mama's Corpse to Heartman's Lab (Carrying Body)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1221.86779785156) --X1
writeDouble('[VehicleCoordinates]+8F8', -1221.86779785156) --X2
writeDouble('[VehicleCoordinates]+D0', -229.087647924799) --Y1
writeDouble('[VehicleCoordinates]+900', -229.087647924799) -- Y2
writeDouble('[VehicleCoordinates]+D8', 531.693955322326) -- Z1
writeDouble('[VehicleCoordinates]+908', 531.693955322326) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131263</ID>
                                      <Description>"This takes you to Episode 8: Heartman"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131264</ID>
                              <Description>"Episode 8: Heartman"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131265</ID>
                                  <Description>"Accept Order 58, 59 from Heartman's Lab"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131266</ID>
                                      <Description>"Order 58 - Deliver to Geologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -893.040383008573) --X1
writeDouble('[VehicleCoordinates]+8F8', -893.040383008573) --X2
writeDouble('[VehicleCoordinates]+D0', -783.167170839996) --Y1
writeDouble('[VehicleCoordinates]+900', -783.167170839996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 624.149068809963) -- Z1
writeDouble('[VehicleCoordinates]+908', 624.149068809963) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131267</ID>
                                      <Description>"Order 59 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1235.27709960938) --X1
writeDouble('[VehicleCoordinates]+8F8', -1235.27709960938) --X2
writeDouble('[VehicleCoordinates]+D0', -1252.37450712258) --Y1
writeDouble('[VehicleCoordinates]+900', -1252.37450712258) -- Y2
writeDouble('[VehicleCoordinates]+D8', 410.93840658829) -- Z1
writeDouble('[VehicleCoordinates]+908', 410.93840658829) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131268</ID>
                                  <Description>"read email: "For a Least Meal, Only Pizza Will Suffice""</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131269</ID>
                                      <Description>"Head to Mountain Knot City to Receive Order 57"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131270</ID>
                                      <Description>"Order 57 - Deliver to Peter Englert"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1736.88663510808) --X1
writeDouble('[VehicleCoordinates]+8F8', 1736.88663510808) --X2
writeDouble('[VehicleCoordinates]+D0', 1964.92318763108) --Y1
writeDouble('[VehicleCoordinates]+900', 1964.92318763108) -- Y2
writeDouble('[VehicleCoordinates]+D8', 210.988873047901) -- Z1
writeDouble('[VehicleCoordinates]+908', 210.988873047901) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131271</ID>
                                  <Description>"Head back to Paleontologist to Accept Order 60"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1235.27709960938) --X1
writeDouble('[VehicleCoordinates]+8F8', -1235.27709960938) --X2
writeDouble('[VehicleCoordinates]+D0', -1252.37450712258) --Y1
writeDouble('[VehicleCoordinates]+900', -1252.37450712258) -- Y2
writeDouble('[VehicleCoordinates]+D8', 410.93840658829) -- Z1
writeDouble('[VehicleCoordinates]+908', 410.93840658829) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131272</ID>
                                      <Description>"Order 60 Part 1 - Pick Up 5 Items (Wear Oxygen Mask)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1363.8896484375) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1363.8896484375) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1340.1134418279) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1340.1134418279) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',339.05207343363) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',339.05207343363) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131273</ID>
                                      <Description>"Order 60 Part 2 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1235.27709960938) --X1
writeDouble('[VehicleCoordinates]+8F8', -1235.27709960938) --X2
writeDouble('[VehicleCoordinates]+D0', -1252.37450712258) --Y1
writeDouble('[VehicleCoordinates]+900', -1252.37450712258) -- Y2
writeDouble('[VehicleCoordinates]+D8', 410.93840658829) -- Z1
writeDouble('[VehicleCoordinates]+908', 410.93840658829) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131274</ID>
                                  <Description>"Accept Order 61 from Paleontologist"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131275</ID>
                                      <Description>"Order 61 Part 1 - Item 1/5 is provided from Order acceptance"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131276</ID>
                                      <Description>"Order 61 Part 1 - Pick Up Item 2/5"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-2006.7814941406) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-2006.7814941406) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-994.57254506172) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-994.57254506172) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',313.21947800986) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',313.21947800986) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131277</ID>
                                      <Description>"Order 61 Part 1 - Pick Up Item 3/5"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-2023.0689173544) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-2023.0689173544) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1055.4343608238) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1055.4343608238) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',323.76481236067) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',323.76481236067) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131278</ID>
                                      <Description>"Order 61 Part 1 - Pick Up Item 4/5"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1990.8465221912) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1990.8465221912) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1036.2203802362) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1036.2203802362) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',317.49379607515) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',317.49379607515) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131279</ID>
                                      <Description>"Order 61 Part 1 - Pick Up Item 5/5"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1933.8920058362) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1933.8920058362) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1017.9210827818) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1017.9210827818) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',324.2771466807) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',324.2771466807) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131280</ID>
                                      <Description>"Order 61 Part 2 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1831.26241262823) --X1
writeDouble('[VehicleCoordinates]+8F8', -1831.26241262823) --X2
writeDouble('[VehicleCoordinates]+D0', -712.536589082141) --Y1
writeDouble('[VehicleCoordinates]+900', -712.536589082141) -- Y2
writeDouble('[VehicleCoordinates]+D8', 465.668199942371) -- Z1
writeDouble('[VehicleCoordinates]+908', 465.668199942371) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131281</ID>
                                  <Description>"Go to Lake Knot City and head to Private Room to receive new emails"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131282</ID>
                                      <Description>"read email: "[Test Order] Could You Please Go Look for My Cube?""</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131283</ID>
                                      <Description>"Collect Lost Cargo (Cube 5)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1130.4993360723) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1130.4993360723) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-703.94982611795) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-703.94982611795) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',639.1679672582) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',639.1679672582) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131284</ID>
                                      <Description>"Deliver Lost Cargo to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1235.27709960938) --X1
writeDouble('[VehicleCoordinates]+8F8', -1235.27709960938) --X2
writeDouble('[VehicleCoordinates]+D0', -1252.37450712258) --Y1
writeDouble('[VehicleCoordinates]+900', -1252.37450712258) -- Y2
writeDouble('[VehicleCoordinates]+D8', 410.93840658829) -- Z1
writeDouble('[VehicleCoordinates]+908', 410.93840658829) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131285</ID>
                                  <Description>"Head to Heartman's Lab to Accept Order 62 (Inside His Office)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1221.86779785156) --X1
writeDouble('[VehicleCoordinates]+8F8', -1221.86779785156) --X2
writeDouble('[VehicleCoordinates]+D0', -229.087647924799) --Y1
writeDouble('[VehicleCoordinates]+900', -229.087647924799) -- Y2
writeDouble('[VehicleCoordinates]+D8', 531.693955322326) -- Z1
writeDouble('[VehicleCoordinates]+908', 531.693955322326) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131286</ID>
                                      <Description>"Order 62 Part 1 - Deliver to Chiral Relay"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2560.48546139061) --X1
writeDouble('[VehicleCoordinates]+8F8', -2560.48546139061) --X2
writeDouble('[VehicleCoordinates]+D0', -1977.87025744527) --Y1
writeDouble('[VehicleCoordinates]+900', -1977.87025744527) -- Y2
writeDouble('[VehicleCoordinates]+D8', 84.1606949204215) -- Z1
writeDouble('[VehicleCoordinates]+908', 84.1606949204215) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131287</ID>
                                      <Description>"Order 62 Part 2 - Start of BT Area (you might have a codec conversation with Die Hard-Man going south)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-2643.8103602042) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-2643.8103602042) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-2037.6214886959) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-2037.6214886959) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',86.067092449843) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',86.067092449843) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131288</ID>
                                      <Description>"Order 62 Part 2 - Next to BTs (they wont spawn until the heavy rain starts (let them drown you)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-2692.4359165859) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-2692.4359165859) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-2152.2680664063) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-2152.2680664063) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',82.956943402588) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',82.956943402588) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131289</ID>
                                  <Description>"After letting BT's drown you, switch back to Player (Player Only)"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131290</ID>
                                      <Description>"This takes you to Episode 9: Higgs"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131291</ID>
                                  <Description>"(Player Only) Find a Way to Cross the Tar Belt - Cause Buildings to Spawn"</Description>
                                  <Color>0000FF</Color>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2688.777832)
writeFloat('[PlayerCoordinates]+84', -2322.387451)
writeFloat('[PlayerCoordinates]+88', 86.26888275)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131292</ID>
                                      <Description>"Die Hard-Man may speak to you after you drop down to the next bulding (East)"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131293</ID>
                                      <Description>"(Player Only) Find a Way to Cross the Tar Belt - Cause Last Buildings to Spawn"</Description>
                                      <Color>0000FF</Color>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2612.965576)
writeFloat('[PlayerCoordinates]+84', -2598.32251)
writeFloat('[PlayerCoordinates]+88', 87.41194916)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131294</ID>
                                      <Description>"This takes you to Episode 9: Higgs"</Description>
                                      <GroupHeader>1</GroupHeader>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131295</ID>
                                      <Description>"(Player Only) At Waypoint"</Description>
                                      <Color>0000FF</Color>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-2603.3293457031) -- X Coord
writeFloat('[PlayerCoordinates]+84',-2657.1179199219) -- Y Coord
writeFloat('[PlayerCoordinates]+88',81.047027587891) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131296</ID>
                              <Description>"Episode 9: Higgs"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131297</ID>
                                  <Description>"Switch to Player, Vehicle Unavailable"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131298</ID>
                              <Description>"Episode 10: Die Hard-Man"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131299</ID>
                                  <Description>"(Player Only) Head for Lake Knot City - Cutscene 1 with Deadman (Head North)"</Description>
                                  <Color>0000FF</Color>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1871.51953125) -- X Coord
writeFloat('[PlayerCoordinates]+84',-601.76788330078) -- Y Coord
writeFloat('[PlayerCoordinates]+88',502.23913574219) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131300</ID>
                                      <Description>"(Player Only) Head for Lake Knot City - Fabricate a Vehicle at Mountain Knot City"</Description>
                                      <Color>0000FF</Color>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131301</ID>
                                      <Description>"Head for Lake Knot City - Cutscene 2 with Deadman (Head North)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1498.378607996) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1498.378607996) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1567.3170228949) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1567.3170228949) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',228.50161491453) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',228.50161491453) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131302</ID>
                                      <Description>"Head for Lake Knot City - Cutscene 3 with Deadman (Head North)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',2003.897608683) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',2003.897608683) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1162.1830090736) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1162.1830090736) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',179.31779401161) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',179.31779401161) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131303</ID>
                                      <Description>"read e-mail: "A Final Request for Pizza""</Description>
                                      <GroupHeader>1</GroupHeader>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131304</ID>
                                          <Description>"Head to First Prepper to Accept Order 66"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131305</ID>
                                          <Description>"Order 66 - Deliver to Peter Englert"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1736.88663510808) --X1
writeDouble('[VehicleCoordinates]+8F8', 1736.88663510808) --X2
writeDouble('[VehicleCoordinates]+D0', 1964.92318763108) --Y1
writeDouble('[VehicleCoordinates]+900', 1964.92318763108) -- Y2
writeDouble('[VehicleCoordinates]+D8', 210.988873047901) -- Z1
writeDouble('[VehicleCoordinates]+908', 210.988873047901) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131306</ID>
                                      <Description>"Head for Lake Knot City - Cutscene 4 with Deadman &amp; Heartman (Head North)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',2397.8491210938) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',2397.8491210938) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1612.9895257228) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1612.9895257228) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',201.72630953822) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',201.72630953822) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131307</ID>
                                  <Description>"Head for Lake Knot City - Head North for Cutscene &amp; start Episode 11: Clifford Unger"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',2462.7893377219) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',2462.7893377219) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1742.4263916016) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1742.4263916016) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',214.39523363994) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',214.39523363994) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131308</ID>
                              <Description>"Episode 11-14"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131309</ID>
                                  <Description>"Switch to Player, Vehicle Unavailable"</Description>
                                  <GroupHeader>1</GroupHeader>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131310</ID>
                              <Description>"Episode 15: Tomorrow Is In Your Hands"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131311</ID>
                                  <Description>"Fragile Jump to Distribution Center South of Lake Knot City and Accept Order 76"</Description>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131312</ID>
                                      <Description>"read email: "[Recovery Request] [V] My Chip! Grab it Back from the Terrorists!""</Description>
                                      <GroupHeader>1</GroupHeader>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131313</ID>
                                          <Description>"Make sure to Fabricate a Non-Lethal Weapon"</Description>
                                          <GroupHeader>1</GroupHeader>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131314</ID>
                                          <Description>"Order 76 Part 1 - [V] Neutralize the terrorists in the Ruins (Entrance of Lower Area)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1191.9215091426) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1191.9215091426) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1673.6600345332) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1673.6600345332) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',200.03720083935) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',200.03720083935) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                          <CheatEntries>
                                            <CheatEntry>
                                              <ID>131315</ID>
                                              <Description>"Order 76 Part 1 - [V] Neutralize the terrorists in the Ruins (Exit of Lower Area, On Top)"</Description>
                                              <VariableType>Auto Assembler Script</VariableType>
                                              <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1232.9531102786) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1232.9471435547) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1772.5300219362) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1772.5277099609) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',204.92822890551) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',204.92764282227) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                            </CheatEntry>
                                          </CheatEntries>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131316</ID>
                                          <Description>"Order 76 Part 2 - [V] Recover the Chip from Ruined Shelter Private Locker"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1321.75479916266) --X1
writeDouble('[VehicleCoordinates]+8F8', 1321.75479916266) --X2
writeDouble('[VehicleCoordinates]+D0', 1781.333984375) --Y1
writeDouble('[VehicleCoordinates]+900', 1781.333984375) -- Y2
writeDouble('[VehicleCoordinates]+D8', 199.04028204791) -- Z1
writeDouble('[VehicleCoordinates]+908', 199.04028204791) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131317</ID>
                                          <Description>"Order 76 Part 3 - [V] Deliver to Distribution Center South of Lake Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131318</ID>
                                      <Description>"read email: "Have You Been Getting Some Weird Emails?""</Description>
                                      <GroupHeader>1</GroupHeader>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131319</ID>
                                          <Description>"Fabricate a PCC Lv.2 and withdraw 800 metal to build a bridge and a ladder"</Description>
                                          <GroupHeader>1</GroupHeader>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131320</ID>
                                          <Description>"Cube 6 Part 1 - build a bridge at this location, 80m long (change bridge length) or just use last teleport"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',953.27382402204) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',953.27382402204) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1930.4464620124) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1930.4464620124) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',168.36879857169) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',168.36879857169) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131321</ID>
                                          <Description>"Cube 6 Part 1 - place a ladder to the other side"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',974.59488555306) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',974.59488555306) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',2053.302734375) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',2053.302734375) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',169.79765753053) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',169.79765753053) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131322</ID>
                                          <Description>"Cube 6 Part 1 - Pick-up Lost Cargo: Final Companion Cube (Cube 6)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',980.71048728789) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',980.71048728789) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',2115.9127919334) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',2115.9127919334) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',182.53725918219) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',182.53725918219) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131323</ID>
                                          <Description>"Cube 6 Part 2 - Deliver to the Incinerator West of Lake Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -322.187921711329) --X1
writeDouble('[VehicleCoordinates]+8F8', -322.187921711329) --X2
writeDouble('[VehicleCoordinates]+D0', 2190.62475585938) --Y1
writeDouble('[VehicleCoordinates]+900', 2190.62475585938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 217.562371936685) -- Z1
writeDouble('[VehicleCoordinates]+908', 217.562371936685) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>132992</ID>
                              <Description>"Director's Cut Episode Quests"</Description>
                              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                              <Color>008000</Color>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>133002</ID>
                                  <Description>"Eastern Region"</Description>
                                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132995</ID>
                                      <Description>"Accept Order 77 from Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -434.600480057907) --X1
writeDouble('[VehicleCoordinates]+8F8', -434.600480057907) --X2
writeDouble('[VehicleCoordinates]+D0', 265.06265072403) --Y1
writeDouble('[VehicleCoordinates]+900', 265.06265072403) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.354885042289) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.354885042289) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132994</ID>
                                          <Description>"Note: I had to do standard missions from this location to get Order 77 to unlock in late-game"</Description>
                                          <Color>0000FF</Color>
                                          <GroupHeader>1</GroupHeader>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133172</ID>
                                          <Description>"Order 77 - Outside Entrance of Ruined Factory"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',121.37438201904) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',121.37320160016) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',451.79611206055) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',451.80475753175) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',252.77070617676) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',252.76691818649) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132998</ID>
                                          <Description>"Order 77 - Pick up item 4 items at Ruined Factory MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',237.79909310743) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',237.79909310743) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',545.98508044267) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',545.98508044267) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',306.73775150412) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',306.73775150412) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133001</ID>
                                          <Description>"Order 77 - Deliver to Distribution Center West of Capital Knot City &amp; Accept Order 78"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -434.600480057907) --X1
writeDouble('[VehicleCoordinates]+8F8', -434.600480057907) --X2
writeDouble('[VehicleCoordinates]+D0', 265.06265072403) --Y1
writeDouble('[VehicleCoordinates]+900', 265.06265072403) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.354885042289) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.354885042289) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133005</ID>
                                      <Description>"Order 78 - Outside of Ruined Factory - Switch Back to Player"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',237.79909310743) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',237.79909310743) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',545.98508044267) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',545.98508044267) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',306.73775150412) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',306.73775150412) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133015</ID>
                                          <Description>"(Player Only) Order 78 - Open Control Panel #1 at Ruined Factory"</Description>
                                          <Color>0000FF</Color>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',277.41485595703) -- X Coord
writeFloat('[PlayerCoordinates]+84',519.83526611328) -- Y Coord
writeFloat('[PlayerCoordinates]+88',298.10589599609) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133009</ID>
                                          <Description>"(Player Only) - Order 78 - Pick up 5 item from MULEs Postbox"</Description>
                                          <Color>0000FF</Color>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',341.39114379883) -- X Coord
writeFloat('[PlayerCoordinates]+84',517.20544433594) -- Y Coord
writeFloat('[PlayerCoordinates]+88',298.10589599609) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133010</ID>
                                          <Description>"(Player Only) Order 78 - Teleport back to Vehicle"</Description>
                                          <Color>0000FF</Color>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',241.1863861084) -- X Coord
writeFloat('[PlayerCoordinates]+84',539.00946044922) -- Y Coord
writeFloat('[PlayerCoordinates]+88',307.48614501953) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133011</ID>
                                          <Description>"Order 78 - Deliver to Distribution Center West of Capital Knot City &amp; Accept Order 79"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -434.600480057907) --X1
writeDouble('[VehicleCoordinates]+8F8', -434.600480057907) --X2
writeDouble('[VehicleCoordinates]+D0', 265.06265072403) --Y1
writeDouble('[VehicleCoordinates]+900', 265.06265072403) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.354885042289) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.354885042289) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133013</ID>
                                      <Description>"Order 79 - Outside of Ruined Factory - Switch Back to Player"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',237.79909310743) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',237.79909310743) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',545.98508044267) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',545.98508044267) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',306.73775150412) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',306.73775150412) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133016</ID>
                                          <Description>"(Player Only) Order 79 - Open Control Panel #2 at Ruined Factory and Neutralize all Targets"</Description>
                                          <Color>0000FF</Color>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',341.39114379883) -- X Coord
writeFloat('[PlayerCoordinates]+84',517.20544433594) -- Y Coord
writeFloat('[PlayerCoordinates]+88',298.10589599609) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133018</ID>
                                          <Description>"(Player Only) Order 79 - Open Control Panel #3 at Ruined Factory"</Description>
                                          <Color>0000FF</Color>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',370.11755371094) -- X Coord
writeFloat('[PlayerCoordinates]+84',582.50012207031) -- Y Coord
writeFloat('[PlayerCoordinates]+88',291.35571289063) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133020</ID>
                                          <Description>"(Player Only) Order 79 - Deliver items to Ruined Factory Terminal"</Description>
                                          <Color>0000FF</Color>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',343.82635498047) -- X Coord
writeFloat('[PlayerCoordinates]+84',592.18804931641) -- Y Coord
writeFloat('[PlayerCoordinates]+88',291.88571166992) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133023</ID>
                                          <Description>"(Player Only) Head up ladder for a cutscene"</Description>
                                          <Color>0000FF</Color>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',358.80374145508) -- X Coord
writeFloat('[PlayerCoordinates]+84',583.99438476563) -- Y Coord
writeFloat('[PlayerCoordinates]+88',291.38488769531) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133025</ID>
                                          <Description>"(Player Only) Teleport back to Vehicle"</Description>
                                          <Color>0000FF</Color>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',241.1863861084) -- X Coord
writeFloat('[PlayerCoordinates]+84',539.00946044922) -- Y Coord
writeFloat('[PlayerCoordinates]+88',307.48614501953) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>133028</ID>
                                  <Description>"Central Region"</Description>
                                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>133030</ID>
                                      <Description>"Accept Order 80 from Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133031</ID>
                                          <Description>"Order 80 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133033</ID>
                                      <Description>"Accept Order 81 from Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2140.7678905886) --X1
writeDouble('[VehicleCoordinates]+8F8', 2140.7678905886) --X2
writeDouble('[VehicleCoordinates]+D0', -891.205335171187) --Y1
writeDouble('[VehicleCoordinates]+900', -891.205335171187) -- Y2
writeDouble('[VehicleCoordinates]+D8', 149.236557576236) -- Z1
writeDouble('[VehicleCoordinates]+908', 149.236557576236) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133035</ID>
                                          <Description>"Order 81 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133037</ID>
                                      <Description>"Accept Order 82 from Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -325.113752107106) --X1
writeDouble('[VehicleCoordinates]+8F8', -325.113752107106) --X2
writeDouble('[VehicleCoordinates]+D0', 983.230529372708) --Y1
writeDouble('[VehicleCoordinates]+900', 983.230529372708) -- Y2
writeDouble('[VehicleCoordinates]+D8', 735.897462587294) -- Z1
writeDouble('[VehicleCoordinates]+908', 735.897462587294) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133040</ID>
                                          <Description>"Order 82 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133177</ID>
                                      <Description>"Accept Order 83 from Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -434.600480057907) --X1
writeDouble('[VehicleCoordinates]+8F8', -434.600480057907) --X2
writeDouble('[VehicleCoordinates]+D0', 265.06265072403) --Y1
writeDouble('[VehicleCoordinates]+900', 265.06265072403) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.354885042289) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.354885042289) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133175</ID>
                                          <Description>"Order 83 - Near Rescue Area (Conversation moving east)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',2123.5480957031) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',2123.5480957031) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-696.08278957658) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-696.08278957658) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',184.96894408373) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',184.96894408373) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133187</ID>
                                          <Description>"Order 83 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -434.600480057907) --X1
writeDouble('[VehicleCoordinates]+8F8', -434.600480057907) --X2
writeDouble('[VehicleCoordinates]+D0', 265.06265072403) --Y1
writeDouble('[VehicleCoordinates]+900', 265.06265072403) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.354885042289) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.354885042289) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133178</ID>
                                      <Description>"Order 84 - Move forward for a chat to be told about Order 84, then go accept"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1227.6452703404) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1227.6452703404) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',282.13054291528) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',282.13054291528) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',361.36755704518) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',361.36755704518) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133180</ID>
                                          <Description>"Order 84 - Head east to rescue porter"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-879.39170779069) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-879.39170779069) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',453.41589220444) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',453.41589220444) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',465.86482045098) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',465.86482045098) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133182</ID>
                                          <Description>"Order 84 - Deliver to Mountain Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133184</ID>
                                      <Description>"After turning in Order 82, Die-Hardman should tell you about Order 85, accept"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133188</ID>
                                          <Description>"Order 85 - Head south (up hill) to rescue porter+cutscene"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-2132.7560583943) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-2132.7560583943) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-302.48597388589) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-302.48597388589) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',522.13353657688) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',522.13353657688) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133498</ID>
                                          <Description>"Order 85 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>131324</ID>
                      <Description>"Standard Orders"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>131325</ID>
                          <Description>"Player"</Description>
                          <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                          <GroupHeader>1</GroupHeader>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>131326</ID>
                              <Description>"Eastern Region"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131327</ID>
                                  <Description>"From Capital Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131328</ID>
                                      <Description>"Teleport To: Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1432.995117)
writeFloat('[PlayerCoordinates]+84', 701.8141479)
writeFloat('[PlayerCoordinates]+88', 137.3023224)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131329</ID>
                                      <Description>"Standard Order 100, 101, 102 - Deliver to Waystation West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 313.767334)
writeFloat('[PlayerCoordinates]+84', 1160.296875)
writeFloat('[PlayerCoordinates]+88', 162.9519653)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131330</ID>
                                      <Description>"Standard Order 103, 104 - Deliver to Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -438.5249329)
writeFloat('[PlayerCoordinates]+84', 266.2165527)
writeFloat('[PlayerCoordinates]+88', 137.3740692)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131331</ID>
                                      <Description>"Standard Order 105, 106 - Deliver to Wind Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1490.662476)
writeFloat('[PlayerCoordinates]+84', 656.2297974)
writeFloat('[PlayerCoordinates]+88', 205.5592499)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131332</ID>
                                      <Description>"Standard Order 107, 108 - Deliver to Port Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1986.126221)
writeFloat('[PlayerCoordinates]+84', -480.7706299)
writeFloat('[PlayerCoordinates]+88', 139.4775085)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131333</ID>
                                      <Description>"Standard Order 109 - Deliver to Ludens Fan"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 101.4508591)
writeFloat('[PlayerCoordinates]+84', 539.0170288)
writeFloat('[PlayerCoordinates]+88', 207.0962372)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131334</ID>
                                      <Description>"Standard Order 110, 111 - Deliver to Musician"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -980.53302)
writeFloat('[PlayerCoordinates]+84', -120.1126404)
writeFloat('[PlayerCoordinates]+88', 184.5494537)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131335</ID>
                                  <Description>"From Waystation West of Capital Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131336</ID>
                                      <Description>"Teleport to: Waystation West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 313.767334)
writeFloat('[PlayerCoordinates]+84', 1160.296875)
writeFloat('[PlayerCoordinates]+88', 162.9519653)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131337</ID>
                                      <Description>"Standard Order 112, 113 - Deliver to Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1432.995117)
writeFloat('[PlayerCoordinates]+84', 701.8141479)
writeFloat('[PlayerCoordinates]+88', 137.3023224)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131338</ID>
                                      <Description>"Standard Order 114 - Pick Up 8 Items (East Side of River)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',538.74273681641) -- X Coord
writeFloat('[PlayerCoordinates]+84',1297.1956787109) -- Y Coord
writeFloat('[PlayerCoordinates]+88',134.73930358887) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131339</ID>
                                          <Description>"Standard Order 114 - West Side of River"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',533.18469238281) -- X Coord
writeFloat('[PlayerCoordinates]+84',1246.1390380859) -- Y Coord
writeFloat('[PlayerCoordinates]+88',135.1227722168) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                          <CheatEntries>
                                            <CheatEntry>
                                              <ID>131340</ID>
                                              <Description>"Standard Order 114 - West Side of River, farther South"</Description>
                                              <VariableType>Auto Assembler Script</VariableType>
                                              <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',529.01019287109) -- X Coord
writeFloat('[PlayerCoordinates]+84',1213.1834716797) -- Y Coord
writeFloat('[PlayerCoordinates]+88',134.92193603516) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                            </CheatEntry>
                                          </CheatEntries>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131341</ID>
                                          <Description>"Standard Order 114 - East Side of River, farther South"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',514.56976318359) -- X Coord
writeFloat('[PlayerCoordinates]+84',1217.2783203125) -- Y Coord
writeFloat('[PlayerCoordinates]+88',134.75148010254) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131342</ID>
                                          <Description>"Notes: Items Qty7 of 3.0kg, Qty1 of 68.0kg"</Description>
                                          <GroupHeader>1</GroupHeader>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131343</ID>
                                          <Description>"Notes: They are floating down the river"</Description>
                                          <GroupHeader>1</GroupHeader>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131344</ID>
                                      <Description>"Standard Order 115, 116, 117, 118 - Deliver to Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -438.5249329)
writeFloat('[PlayerCoordinates]+84', 266.2165527)
writeFloat('[PlayerCoordinates]+88', 137.3740692)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131345</ID>
                                      <Description>"Standard Order 119, 120 - Deliver to Wind Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1490.662476)
writeFloat('[PlayerCoordinates]+84', 656.2297974)
writeFloat('[PlayerCoordinates]+88', 205.5592499)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131346</ID>
                                      <Description>"Standard Order 121 - Deliver to Port Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1986.126221)
writeFloat('[PlayerCoordinates]+84', -480.7706299)
writeFloat('[PlayerCoordinates]+88', 139.4775085)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131347</ID>
                                      <Description>"Standard Order 122, 123, 124 - Deliver to Ludens Fan"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 101.4508591)
writeFloat('[PlayerCoordinates]+84', 539.0170288)
writeFloat('[PlayerCoordinates]+88', 207.0962372)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131348</ID>
                                  <Description>"From Distribution Center West of Capital Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131349</ID>
                                      <Description>"Teleport to: Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -438.5249329)
writeFloat('[PlayerCoordinates]+84', 266.2165527)
writeFloat('[PlayerCoordinates]+88', 137.3740692)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131350</ID>
                                      <Description>"Standard Order 125, 126 - Deliver to Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1432.995117)
writeFloat('[PlayerCoordinates]+84', 701.8141479)
writeFloat('[PlayerCoordinates]+88', 137.3023224)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131351</ID>
                                      <Description>"Standard Order 127 - Deliver to Waystation West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 313.767334)
writeFloat('[PlayerCoordinates]+84', 1160.296875)
writeFloat('[PlayerCoordinates]+88', 162.9519653)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131352</ID>
                                      <Description>"Standard Order 128 - Pick up item at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 347.7147217)
writeFloat('[PlayerCoordinates]+84', 806.9052734)
writeFloat('[PlayerCoordinates]+88', 164.5243073)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131353</ID>
                                          <Description>"Standard Order 128 - Deliver to Waystation West of Capital Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 313.767334)
writeFloat('[PlayerCoordinates]+84', 1160.296875)
writeFloat('[PlayerCoordinates]+88', 162.9519653)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131354</ID>
                                      <Description>"Standard Order 129 - Pick up item at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -622.9569702)
writeFloat('[PlayerCoordinates]+84', -107.1672058)
writeFloat('[PlayerCoordinates]+88', 223.7973175)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131355</ID>
                                      <Description>"Standard Order 130 - Deliver to Wind Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1490.662476)
writeFloat('[PlayerCoordinates]+84', 656.2297974)
writeFloat('[PlayerCoordinates]+88', 205.5592499)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131356</ID>
                                      <Description>"Standard Order 131 - Deliver to Port Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1986.126221)
writeFloat('[PlayerCoordinates]+84', -480.7706299)
writeFloat('[PlayerCoordinates]+88', 139.4775085)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131357</ID>
                                      <Description>"Standard Order 132 - Deliver to Musician"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -980.53302)
writeFloat('[PlayerCoordinates]+84', -120.1126404)
writeFloat('[PlayerCoordinates]+88', 184.5494537)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131358</ID>
                                  <Description>"From Wind Farm"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131359</ID>
                                      <Description>"Teleport to: Wind Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1490.662476)
writeFloat('[PlayerCoordinates]+84', 656.2297974)
writeFloat('[PlayerCoordinates]+88', 205.5592499)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131360</ID>
                                      <Description>"Standard Order 133, 134, 135, 136, 137 - Deliver to Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -438.5249329)
writeFloat('[PlayerCoordinates]+84', 266.2165527)
writeFloat('[PlayerCoordinates]+88', 137.3740692)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131361</ID>
                                      <Description>"Standard Order 138, 139 - Deliver to Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1432.995117)
writeFloat('[PlayerCoordinates]+84', 701.8141479)
writeFloat('[PlayerCoordinates]+88', 137.3023224)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131362</ID>
                                      <Description>"Standard Order 140, 141, 142 - Deliver to Waystation West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 313.767334)
writeFloat('[PlayerCoordinates]+84', 1160.296875)
writeFloat('[PlayerCoordinates]+88', 162.9519653)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131363</ID>
                                      <Description>"Standard Order 143 - Item 1/3"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1376.4312744141) -- X Coord
writeFloat('[PlayerCoordinates]+84',467.20587158203) -- Y Coord
writeFloat('[PlayerCoordinates]+88',201.23971557617) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131364</ID>
                                          <Description>"Standard Order 143 - Item 2/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1326.1235351563) -- X Coord
writeFloat('[PlayerCoordinates]+84',559.01721191406) -- Y Coord
writeFloat('[PlayerCoordinates]+88',186.09246826172) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131365</ID>
                                          <Description>"Standard Order 143 - Item 3/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1360.9792480469) -- X Coord
writeFloat('[PlayerCoordinates]+84',638.2197265625) -- Y Coord
writeFloat('[PlayerCoordinates]+88',223.08700561523) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131366</ID>
                                      <Description>"Standard Order 144 - Deliver to Ludens Fan"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 101.4508591)
writeFloat('[PlayerCoordinates]+84', 539.0170288)
writeFloat('[PlayerCoordinates]+88', 207.0962372)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133130</ID>
                                      <Description>"Standard Order 600 - Deliver to Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -438.5249329)
writeFloat('[PlayerCoordinates]+84', 266.2165527)
writeFloat('[PlayerCoordinates]+88', 137.3740692)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131367</ID>
                                  <Description>"From Port Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131368</ID>
                                      <Description>"Teleport to: Port Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1986.126221)
writeFloat('[PlayerCoordinates]+84', -480.7706299)
writeFloat('[PlayerCoordinates]+88', 139.4775085)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131369</ID>
                                      <Description>"Standard Order 145, 146 - Deliver to Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1432.995117)
writeFloat('[PlayerCoordinates]+84', 701.8141479)
writeFloat('[PlayerCoordinates]+88', 137.3023224)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131370</ID>
                                      <Description>"Standard Order 147, 148 - Deliver to Waystation West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 313.767334)
writeFloat('[PlayerCoordinates]+84', 1160.296875)
writeFloat('[PlayerCoordinates]+88', 162.9519653)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131371</ID>
                                      <Description>"Standard Order 149, 150 - Deliver to Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -438.5249329)
writeFloat('[PlayerCoordinates]+84', 266.2165527)
writeFloat('[PlayerCoordinates]+88', 137.3740692)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131372</ID>
                                      <Description>"Standard Order 151, 152 - Deliver to Wind Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1490.662476)
writeFloat('[PlayerCoordinates]+84', 656.2297974)
writeFloat('[PlayerCoordinates]+88', 205.5592499)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131373</ID>
                                      <Description>"Standard Order 153 - Pick up 3 items at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -622.9569702)
writeFloat('[PlayerCoordinates]+84', -107.1672058)
writeFloat('[PlayerCoordinates]+88', 223.7973175)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131374</ID>
                                      <Description>"Standard Order 154, 155 - Deliver to Ludens Fan"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 101.4508591)
writeFloat('[PlayerCoordinates]+84', 539.0170288)
writeFloat('[PlayerCoordinates]+88', 207.0962372)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131375</ID>
                                  <Description>"From Luden's Fan"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131376</ID>
                                      <Description>"Teleport to: Ludens Fan"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 101.4508591)
writeFloat('[PlayerCoordinates]+84', 539.0170288)
writeFloat('[PlayerCoordinates]+88', 207.0962372)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131377</ID>
                                          <Description>"Standard Order 156 - Deliver to Capital Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1432.995117)
writeFloat('[PlayerCoordinates]+84', 701.8141479)
writeFloat('[PlayerCoordinates]+88', 137.3023224)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131378</ID>
                                          <Description>"Standard Order 157 - Deliver to Waystation West of Capital Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 313.767334)
writeFloat('[PlayerCoordinates]+84', 1160.296875)
writeFloat('[PlayerCoordinates]+88', 162.9519653)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131379</ID>
                                          <Description>"Standard Order 158 - Deliver to Distribution Center West of Capital Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -438.5249329)
writeFloat('[PlayerCoordinates]+84', 266.2165527)
writeFloat('[PlayerCoordinates]+88', 137.3740692)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131380</ID>
                                          <Description>"Standard Order 159 - Deliver to Wind Farm"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1490.662476)
writeFloat('[PlayerCoordinates]+84', 656.2297974)
writeFloat('[PlayerCoordinates]+88', 205.5592499)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131381</ID>
                                          <Description>"Standard Order 160 - Deliver to Port Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1986.126221)
writeFloat('[PlayerCoordinates]+84', -480.7706299)
writeFloat('[PlayerCoordinates]+88', 139.4775085)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131382</ID>
                                          <Description>"Standard Order 161 - Pick up [2] items at MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 347.7147217)
writeFloat('[PlayerCoordinates]+84', 806.9052734)
writeFloat('[PlayerCoordinates]+88', 164.5243073)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131383</ID>
                                  <Description>"From Musician"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131384</ID>
                                      <Description>"Teleport to: Musician"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -980.53302)
writeFloat('[PlayerCoordinates]+84', -120.1126404)
writeFloat('[PlayerCoordinates]+88', 184.5494537)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131385</ID>
                                      <Description>"Standard Order 162, 163, 164, 165 - Deliver to Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1432.995117)
writeFloat('[PlayerCoordinates]+84', 701.8141479)
writeFloat('[PlayerCoordinates]+88', 137.3023224)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131386</ID>
                                      <Description>"Standard Order 166, 167 - Deliver to Waystation West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 313.767334)
writeFloat('[PlayerCoordinates]+84', 1160.296875)
writeFloat('[PlayerCoordinates]+88', 162.9519653)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131387</ID>
                                      <Description>"Standard Order 168, 169, 170, 171 - Deliver to Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -438.5249329)
writeFloat('[PlayerCoordinates]+84', 266.2165527)
writeFloat('[PlayerCoordinates]+88', 137.3740692)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131388</ID>
                                      <Description>"Standard Order 172 - Item 1/2"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-782.70141601563) -- X Coord
writeFloat('[PlayerCoordinates]+84',1.7735116481781) -- Y Coord
writeFloat('[PlayerCoordinates]+88',156.1656036377) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131389</ID>
                                          <Description>"Standard Order 172 - Item 2/2"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-879.19934082031) -- X Coord
writeFloat('[PlayerCoordinates]+84',0.8140344619751) -- Y Coord
writeFloat('[PlayerCoordinates]+88',155.41006469727) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133132</ID>
                                      <Description>"Standard Order 601 - Deliver to Port Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1986.126221)
writeFloat('[PlayerCoordinates]+84', -480.7706299)
writeFloat('[PlayerCoordinates]+88', 139.4775085)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131390</ID>
                              <Description>"Central Region"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131391</ID>
                                  <Description>"From Engineer"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131392</ID>
                                      <Description>"Teleport to: Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2191.7585449219)
writeFloat('[PlayerCoordinates]+84', 1189.8968505859)
writeFloat('[PlayerCoordinates]+88', 178.52680969238)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131393</ID>
                                      <Description>"Standard Order 173 - Pick up 1/4 and 2/4  item at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.813354)
writeFloat('[PlayerCoordinates]+84', 1064.050903)
writeFloat('[PlayerCoordinates]+88', 176.1360779)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131394</ID>
                                          <Description>"Standard Order 173 - Pick up 3/4 and 4/4  item at MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1674.913452)
writeFloat('[PlayerCoordinates]+84', 960.6556396)
writeFloat('[PlayerCoordinates]+88', 175.3177338)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131395</ID>
                                      <Description>"Standard Order 174 - Deliver to Elder"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1696.478515625)
writeFloat('[PlayerCoordinates]+84', 701.77563476563)
writeFloat('[PlayerCoordinates]+88', 245.24702453613)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131396</ID>
                                      <Description>"Standard Order 175, 176 - Deliver to Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1226.0323486328)
writeFloat('[PlayerCoordinates]+84', 1317.2032470703)
writeFloat('[PlayerCoordinates]+88', 184.76554870605)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131397</ID>
                                      <Description>"Standard Order 177 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.9134521484)
writeFloat('[PlayerCoordinates]+84', -275.56985473633)
writeFloat('[PlayerCoordinates]+88', 136.38018798828)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131398</ID>
                                      <Description>"Standard Order 178 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2152.3859863281)
writeFloat('[PlayerCoordinates]+84', -910.64288330078)
writeFloat('[PlayerCoordinates]+88', 156.43530273438)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131399</ID>
                                      <Description>"Standard Order 179, 180 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 184.68154907227)
writeFloat('[PlayerCoordinates]+84', 1642.2126464844)
writeFloat('[PlayerCoordinates]+88', 261.43435668945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131400</ID>
                                      <Description>"Standard Order 181, 182 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131401</ID>
                                      <Description>"Standard Order 183, 184 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131402</ID>
                                      <Description>"Standard Order 185 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131403</ID>
                                      <Description>"Standard Order 186, 187 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133061</ID>
                                      <Description>"Standard Order 602 - Deliver to Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1141.8942871094)
writeFloat('[PlayerCoordinates]+84', 29.015502929688)
writeFloat('[PlayerCoordinates]+88', 135.27490234375)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131404</ID>
                                  <Description>"From Elder"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131405</ID>
                                      <Description>"Teleport to: Elder"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1696.478515625)
writeFloat('[PlayerCoordinates]+84', 701.77563476563)
writeFloat('[PlayerCoordinates]+88', 245.24702453613)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131406</ID>
                                      <Description>"Standard Order 188, 189 - Deliver to Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2191.7585449219)
writeFloat('[PlayerCoordinates]+84', 1189.8968505859)
writeFloat('[PlayerCoordinates]+88', 178.52680969238)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131407</ID>
                                      <Description>"Standard Order 190 - Pick up 1-3/8 items at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1519.881714)
writeFloat('[PlayerCoordinates]+84', 992.4251099)
writeFloat('[PlayerCoordinates]+88', 173.4361572)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131408</ID>
                                          <Description>"Standard Order 190 - Pick up 4-5/8 items at MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1674.913452)
writeFloat('[PlayerCoordinates]+84', 960.6556396)
writeFloat('[PlayerCoordinates]+88', 175.3177338)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131409</ID>
                                          <Description>"Standard Order 190 - Pick up 6-8/8 items at MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.813354)
writeFloat('[PlayerCoordinates]+84', 1064.050903)
writeFloat('[PlayerCoordinates]+88', 176.1360779)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133508</ID>
                                      <Description>"Standard Order 191, 192 - Deliver to Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1226.0323486328)
writeFloat('[PlayerCoordinates]+84', 1317.2032470703)
writeFloat('[PlayerCoordinates]+88', 184.76554870605)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131411</ID>
                                      <Description>"Standard Order 193, 194 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 184.68154907227)
writeFloat('[PlayerCoordinates]+84', 1642.2126464844)
writeFloat('[PlayerCoordinates]+88', 261.43435668945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131412</ID>
                                      <Description>"Standard Order 195, 196 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131413</ID>
                                      <Description>"Standard Order 197 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131414</ID>
                                      <Description>"Standard Order 198 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133063</ID>
                                      <Description>"Standard Order 603 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 184.68154907227)
writeFloat('[PlayerCoordinates]+84', 1642.2126464844)
writeFloat('[PlayerCoordinates]+88', 261.43435668945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131415</ID>
                                  <Description>"From Craftsman"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131416</ID>
                                      <Description>"Teleport to: Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1226.0323486328)
writeFloat('[PlayerCoordinates]+84', 1317.2032470703)
writeFloat('[PlayerCoordinates]+88', 184.76554870605)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131417</ID>
                                      <Description>"Standard Order 199, 200 - Deliver to Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2191.7585449219)
writeFloat('[PlayerCoordinates]+84', 1189.8968505859)
writeFloat('[PlayerCoordinates]+88', 178.52680969238)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131418</ID>
                                      <Description>"Standard Order 201 - Deliver to Elder"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1696.478515625)
writeFloat('[PlayerCoordinates]+84', 701.77563476563)
writeFloat('[PlayerCoordinates]+88', 245.24702453613)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131419</ID>
                                      <Description>"Standard Order 202 - Pick up item at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 539.6925049)
writeFloat('[PlayerCoordinates]+84', 885.2458496)
writeFloat('[PlayerCoordinates]+88', 174.2861328)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131420</ID>
                                          <Description>"Standard Order 202 - Deliver to Elder"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1696.478515625)
writeFloat('[PlayerCoordinates]+84', 701.77563476563)
writeFloat('[PlayerCoordinates]+88', 245.24702453613)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131421</ID>
                                      <Description>"Standard Order 203 - Item 1/12"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1277.2947998047) -- X Coord
writeFloat('[PlayerCoordinates]+84',1650.4176025391) -- Y Coord
writeFloat('[PlayerCoordinates]+88',199.81755065918) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131422</ID>
                                          <Description>"Standard Order 203 - Item 2/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1245.4796142578) -- X Coord
writeFloat('[PlayerCoordinates]+84',1661.7210693359) -- Y Coord
writeFloat('[PlayerCoordinates]+88',196.87916564941) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131423</ID>
                                          <Description>"Standard Order 203 - Item 3/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1353.1273193359) -- X Coord
writeFloat('[PlayerCoordinates]+84',1842.2951660156) -- Y Coord
writeFloat('[PlayerCoordinates]+88',217.91390991211) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131424</ID>
                                          <Description>"Standard Order 203 - Item 4/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1326.4187011719) -- X Coord
writeFloat('[PlayerCoordinates]+84',1640.7020263672) -- Y Coord
writeFloat('[PlayerCoordinates]+88',234.05717468262) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131425</ID>
                                          <Description>"Standard Order 203 - Item 5/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1315.0336914063) -- X Coord
writeFloat('[PlayerCoordinates]+84',1667.111328125) -- Y Coord
writeFloat('[PlayerCoordinates]+88',208.73355102539) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131426</ID>
                                          <Description>"Standard Order 203 - Item 6/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1366.455078125) -- X Coord
writeFloat('[PlayerCoordinates]+84',1719.1708984375) -- Y Coord
writeFloat('[PlayerCoordinates]+88',201.0471496582) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131427</ID>
                                          <Description>"Standard Order 203 - Item 7/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1218.3952636719) -- X Coord
writeFloat('[PlayerCoordinates]+84',1691.8856201172) -- Y Coord
writeFloat('[PlayerCoordinates]+88',194.67463684082) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131428</ID>
                                          <Description>"Standard Order 203 - Item 8/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1232.1402587891) -- X Coord
writeFloat('[PlayerCoordinates]+84',1757.1409912109) -- Y Coord
writeFloat('[PlayerCoordinates]+88',197.26246643066) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131429</ID>
                                          <Description>"Standard Order 203 - Item 9/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1280.0035400391) -- X Coord
writeFloat('[PlayerCoordinates]+84',1821.4002685547) -- Y Coord
writeFloat('[PlayerCoordinates]+88',196.72442626953) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131430</ID>
                                          <Description>"Standard Order 203 - Item 10/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1329.1955566406) -- X Coord
writeFloat('[PlayerCoordinates]+84',1761.7088623047) -- Y Coord
writeFloat('[PlayerCoordinates]+88',204.50823974609) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131431</ID>
                                          <Description>"Standard Order 203 - Item 11/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1291.0003662109) -- X Coord
writeFloat('[PlayerCoordinates]+84',1752.4949951172) -- Y Coord
writeFloat('[PlayerCoordinates]+88',195.1579284668) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131432</ID>
                                          <Description>"Standard Order 203 - Item 12/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1305.8538818359) -- X Coord
writeFloat('[PlayerCoordinates]+84',1717.9089355469) -- Y Coord
writeFloat('[PlayerCoordinates]+88',197.96995544434) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131433</ID>
                                      <Description>"Standard Order 204 - Pick up item"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1326.4937744141)
writeFloat('[PlayerCoordinates]+84', 1787.4482421875)
writeFloat('[PlayerCoordinates]+88', 200.16622924805)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131434</ID>
                                      <Description>"Standard Order 205 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.9134521484)
writeFloat('[PlayerCoordinates]+84', -275.56985473633)
writeFloat('[PlayerCoordinates]+88', 136.38018798828)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131435</ID>
                                      <Description>"Standard Order 206 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2152.3859863281)
writeFloat('[PlayerCoordinates]+84', -910.64288330078)
writeFloat('[PlayerCoordinates]+88', 156.43530273438)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131436</ID>
                                      <Description>"Standard Order 207, 208 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 184.68154907227)
writeFloat('[PlayerCoordinates]+84', 1642.2126464844)
writeFloat('[PlayerCoordinates]+88', 261.43435668945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131437</ID>
                                      <Description>"Standard Order 209 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131438</ID>
                                      <Description>"Standard Order 210, 211 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131439</ID>
                                      <Description>"Standard Order 212 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131440</ID>
                                      <Description>"Standard Order 213 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131441</ID>
                                      <Description>"Standard Order 214, 215 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133065</ID>
                                      <Description>"Standard Order 604 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131442</ID>
                                  <Description>"From Timefall Farm"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131443</ID>
                                      <Description>"Teleport to: Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 92.446998596191)
writeFloat('[PlayerCoordinates]+84', -1618.1838378906)
writeFloat('[PlayerCoordinates]+88', 109.72776794434)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131444</ID>
                                      <Description>"Standard Order 216 - Deliver to Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2191.7585449219)
writeFloat('[PlayerCoordinates]+84', 1189.8968505859)
writeFloat('[PlayerCoordinates]+88', 178.52680969238)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131445</ID>
                                      <Description>"Standard Order 217, 218 - Deliver to Elder"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1696.478515625)
writeFloat('[PlayerCoordinates]+84', 701.77563476563)
writeFloat('[PlayerCoordinates]+88', 245.24702453613)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131446</ID>
                                      <Description>"Standard Order 219 - Deliver to Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1226.0323486328)
writeFloat('[PlayerCoordinates]+84', 1317.2032470703)
writeFloat('[PlayerCoordinates]+88', 184.76554870605)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131447</ID>
                                      <Description>"Standard Order 220 - Pick up 2 of 5 items at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -47.38366318)
writeFloat('[PlayerCoordinates]+84', -1264.429321)
writeFloat('[PlayerCoordinates]+88', 117.9734192)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131448</ID>
                                          <Description>"Standard Order 220 - Pick up 3 of 5 items at MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 287.2895203)
writeFloat('[PlayerCoordinates]+84', -1231.669556)
writeFloat('[PlayerCoordinates]+88', 104.318367)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131449</ID>
                                      <Description>"Standard Order 221 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.9134521484)
writeFloat('[PlayerCoordinates]+84', -275.56985473633)
writeFloat('[PlayerCoordinates]+88', 136.38018798828)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131450</ID>
                                      <Description>"Standard Order 222 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1242.4761962891)
writeFloat('[PlayerCoordinates]+84', -1248.0733642578)
writeFloat('[PlayerCoordinates]+88', 412.21273803711)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131451</ID>
                                      <Description>"Standard Order 223 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -419.83605957031)
writeFloat('[PlayerCoordinates]+84', -1165.1920166016)
writeFloat('[PlayerCoordinates]+88', 250.94882202148)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131452</ID>
                                      <Description>"Standard Order 224 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1831.9169921875)
writeFloat('[PlayerCoordinates]+84', -705.4521484375)
writeFloat('[PlayerCoordinates]+88', 466.98864746094)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131453</ID>
                                      <Description>"Standard Order 225 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2001.1428222656)
writeFloat('[PlayerCoordinates]+84', -24.001985549927)
writeFloat('[PlayerCoordinates]+88', 153.35623168945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131454</ID>
                                      <Description>"Standard Order 226 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131455</ID>
                                      <Description>"Standard Order 227, 228 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131456</ID>
                                      <Description>"Standard Order 229 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131457</ID>
                                      <Description>"Standard Order 230 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131458</ID>
                                      <Description>"Standard Order 231 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1214.4786376953)
writeFloat('[PlayerCoordinates]+84', -222.15846252441)
writeFloat('[PlayerCoordinates]+88', 532.83221435547)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133074</ID>
                                      <Description>"Standard Order 605 - Pick up item 1/6"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',150.68518066406) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1891.2823486328) -- Y Coord
writeFloat('[PlayerCoordinates]+88',104.58309173584) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133076</ID>
                                          <Description>"Standard Order 605 - Pick up item 2/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',145.45516967773) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1905.6818847656) -- Y Coord
writeFloat('[PlayerCoordinates]+88',103.92874145508) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133078</ID>
                                          <Description>"Standard Order 605 - Pick up item 3/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',148.05787658691) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1975.1652832031) -- Y Coord
writeFloat('[PlayerCoordinates]+88',99.673324584961) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133080</ID>
                                          <Description>"Standard Order 605 - Pick up item 4/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',47.368530273438) -- X Coord
writeFloat('[PlayerCoordinates]+84',-2018.7274169922) -- Y Coord
writeFloat('[PlayerCoordinates]+88',94.080978393555) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133082</ID>
                                          <Description>"Standard Order 605 - Pick up item 5/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',172.37208557129) -- X Coord
writeFloat('[PlayerCoordinates]+84',-2081.0056152344) -- Y Coord
writeFloat('[PlayerCoordinates]+88',103.05184936523) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133084</ID>
                                          <Description>"Standard Order 605 - Pick up item 6/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',206.98767089844) -- X Coord
writeFloat('[PlayerCoordinates]+84',-2005.3509521484) -- Y Coord
writeFloat('[PlayerCoordinates]+88',118.95756530762) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133067</ID>
                                      <Description>"Standard Order 606 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133068</ID>
                                      <Description>"Standard Order 607 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133069</ID>
                                      <Description>"Standard Order 608 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131459</ID>
                                  <Description>"From Junk Dealer"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131460</ID>
                                      <Description>"Teleport to: Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.9134521484)
writeFloat('[PlayerCoordinates]+84', -275.56985473633)
writeFloat('[PlayerCoordinates]+88', 136.38018798828)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131461</ID>
                                      <Description>"Standard Order 232 - Deliver to Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2191.7585449219)
writeFloat('[PlayerCoordinates]+84', 1189.8968505859)
writeFloat('[PlayerCoordinates]+88', 178.52680969238)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131462</ID>
                                      <Description>"Standard Order 233, 234 - Deliver to Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1226.0323486328)
writeFloat('[PlayerCoordinates]+84', 1317.2032470703)
writeFloat('[PlayerCoordinates]+88', 184.76554870605)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131463</ID>
                                      <Description>"Standard Order 235 -  Pick up 1/6 &amp; 4/6 items at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1450.897339)
writeFloat('[PlayerCoordinates]+84', 210.0477753)
writeFloat('[PlayerCoordinates]+88', 134.6021881)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131464</ID>
                                          <Description>"Standard Order 235 -  Pick up 2/6 &amp; 3/6 items at MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1416.170044)
writeFloat('[PlayerCoordinates]+84', 33.30061722)
writeFloat('[PlayerCoordinates]+88', 130.302597)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131465</ID>
                                          <Description>"Standard Order 235 -  Pick up 5/6 &amp; 6/6 items at MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1322.740356)
writeFloat('[PlayerCoordinates]+84', -104.4131546)
writeFloat('[PlayerCoordinates]+88', 134.1850281)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131466</ID>
                                      <Description>"Standard Order 236 - pick up 1/5 item"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1033.3890380859) -- X Coord
writeFloat('[PlayerCoordinates]+84',-286.65512084961) -- Y Coord
writeFloat('[PlayerCoordinates]+88',113.88230895996) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131467</ID>
                                          <Description>"Standard Order 236 - pick up 4/5 item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1023.3867797852) -- X Coord
writeFloat('[PlayerCoordinates]+84',-284.3401184082) -- Y Coord
writeFloat('[PlayerCoordinates]+88',128.44570922852) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131468</ID>
                                          <Description>"Standard Order 236 - pick up 3/5 item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1004.3600463867) -- X Coord
writeFloat('[PlayerCoordinates]+84',-311.05718994141) -- Y Coord
writeFloat('[PlayerCoordinates]+88',111.22936248779) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131469</ID>
                                          <Description>"Standard Order 236 - pick up 4/5 item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',988.54357910156) -- X Coord
writeFloat('[PlayerCoordinates]+84',-312.82986450195) -- Y Coord
writeFloat('[PlayerCoordinates]+88',122.80693817139) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131470</ID>
                                          <Description>"Standard Order 236 - pick up 5/5 item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',982.66955566406) -- X Coord
writeFloat('[PlayerCoordinates]+84',-320.69876098633) -- Y Coord
writeFloat('[PlayerCoordinates]+88',116.83218383789) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131471</ID>
                                      <Description>"Standard Order 237 - Pick up item - 10/110kg"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1188.9783935547) -- X Coord
writeFloat('[PlayerCoordinates]+84',-652.0498046875) -- Y Coord
writeFloat('[PlayerCoordinates]+88',141.46401977539) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131472</ID>
                                          <Description>"Standard Order 237 - Pick up item - 10/110kg"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1279.5874023438) -- X Coord
writeFloat('[PlayerCoordinates]+84',-740.49169921875) -- Y Coord
writeFloat('[PlayerCoordinates]+88',142.1597442627) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131473</ID>
                                          <Description>"Standard Order 237 - Pick up item - 10/110kg"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1232.4254150391) -- X Coord
writeFloat('[PlayerCoordinates]+84',-609.76129150391) -- Y Coord
writeFloat('[PlayerCoordinates]+88',138.11064147949) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131474</ID>
                                          <Description>"Standard Order 237 - Pick up item - 10/110kg"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1215.8090820313) -- X Coord
writeFloat('[PlayerCoordinates]+84',-619.72302246094) -- Y Coord
writeFloat('[PlayerCoordinates]+88',139.26835632324) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131475</ID>
                                          <Description>"Standard Order 237 - Pick up item - 20/110kg"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1242.8618164063) -- X Coord
writeFloat('[PlayerCoordinates]+84',-676.93310546875) -- Y Coord
writeFloat('[PlayerCoordinates]+88',144.10029602051) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131476</ID>
                                          <Description>"Standard Order 237 - Pick up item - 20/110kg"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1212.8497314453) -- X Coord
writeFloat('[PlayerCoordinates]+84',-657.69348144531) -- Y Coord
writeFloat('[PlayerCoordinates]+88',144.54275512695) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131477</ID>
                                          <Description>"Standard Order 237 - Pick up item - 30/110kg"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1171.5255126953) -- X Coord
writeFloat('[PlayerCoordinates]+84',-578.49353027344) -- Y Coord
writeFloat('[PlayerCoordinates]+88',142.99797058105) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131478</ID>
                                      <Description>"Standard Order 238, 239, 240, 241 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2152.3859863281)
writeFloat('[PlayerCoordinates]+84', -910.64288330078)
writeFloat('[PlayerCoordinates]+88', 156.43530273438)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131479</ID>
                                      <Description>"Standard Order 242 - Deliver to Photographer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2168.2016601563)
writeFloat('[PlayerCoordinates]+84', 603.51947021484)
writeFloat('[PlayerCoordinates]+88', 266.14349365234)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131480</ID>
                                      <Description>"Standard Order 243 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -319.4059753418)
writeFloat('[PlayerCoordinates]+84', 989.09338378906)
writeFloat('[PlayerCoordinates]+88', 737.16760253906)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131481</ID>
                                      <Description>"Standard Order 244 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2001.1428222656)
writeFloat('[PlayerCoordinates]+84', -24.001985549927)
writeFloat('[PlayerCoordinates]+88', 153.35623168945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131482</ID>
                                      <Description>"Standard Order 245 - Deliver to Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 719.26995849609)
writeFloat('[PlayerCoordinates]+84', -663.93426513672)
writeFloat('[PlayerCoordinates]+88', 101.74416351318)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131483</ID>
                                      <Description>"Standard Order 246 - Deliver to Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1141.8942871094)
writeFloat('[PlayerCoordinates]+84', 29.015502929688)
writeFloat('[PlayerCoordinates]+88', 135.27490234375)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131484</ID>
                                      <Description>"Standard Order 247 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131485</ID>
                                      <Description>"Standard Order 248, 249, 250 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131486</ID>
                                      <Description>"Standard Order 251, 252 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131487</ID>
                                      <Description>"Standard Order 253, 254 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133087</ID>
                                      <Description>"Standard Order 609 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131488</ID>
                                  <Description>"From Chiral Artist's Studio"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131489</ID>
                                      <Description>"Teleport to: Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2152.3859863281)
writeFloat('[PlayerCoordinates]+84', -910.64288330078)
writeFloat('[PlayerCoordinates]+88', 156.43530273438)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131490</ID>
                                      <Description>"Standard Order 255, 256, 257 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.9134521484)
writeFloat('[PlayerCoordinates]+84', -275.56985473633)
writeFloat('[PlayerCoordinates]+88', 136.38018798828)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131491</ID>
                                      <Description>"Standard Order 258 - item 1/6"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1442.1732177734) -- X Coord
writeFloat('[PlayerCoordinates]+84',-846.88592529297) -- Y Coord
writeFloat('[PlayerCoordinates]+88',127.15309143066) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131492</ID>
                                          <Description>"Standard Order 258 - item 2/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1496.8579101563) -- X Coord
writeFloat('[PlayerCoordinates]+84',-913.66082763672) -- Y Coord
writeFloat('[PlayerCoordinates]+88',126.61714935303) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131493</ID>
                                          <Description>"Standard Order 258 - item 3/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1496.4111328125) -- X Coord
writeFloat('[PlayerCoordinates]+84',-965.77868652344) -- Y Coord
writeFloat('[PlayerCoordinates]+88',126.2717666626) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131494</ID>
                                          <Description>"Standard Order 258 - item 4/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1457.5051269531) -- X Coord
writeFloat('[PlayerCoordinates]+84',-858.28894042969) -- Y Coord
writeFloat('[PlayerCoordinates]+88',127.80170440674) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131495</ID>
                                          <Description>"Standard Order 258 - item 5/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1492.73046875) -- X Coord
writeFloat('[PlayerCoordinates]+84',-903.89691162109) -- Y Coord
writeFloat('[PlayerCoordinates]+88',126.84494781494) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131496</ID>
                                          <Description>"Standard Order 258 - item 6/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1493.9774169922) -- X Coord
writeFloat('[PlayerCoordinates]+84',-958.54907226563) -- Y Coord
writeFloat('[PlayerCoordinates]+88',126.92110443115) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131497</ID>
                                      <Description>"Standard Order 259 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -319.4059753418)
writeFloat('[PlayerCoordinates]+84', 989.09338378906)
writeFloat('[PlayerCoordinates]+88', 737.16760253906)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131498</ID>
                                      <Description>"Standard Order 260 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -419.83605957031)
writeFloat('[PlayerCoordinates]+84', -1165.1920166016)
writeFloat('[PlayerCoordinates]+88', 250.94882202148)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131499</ID>
                                      <Description>"Standard Order 261 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1831.9169921875)
writeFloat('[PlayerCoordinates]+84', -705.4521484375)
writeFloat('[PlayerCoordinates]+88', 466.98864746094)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131500</ID>
                                      <Description>"Standard Order 262 - Deliver to Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 719.26995849609)
writeFloat('[PlayerCoordinates]+84', -663.93426513672)
writeFloat('[PlayerCoordinates]+88', 101.74416351318)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131501</ID>
                                      <Description>"Standard Order 263, 264 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131502</ID>
                                      <Description>"Standard Order 265 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131503</ID>
                                      <Description>"Standard Order 266 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1214.4786376953)
writeFloat('[PlayerCoordinates]+84', -222.15846252441)
writeFloat('[PlayerCoordinates]+88', 532.83221435547)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133088</ID>
                                      <Description>"Standard Order 610 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 92.446998596191)
writeFloat('[PlayerCoordinates]+84', -1618.1838378906)
writeFloat('[PlayerCoordinates]+88', 109.72776794434)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133091</ID>
                                      <Description>"Standard Order 611 - Deliver to Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1141.8942871094)
writeFloat('[PlayerCoordinates]+84', 29.015502929688)
writeFloat('[PlayerCoordinates]+88', 135.27490234375)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131504</ID>
                                  <Description>"From Waystation North of Mountain Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131505</ID>
                                      <Description>"Teleport to: Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 184.68154907227)
writeFloat('[PlayerCoordinates]+84', 1642.2126464844)
writeFloat('[PlayerCoordinates]+88', 261.43435668945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131506</ID>
                                      <Description>"Standard Order 267, 268 - Deliver to Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1226.0323486328)
writeFloat('[PlayerCoordinates]+84', 1317.2032470703)
writeFloat('[PlayerCoordinates]+88', 184.76554870605)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131507</ID>
                                      <Description>"Standard Order 269 - Pick up 1.2/4.8kg of item"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-102.48191833496) -- X Coord
writeFloat('[PlayerCoordinates]+84',1738.4359130859) -- Y Coord
writeFloat('[PlayerCoordinates]+88',323.17526245117) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131508</ID>
                                          <Description>"Standard Order 269 - Pick up 1.2/4.8kg of item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-107.51142883301) -- X Coord
writeFloat('[PlayerCoordinates]+84',1691.0695800781) -- Y Coord
writeFloat('[PlayerCoordinates]+88',332.23928833008) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131509</ID>
                                          <Description>"Standard Order 269 - Pick up 1.2/4.8kg of item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-129.83587646484) -- X Coord
writeFloat('[PlayerCoordinates]+84',1654.0974121094) -- Y Coord
writeFloat('[PlayerCoordinates]+88',348.81433105469) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131510</ID>
                                          <Description>"Standard Order 269 - Pick up 1.2/4.8kg of item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-166.93212890625) -- X Coord
writeFloat('[PlayerCoordinates]+84',1712.9616699219) -- Y Coord
writeFloat('[PlayerCoordinates]+88',344.13131713867) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131511</ID>
                                      <Description>"Standard Order 270, 271 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -921.78460693359)
writeFloat('[PlayerCoordinates]+84', 1063.0844726563)
writeFloat('[PlayerCoordinates]+88', 599.85607910156)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131512</ID>
                                      <Description>"Standard Order 272, 273 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -319.4059753418)
writeFloat('[PlayerCoordinates]+84', 989.09338378906)
writeFloat('[PlayerCoordinates]+88', 737.16760253906)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131513</ID>
                                      <Description>"Standard Order 274, 275 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131514</ID>
                                      <Description>"Standard Order 276, 277 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131515</ID>
                                      <Description>"Standard Order 278 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131516</ID>
                                      <Description>"Standard Order 279 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131517</ID>
                                      <Description>"Standard Order 280, 281, 282 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131518</ID>
                                      <Description>"Standard Order 283 - Pick up 1/4 &amp; 2/4 items at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -758.4589233)
writeFloat('[PlayerCoordinates]+84', 1811.8302)
writeFloat('[PlayerCoordinates]+88', 224.3075867)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131519</ID>
                                          <Description>"Standard Order 283 - Pick up 3/4 &amp; 4/4 items at MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -852.6716919)
writeFloat('[PlayerCoordinates]+84', 1918.503418)
writeFloat('[PlayerCoordinates]+88', 224.05896)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131520</ID>
                                      <Description>"Standard Order 284 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133092</ID>
                                      <Description>"Standard Order 612 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131521</ID>
                                  <Description>"From Roboticist"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131522</ID>
                                      <Description>"Teleport to: Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -646.64099121094)
writeFloat('[PlayerCoordinates]+84', -144.66549682617)
writeFloat('[PlayerCoordinates]+88', 536.55578613281)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131523</ID>
                                      <Description>"Standard Order 285, 286 - Deliver to Doctor"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1427.6165771484)
writeFloat('[PlayerCoordinates]+84', 58.272735595703)
writeFloat('[PlayerCoordinates]+88', 360.59719848633)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131524</ID>
                                      <Description>"Standard Order 287 - Deliver to Novelists's Son"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2441.5659179688)
writeFloat('[PlayerCoordinates]+84', 1291.0874023438)
writeFloat('[PlayerCoordinates]+88', 251.06520080566)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131525</ID>
                                      <Description>"Standard Order 288, 289 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131526</ID>
                                      <Description>"Standard Order 290 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131527</ID>
                                      <Description>"Standard Order 291 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133100</ID>
                                      <Description>"Standard Order 613 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 184.68154907227)
writeFloat('[PlayerCoordinates]+84', 1642.2126464844)
writeFloat('[PlayerCoordinates]+88', 261.43435668945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133094</ID>
                                      <Description>"Standard Order 614 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -419.83605957031)
writeFloat('[PlayerCoordinates]+84', -1165.1920166016)
writeFloat('[PlayerCoordinates]+88', 250.94882202148)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133095</ID>
                                      <Description>"Standard Order 615 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133099</ID>
                                      <Description>"Standard Order 616 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131528</ID>
                                  <Description>"From Mountaineer"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131529</ID>
                                      <Description>"Teleport to: Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -921.78460693359)
writeFloat('[PlayerCoordinates]+84', 1063.0844726563)
writeFloat('[PlayerCoordinates]+88', 599.85607910156)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131530</ID>
                                      <Description>"Standard Order 292 - Deliver to Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2191.7585449219)
writeFloat('[PlayerCoordinates]+84', 1189.8968505859)
writeFloat('[PlayerCoordinates]+88', 178.52680969238)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131531</ID>
                                      <Description>"Standard Order 293 - item 1/4"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1063.4508056641) -- X Coord
writeFloat('[PlayerCoordinates]+84',807.49243164063) -- Y Coord
writeFloat('[PlayerCoordinates]+88',474.11560058594) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131532</ID>
                                          <Description>"Standard Order 293 - item 2/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1148.1690673828) -- X Coord
writeFloat('[PlayerCoordinates]+84',760.69793701172) -- Y Coord
writeFloat('[PlayerCoordinates]+88',423.42977905273) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131533</ID>
                                          <Description>"Standard Order 293 - item 3/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1075.4835205078) -- X Coord
writeFloat('[PlayerCoordinates]+84',711.63800048828) -- Y Coord
writeFloat('[PlayerCoordinates]+88',421.92651367188) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131534</ID>
                                          <Description>"Standard Order 293 - item 4/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1087.7349853516) -- X Coord
writeFloat('[PlayerCoordinates]+84',756.84539794922) -- Y Coord
writeFloat('[PlayerCoordinates]+88',429.26803588867) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131535</ID>
                                      <Description>"Standard Order 294 - 2.5/50.5kg of item"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-839.68621826172) -- X Coord
writeFloat('[PlayerCoordinates]+84',1381.8358154297) -- Y Coord
writeFloat('[PlayerCoordinates]+88',507.98223876953) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131536</ID>
                                          <Description>"Standard Order 294 - 16.0/50.5kg of item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-886.73620605469) -- X Coord
writeFloat('[PlayerCoordinates]+84',1547.2239990234) -- Y Coord
writeFloat('[PlayerCoordinates]+88',443.43649291992) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131537</ID>
                                          <Description>"Standard Order 294 - 32.0/50.5kg of item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-869.11975097656) -- X Coord
writeFloat('[PlayerCoordinates]+84',1477.3526611328) -- Y Coord
writeFloat('[PlayerCoordinates]+88',470.50717163086) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131538</ID>
                                      <Description>"Standard Order 295 - Pick up 2 items from Doctor private locker"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1427.6165771484)
writeFloat('[PlayerCoordinates]+84', 58.272735595703)
writeFloat('[PlayerCoordinates]+88', 360.59719848633)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131539</ID>
                                      <Description>"Standard Order 296 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -319.4059753418)
writeFloat('[PlayerCoordinates]+84', 989.09338378906)
writeFloat('[PlayerCoordinates]+88', 737.16760253906)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131540</ID>
                                      <Description>"Standard Order 297 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131541</ID>
                                      <Description>"Standard Order 298 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133102</ID>
                                      <Description>"Standard Order 617 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 184.68154907227)
writeFloat('[PlayerCoordinates]+84', 1642.2126464844)
writeFloat('[PlayerCoordinates]+88', 261.43435668945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133106</ID>
                                      <Description>"Standard Order 618 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -419.83605957031)
writeFloat('[PlayerCoordinates]+84', -1165.1920166016)
writeFloat('[PlayerCoordinates]+88', 250.94882202148)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133055</ID>
                                      <Description>"Standard Order 619 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131542</ID>
                                  <Description>"From Photographer"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131543</ID>
                                      <Description>"Teleport to: Photographer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2168.2016601563)
writeFloat('[PlayerCoordinates]+84', 603.51947021484)
writeFloat('[PlayerCoordinates]+88', 266.14349365234)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131544</ID>
                                      <Description>"Standard Order 299 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.9134521484)
writeFloat('[PlayerCoordinates]+84', -275.56985473633)
writeFloat('[PlayerCoordinates]+88', 136.38018798828)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131545</ID>
                                      <Description>"Standard Order 300 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 184.68154907227)
writeFloat('[PlayerCoordinates]+84', 1642.2126464844)
writeFloat('[PlayerCoordinates]+88', 261.43435668945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131546</ID>
                                      <Description>"Standard Order 301 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -921.78460693359)
writeFloat('[PlayerCoordinates]+84', 1063.0844726563)
writeFloat('[PlayerCoordinates]+88', 599.85607910156)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131547</ID>
                                      <Description>"Standard Order 302 - pick up item 1/2"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-2358.5241699219) -- X Coord
writeFloat('[PlayerCoordinates]+84',935.01617431641) -- Y Coord
writeFloat('[PlayerCoordinates]+88',213.15675354004) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131548</ID>
                                          <Description>"Standard Order 302 - pick up item 2/2 (floating down river)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-2310.4409179688) -- X Coord
writeFloat('[PlayerCoordinates]+84',1010.5553588867) -- Y Coord
writeFloat('[PlayerCoordinates]+88',217.93942260742) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131549</ID>
                                      <Description>"Standard Order 303 - Pick up item 30.0/90.0 &amp; 15.0/90.0 from MULES Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1550.640991)
writeFloat('[PlayerCoordinates]+84', 1282.209595)
writeFloat('[PlayerCoordinates]+88', 241.9241943)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131550</ID>
                                          <Description>"Standard Order 303 - Pick up item 30.0/90.0 &amp; 15.0/90.0 from MULES Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1695.691895)
writeFloat('[PlayerCoordinates]+84', 1088.499268)
writeFloat('[PlayerCoordinates]+88', 220.418869)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131551</ID>
                                      <Description>"Standard Order 304 - pick up item 1/3"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1851.8474121094) -- X Coord
writeFloat('[PlayerCoordinates]+84',571.76635742188) -- Y Coord
writeFloat('[PlayerCoordinates]+88',249.16372680664) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131552</ID>
                                          <Description>"Standard Order 304 - pick up item 2/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1890.5684814453) -- X Coord
writeFloat('[PlayerCoordinates]+84',690.3701171875) -- Y Coord
writeFloat('[PlayerCoordinates]+88',237.01852416992) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131553</ID>
                                          <Description>"Standard Order 304 - pick up item 3/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1773.9481201172) -- X Coord
writeFloat('[PlayerCoordinates]+84',760.59051513672) -- Y Coord
writeFloat('[PlayerCoordinates]+88',233.60011291504) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131554</ID>
                                      <Description>"Standard Order 305 - pick up item 1/5"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-2554.65234375) -- X Coord
writeFloat('[PlayerCoordinates]+84',705.23272705078) -- Y Coord
writeFloat('[PlayerCoordinates]+88',214.40057373047) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131555</ID>
                                          <Description>"Standard Order 305 - pick up item 2/5  (floating down river)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-2544.1823730469) -- X Coord
writeFloat('[PlayerCoordinates]+84',778.39416503906) -- Y Coord
writeFloat('[PlayerCoordinates]+88',209.16925048828) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131556</ID>
                                          <Description>"Standard Order 305 - pick up item 3/5 (floating down river)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-2446.43359375) -- X Coord
writeFloat('[PlayerCoordinates]+84',732.92590332031) -- Y Coord
writeFloat('[PlayerCoordinates]+88',218.04811096191) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131557</ID>
                                          <Description>"Standard Order 305 - pick up item 4/5"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-2458.7358398438) -- X Coord
writeFloat('[PlayerCoordinates]+84',805.76281738281) -- Y Coord
writeFloat('[PlayerCoordinates]+88',209.46855163574) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131558</ID>
                                          <Description>"Standard Order 305 - pick up item 5/5"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-2588.0266113281) -- X Coord
writeFloat('[PlayerCoordinates]+84',771.5537109375) -- Y Coord
writeFloat('[PlayerCoordinates]+88',208.85223388672) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131559</ID>
                                      <Description>"Standard Order 306 - Pick up item from MULES Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1550.640991)
writeFloat('[PlayerCoordinates]+84', 1282.209595)
writeFloat('[PlayerCoordinates]+88', 241.9241943)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131560</ID>
                                      <Description>"Standard Order 307 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2001.1428222656)
writeFloat('[PlayerCoordinates]+84', -24.001985549927)
writeFloat('[PlayerCoordinates]+88', 153.35623168945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131561</ID>
                                      <Description>"Standard Order 308 - Deliver to Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 719.26995849609)
writeFloat('[PlayerCoordinates]+84', -663.93426513672)
writeFloat('[PlayerCoordinates]+88', 101.74416351318)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131562</ID>
                                      <Description>"Standard Order 309 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131563</ID>
                                      <Description>"Standard Order 310, 311 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131564</ID>
                                  <Description>"From Spiritualist"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131565</ID>
                                      <Description>"Teleport to: Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -319.4059753418)
writeFloat('[PlayerCoordinates]+84', 989.09338378906)
writeFloat('[PlayerCoordinates]+88', 737.16760253906)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131566</ID>
                                      <Description>"Standard Order 312 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2152.3859863281)
writeFloat('[PlayerCoordinates]+84', -910.64288330078)
writeFloat('[PlayerCoordinates]+88', 156.43530273438)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131567</ID>
                                      <Description>"Standard Order 313 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 184.68154907227)
writeFloat('[PlayerCoordinates]+84', 1642.2126464844)
writeFloat('[PlayerCoordinates]+88', 261.43435668945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131568</ID>
                                      <Description>"Standard Order 314 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -921.78460693359)
writeFloat('[PlayerCoordinates]+84', 1063.0844726563)
writeFloat('[PlayerCoordinates]+88', 599.85607910156)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131569</ID>
                                      <Description>"Standard Order 315 - item 1/3"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',369.35089111328) -- X Coord
writeFloat('[PlayerCoordinates]+84',-563.03277587891) -- Y Coord
writeFloat('[PlayerCoordinates]+88',183.21939086914) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131570</ID>
                                          <Description>"Standard Order 315 - item 2/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',417.47357177734) -- X Coord
writeFloat('[PlayerCoordinates]+84',-604.05236816406) -- Y Coord
writeFloat('[PlayerCoordinates]+88',159.4059753418) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131571</ID>
                                          <Description>"Standard Order 315 - item 3/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',352.40997314453) -- X Coord
writeFloat('[PlayerCoordinates]+84',-598.94934082031) -- Y Coord
writeFloat('[PlayerCoordinates]+88',175.6197052002) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131572</ID>
                                      <Description>"Standard Order 316 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2001.1428222656)
writeFloat('[PlayerCoordinates]+84', -24.001985549927)
writeFloat('[PlayerCoordinates]+88', 153.35623168945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131573</ID>
                                      <Description>"Standard Order 317, 318 - Deliver to Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 719.26995849609)
writeFloat('[PlayerCoordinates]+84', -663.93426513672)
writeFloat('[PlayerCoordinates]+88', 101.74416351318)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131574</ID>
                                      <Description>"Standard Order 319 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131575</ID>
                                      <Description>"Standard Order 320 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131576</ID>
                                      <Description>"Standard Order 321 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133108</ID>
                                      <Description>"Standard Order 620 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -419.83605957031)
writeFloat('[PlayerCoordinates]+84', -1165.1920166016)
writeFloat('[PlayerCoordinates]+88', 250.94882202148)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131577</ID>
                                  <Description>"From Doctor"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131578</ID>
                                      <Description>"Teleport to: Doctor"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1427.6165771484)
writeFloat('[PlayerCoordinates]+84', 58.272735595703)
writeFloat('[PlayerCoordinates]+88', 360.59719848633)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131579</ID>
                                      <Description>"Standard Order 322 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -646.64099121094)
writeFloat('[PlayerCoordinates]+84', -144.66549682617)
writeFloat('[PlayerCoordinates]+88', 536.55578613281)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131580</ID>
                                      <Description>"Standard Order 323, 324 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -921.78460693359)
writeFloat('[PlayerCoordinates]+84', 1063.0844726563)
writeFloat('[PlayerCoordinates]+88', 599.85607910156)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131581</ID>
                                      <Description>"Standard Order 325 - Grab 2 out of 3 items from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1550.640991)
writeFloat('[PlayerCoordinates]+84', 1282.209595)
writeFloat('[PlayerCoordinates]+88', 241.9241943)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131582</ID>
                                          <Description>"Standard Order 325 - Grab 1 out of 3 items from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1695.691895)
writeFloat('[PlayerCoordinates]+84', 1088.499268)
writeFloat('[PlayerCoordinates]+88', 220.418869)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131583</ID>
                                      <Description>"Standard Order 326 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131584</ID>
                                      <Description>"Standard Order 327 - Deliver to Novelists's Son"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2441.5659179688)
writeFloat('[PlayerCoordinates]+84', 1291.0874023438)
writeFloat('[PlayerCoordinates]+88', 251.06520080566)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131585</ID>
                                      <Description>"Standard Order 328 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131586</ID>
                                      <Description>"Standard Order 329, 330 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131587</ID>
                                      <Description>"Standard Order 331, 332 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131588</ID>
                                      <Description>"Standard Order 333 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1214.4786376953)
writeFloat('[PlayerCoordinates]+84', -222.15846252441)
writeFloat('[PlayerCoordinates]+88', 532.83221435547)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131589</ID>
                                  <Description>"From Geologist"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131590</ID>
                                      <Description>"Teleport to: Geologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -898.26202392578)
writeFloat('[PlayerCoordinates]+84', -789.72894287109)
writeFloat('[PlayerCoordinates]+88', 625.56060791016)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131591</ID>
                                      <Description>"Standard Order 334 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 92.446998596191)
writeFloat('[PlayerCoordinates]+84', -1618.1838378906)
writeFloat('[PlayerCoordinates]+88', 109.72776794434)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131592</ID>
                                      <Description>"Standard Order 335, 336 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -646.64099121094)
writeFloat('[PlayerCoordinates]+84', -144.66549682617)
writeFloat('[PlayerCoordinates]+88', 536.55578613281)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131593</ID>
                                      <Description>"Standard Order 337 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1242.4761962891)
writeFloat('[PlayerCoordinates]+84', -1248.0733642578)
writeFloat('[PlayerCoordinates]+88', 412.21273803711)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131594</ID>
                                      <Description>"Standard Order 338 - item 1/3"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-708.4169921875) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1155.9125976563) -- Y Coord
writeFloat('[PlayerCoordinates]+88',393.92913818359) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131595</ID>
                                          <Description>"Standard Order 338 - item 2/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-702.3134765625) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1187.7216796875) -- Y Coord
writeFloat('[PlayerCoordinates]+88',370.35589599609) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131596</ID>
                                          <Description>"Standard Order 338 - item 3/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-681.0361328125) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1126.8367919922) -- Y Coord
writeFloat('[PlayerCoordinates]+88',409.90438842773) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131597</ID>
                                          <Description>"Standard Order 338 - Deliver to Paleontologist"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1242.4761962891)
writeFloat('[PlayerCoordinates]+84', -1248.0733642578)
writeFloat('[PlayerCoordinates]+88', 412.21273803711)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131598</ID>
                                      <Description>"Standard Order 339 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -419.83605957031)
writeFloat('[PlayerCoordinates]+84', -1165.1920166016)
writeFloat('[PlayerCoordinates]+88', 250.94882202148)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131599</ID>
                                      <Description>"Standard Order 340, 341 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1831.9169921875)
writeFloat('[PlayerCoordinates]+84', -705.4521484375)
writeFloat('[PlayerCoordinates]+88', 466.98864746094)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131600</ID>
                                      <Description>"Standard Order 342 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131601</ID>
                                      <Description>"Standard Order 343 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131602</ID>
                                      <Description>"Standard Order 344 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1214.4786376953)
writeFloat('[PlayerCoordinates]+84', -222.15846252441)
writeFloat('[PlayerCoordinates]+88', 532.83221435547)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133110</ID>
                                      <Description>"Standard Order 621 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131603</ID>
                                  <Description>"From Paleontologist"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131604</ID>
                                      <Description>"Teleport to: Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1242.4761962891)
writeFloat('[PlayerCoordinates]+84', -1248.0733642578)
writeFloat('[PlayerCoordinates]+88', 412.21273803711)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131605</ID>
                                      <Description>"Standard Order 345, 346 - Deliver to Geologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -898.26202392578)
writeFloat('[PlayerCoordinates]+84', -789.72894287109)
writeFloat('[PlayerCoordinates]+88', 625.56060791016)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131606</ID>
                                      <Description>"Standard Order 347 - Pick up item 1/2 from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1888.633545)
writeFloat('[PlayerCoordinates]+84', -1423.368896)
writeFloat('[PlayerCoordinates]+88', 317.8652344)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131607</ID>
                                          <Description>"Standard Order 347 - Pick up item 2/2 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2034.582642)
writeFloat('[PlayerCoordinates]+84', -1499.935303)
writeFloat('[PlayerCoordinates]+88', 287.5764771)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131608</ID>
                                      <Description>"Standard Order 348 - item 1/5 (need oxygen mask)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1369.9002685547) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1347.1613769531) -- Y Coord
writeFloat('[PlayerCoordinates]+88',340.50689697266) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131609</ID>
                                          <Description>"Standard Order 348 - item 2/5"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1351.9140625) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1337.7009277344) -- Y Coord
writeFloat('[PlayerCoordinates]+88',343.79858398438) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131610</ID>
                                          <Description>"Standard Order 348 - item 3/5"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1378.666015625) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1340.9321289063) -- Y Coord
writeFloat('[PlayerCoordinates]+88',341.27722167969) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131611</ID>
                                          <Description>"Standard Order 348 - item 4/5"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1359.6401367188) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1336.7027587891) -- Y Coord
writeFloat('[PlayerCoordinates]+88',340.9944152832) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131612</ID>
                                          <Description>"Standard Order 348 - item 5/5"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1358.9368896484) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1336.9677734375) -- Y Coord
writeFloat('[PlayerCoordinates]+88',340.99661254883) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131613</ID>
                                      <Description>"Standard Order 349 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -419.83605957031)
writeFloat('[PlayerCoordinates]+84', -1165.1920166016)
writeFloat('[PlayerCoordinates]+88', 250.94882202148)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131614</ID>
                                      <Description>"Standard Order 350, 351 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1831.9169921875)
writeFloat('[PlayerCoordinates]+84', -705.4521484375)
writeFloat('[PlayerCoordinates]+88', 466.98864746094)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131615</ID>
                                      <Description>"Standard Order 352 - item 1/4"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-2011.4782714844) -- X Coord
writeFloat('[PlayerCoordinates]+84',-981.90301513672) -- Y Coord
writeFloat('[PlayerCoordinates]+88',315.69424438477) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131616</ID>
                                          <Description>"Standard Order 352 - item 2/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-2027.5375976563) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1061.5262451172) -- Y Coord
writeFloat('[PlayerCoordinates]+88',322.40969848633) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131617</ID>
                                          <Description>"Standard Order 352 - item 3/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1928.0103759766) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1009.0362548828) -- Y Coord
writeFloat('[PlayerCoordinates]+88',328.04840087891) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131618</ID>
                                          <Description>"Standard Order 352 - item 4/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1987.3453369141) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1045.4931640625) -- Y Coord
writeFloat('[PlayerCoordinates]+88',317.96395874023) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131619</ID>
                                          <Description>"Standard Order 352 - Deliver to Evo-devo Biologist"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1831.9169921875)
writeFloat('[PlayerCoordinates]+84', -705.4521484375)
writeFloat('[PlayerCoordinates]+88', 466.98864746094)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131620</ID>
                                      <Description>"Standard Order 353 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2001.1428222656)
writeFloat('[PlayerCoordinates]+84', -24.001985549927)
writeFloat('[PlayerCoordinates]+88', 153.35623168945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131621</ID>
                                      <Description>"Standard Order 354 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131622</ID>
                                      <Description>"Standard Order 355 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131623</ID>
                                      <Description>"Standard Order 356, 357 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1214.4786376953)
writeFloat('[PlayerCoordinates]+84', -222.15846252441)
writeFloat('[PlayerCoordinates]+88', 532.83221435547)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131624</ID>
                                  <Description>"From Veteran Porter"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131625</ID>
                                      <Description>"Teleport to: Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -419.83605957031)
writeFloat('[PlayerCoordinates]+84', -1165.1920166016)
writeFloat('[PlayerCoordinates]+88', 250.94882202148)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131626</ID>
                                      <Description>"Standard Order 358, 359 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 92.446998596191)
writeFloat('[PlayerCoordinates]+84', -1618.1838378906)
writeFloat('[PlayerCoordinates]+88', 109.72776794434)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131627</ID>
                                      <Description>"Standard Order 360, 361 - Deliver to Geologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -898.26202392578)
writeFloat('[PlayerCoordinates]+84', -789.72894287109)
writeFloat('[PlayerCoordinates]+88', 625.56060791016)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131628</ID>
                                      <Description>"Standard Order 362 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1242.4761962891)
writeFloat('[PlayerCoordinates]+84', -1248.0733642578)
writeFloat('[PlayerCoordinates]+88', 412.21273803711)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131629</ID>
                                      <Description>"Standard Order 363 - Pick up item 1/4"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',6.908561706543) -- X Coord
writeFloat('[PlayerCoordinates]+84',-928.75341796875) -- Y Coord
writeFloat('[PlayerCoordinates]+88',129.24418640137) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131630</ID>
                                          <Description>"Standard Order 363 - Pick up item 2/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',24.503883361816) -- X Coord
writeFloat('[PlayerCoordinates]+84',-977.44952392578) -- Y Coord
writeFloat('[PlayerCoordinates]+88',127.62291717529) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131631</ID>
                                          <Description>"Standard Order 363 - Pick up item 3/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',31.133443832397) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1011.7098388672) -- Y Coord
writeFloat('[PlayerCoordinates]+88',125.46244812012) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131632</ID>
                                          <Description>"Standard Order 363 - Pick up item 4/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-34.409656524658) -- X Coord
writeFloat('[PlayerCoordinates]+84',-895.20886230469) -- Y Coord
writeFloat('[PlayerCoordinates]+88',137.89083862305) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131633</ID>
                                      <Description>"Standard Order 364 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1831.9169921875)
writeFloat('[PlayerCoordinates]+84', -705.4521484375)
writeFloat('[PlayerCoordinates]+88', 466.98864746094)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131634</ID>
                                      <Description>"Standard Order 365 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133112</ID>
                                      <Description>"Standard Order 622 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -921.78460693359)
writeFloat('[PlayerCoordinates]+84', 1063.0844726563)
writeFloat('[PlayerCoordinates]+88', 599.85607910156)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133115</ID>
                                      <Description>"Standard Order 623 - Pick up item 1/3 from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 287.2895203)
writeFloat('[PlayerCoordinates]+84', -1231.669556)
writeFloat('[PlayerCoordinates]+88', 104.318367)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133117</ID>
                                          <Description>"Standard Order 623 - Pick up item 2/3 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 212.8048248)
writeFloat('[PlayerCoordinates]+84', -1321.593384)
writeFloat('[PlayerCoordinates]+88', 111.9862213)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133190</ID>
                                          <Description>"Standard Order 623 - Pick up item 3/3 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -47.38366318)
writeFloat('[PlayerCoordinates]+84', -1264.429321)
writeFloat('[PlayerCoordinates]+88', 117.9734192)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133121</ID>
                                      <Description>"Standard Order 624 - Pick up 3 items from Geologist private locker"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -898.26202392578)
writeFloat('[PlayerCoordinates]+84', -789.72894287109)
writeFloat('[PlayerCoordinates]+88', 625.56060791016)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133122</ID>
                                      <Description>"Standard Order 625 - Pick up 3 items from Mountain Knot City private locker"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133134</ID>
                                      <Description>"Standard Order 626 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131635</ID>
                                  <Description>"From Evo-Devo Biologist"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131636</ID>
                                      <Description>"Teleport to: Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1831.9169921875)
writeFloat('[PlayerCoordinates]+84', -705.4521484375)
writeFloat('[PlayerCoordinates]+88', 466.98864746094)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131637</ID>
                                      <Description>"Standard Order 366 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 92.446998596191)
writeFloat('[PlayerCoordinates]+84', -1618.1838378906)
writeFloat('[PlayerCoordinates]+88', 109.72776794434)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131638</ID>
                                      <Description>"Standard Order 367 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -646.64099121094)
writeFloat('[PlayerCoordinates]+84', -144.66549682617)
writeFloat('[PlayerCoordinates]+88', 536.55578613281)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131639</ID>
                                      <Description>"Standard Order 368 - Deliver to Geologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -898.26202392578)
writeFloat('[PlayerCoordinates]+84', -789.72894287109)
writeFloat('[PlayerCoordinates]+88', 625.56060791016)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131640</ID>
                                      <Description>"Standard Order 369, 370 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1242.4761962891)
writeFloat('[PlayerCoordinates]+84', -1248.0733642578)
writeFloat('[PlayerCoordinates]+88', 412.21273803711)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131641</ID>
                                      <Description>"Standard Order 371 - Pick up 1 out of 2 items from MULES Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1973.025146)
writeFloat('[PlayerCoordinates]+84', -1232.20105)
writeFloat('[PlayerCoordinates]+88', 319.3590088)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131642</ID>
                                          <Description>"Standard Order 371 - Pick up 1 out of 2 items from MULES Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1888.633545)
writeFloat('[PlayerCoordinates]+84', -1423.368896)
writeFloat('[PlayerCoordinates]+88', 317.8652344)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131643</ID>
                                      <Description>"Standard Order 372 - Pick up item 1/3 (requires oxygen mask)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1374.3210449219) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1346.3881835938) -- Y Coord
writeFloat('[PlayerCoordinates]+88',339.97006225586) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131644</ID>
                                          <Description>"Standard Order 372 - Pick up item 2/3 (requires oxygen mask)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1357.28515625) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1333.0690917969) -- Y Coord
writeFloat('[PlayerCoordinates]+88',344.47534179688) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131645</ID>
                                          <Description>"Standard Order 372 - Pick up item 3/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1390.7003173828) -- X Coord
writeFloat('[PlayerCoordinates]+84',-1354.7497558594) -- Y Coord
writeFloat('[PlayerCoordinates]+88',353.81820678711) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131646</ID>
                                      <Description>"Standard Order 373 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2001.1428222656)
writeFloat('[PlayerCoordinates]+84', -24.001985549927)
writeFloat('[PlayerCoordinates]+88', 153.35623168945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131647</ID>
                                      <Description>"Standard Order 374 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131648</ID>
                                      <Description>"Standard Order 375 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131649</ID>
                                      <Description>"Standard Order 376 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1214.4786376953)
writeFloat('[PlayerCoordinates]+84', -222.15846252441)
writeFloat('[PlayerCoordinates]+88', 532.83221435547)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133124</ID>
                                      <Description>"Standard Order 627 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131650</ID>
                                  <Description>"From Film Director"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131651</ID>
                                      <Description>"Teleport to: Film Director"</Description>
                                      <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2001.1428222656)
writeFloat('[PlayerCoordinates]+84', -24.001985549927)
writeFloat('[PlayerCoordinates]+88', 153.35623168945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131652</ID>
                                          <Description>"Standard Order 378 - Deliver to Craftsman"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131653</ID>
                                          <Description>"Standard Order 381 - Deliver to Lake Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131654</ID>
                                      <Description>"Standard Order 377 - Deliver to Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2191.7585449219)
writeFloat('[PlayerCoordinates]+84', 1189.8968505859)
writeFloat('[PlayerCoordinates]+88', 178.52680969238)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131655</ID>
                                      <Description>"Standard Order 378 - Deliver to Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1226.0323486328)
writeFloat('[PlayerCoordinates]+84', 1317.2032470703)
writeFloat('[PlayerCoordinates]+88', 184.76554870605)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131656</ID>
                                      <Description>"Standard Order 379 - Pick up item 1/4"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',595.52844238281) -- X Coord
writeFloat('[PlayerCoordinates]+84',-599.80908203125) -- Y Coord
writeFloat('[PlayerCoordinates]+88',152.11145019531) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131657</ID>
                                          <Description>"Standard Order 379 - Pick up item 2/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',523.78137207031) -- X Coord
writeFloat('[PlayerCoordinates]+84',-592.39337158203) -- Y Coord
writeFloat('[PlayerCoordinates]+88',152.62718200684) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131658</ID>
                                          <Description>"Standard Order 379 - Pick up item 3/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',575.7783203125) -- X Coord
writeFloat('[PlayerCoordinates]+84',-607.74694824219) -- Y Coord
writeFloat('[PlayerCoordinates]+88',152.65968322754) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131659</ID>
                                          <Description>"Standard Order 379 - Pick up item 4/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',529.31451416016) -- X Coord
writeFloat('[PlayerCoordinates]+84',-605.53698730469) -- Y Coord
writeFloat('[PlayerCoordinates]+88',152.67492675781) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131660</ID>
                                          <Description>"Standard Order 379 - Teleport Back to Vehicle  (if you used my vehicle location)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',623.51251220703) -- X Coord
writeFloat('[PlayerCoordinates]+84',-601.41424560547) -- Y Coord
writeFloat('[PlayerCoordinates]+88',157.29495239258) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131661</ID>
                                      <Description>"Standard Order 380 - Pick up item 1/4 (Requires Oxygen Mask)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2087.8728027344) -- X Coord
writeFloat('[PlayerCoordinates]+84',281.57427978516) -- Y Coord
writeFloat('[PlayerCoordinates]+88',161.23458862305) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131662</ID>
                                          <Description>"Standard Order 380 - Pick up item 2/4 (Requires Oxygen Mask)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2136.7121582031) -- X Coord
writeFloat('[PlayerCoordinates]+84',290.2262878418) -- Y Coord
writeFloat('[PlayerCoordinates]+88',154.72618103027) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131663</ID>
                                          <Description>"Standard Order 380 - Pick up item 3/4 (Requires Oxygen Mask)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2066.7980957031) -- X Coord
writeFloat('[PlayerCoordinates]+84',287.32989501953) -- Y Coord
writeFloat('[PlayerCoordinates]+88',154.25947570801) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131664</ID>
                                          <Description>"Standard Order 380 - Pick up item 4/4 (Requires Oxygen Mask)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2121.6508789063) -- X Coord
writeFloat('[PlayerCoordinates]+84',298.55728149414) -- Y Coord
writeFloat('[PlayerCoordinates]+88',160.50199890137) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131665</ID>
                                          <Description>"Standard Order 380 - Teleport Back to Vehicle  (if you used my vehicle location)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2197.001953125) -- X Coord
writeFloat('[PlayerCoordinates]+84',296.94464111328) -- Y Coord
writeFloat('[PlayerCoordinates]+88',175.28324890137) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131666</ID>
                                      <Description>"Standard Order 381 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131667</ID>
                                      <Description>"Standard Order 382 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131668</ID>
                                      <Description>"Standard Order 383 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1214.4786376953)
writeFloat('[PlayerCoordinates]+84', -222.15846252441)
writeFloat('[PlayerCoordinates]+88', 532.83221435547)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131669</ID>
                                  <Description>"From Cosplayer"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131670</ID>
                                      <Description>"Teleport to: Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 719.26995849609)
writeFloat('[PlayerCoordinates]+84', -663.93426513672)
writeFloat('[PlayerCoordinates]+88', 101.74416351318)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131671</ID>
                                      <Description>"Standard Order 384 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2152.3859863281)
writeFloat('[PlayerCoordinates]+84', -910.64288330078)
writeFloat('[PlayerCoordinates]+88', 156.43530273438)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131672</ID>
                                      <Description>"Standard Order 385 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -921.78460693359)
writeFloat('[PlayerCoordinates]+84', 1063.0844726563)
writeFloat('[PlayerCoordinates]+88', 599.85607910156)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131673</ID>
                                      <Description>"Standard Order 386 - Deliver to Photographer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2168.2016601563)
writeFloat('[PlayerCoordinates]+84', 603.51947021484)
writeFloat('[PlayerCoordinates]+88', 266.14349365234)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131674</ID>
                                      <Description>"Standard Order 387 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -319.4059753418)
writeFloat('[PlayerCoordinates]+84', 989.09338378906)
writeFloat('[PlayerCoordinates]+88', 737.16760253906)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131675</ID>
                                      <Description>"Standard Order 388 - Pick up item 1 of 7 from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -47.38366318)
writeFloat('[PlayerCoordinates]+84', -1264.429321)
writeFloat('[PlayerCoordinates]+88', 117.9734192)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131676</ID>
                                          <Description>"Standard Order 388 - Pick up item 2, 3 of 7 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 212.8048248)
writeFloat('[PlayerCoordinates]+84', -1321.593384)
writeFloat('[PlayerCoordinates]+88', 111.9862213)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131677</ID>
                                          <Description>"Standard Order 388 - Pick up item 4, 5, 6, 7 of 7 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 287.2895203)
writeFloat('[PlayerCoordinates]+84', -1231.669556)
writeFloat('[PlayerCoordinates]+88', 104.318367)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131678</ID>
                                      <Description>"Standard Order 389 - Pick up 4 items in private locker of Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131679</ID>
                                      <Description>"Standard Order 390 - Pick up item 1/3"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',491.21932983398) -- X Coord
writeFloat('[PlayerCoordinates]+84',-601.34460449219) -- Y Coord
writeFloat('[PlayerCoordinates]+88',152.21073913574) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131680</ID>
                                          <Description>"Standard Order 390 - Pick up item 2/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',487.66580200195) -- X Coord
writeFloat('[PlayerCoordinates]+84',-569.24041748047) -- Y Coord
writeFloat('[PlayerCoordinates]+88',152.71627807617) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131681</ID>
                                          <Description>"Standard Order 390 - Pick up item 3/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',550.62487792969) -- X Coord
writeFloat('[PlayerCoordinates]+84',-583.35632324219) -- Y Coord
writeFloat('[PlayerCoordinates]+88',152.22630310059) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131682</ID>
                                          <Description>"Teleport back to Vehicle (if one was used)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',465.45025634766) -- X Coord
writeFloat('[PlayerCoordinates]+84',-548.40533447266) -- Y Coord
writeFloat('[PlayerCoordinates]+88',159.51136779785) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131683</ID>
                                      <Description>"Standard Order 391 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131684</ID>
                                      <Description>"Standard Order 392 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133126</ID>
                                      <Description>"Standard Order 628 - Deliver to Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1141.8942871094)
writeFloat('[PlayerCoordinates]+84', 29.015502929688)
writeFloat('[PlayerCoordinates]+88', 135.27490234375)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131685</ID>
                                  <Description>"From First Prepper"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131686</ID>
                                      <Description>"Teleport to: First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131687</ID>
                                      <Description>"Standard Order 393 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.9134521484)
writeFloat('[PlayerCoordinates]+84', -275.56985473633)
writeFloat('[PlayerCoordinates]+88', 136.38018798828)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131688</ID>
                                      <Description>"Standard Order 394 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 184.68154907227)
writeFloat('[PlayerCoordinates]+84', 1642.2126464844)
writeFloat('[PlayerCoordinates]+88', 261.43435668945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131689</ID>
                                      <Description>"Standard Order 395 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -921.78460693359)
writeFloat('[PlayerCoordinates]+84', 1063.0844726563)
writeFloat('[PlayerCoordinates]+88', 599.85607910156)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131690</ID>
                                      <Description>"Standard Order 396 - item 1/2"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -112.9052048)
writeFloat('[PlayerCoordinates]+84', 782.874939)
writeFloat('[PlayerCoordinates]+88', 736.6206665)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131691</ID>
                                          <Description>"Standard Order 396 - item 2/2"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-111.63381958008) -- X Coord
writeFloat('[PlayerCoordinates]+84',815.31994628906) -- Y Coord
writeFloat('[PlayerCoordinates]+88',749.52471923828) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131692</ID>
                                      <Description>"Standard Order 397 - Pick up item 1/5, 2/5 from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 539.6925049)
writeFloat('[PlayerCoordinates]+84', 885.2458496)
writeFloat('[PlayerCoordinates]+88', 174.2861328)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131693</ID>
                                          <Description>"Standard Order 397 - Pick up item 3/5, 4/5 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 676.0421753)
writeFloat('[PlayerCoordinates]+84', 721.0518188)
writeFloat('[PlayerCoordinates]+88', 164.790802)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131694</ID>
                                          <Description>"Standard Order 397 - Pick up item 5/5 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1065.5354)
writeFloat('[PlayerCoordinates]+84', 921.6898804)
writeFloat('[PlayerCoordinates]+88', 160.447403)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131695</ID>
                                      <Description>"Standard Order 398 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131696</ID>
                                      <Description>"Standard Order 399 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131697</ID>
                                      <Description>"Standard Order 400 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131698</ID>
                                      <Description>"Standard Order 401 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131699</ID>
                                      <Description>"Standard Order 402 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133128</ID>
                                      <Description>"Standard Order 629 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131700</ID>
                                  <Description>"From Collector"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131701</ID>
                                      <Description>"Teleport to: Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1141.8942871094)
writeFloat('[PlayerCoordinates]+84', 29.015502929688)
writeFloat('[PlayerCoordinates]+88', 135.27490234375)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131702</ID>
                                      <Description>"Standard Order 403 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.9134521484)
writeFloat('[PlayerCoordinates]+84', -275.56985473633)
writeFloat('[PlayerCoordinates]+88', 136.38018798828)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131703</ID>
                                      <Description>"Standard Order 404 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -921.78460693359)
writeFloat('[PlayerCoordinates]+84', 1063.0844726563)
writeFloat('[PlayerCoordinates]+88', 599.85607910156)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131704</ID>
                                      <Description>"Standard Order 405 - Pick up item 1 and 2 of 3 from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1450.897339)
writeFloat('[PlayerCoordinates]+84', 210.0477753)
writeFloat('[PlayerCoordinates]+88', 134.6021881)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131705</ID>
                                          <Description>"Standard Order 405 - Pick up item 3 of 3 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1416.170044)
writeFloat('[PlayerCoordinates]+84', 33.30061722)
writeFloat('[PlayerCoordinates]+88', 130.302597)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131706</ID>
                                      <Description>"Standard Order 406 - Pick up 2 items in private locker of Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131707</ID>
                                      <Description>"Standard Order 407 - Pick up item 1/6"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1331.0206298828) -- X Coord
writeFloat('[PlayerCoordinates]+84',1793.4057617188) -- Y Coord
writeFloat('[PlayerCoordinates]+88',199.20281982422) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131708</ID>
                                          <Description>"Standard Order 407 - Pick up item 2/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1220.9906005859) -- X Coord
writeFloat('[PlayerCoordinates]+84',1755.6534423828) -- Y Coord
writeFloat('[PlayerCoordinates]+88',196.76161193848) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131709</ID>
                                          <Description>"Standard Order 407 - Pick up item 3/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1203.73046875) -- X Coord
writeFloat('[PlayerCoordinates]+84',1722.3602294922) -- Y Coord
writeFloat('[PlayerCoordinates]+88',192.4416809082) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131710</ID>
                                          <Description>"Standard Order 407 - Pick up item 4/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1282.7908935547) -- X Coord
writeFloat('[PlayerCoordinates]+84',1760.9365234375) -- Y Coord
writeFloat('[PlayerCoordinates]+88',200.03823852539) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131711</ID>
                                          <Description>"Standard Order 407 - Pick up item 5/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1232.9456787109) -- X Coord
writeFloat('[PlayerCoordinates]+84',1717.0611572266) -- Y Coord
writeFloat('[PlayerCoordinates]+88',198.32322692871) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131712</ID>
                                          <Description>"Standard Order 407 - Pick up item 6/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1223.6373291016) -- X Coord
writeFloat('[PlayerCoordinates]+84',1689.0303955078) -- Y Coord
writeFloat('[PlayerCoordinates]+88',194.69314575195) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131713</ID>
                                      <Description>"Standard Order 408 - Pick up 2 of 4 items from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1416.170044)
writeFloat('[PlayerCoordinates]+84', 33.30061722)
writeFloat('[PlayerCoordinates]+88', 130.302597)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131714</ID>
                                          <Description>"Standard Order 408 - Pick up 2 of 4 items from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1322.740356)
writeFloat('[PlayerCoordinates]+84', -104.4131546)
writeFloat('[PlayerCoordinates]+88', 134.1850281)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131715</ID>
                                      <Description>"Standard Order 409 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131716</ID>
                                      <Description>"Standard Order 410 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131717</ID>
                                  <Description>"From Novelists's Son"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131718</ID>
                                      <Description>"Teleport to: Novelists's Son"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2441.5659179688)
writeFloat('[PlayerCoordinates]+84', 1291.0874023438)
writeFloat('[PlayerCoordinates]+88', 251.06520080566)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131719</ID>
                                      <Description>"Standard Order 411 - Pick up item 1/3, 2/3 from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1695.691895)
writeFloat('[PlayerCoordinates]+84', 1088.499268)
writeFloat('[PlayerCoordinates]+88', 220.418869)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131720</ID>
                                          <Description>"Standard Order 411 - Pick up item 3/3 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1550.640991)
writeFloat('[PlayerCoordinates]+84', 1282.209595)
writeFloat('[PlayerCoordinates]+88', 241.9241943)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131721</ID>
                                      <Description>"Standard Order 412 - Pick up item 1/3 &amp; 2/3 from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -758.4589233)
writeFloat('[PlayerCoordinates]+84', 1811.8302)
writeFloat('[PlayerCoordinates]+88', 224.3075867)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131722</ID>
                                          <Description>"Standard Order 412 - Pick up item 3/3 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -852.6716919)
writeFloat('[PlayerCoordinates]+84', 1918.503418)
writeFloat('[PlayerCoordinates]+88', 224.05896)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131723</ID>
                                      <Description>"Standard Order 413 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131724</ID>
                                      <Description>"Standard Order 414 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131725</ID>
                                      <Description>"Standard Order 415 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131726</ID>
                                  <Description>"From Lake Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131727</ID>
                                      <Description>"Teleport to: Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131728</ID>
                                      <Description>"Standard Order 416, 417, 418 - Deliver to Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2191.7585449219)
writeFloat('[PlayerCoordinates]+84', 1189.8968505859)
writeFloat('[PlayerCoordinates]+88', 178.52680969238)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131729</ID>
                                      <Description>"Standard Order 419, 420, 421 - Deliver to Elder"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1696.478515625)
writeFloat('[PlayerCoordinates]+84', 701.77563476563)
writeFloat('[PlayerCoordinates]+88', 245.24702453613)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133509</ID>
                                      <Description>"Standard Order 422, 423, 424 - Deliver to Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1226.0323486328)
writeFloat('[PlayerCoordinates]+84', 1317.2032470703)
writeFloat('[PlayerCoordinates]+88', 184.76554870605)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131731</ID>
                                      <Description>"Standard Order 425 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.9134521484)
writeFloat('[PlayerCoordinates]+84', -275.56985473633)
writeFloat('[PlayerCoordinates]+88', 136.38018798828)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131732</ID>
                                      <Description>"Standard Order 426 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2152.3859863281)
writeFloat('[PlayerCoordinates]+84', -910.64288330078)
writeFloat('[PlayerCoordinates]+88', 156.43530273438)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131733</ID>
                                      <Description>"Standard Order 427 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1242.4761962891)
writeFloat('[PlayerCoordinates]+84', -1248.0733642578)
writeFloat('[PlayerCoordinates]+88', 412.21273803711)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131734</ID>
                                      <Description>"Standard Order 428 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -419.83605957031)
writeFloat('[PlayerCoordinates]+84', -1165.1920166016)
writeFloat('[PlayerCoordinates]+88', 250.94882202148)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131735</ID>
                                      <Description>"Standard Order 429 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1831.9169921875)
writeFloat('[PlayerCoordinates]+84', -705.4521484375)
writeFloat('[PlayerCoordinates]+88', 466.98864746094)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131736</ID>
                                      <Description>"Standard Order 430 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2001.1428222656)
writeFloat('[PlayerCoordinates]+84', -24.001985549927)
writeFloat('[PlayerCoordinates]+88', 153.35623168945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131737</ID>
                                      <Description>"Standard Order 431 - Pick up item 1/6"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2643.7341308594) -- X Coord
writeFloat('[PlayerCoordinates]+84',1650.79296875) -- Y Coord
writeFloat('[PlayerCoordinates]+88',186.35159301758) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131738</ID>
                                          <Description>"Standard Order 431 - Pick up item 2/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2645.2392578125) -- X Coord
writeFloat('[PlayerCoordinates]+84',1651.9138183594) -- Y Coord
writeFloat('[PlayerCoordinates]+88',186.35159301758) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131739</ID>
                                          <Description>"Standard Order 431 - Pick up item 3/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2629.369140625) -- X Coord
writeFloat('[PlayerCoordinates]+84',1673.3508300781) -- Y Coord
writeFloat('[PlayerCoordinates]+88',187.29302978516) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131740</ID>
                                          <Description>"Standard Order 431 - Pick up item 4/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2608.0646972656) -- X Coord
writeFloat('[PlayerCoordinates]+84',1686.1666259766) -- Y Coord
writeFloat('[PlayerCoordinates]+88',186.35000610352) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131741</ID>
                                          <Description>"Standard Order 431 - Pick up item 5/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2620.4162597656) -- X Coord
writeFloat('[PlayerCoordinates]+84',1672.0228271484) -- Y Coord
writeFloat('[PlayerCoordinates]+88',186.36024475098) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131742</ID>
                                          <Description>"Standard Order 431 - Pick up item 6/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2619.669921875) -- X Coord
writeFloat('[PlayerCoordinates]+84',1673.0147705078) -- Y Coord
writeFloat('[PlayerCoordinates]+88',186.36024475098) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131743</ID>
                                      <Description>"Standard Order 432 - Pick up item 1/9"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2636.3828125) -- X Coord
writeFloat('[PlayerCoordinates]+84',1711.1228027344) -- Y Coord
writeFloat('[PlayerCoordinates]+88',206.00738525391) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131744</ID>
                                          <Description>"Standard Order 432 - Pick up item 2/9"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2621.7517089844) -- X Coord
writeFloat('[PlayerCoordinates]+84',1716.7515869141) -- Y Coord
writeFloat('[PlayerCoordinates]+88',206.35000610352) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131745</ID>
                                          <Description>"Standard Order 432 - Pick up item 3/9"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2646.2548828125) -- X Coord
writeFloat('[PlayerCoordinates]+84',1739.2155761719) -- Y Coord
writeFloat('[PlayerCoordinates]+88',206.35987854004) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131746</ID>
                                          <Description>"Standard Order 432 - Pick up item 4/9"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2644.0966796875) -- X Coord
writeFloat('[PlayerCoordinates]+84',1736.9255371094) -- Y Coord
writeFloat('[PlayerCoordinates]+88',206.35375976563) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131747</ID>
                                          <Description>"Standard Order 432 - Pick up item 5/9"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2620.6096191406) -- X Coord
writeFloat('[PlayerCoordinates]+84',1717.2622070313) -- Y Coord
writeFloat('[PlayerCoordinates]+88',206.35472106934) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131748</ID>
                                          <Description>"Standard Order 432 - Pick up item 6/9"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2620.6130371094) -- X Coord
writeFloat('[PlayerCoordinates]+84',1717.2227783203) -- Y Coord
writeFloat('[PlayerCoordinates]+88',206.35472106934) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131749</ID>
                                          <Description>"Standard Order 432 - Pick up item 7/9"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2631.4592285156) -- X Coord
writeFloat('[PlayerCoordinates]+84',1705.5093994141) -- Y Coord
writeFloat('[PlayerCoordinates]+88',205.85018920898) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131750</ID>
                                          <Description>"Standard Order 432 - Pick up item 8/9"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2647.2829589844) -- X Coord
writeFloat('[PlayerCoordinates]+84',1739.9847412109) -- Y Coord
writeFloat('[PlayerCoordinates]+88',206.35987854004) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131751</ID>
                                          <Description>"Standard Order 432 - Pick up item 9/9"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2631.4206542969) -- X Coord
writeFloat('[PlayerCoordinates]+84',1705.4985351563) -- Y Coord
writeFloat('[PlayerCoordinates]+88',205.85018920898) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131752</ID>
                                      <Description>"Standard Order 433 - Pick up 2 items from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2339.476074)
writeFloat('[PlayerCoordinates]+84', 1372.439453)
writeFloat('[PlayerCoordinates]+88', 182.6830597)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131753</ID>
                                          <Description>"Standard Order 433 - Pick up 4 items from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2464.028809)
writeFloat('[PlayerCoordinates]+84', 1354.382446)
writeFloat('[PlayerCoordinates]+88', 186.3952332)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131754</ID>
                                      <Description>"Standard Order 434, 435, 436 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131755</ID>
                                      <Description>"Standard Order 437, 438, 439, 440 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131756</ID>
                                      <Description>"Standard Order 441, 442 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131757</ID>
                                      <Description>"Standard Order 443, 444 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1214.4786376953)
writeFloat('[PlayerCoordinates]+84', -222.15846252441)
writeFloat('[PlayerCoordinates]+88', 532.83221435547)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133059</ID>
                                      <Description>"Standard Order 630 - Deliver to Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1141.8942871094)
writeFloat('[PlayerCoordinates]+84', 29.015502929688)
writeFloat('[PlayerCoordinates]+88', 135.27490234375)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131758</ID>
                                  <Description>"From Distribution Center South of Lake Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131759</ID>
                                      <Description>"Teleport to: Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131760</ID>
                                      <Description>"Standard Order 445, 446, 447 - Deliver to Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2191.7585449219)
writeFloat('[PlayerCoordinates]+84', 1189.8968505859)
writeFloat('[PlayerCoordinates]+88', 178.52680969238)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131761</ID>
                                      <Description>"Standard Order 448, 449 - Deliver to Elder"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1696.478515625)
writeFloat('[PlayerCoordinates]+84', 701.77563476563)
writeFloat('[PlayerCoordinates]+88', 245.24702453613)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131762</ID>
                                      <Description>"Standard Order 450 - Pick up item 12.0kg/36.0kg"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',862.12353515625) -- X Coord
writeFloat('[PlayerCoordinates]+84',262.01596069336) -- Y Coord
writeFloat('[PlayerCoordinates]+88',153.19493103027) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131763</ID>
                                          <Description>"Standard Order 450 - Pick up item 12.0kg/36.0kg"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',846.43505859375) -- X Coord
writeFloat('[PlayerCoordinates]+84',287.92260742188) -- Y Coord
writeFloat('[PlayerCoordinates]+88',153.13061523438) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131764</ID>
                                          <Description>"Standard Order 450 - Pick up item 12.0kg/36.0kg"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',836.37646484375) -- X Coord
writeFloat('[PlayerCoordinates]+84',332.87594604492) -- Y Coord
writeFloat('[PlayerCoordinates]+88',153.86114501953) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131765</ID>
                                          <Description>"Standard Order 450 - Teleport Back to Vehicle  (if you used my vehicle location)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',871.43188476563) -- X Coord
writeFloat('[PlayerCoordinates]+84',257.96017456055) -- Y Coord
writeFloat('[PlayerCoordinates]+88',153.22640991211) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131766</ID>
                                          <Description>"Standard Order 450 - Deliver to Elder"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1696.478515625)
writeFloat('[PlayerCoordinates]+84', 701.77563476563)
writeFloat('[PlayerCoordinates]+88', 245.24702453613)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131767</ID>
                                      <Description>"Standard Order 451, 452, 453 - Deliver to Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1226.0323486328)
writeFloat('[PlayerCoordinates]+84', 1317.2032470703)
writeFloat('[PlayerCoordinates]+88', 184.76554870605)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131768</ID>
                                      <Description>"Standard Order 454 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 92.446998596191)
writeFloat('[PlayerCoordinates]+84', -1618.1838378906)
writeFloat('[PlayerCoordinates]+88', 109.72776794434)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131769</ID>
                                      <Description>"Standard Order 455, 456, 457 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.9134521484)
writeFloat('[PlayerCoordinates]+84', -275.56985473633)
writeFloat('[PlayerCoordinates]+88', 136.38018798828)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131770</ID>
                                      <Description>"Standard Order 458 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2152.3859863281)
writeFloat('[PlayerCoordinates]+84', -910.64288330078)
writeFloat('[PlayerCoordinates]+88', 156.43530273438)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131771</ID>
                                      <Description>"Standard Order 459, 460, 461 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 184.68154907227)
writeFloat('[PlayerCoordinates]+84', 1642.2126464844)
writeFloat('[PlayerCoordinates]+88', 261.43435668945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131772</ID>
                                      <Description>"Standard Order 462 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -319.4059753418)
writeFloat('[PlayerCoordinates]+84', 989.09338378906)
writeFloat('[PlayerCoordinates]+88', 737.16760253906)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131773</ID>
                                      <Description>"Standard Order 463, 464 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2001.1428222656)
writeFloat('[PlayerCoordinates]+84', -24.001985549927)
writeFloat('[PlayerCoordinates]+88', 153.35623168945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131774</ID>
                                      <Description>"Standard Order 465 - Deliver to Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 719.26995849609)
writeFloat('[PlayerCoordinates]+84', -663.93426513672)
writeFloat('[PlayerCoordinates]+88', 101.74416351318)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131775</ID>
                                      <Description>"Standard Order 466 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131776</ID>
                                      <Description>"Standard Order 467 - Deliver to Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1141.8942871094)
writeFloat('[PlayerCoordinates]+84', 29.015502929688)
writeFloat('[PlayerCoordinates]+88', 135.27490234375)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131777</ID>
                                      <Description>"Standard Order 468, 469 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131778</ID>
                                      <Description>"Standard Order 470 - Pick up 1 and 2 of 6 item from MULES Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1322.740356)
writeFloat('[PlayerCoordinates]+84', -104.4131546)
writeFloat('[PlayerCoordinates]+88', 134.1850281)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131779</ID>
                                          <Description>"Standard Order 470 - Pick up 3 and 4 of 6 item from MULES Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1416.170044)
writeFloat('[PlayerCoordinates]+84', 33.30061722)
writeFloat('[PlayerCoordinates]+88', 130.302597)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131780</ID>
                                          <Description>"Standard Order 470 - Pick up 5 and 6 of 6 item from MULES Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1450.897339)
writeFloat('[PlayerCoordinates]+84', 210.0477753)
writeFloat('[PlayerCoordinates]+88', 134.6021881)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131781</ID>
                                          <Description>"Standard Order 470 - Deliver to Lake Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131782</ID>
                                      <Description>"Standard Order 471 - Pick up item 1/10"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',703.19873046875) -- X Coord
writeFloat('[PlayerCoordinates]+84',187.30723571777) -- Y Coord
writeFloat('[PlayerCoordinates]+88',156.37690734863) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131783</ID>
                                          <Description>"Standard Order 471 - Pick up item 2/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',763.42620849609) -- X Coord
writeFloat('[PlayerCoordinates]+84',210.00765991211) -- Y Coord
writeFloat('[PlayerCoordinates]+88',157.36068725586) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131784</ID>
                                          <Description>"Standard Order 471 - Pick up item 3/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',758.22717285156) -- X Coord
writeFloat('[PlayerCoordinates]+84',205.92178344727) -- Y Coord
writeFloat('[PlayerCoordinates]+88',156.57052612305) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131785</ID>
                                          <Description>"Standard Order 471 - Pick up item 4/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',700.22857666016) -- X Coord
writeFloat('[PlayerCoordinates]+84',145.33868408203) -- Y Coord
writeFloat('[PlayerCoordinates]+88',156.87934875488) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131786</ID>
                                          <Description>"Standard Order 471 - Pick up item 5/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',699.17999267578) -- X Coord
writeFloat('[PlayerCoordinates]+84',192.0945892334) -- Y Coord
writeFloat('[PlayerCoordinates]+88',156.85620117188) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131787</ID>
                                          <Description>"Standard Order 471 - Pick up item 6/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',663.24658203125) -- X Coord
writeFloat('[PlayerCoordinates]+84',206.90908813477) -- Y Coord
writeFloat('[PlayerCoordinates]+88',160.08493041992) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131788</ID>
                                          <Description>"Standard Order 471 - Pick up item 7/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',750.41253662109) -- X Coord
writeFloat('[PlayerCoordinates]+84',153.56562805176) -- Y Coord
writeFloat('[PlayerCoordinates]+88',157.40826416016) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131789</ID>
                                          <Description>"Standard Order 471 - Pick up item 8/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',636.15747070313) -- X Coord
writeFloat('[PlayerCoordinates]+84',108.06601715088) -- Y Coord
writeFloat('[PlayerCoordinates]+88',160.63829040527) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131790</ID>
                                          <Description>"Standard Order 471 - Pick up item 9/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',626.44677734375) -- X Coord
writeFloat('[PlayerCoordinates]+84',114.72227478027) -- Y Coord
writeFloat('[PlayerCoordinates]+88',165.02940368652) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131791</ID>
                                          <Description>"Standard Order 471 - Pick up item 10/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',638.14392089844) -- X Coord
writeFloat('[PlayerCoordinates]+84',119.19952392578) -- Y Coord
writeFloat('[PlayerCoordinates]+88',161.19787597656) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131792</ID>
                                      <Description>"Standard Order 472, 473 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131793</ID>
                                      <Description>"Standard Order 474, 476 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131794</ID>
                                      <Description>"Standard Order 475 - Pick up 4 of 12 items from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1065.5354)
writeFloat('[PlayerCoordinates]+84', 921.6898804)
writeFloat('[PlayerCoordinates]+88', 160.447403)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131795</ID>
                                          <Description>"Standard Order 475 - Pick up 4 of 12 items from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 676.0421753)
writeFloat('[PlayerCoordinates]+84', 721.0518188)
writeFloat('[PlayerCoordinates]+88', 164.790802)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131796</ID>
                                          <Description>"Standard Order 475 - Pick up 4 of 12 items from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 539.6925049)
writeFloat('[PlayerCoordinates]+84', 885.2458496)
writeFloat('[PlayerCoordinates]+88', 174.2861328)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131797</ID>
                                          <Description>"Standard Order 475 - Deliver to South Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131798</ID>
                                      <Description>"Standard Order 477 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131799</ID>
                                      <Description>"Standard Order 478 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1214.4786376953)
writeFloat('[PlayerCoordinates]+84', -222.15846252441)
writeFloat('[PlayerCoordinates]+88', 532.83221435547)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133042</ID>
                                      <Description>"Standard Order 631 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 92.446998596191)
writeFloat('[PlayerCoordinates]+84', -1618.1838378906)
writeFloat('[PlayerCoordinates]+88', 109.72776794434)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133044</ID>
                                      <Description>"Standard Order 632 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -419.83605957031)
writeFloat('[PlayerCoordinates]+84', -1165.1920166016)
writeFloat('[PlayerCoordinates]+88', 250.94882202148)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133045</ID>
                                      <Description>"Standard Order 633 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131800</ID>
                                  <Description>"From Weather Station"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131801</ID>
                                      <Description>"Teleport to: Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131802</ID>
                                      <Description>"Standard Order 479, 480 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 92.446998596191)
writeFloat('[PlayerCoordinates]+84', -1618.1838378906)
writeFloat('[PlayerCoordinates]+88', 109.72776794434)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131803</ID>
                                      <Description>"Standard Order 481, 482 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.9134521484)
writeFloat('[PlayerCoordinates]+84', -275.56985473633)
writeFloat('[PlayerCoordinates]+88', 136.38018798828)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131804</ID>
                                      <Description>"Standard Order 483, 484 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2152.3859863281)
writeFloat('[PlayerCoordinates]+84', -910.64288330078)
writeFloat('[PlayerCoordinates]+88', 156.43530273438)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131805</ID>
                                      <Description>"Standard Order 485, 486 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 184.68154907227)
writeFloat('[PlayerCoordinates]+84', 1642.2126464844)
writeFloat('[PlayerCoordinates]+88', 261.43435668945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131806</ID>
                                      <Description>"Standard Order 487 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -646.64099121094)
writeFloat('[PlayerCoordinates]+84', -144.66549682617)
writeFloat('[PlayerCoordinates]+88', 536.55578613281)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131807</ID>
                                      <Description>"Standard Order 488 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -419.83605957031)
writeFloat('[PlayerCoordinates]+84', -1165.1920166016)
writeFloat('[PlayerCoordinates]+88', 250.94882202148)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131808</ID>
                                      <Description>"Standard Order 489 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131809</ID>
                                      <Description>"Standard Order 490 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131810</ID>
                                      <Description>"Standard Order 491, 492, 493 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131811</ID>
                                      <Description>"Standard Order 494 - Pick up item 1/3"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',509.86560058594) -- X Coord
writeFloat('[PlayerCoordinates]+84',-445.77886962891) -- Y Coord
writeFloat('[PlayerCoordinates]+88',168.40008544922) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131812</ID>
                                          <Description>"Standard Order 494 - Pick up item 2/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',547.73132324219) -- X Coord
writeFloat('[PlayerCoordinates]+84',-371.74472045898) -- Y Coord
writeFloat('[PlayerCoordinates]+88',157.58891296387) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131813</ID>
                                          <Description>"Standard Order 494 - Pick up item 3/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',547.59631347656) -- X Coord
writeFloat('[PlayerCoordinates]+84',-447.39660644531) -- Y Coord
writeFloat('[PlayerCoordinates]+88',153.77732849121) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131814</ID>
                                      <Description>"Standard Order 495, 496 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131815</ID>
                                      <Description>"Standard Order 497, 498 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133047</ID>
                                      <Description>"Standard Order 634 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -419.83605957031)
writeFloat('[PlayerCoordinates]+84', -1165.1920166016)
writeFloat('[PlayerCoordinates]+88', 250.94882202148)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133049</ID>
                                      <Description>"Standard Order 635 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131816</ID>
                                  <Description>"From South Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131817</ID>
                                      <Description>"Teleport to: South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131818</ID>
                                      <Description>"Standard Order 499 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 92.446998596191)
writeFloat('[PlayerCoordinates]+84', -1618.1838378906)
writeFloat('[PlayerCoordinates]+88', 109.72776794434)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131819</ID>
                                      <Description>"Standard Order 500, 501 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.9134521484)
writeFloat('[PlayerCoordinates]+84', -275.56985473633)
writeFloat('[PlayerCoordinates]+88', 136.38018798828)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131820</ID>
                                      <Description>"Standard Order 502, 503 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2152.3859863281)
writeFloat('[PlayerCoordinates]+84', -910.64288330078)
writeFloat('[PlayerCoordinates]+88', 156.43530273438)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131821</ID>
                                      <Description>"Standard Order 504 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -646.64099121094)
writeFloat('[PlayerCoordinates]+84', -144.66549682617)
writeFloat('[PlayerCoordinates]+88', 536.55578613281)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131822</ID>
                                      <Description>"Standard Order 505 - Deliver to Geologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -898.26202392578)
writeFloat('[PlayerCoordinates]+84', -789.72894287109)
writeFloat('[PlayerCoordinates]+88', 625.56060791016)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131823</ID>
                                      <Description>"Standard Order 506 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1242.4761962891)
writeFloat('[PlayerCoordinates]+84', -1248.0733642578)
writeFloat('[PlayerCoordinates]+88', 412.21273803711)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131824</ID>
                                      <Description>"Standard Order 507 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2001.1428222656)
writeFloat('[PlayerCoordinates]+84', -24.001985549927)
writeFloat('[PlayerCoordinates]+88', 153.35623168945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131825</ID>
                                      <Description>"Standard Order 508 - Deliver to Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 719.26995849609)
writeFloat('[PlayerCoordinates]+84', -663.93426513672)
writeFloat('[PlayerCoordinates]+88', 101.74416351318)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131826</ID>
                                      <Description>"Standard Order 509, 510 - Deliver to Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1141.8942871094)
writeFloat('[PlayerCoordinates]+84', 29.015502929688)
writeFloat('[PlayerCoordinates]+88', 135.27490234375)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131827</ID>
                                      <Description>"Standard Order 511 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131828</ID>
                                      <Description>"Standard Order 512, 513 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131829</ID>
                                      <Description>"Standard Order 514 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131830</ID>
                                      <Description>"Standard Order 515 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131831</ID>
                                  <Description>"From Mama's Lab"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131832</ID>
                                      <Description>"Teleport to: Mama's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1022.6657714844)
writeFloat('[PlayerCoordinates]+84', -982.8818359375)
writeFloat('[PlayerCoordinates]+88', 163.03210449219)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131833</ID>
                                      <Description>"Standard Order 516 - Pick up item 1/4"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',468.17022705078) -- X Coord
writeFloat('[PlayerCoordinates]+84',-856.04345703125) -- Y Coord
writeFloat('[PlayerCoordinates]+88',101.35757446289) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131834</ID>
                                          <Description>"Standard Order 516 - Pick up item 2/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',464.43814086914) -- X Coord
writeFloat('[PlayerCoordinates]+84',-816.14617919922) -- Y Coord
writeFloat('[PlayerCoordinates]+88',100.6950378418) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131835</ID>
                                          <Description>"Standard Order 516 - Pick up item 3/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',600.62945556641) -- X Coord
writeFloat('[PlayerCoordinates]+84',-777.44671630859) -- Y Coord
writeFloat('[PlayerCoordinates]+88',83.410484313965) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131836</ID>
                                          <Description>"Standard Order 516 - Pick up item 4/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',517.16400146484) -- X Coord
writeFloat('[PlayerCoordinates]+84',-818.02856445313) -- Y Coord
writeFloat('[PlayerCoordinates]+88',84.021659851074) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131837</ID>
                                          <Description>"Standard Order 516 - Deliver to South Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131838</ID>
                                  <Description>"From Distribution Center North of Mountain Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131839</ID>
                                      <Description>"Teleport to: Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131840</ID>
                                      <Description>"Standard Order 517 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 92.446998596191)
writeFloat('[PlayerCoordinates]+84', -1618.1838378906)
writeFloat('[PlayerCoordinates]+88', 109.72776794434)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131841</ID>
                                      <Description>"Standard Order 518, 519, 520 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 184.68154907227)
writeFloat('[PlayerCoordinates]+84', 1642.2126464844)
writeFloat('[PlayerCoordinates]+88', 261.43435668945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131842</ID>
                                      <Description>"Standard Order 521 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -646.64099121094)
writeFloat('[PlayerCoordinates]+84', -144.66549682617)
writeFloat('[PlayerCoordinates]+88', 536.55578613281)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131843</ID>
                                      <Description>"Standard Order 522, 523 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -921.78460693359)
writeFloat('[PlayerCoordinates]+84', 1063.0844726563)
writeFloat('[PlayerCoordinates]+88', 599.85607910156)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131844</ID>
                                      <Description>"Standard Order 524, 525 - Deliver to Photographer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2168.2016601563)
writeFloat('[PlayerCoordinates]+84', 603.51947021484)
writeFloat('[PlayerCoordinates]+88', 266.14349365234)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131845</ID>
                                      <Description>"Standard Order 526 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -319.4059753418)
writeFloat('[PlayerCoordinates]+84', 989.09338378906)
writeFloat('[PlayerCoordinates]+88', 737.16760253906)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131846</ID>
                                      <Description>"Standard Order 527, 528 - Deliver to Doctor"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1427.6165771484)
writeFloat('[PlayerCoordinates]+84', 58.272735595703)
writeFloat('[PlayerCoordinates]+88', 360.59719848633)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131847</ID>
                                      <Description>"Standard Order 529 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1831.9169921875)
writeFloat('[PlayerCoordinates]+84', -705.4521484375)
writeFloat('[PlayerCoordinates]+88', 466.98864746094)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131848</ID>
                                      <Description>"Standard Order 530 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131849</ID>
                                      <Description>"Standard Order 531, 532, 533, 534, 535 - Deliver to Novelists's Son"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2441.5659179688)
writeFloat('[PlayerCoordinates]+84', 1291.0874023438)
writeFloat('[PlayerCoordinates]+88', 251.06520080566)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131850</ID>
                                      <Description>"Standard Order 536 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131851</ID>
                                      <Description>"Standard Order 537, 538 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1054.8397216797)
writeFloat('[PlayerCoordinates]+84', 413.9501953125)
writeFloat('[PlayerCoordinates]+88', 144.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131852</ID>
                                      <Description>"Standard Order 539 - South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131853</ID>
                                      <Description>"Standard Order 540 - Pick up 8 items from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -758.4589233)
writeFloat('[PlayerCoordinates]+84', 1811.8302)
writeFloat('[PlayerCoordinates]+88', 224.3075867)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131854</ID>
                                      <Description>"Standard Order 541, 543 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131855</ID>
                                      <Description>"Standard Order 542 - Pick up Item 1, 2, 3 out of 20 from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1695.691895)
writeFloat('[PlayerCoordinates]+84', 1088.499268)
writeFloat('[PlayerCoordinates]+88', 220.418869)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133511</ID>
                                          <Description>"Standard Order 542 - Pick up Item 4, 5, 6, 7, 8, 9, 10, 11 out of 20 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1550.640991)
writeFloat('[PlayerCoordinates]+84', 1282.209595)
writeFloat('[PlayerCoordinates]+88', 241.9241943)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131857</ID>
                                          <Description>"Standard Order 542 - Pick up Item 12, 13, 14, 15, 16, 17, 18, 19, 20 out of 20 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2035.770142)
writeFloat('[PlayerCoordinates]+84', 1277.723877)
writeFloat('[PlayerCoordinates]+88', 223.827774)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131858</ID>
                                          <Description>"Standard Order 542 - Deliver to Mountain Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131859</ID>
                                      <Description>"Standard Order 544, 545 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1214.4786376953)
writeFloat('[PlayerCoordinates]+84', -222.15846252441)
writeFloat('[PlayerCoordinates]+88', 532.83221435547)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133051</ID>
                                      <Description>"Standard Order 636 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131860</ID>
                                  <Description>"From Mountain Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131861</ID>
                                      <Description>"Teleport to: Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131862</ID>
                                      <Description>"Standard Order 546, 547 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 184.68154907227)
writeFloat('[PlayerCoordinates]+84', 1642.2126464844)
writeFloat('[PlayerCoordinates]+88', 261.43435668945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131863</ID>
                                      <Description>"Standard Order 548, 549 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -646.64099121094)
writeFloat('[PlayerCoordinates]+84', -144.66549682617)
writeFloat('[PlayerCoordinates]+88', 536.55578613281)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131864</ID>
                                      <Description>"Standard Order 550, 551 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -921.78460693359)
writeFloat('[PlayerCoordinates]+84', 1063.0844726563)
writeFloat('[PlayerCoordinates]+88', 599.85607910156)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131865</ID>
                                      <Description>"Standard Order 552, 553 - Deliver to Photographer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2168.2016601563)
writeFloat('[PlayerCoordinates]+84', 603.51947021484)
writeFloat('[PlayerCoordinates]+88', 266.14349365234)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131866</ID>
                                      <Description>"Standard Order 554, 555 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -319.4059753418)
writeFloat('[PlayerCoordinates]+84', 989.09338378906)
writeFloat('[PlayerCoordinates]+88', 737.16760253906)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131867</ID>
                                      <Description>"Standard Order 556, 557, 558 - Deliver to Doctor"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1427.6165771484)
writeFloat('[PlayerCoordinates]+84', 58.272735595703)
writeFloat('[PlayerCoordinates]+88', 360.59719848633)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131868</ID>
                                      <Description>"Standard Order 559, 560 - Deliver to Geologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -898.26202392578)
writeFloat('[PlayerCoordinates]+84', -789.72894287109)
writeFloat('[PlayerCoordinates]+88', 625.56060791016)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131869</ID>
                                      <Description>"Standard Order 561 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1242.4761962891)
writeFloat('[PlayerCoordinates]+84', -1248.0733642578)
writeFloat('[PlayerCoordinates]+88', 412.21273803711)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131870</ID>
                                      <Description>"Standard Order 562 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 92.446998596191)
writeFloat('[PlayerCoordinates]+84', -1618.1838378906)
writeFloat('[PlayerCoordinates]+88', 109.72776794434)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131871</ID>
                                      <Description>"Standard Order 563, 564 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -419.83605957031)
writeFloat('[PlayerCoordinates]+84', -1165.1920166016)
writeFloat('[PlayerCoordinates]+88', 250.94882202148)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131872</ID>
                                      <Description>"Standard Order 565, 566 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1831.9169921875)
writeFloat('[PlayerCoordinates]+84', -705.4521484375)
writeFloat('[PlayerCoordinates]+88', 466.98864746094)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131873</ID>
                                      <Description>"Standard Order 567, 568 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2001.1428222656)
writeFloat('[PlayerCoordinates]+84', -24.001985549927)
writeFloat('[PlayerCoordinates]+88', 153.35623168945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131874</ID>
                                      <Description>"Standard Order 569, 570 - Deliver to Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 719.26995849609)
writeFloat('[PlayerCoordinates]+84', -663.93426513672)
writeFloat('[PlayerCoordinates]+88', 101.74416351318)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131875</ID>
                                      <Description>"Standard Order 571, 572 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131876</ID>
                                      <Description>"Standard Order 573, 574 - Deliver to Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1141.8942871094)
writeFloat('[PlayerCoordinates]+84', 29.015502929688)
writeFloat('[PlayerCoordinates]+88', 135.27490234375)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131877</ID>
                                      <Description>"Standard Order 575, 576 - Deliver to Novelists's Son"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2441.5659179688)
writeFloat('[PlayerCoordinates]+84', 1291.0874023438)
writeFloat('[PlayerCoordinates]+88', 251.06520080566)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131878</ID>
                                      <Description>"Standard Order 577, 578 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2585.2846679688)
writeFloat('[PlayerCoordinates]+84', 2013.8199462891)
writeFloat('[PlayerCoordinates]+88', 209.47732543945)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131879</ID>
                                      <Description>"Standard Order 579, 580 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 38.439750671387)
writeFloat('[PlayerCoordinates]+84', -74.023246765137)
writeFloat('[PlayerCoordinates]+88', 311.38076782227)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131880</ID>
                                      <Description>"Standard Order 581 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1380.5748291016)
writeFloat('[PlayerCoordinates]+84', -1284.6726074219)
writeFloat('[PlayerCoordinates]+88', 139.29028320313)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131881</ID>
                                      <Description>"Standard Order 582, 583 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1744.3016357422)
writeFloat('[PlayerCoordinates]+84', 2037.615234375)
writeFloat('[PlayerCoordinates]+88', 227.01776123047)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131882</ID>
                                      <Description>"Standard Order 584, 585 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1214.4786376953)
writeFloat('[PlayerCoordinates]+84', -222.15846252441)
writeFloat('[PlayerCoordinates]+88', 532.83221435547)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133053</ID>
                                      <Description>"Standard Order 637 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131883</ID>
                                  <Description>"From Heartman's Lab"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131884</ID>
                                      <Description>"Teleport to: Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1214.4786376953)
writeFloat('[PlayerCoordinates]+84', -222.15846252441)
writeFloat('[PlayerCoordinates]+88', 532.83221435547)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131885</ID>
                                      <Description>"Standard Order 586, 587 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -646.64099121094)
writeFloat('[PlayerCoordinates]+84', -144.66549682617)
writeFloat('[PlayerCoordinates]+88', 536.55578613281)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131886</ID>
                                      <Description>"Standard Order 588 - Deliver to Doctor"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1427.6165771484)
writeFloat('[PlayerCoordinates]+84', 58.272735595703)
writeFloat('[PlayerCoordinates]+88', 360.59719848633)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131887</ID>
                                      <Description>"Standard Order 589, 590 - Deliver to Geologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -898.26202392578)
writeFloat('[PlayerCoordinates]+84', -789.72894287109)
writeFloat('[PlayerCoordinates]+88', 625.56060791016)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131888</ID>
                                      <Description>"Standard Order 591, 592, 593 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1242.4761962891)
writeFloat('[PlayerCoordinates]+84', -1248.0733642578)
writeFloat('[PlayerCoordinates]+88', 412.21273803711)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131889</ID>
                                      <Description>"Standard Order 594, 595 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1831.9169921875)
writeFloat('[PlayerCoordinates]+84', -705.4521484375)
writeFloat('[PlayerCoordinates]+88', 466.98864746094)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131890</ID>
                                      <Description>"Standard Order 596, 597 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1100.3758544922)
writeFloat('[PlayerCoordinates]+84', 272.52059936523)
writeFloat('[PlayerCoordinates]+88', 353.3366394043)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131891</ID>
                                      <Description>"Standard Order 598 - Pick up item 1/4"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-952.75036621094) -- X Coord
writeFloat('[PlayerCoordinates]+84',-563.64349365234) -- Y Coord
writeFloat('[PlayerCoordinates]+88',646.71380615234) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131892</ID>
                                          <Description>"Standard Order 598 - Pick up item 2/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1015.104309082) -- X Coord
writeFloat('[PlayerCoordinates]+84',-588.52990722656) -- Y Coord
writeFloat('[PlayerCoordinates]+88',646.38073730469) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131893</ID>
                                          <Description>"Standard Order 598 - Pick up item 3/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-994.50756835938) -- X Coord
writeFloat('[PlayerCoordinates]+84',-616.8984375) -- Y Coord
writeFloat('[PlayerCoordinates]+88',675.55517578125) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131894</ID>
                                          <Description>"Standard Order 598 - Pick up item 4/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-966.36560058594) -- X Coord
writeFloat('[PlayerCoordinates]+84',-585.10198974609) -- Y Coord
writeFloat('[PlayerCoordinates]+88',655.16754150391) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131895</ID>
                                          <Description>"Standard Order 598 - Teleport Back to Vehicle (if you used my vehicle location)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-990.73754882813) -- X Coord
writeFloat('[PlayerCoordinates]+84',-633.95098876953) -- Y Coord
writeFloat('[PlayerCoordinates]+88',687.26910400391) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131896</ID>
                                      <Description>"Standard Order 599 - Pick up item 1/3"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1149.2559814453) -- X Coord
writeFloat('[PlayerCoordinates]+84',-701.38165283203) -- Y Coord
writeFloat('[PlayerCoordinates]+88',634.49011230469) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131897</ID>
                                          <Description>"Standard Order 599 - Pick up item 2/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1087.2679443359) -- X Coord
writeFloat('[PlayerCoordinates]+84',-793.69873046875) -- Y Coord
writeFloat('[PlayerCoordinates]+88',651.15222167969) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131898</ID>
                                          <Description>"Standard Order 599 - Pick up item 3/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1080.7044677734) -- X Coord
writeFloat('[PlayerCoordinates]+84',-799.2998046875) -- Y Coord
writeFloat('[PlayerCoordinates]+88',650.38024902344) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133058</ID>
                                      <Description>"Standard Order 638 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -419.83605957031)
writeFloat('[PlayerCoordinates]+84', -1165.1920166016)
writeFloat('[PlayerCoordinates]+88', 250.94882202148)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133107</ID>
                                      <Description>"Standard Order 639 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -220.34339904785)
writeFloat('[PlayerCoordinates]+84', 725.20837402344)
writeFloat('[PlayerCoordinates]+88', 788.54400634766)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>131899</ID>
                          <Description>"Vehicle"</Description>
                          <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                          <GroupHeader>1</GroupHeader>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>131900</ID>
                              <Description>"Eastern Region"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131901</ID>
                                  <Description>"From Capital Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131902</ID>
                                      <Description>"Teleport To: Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1443.4013671875) --X1
writeDouble('[VehicleCoordinates]+8F8', 1443.4013671875) --X2
writeDouble('[VehicleCoordinates]+D0', 692.111123512695) --Y1
writeDouble('[VehicleCoordinates]+900', 692.111123512695) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.306401471516) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.306401471516) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131903</ID>
                                      <Description>"Standard Order 100, 101, 102 - Deliver to Waystation West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 318.790057202337) --X1
writeDouble('[VehicleCoordinates]+8F8', 318.790057202337) --X2
writeDouble('[VehicleCoordinates]+D0', 1162.37582811471) --Y1
writeDouble('[VehicleCoordinates]+900', 1162.37582811471) -- Y2
writeDouble('[VehicleCoordinates]+D8', 161.919248845007) -- Z1
writeDouble('[VehicleCoordinates]+908', 161.919248845007) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131904</ID>
                                      <Description>"Standard Order 105, 106 - Deliver to Wind Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1486.93542206135) --X1
writeDouble('[VehicleCoordinates]+8F8', -1486.93542206135) --X2
writeDouble('[VehicleCoordinates]+D0', 652.813289342022) --Y1
writeDouble('[VehicleCoordinates]+900', 652.813289342022) -- Y2
writeDouble('[VehicleCoordinates]+D8', 204.475858193206) -- Z1
writeDouble('[VehicleCoordinates]+908', 204.475858193206) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131905</ID>
                                      <Description>"Standard Order 107, 108 - Deliver to Port Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1999.47536045469) --X1
writeDouble('[VehicleCoordinates]+8F8', -1999.47536045469) --X2
writeDouble('[VehicleCoordinates]+D0', -485.056854248047) --Y1
writeDouble('[VehicleCoordinates]+900', -485.056854248047) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.474717650577) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.474717650577) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131906</ID>
                                      <Description>"Standard Order 109 - Deliver to Ludens Fan"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 92.6874055161516) --X1
writeDouble('[VehicleCoordinates]+8F8', 92.6874055161516) --X2
writeDouble('[VehicleCoordinates]+D0', 540.118915277497) --Y1
writeDouble('[VehicleCoordinates]+900', 540.118915277497) -- Y2
writeDouble('[VehicleCoordinates]+D8', 206.047497367006) -- Z1
writeDouble('[VehicleCoordinates]+908', 206.047497367006) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131907</ID>
                                      <Description>"Standard Order 110, 111 - Deliver to Musician"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -981.190973857123) --X1
writeDouble('[VehicleCoordinates]+8F8', -981.190973857123) --X2
writeDouble('[VehicleCoordinates]+D0', -112.683721600795) --Y1
writeDouble('[VehicleCoordinates]+900', -112.683721600795) -- Y2
writeDouble('[VehicleCoordinates]+D8', 183.940941071383) -- Z1
writeDouble('[VehicleCoordinates]+908', 183.940941071383) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131908</ID>
                                  <Description>"From Waystation West of Capital Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131909</ID>
                                      <Description>"Teleport to: Waystation West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 318.790057202337) --X1
writeDouble('[VehicleCoordinates]+8F8', 318.790057202337) --X2
writeDouble('[VehicleCoordinates]+D0', 1162.37582811471) --Y1
writeDouble('[VehicleCoordinates]+900', 1162.37582811471) -- Y2
writeDouble('[VehicleCoordinates]+D8', 161.919248845007) -- Z1
writeDouble('[VehicleCoordinates]+908', 161.919248845007) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131910</ID>
                                      <Description>"Standard Order 112, 113 - Deliver to Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1443.4013671875) --X1
writeDouble('[VehicleCoordinates]+8F8', 1443.4013671875) --X2
writeDouble('[VehicleCoordinates]+D0', 692.111123512695) --Y1
writeDouble('[VehicleCoordinates]+900', 692.111123512695) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.306401471516) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.306401471516) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131911</ID>
                                      <Description>"Standard Order 114 - Pick Up 8 Items (East Side of River)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',532.21408843776) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',532.21408843776) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1304.7532501177) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1304.7532501177) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',134.30230713764) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',134.30230713764) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131912</ID>
                                          <Description>"Standard Order 114 - (West Side of River)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',536.23840332031) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',536.23840332031) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1246.952020665) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1246.952020665) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',134.28976255667) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',134.28976255667) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131913</ID>
                                          <Description>"Standard Order 114 - (Player Only) Teleport Back to Vehicle [East Side] (if you used my vehicle location)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',538.74273681641) -- X Coord
writeFloat('[PlayerCoordinates]+84',1297.1956787109) -- Y Coord
writeFloat('[PlayerCoordinates]+88',134.73930358887) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131914</ID>
                                          <Description>"Notes: They are floating down the river"</Description>
                                          <GroupHeader>1</GroupHeader>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131915</ID>
                                          <Description>"Notes: Items Qty7 of 3.0kg, Qty1 of 68.0kg"</Description>
                                          <GroupHeader>1</GroupHeader>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131916</ID>
                                      <Description>"Standard Order 115, 116, 117, 118 - Deliver to Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -434.600480057907) --X1
writeDouble('[VehicleCoordinates]+8F8', -434.600480057907) --X2
writeDouble('[VehicleCoordinates]+D0', 265.06265072403) --Y1
writeDouble('[VehicleCoordinates]+900', 265.06265072403) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.354885042289) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.354885042289) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131917</ID>
                                      <Description>"Standard Order 119, 120 - Deliver to Wind Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1486.93542206135) --X1
writeDouble('[VehicleCoordinates]+8F8', -1486.93542206135) --X2
writeDouble('[VehicleCoordinates]+D0', 652.813289342022) --Y1
writeDouble('[VehicleCoordinates]+900', 652.813289342022) -- Y2
writeDouble('[VehicleCoordinates]+D8', 204.475858193206) -- Z1
writeDouble('[VehicleCoordinates]+908', 204.475858193206) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131918</ID>
                                      <Description>"Standard Order 121 - Deliver to Port Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1999.47536045469) --X1
writeDouble('[VehicleCoordinates]+8F8', -1999.47536045469) --X2
writeDouble('[VehicleCoordinates]+D0', -485.056854248047) --Y1
writeDouble('[VehicleCoordinates]+900', -485.056854248047) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.474717650577) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.474717650577) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131919</ID>
                                      <Description>"Standard Order 122, 123, 124 - Deliver to Ludens Fan"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 92.6874055161516) --X1
writeDouble('[VehicleCoordinates]+8F8', 92.6874055161516) --X2
writeDouble('[VehicleCoordinates]+D0', 540.118915277497) --Y1
writeDouble('[VehicleCoordinates]+900', 540.118915277497) -- Y2
writeDouble('[VehicleCoordinates]+D8', 206.047497367006) -- Z1
writeDouble('[VehicleCoordinates]+908', 206.047497367006) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131920</ID>
                                  <Description>"From Distribution Center West of Capital Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131921</ID>
                                      <Description>"Teleport to: Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -434.600480057907) --X1
writeDouble('[VehicleCoordinates]+8F8', -434.600480057907) --X2
writeDouble('[VehicleCoordinates]+D0', 265.06265072403) --Y1
writeDouble('[VehicleCoordinates]+900', 265.06265072403) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.354885042289) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.354885042289) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131922</ID>
                                      <Description>"Standard Order 125, 126 - Deliver to Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1443.4013671875) --X1
writeDouble('[VehicleCoordinates]+8F8', 1443.4013671875) --X2
writeDouble('[VehicleCoordinates]+D0', 692.111123512695) --Y1
writeDouble('[VehicleCoordinates]+900', 692.111123512695) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.306401471516) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.306401471516) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131923</ID>
                                      <Description>"Standard Order 127 - Deliver to Waystation West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 318.790057202337) --X1
writeDouble('[VehicleCoordinates]+8F8', 318.790057202337) --X2
writeDouble('[VehicleCoordinates]+D0', 1162.37582811471) --Y1
writeDouble('[VehicleCoordinates]+900', 1162.37582811471) -- Y2
writeDouble('[VehicleCoordinates]+D8', 161.919248845007) -- Z1
writeDouble('[VehicleCoordinates]+908', 161.919248845007) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131924</ID>
                                      <Description>"Standard Order 128 - Pick up item at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 353.032836914063) --X1
writeDouble('[VehicleCoordinates]+8F8', 353.032836914063) --X2
writeDouble('[VehicleCoordinates]+D0', 810.902099609375) --Y1
writeDouble('[VehicleCoordinates]+900', 810.902099609375) -- Y2
writeDouble('[VehicleCoordinates]+D8', 162.930827675191) -- Z1
writeDouble('[VehicleCoordinates]+908', 162.930827675191) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131925</ID>
                                          <Description>"Standard Order 128 - Deliver to Waystation West of Capital Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 318.790057202337) --X1
writeDouble('[VehicleCoordinates]+8F8', 318.790057202337) --X2
writeDouble('[VehicleCoordinates]+D0', 1162.37582811471) --Y1
writeDouble('[VehicleCoordinates]+900', 1162.37582811471) -- Y2
writeDouble('[VehicleCoordinates]+D8', 161.919248845007) -- Z1
writeDouble('[VehicleCoordinates]+908', 161.919248845007) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131926</ID>
                                      <Description>"Standard Order 129 - Pick up item at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -623.585700250143) --X1
writeDouble('[VehicleCoordinates]+8F8', -623.585700250143) --X2
writeDouble('[VehicleCoordinates]+D0', -109.13662082921) --Y1
writeDouble('[VehicleCoordinates]+900', -109.13662082921) -- Y2
writeDouble('[VehicleCoordinates]+D8', 222.927660603733) -- Z1
writeDouble('[VehicleCoordinates]+908', 222.927660603733) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131927</ID>
                                      <Description>"Standard Order 130 - Deliver to Wind Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1486.93542206135) --X1
writeDouble('[VehicleCoordinates]+8F8', -1486.93542206135) --X2
writeDouble('[VehicleCoordinates]+D0', 652.813289342022) --Y1
writeDouble('[VehicleCoordinates]+900', 652.813289342022) -- Y2
writeDouble('[VehicleCoordinates]+D8', 204.475858193206) -- Z1
writeDouble('[VehicleCoordinates]+908', 204.475858193206) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131928</ID>
                                      <Description>"Standard Order 131 - Deliver to Port Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1999.47536045469) --X1
writeDouble('[VehicleCoordinates]+8F8', -1999.47536045469) --X2
writeDouble('[VehicleCoordinates]+D0', -485.056854248047) --Y1
writeDouble('[VehicleCoordinates]+900', -485.056854248047) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.474717650577) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.474717650577) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131929</ID>
                                      <Description>"Standard Order 132 - Deliver to Musician"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -981.190973857123) --X1
writeDouble('[VehicleCoordinates]+8F8', -981.190973857123) --X2
writeDouble('[VehicleCoordinates]+D0', -112.683721600795) --Y1
writeDouble('[VehicleCoordinates]+900', -112.683721600795) -- Y2
writeDouble('[VehicleCoordinates]+D8', 183.940941071383) -- Z1
writeDouble('[VehicleCoordinates]+908', 183.940941071383) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131930</ID>
                                  <Description>"From Wind Farm"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131931</ID>
                                      <Description>"Teleport to: Wind Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1486.93542206135) --X1
writeDouble('[VehicleCoordinates]+8F8', -1486.93542206135) --X2
writeDouble('[VehicleCoordinates]+D0', 652.813289342022) --Y1
writeDouble('[VehicleCoordinates]+900', 652.813289342022) -- Y2
writeDouble('[VehicleCoordinates]+D8', 204.475858193206) -- Z1
writeDouble('[VehicleCoordinates]+908', 204.475858193206) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131932</ID>
                                      <Description>"Standard Order 133, 134, 135, 136, 137 - Deliver to Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -434.600480057907) --X1
writeDouble('[VehicleCoordinates]+8F8', -434.600480057907) --X2
writeDouble('[VehicleCoordinates]+D0', 265.06265072403) --Y1
writeDouble('[VehicleCoordinates]+900', 265.06265072403) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.354885042289) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.354885042289) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131933</ID>
                                      <Description>"Standard Order 138, 139 - Deliver to Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1443.4013671875) --X1
writeDouble('[VehicleCoordinates]+8F8', 1443.4013671875) --X2
writeDouble('[VehicleCoordinates]+D0', 692.111123512695) --Y1
writeDouble('[VehicleCoordinates]+900', 692.111123512695) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.306401471516) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.306401471516) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131934</ID>
                                      <Description>"Standard Order 140, 141, 142 - Deliver to Waystation West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 318.790057202337) --X1
writeDouble('[VehicleCoordinates]+8F8', 318.790057202337) --X2
writeDouble('[VehicleCoordinates]+D0', 1162.37582811471) --Y1
writeDouble('[VehicleCoordinates]+900', 1162.37582811471) -- Y2
writeDouble('[VehicleCoordinates]+D8', 161.919248845007) -- Z1
writeDouble('[VehicleCoordinates]+908', 161.919248845007) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131935</ID>
                                      <Description>"Standard Order 143 - Item 1/3"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1378.4102156853) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1378.4102156853) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',468.80740907897) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',468.80740907897) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',200.2093839658) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',200.2093839658) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131936</ID>
                                          <Description>"Standard Order 143 - Item 2/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1327.6213225094) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1327.6213225094) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',565.62432716825) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',565.62432716825) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',184.37596094245) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',184.37596094245) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131937</ID>
                                          <Description>"Standard Order 143 - Item 3/3 (up the hill)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1375.4033008835) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1375.4033008835) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',613.39100092542) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',613.39100092542) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',201.18946009121) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',201.18946009121) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131938</ID>
                                      <Description>"Standard Order 144 - Deliver to Ludens Fan"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 92.6874055161516) --X1
writeDouble('[VehicleCoordinates]+8F8', 92.6874055161516) --X2
writeDouble('[VehicleCoordinates]+D0', 540.118915277497) --Y1
writeDouble('[VehicleCoordinates]+900', 540.118915277497) -- Y2
writeDouble('[VehicleCoordinates]+D8', 206.047497367006) -- Z1
writeDouble('[VehicleCoordinates]+908', 206.047497367006) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133131</ID>
                                      <Description>"Standard Order 600 - Deliver to Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -434.600480057907) --X1
writeDouble('[VehicleCoordinates]+8F8', -434.600480057907) --X2
writeDouble('[VehicleCoordinates]+D0', 265.06265072403) --Y1
writeDouble('[VehicleCoordinates]+900', 265.06265072403) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.354885042289) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.354885042289) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131939</ID>
                                  <Description>"From Port Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131940</ID>
                                      <Description>"Teleport to: Port Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1999.47536045469) --X1
writeDouble('[VehicleCoordinates]+8F8', -1999.47536045469) --X2
writeDouble('[VehicleCoordinates]+D0', -485.056854248047) --Y1
writeDouble('[VehicleCoordinates]+900', -485.056854248047) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.474717650577) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.474717650577) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131941</ID>
                                      <Description>"Standard Order 145, 146 - Deliver to Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1443.4013671875) --X1
writeDouble('[VehicleCoordinates]+8F8', 1443.4013671875) --X2
writeDouble('[VehicleCoordinates]+D0', 692.111123512695) --Y1
writeDouble('[VehicleCoordinates]+900', 692.111123512695) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.306401471516) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.306401471516) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131942</ID>
                                      <Description>"Standard Order 147, 148 - Deliver to Waystation West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 318.790057202337) --X1
writeDouble('[VehicleCoordinates]+8F8', 318.790057202337) --X2
writeDouble('[VehicleCoordinates]+D0', 1162.37582811471) --Y1
writeDouble('[VehicleCoordinates]+900', 1162.37582811471) -- Y2
writeDouble('[VehicleCoordinates]+D8', 161.919248845007) -- Z1
writeDouble('[VehicleCoordinates]+908', 161.919248845007) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131943</ID>
                                      <Description>"Standard Order 149, 150 - Deliver to Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -434.600480057907) --X1
writeDouble('[VehicleCoordinates]+8F8', -434.600480057907) --X2
writeDouble('[VehicleCoordinates]+D0', 265.06265072403) --Y1
writeDouble('[VehicleCoordinates]+900', 265.06265072403) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.354885042289) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.354885042289) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131944</ID>
                                      <Description>"Standard Order 151, 152 - Deliver to Wind Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1486.93542206135) --X1
writeDouble('[VehicleCoordinates]+8F8', -1486.93542206135) --X2
writeDouble('[VehicleCoordinates]+D0', 652.813289342022) --Y1
writeDouble('[VehicleCoordinates]+900', 652.813289342022) -- Y2
writeDouble('[VehicleCoordinates]+D8', 204.475858193206) -- Z1
writeDouble('[VehicleCoordinates]+908', 204.475858193206) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131945</ID>
                                      <Description>"Standard Order 153 - Pick up 3 items at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -623.585700250143) --X1
writeDouble('[VehicleCoordinates]+8F8', -623.585700250143) --X2
writeDouble('[VehicleCoordinates]+D0', -109.13662082921) --Y1
writeDouble('[VehicleCoordinates]+900', -109.13662082921) -- Y2
writeDouble('[VehicleCoordinates]+D8', 222.927660603733) -- Z1
writeDouble('[VehicleCoordinates]+908', 222.927660603733) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131946</ID>
                                      <Description>"Standard Order 154, 155 - Deliver to Ludens Fan"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 92.6874055161516) --X1
writeDouble('[VehicleCoordinates]+8F8', 92.6874055161516) --X2
writeDouble('[VehicleCoordinates]+D0', 540.118915277497) --Y1
writeDouble('[VehicleCoordinates]+900', 540.118915277497) -- Y2
writeDouble('[VehicleCoordinates]+D8', 206.047497367006) -- Z1
writeDouble('[VehicleCoordinates]+908', 206.047497367006) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131947</ID>
                                  <Description>"From Luden's Fan"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131948</ID>
                                      <Description>"Teleport to: Ludens Fan"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 92.6874055161516) --X1
writeDouble('[VehicleCoordinates]+8F8', 92.6874055161516) --X2
writeDouble('[VehicleCoordinates]+D0', 540.118915277497) --Y1
writeDouble('[VehicleCoordinates]+900', 540.118915277497) -- Y2
writeDouble('[VehicleCoordinates]+D8', 206.047497367006) -- Z1
writeDouble('[VehicleCoordinates]+908', 206.047497367006) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131949</ID>
                                      <Description>"Standard Order 156 - Deliver to Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1443.4013671875) --X1
writeDouble('[VehicleCoordinates]+8F8', 1443.4013671875) --X2
writeDouble('[VehicleCoordinates]+D0', 692.111123512695) --Y1
writeDouble('[VehicleCoordinates]+900', 692.111123512695) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.306401471516) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.306401471516) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131950</ID>
                                      <Description>"Standard Order 157 - Deliver to Waystation West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 318.790057202337) --X1
writeDouble('[VehicleCoordinates]+8F8', 318.790057202337) --X2
writeDouble('[VehicleCoordinates]+D0', 1162.37582811471) --Y1
writeDouble('[VehicleCoordinates]+900', 1162.37582811471) -- Y2
writeDouble('[VehicleCoordinates]+D8', 161.919248845007) -- Z1
writeDouble('[VehicleCoordinates]+908', 161.919248845007) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131951</ID>
                                      <Description>"Standard Order 158 - Deliver to Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -434.600480057907) --X1
writeDouble('[VehicleCoordinates]+8F8', -434.600480057907) --X2
writeDouble('[VehicleCoordinates]+D0', 265.06265072403) --Y1
writeDouble('[VehicleCoordinates]+900', 265.06265072403) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.354885042289) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.354885042289) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131952</ID>
                                      <Description>"Standard Order 159 - Deliver to Wind Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1486.93542206135) --X1
writeDouble('[VehicleCoordinates]+8F8', -1486.93542206135) --X2
writeDouble('[VehicleCoordinates]+D0', 652.813289342022) --Y1
writeDouble('[VehicleCoordinates]+900', 652.813289342022) -- Y2
writeDouble('[VehicleCoordinates]+D8', 204.475858193206) -- Z1
writeDouble('[VehicleCoordinates]+908', 204.475858193206) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131953</ID>
                                      <Description>"Standard Order 160 - Deliver to Port Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1999.47536045469) --X1
writeDouble('[VehicleCoordinates]+8F8', -1999.47536045469) --X2
writeDouble('[VehicleCoordinates]+D0', -485.056854248047) --Y1
writeDouble('[VehicleCoordinates]+900', -485.056854248047) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.474717650577) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.474717650577) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131954</ID>
                                      <Description>"Standard Order 161 - Pick up [2] items at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 353.032836914063) --X1
writeDouble('[VehicleCoordinates]+8F8', 353.032836914063) --X2
writeDouble('[VehicleCoordinates]+D0', 810.902099609375) --Y1
writeDouble('[VehicleCoordinates]+900', 810.902099609375) -- Y2
writeDouble('[VehicleCoordinates]+D8', 162.930827675191) -- Z1
writeDouble('[VehicleCoordinates]+908', 162.930827675191) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131955</ID>
                                  <Description>"From Musician"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131956</ID>
                                      <Description>"Teleport to: Musician"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -981.190973857123) --X1
writeDouble('[VehicleCoordinates]+8F8', -981.190973857123) --X2
writeDouble('[VehicleCoordinates]+D0', -112.683721600795) --Y1
writeDouble('[VehicleCoordinates]+900', -112.683721600795) -- Y2
writeDouble('[VehicleCoordinates]+D8', 183.940941071383) -- Z1
writeDouble('[VehicleCoordinates]+908', 183.940941071383) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131957</ID>
                                      <Description>"Standard Order 162, 163, 164, 165 - Deliver to Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1443.4013671875) --X1
writeDouble('[VehicleCoordinates]+8F8', 1443.4013671875) --X2
writeDouble('[VehicleCoordinates]+D0', 692.111123512695) --Y1
writeDouble('[VehicleCoordinates]+900', 692.111123512695) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.306401471516) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.306401471516) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131958</ID>
                                      <Description>"Standard Order 166, 167 - Deliver to Waystation West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 318.790057202337) --X1
writeDouble('[VehicleCoordinates]+8F8', 318.790057202337) --X2
writeDouble('[VehicleCoordinates]+D0', 1162.37582811471) --Y1
writeDouble('[VehicleCoordinates]+900', 1162.37582811471) -- Y2
writeDouble('[VehicleCoordinates]+D8', 161.919248845007) -- Z1
writeDouble('[VehicleCoordinates]+908', 161.919248845007) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131959</ID>
                                      <Description>"Standard Order 168, 169, 170, 171 - Deliver to Distribution Center West of Capital Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -434.600480057907) --X1
writeDouble('[VehicleCoordinates]+8F8', -434.600480057907) --X2
writeDouble('[VehicleCoordinates]+D0', 265.06265072403) --Y1
writeDouble('[VehicleCoordinates]+900', 265.06265072403) -- Y2
writeDouble('[VehicleCoordinates]+D8', 136.354885042289) -- Z1
writeDouble('[VehicleCoordinates]+908', 136.354885042289) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131960</ID>
                                      <Description>"Standard Order 172 - Item 1/2"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-782.28752085958) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-782.28752085958) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',5.2254852265058) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',5.2254852265058) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',155.49921917484) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',155.49921917484) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131961</ID>
                                          <Description>"Standard Order 172 - Item 2/2"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-875.780507491395) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-875.780507491395) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',12.0616493516457) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',12.0616493516457) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',156.104103143793) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',156.104103143793) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133133</ID>
                                      <Description>"Standard Order 601 - Deliver to Port Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1999.47536045469) --X1
writeDouble('[VehicleCoordinates]+8F8', -1999.47536045469) --X2
writeDouble('[VehicleCoordinates]+D0', -485.056854248047) --Y1
writeDouble('[VehicleCoordinates]+900', -485.056854248047) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.474717650577) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.474717650577) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>131962</ID>
                              <Description>"Central Region"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>131963</ID>
                                  <Description>"From Engineer"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131964</ID>
                                      <Description>"Teleport to: Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2184.02127121671) --X1
writeDouble('[VehicleCoordinates]+8F8', 2184.02127121671) --X2
writeDouble('[VehicleCoordinates]+D0', 1189.45777916304) --Y1
writeDouble('[VehicleCoordinates]+900', 1189.45777916304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 177.263346793139) -- Z1
writeDouble('[VehicleCoordinates]+908', 177.263346793139) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131965</ID>
                                      <Description>"Standard Order 173 - Pick up 1/4 and 2/4  item at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1617.93617112409) --X1
writeDouble('[VehicleCoordinates]+8F8', 1617.93617112409) --X2
writeDouble('[VehicleCoordinates]+D0', 1064.90197753906) --Y1
writeDouble('[VehicleCoordinates]+900', 1064.90197753906) -- Y2
writeDouble('[VehicleCoordinates]+D8', 175.162870201336) -- Z1
writeDouble('[VehicleCoordinates]+908', 175.162870201336) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131966</ID>
                                          <Description>"Standard Order 173 - Pick up 3/4 and 4/4  item at MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1676.29306249085) --X1
writeDouble('[VehicleCoordinates]+8F8', 1676.29306249085) --X2
writeDouble('[VehicleCoordinates]+D0', 957.384109861756) --Y1
writeDouble('[VehicleCoordinates]+900', 957.384109861756) -- Y2
writeDouble('[VehicleCoordinates]+D8', 174.757174924946) -- Z1
writeDouble('[VehicleCoordinates]+908', 174.757174924946) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131967</ID>
                                      <Description>"Standard Order 174 - Deliver to Elder"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1705.35144042969) --X1
writeDouble('[VehicleCoordinates]+8F8', 1705.35144042969) --X2
writeDouble('[VehicleCoordinates]+D0', 699.0947265625) --Y1
writeDouble('[VehicleCoordinates]+900', 699.0947265625) -- Y2
writeDouble('[VehicleCoordinates]+D8', 244.412511481352) -- Z1
writeDouble('[VehicleCoordinates]+908', 244.412511481352) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131968</ID>
                                      <Description>"Standard Order 175, 176 - Deliver to Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1226.47027420112) --X1
writeDouble('[VehicleCoordinates]+8F8', 1226.47027420112) --X2
writeDouble('[VehicleCoordinates]+D0', 1307.98022460938) --Y1
writeDouble('[VehicleCoordinates]+900', 1307.98022460938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 183.580974329453) -- Z1
writeDouble('[VehicleCoordinates]+908', 183.580974329453) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131969</ID>
                                      <Description>"Standard Order 177 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1607.94860839844) --X1
writeDouble('[VehicleCoordinates]+8F8', 1607.94860839844) --X2
writeDouble('[VehicleCoordinates]+D0', -274.140829576729) --Y1
writeDouble('[VehicleCoordinates]+900', -274.140829576729) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.984857813475) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.984857813475) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131970</ID>
                                      <Description>"Standard Order 178 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2140.7678905886) --X1
writeDouble('[VehicleCoordinates]+8F8', 2140.7678905886) --X2
writeDouble('[VehicleCoordinates]+D0', -891.205335171187) --Y1
writeDouble('[VehicleCoordinates]+900', -891.205335171187) -- Y2
writeDouble('[VehicleCoordinates]+D8', 149.236557576236) -- Z1
writeDouble('[VehicleCoordinates]+908', 149.236557576236) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131971</ID>
                                      <Description>"Standard Order 179, 180 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 170.875869750977) --X1
writeDouble('[VehicleCoordinates]+8F8', 170.875869750977) --X2
writeDouble('[VehicleCoordinates]+D0', 1647.17614746094) --Y1
writeDouble('[VehicleCoordinates]+900', 1647.17614746094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 260.368743896484) -- Z1
writeDouble('[VehicleCoordinates]+908', 260.368743896484) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131972</ID>
                                      <Description>"Standard Order 181, 182 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131973</ID>
                                      <Description>"Standard Order 183, 184 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131974</ID>
                                      <Description>"Standard Order 185 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131975</ID>
                                      <Description>"Standard Order 186, 187 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133062</ID>
                                      <Description>"Standard Order 602 - Deliver to Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1151.38770162807) --X1
writeDouble('[VehicleCoordinates]+8F8', 1151.38770162807) --X2
writeDouble('[VehicleCoordinates]+D0', 29.2159338650015) --Y1
writeDouble('[VehicleCoordinates]+900', 29.2159338650015) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.269395761401) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.269395761401) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131976</ID>
                                  <Description>"From Elder"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131977</ID>
                                      <Description>"Teleport to: Elder"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1705.35144042969) --X1
writeDouble('[VehicleCoordinates]+8F8', 1705.35144042969) --X2
writeDouble('[VehicleCoordinates]+D0', 699.0947265625) --Y1
writeDouble('[VehicleCoordinates]+900', 699.0947265625) -- Y2
writeDouble('[VehicleCoordinates]+D8', 244.412511481352) -- Z1
writeDouble('[VehicleCoordinates]+908', 244.412511481352) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131978</ID>
                                      <Description>"Standard Order 188, 189 - Deliver to Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2184.02127121671) --X1
writeDouble('[VehicleCoordinates]+8F8', 2184.02127121671) --X2
writeDouble('[VehicleCoordinates]+D0', 1189.45777916304) --Y1
writeDouble('[VehicleCoordinates]+900', 1189.45777916304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 177.263346793139) -- Z1
writeDouble('[VehicleCoordinates]+908', 177.263346793139) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131979</ID>
                                      <Description>"Standard Order 190 - Pick up 1-3/8 items at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1520.09213235634) --X1
writeDouble('[VehicleCoordinates]+8F8', 1520.09213235634) --X2
writeDouble('[VehicleCoordinates]+D0', 994.568443457356) --Y1
writeDouble('[VehicleCoordinates]+900', 994.568443457356) -- Y2
writeDouble('[VehicleCoordinates]+D8', 172.358861432918) -- Z1
writeDouble('[VehicleCoordinates]+908', 172.358861432918) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131980</ID>
                                          <Description>"Standard Order 190 - Pick up 4-5/8 items at MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1676.29306249085) --X1
writeDouble('[VehicleCoordinates]+8F8', 1676.29306249085) --X2
writeDouble('[VehicleCoordinates]+D0', 957.384109861756) --Y1
writeDouble('[VehicleCoordinates]+900', 957.384109861756) -- Y2
writeDouble('[VehicleCoordinates]+D8', 174.757174924946) -- Z1
writeDouble('[VehicleCoordinates]+908', 174.757174924946) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131981</ID>
                                          <Description>"Standard Order 190 - Pick up 6-8/8 items at MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1617.93617112409) --X1
writeDouble('[VehicleCoordinates]+8F8', 1617.93617112409) --X2
writeDouble('[VehicleCoordinates]+D0', 1064.90197753906) --Y1
writeDouble('[VehicleCoordinates]+900', 1064.90197753906) -- Y2
writeDouble('[VehicleCoordinates]+D8', 175.162870201336) -- Z1
writeDouble('[VehicleCoordinates]+908', 175.162870201336) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131982</ID>
                                      <Description>"Standard Order 191, 192 - Deliver to Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1226.47027420112) --X1
writeDouble('[VehicleCoordinates]+8F8', 1226.47027420112) --X2
writeDouble('[VehicleCoordinates]+D0', 1307.98022460938) --Y1
writeDouble('[VehicleCoordinates]+900', 1307.98022460938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 183.580974329453) -- Z1
writeDouble('[VehicleCoordinates]+908', 183.580974329453) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131983</ID>
                                      <Description>"Standard Order 193, 194 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 170.875869750977) --X1
writeDouble('[VehicleCoordinates]+8F8', 170.875869750977) --X2
writeDouble('[VehicleCoordinates]+D0', 1647.17614746094) --Y1
writeDouble('[VehicleCoordinates]+900', 1647.17614746094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 260.368743896484) -- Z1
writeDouble('[VehicleCoordinates]+908', 260.368743896484) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131984</ID>
                                      <Description>"Standard Order 195, 196 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131985</ID>
                                      <Description>"Standard Order 197 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131986</ID>
                                      <Description>"Standard Order 198 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133064</ID>
                                      <Description>"Standard Order 603 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 170.875869750977) --X1
writeDouble('[VehicleCoordinates]+8F8', 170.875869750977) --X2
writeDouble('[VehicleCoordinates]+D0', 1647.17614746094) --Y1
writeDouble('[VehicleCoordinates]+900', 1647.17614746094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 260.368743896484) -- Z1
writeDouble('[VehicleCoordinates]+908', 260.368743896484) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>131987</ID>
                                  <Description>"From Craftsman"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>131988</ID>
                                      <Description>"Teleport to: Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1226.47027420112) --X1
writeDouble('[VehicleCoordinates]+8F8', 1226.47027420112) --X2
writeDouble('[VehicleCoordinates]+D0', 1307.98022460938) --Y1
writeDouble('[VehicleCoordinates]+900', 1307.98022460938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 183.580974329453) -- Z1
writeDouble('[VehicleCoordinates]+908', 183.580974329453) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131989</ID>
                                      <Description>"Standard Order 199, 200 - Deliver to Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2184.02127121671) --X1
writeDouble('[VehicleCoordinates]+8F8', 2184.02127121671) --X2
writeDouble('[VehicleCoordinates]+D0', 1189.45777916304) --Y1
writeDouble('[VehicleCoordinates]+900', 1189.45777916304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 177.263346793139) -- Z1
writeDouble('[VehicleCoordinates]+908', 177.263346793139) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131990</ID>
                                      <Description>"Standard Order 201 - Deliver to Elder"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1705.35144042969) --X1
writeDouble('[VehicleCoordinates]+8F8', 1705.35144042969) --X2
writeDouble('[VehicleCoordinates]+D0', 699.0947265625) --Y1
writeDouble('[VehicleCoordinates]+900', 699.0947265625) -- Y2
writeDouble('[VehicleCoordinates]+D8', 244.412511481352) -- Z1
writeDouble('[VehicleCoordinates]+908', 244.412511481352) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131991</ID>
                                      <Description>"Standard Order 202 - Pick up item at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 542.179931640625) --X1
writeDouble('[VehicleCoordinates]+8F8', 542.179931640625) --X2
writeDouble('[VehicleCoordinates]+D0', 883.924469714286) --Y1
writeDouble('[VehicleCoordinates]+900', 883.924469714286) -- Y2
writeDouble('[VehicleCoordinates]+D8', 173.255883735445) -- Z1
writeDouble('[VehicleCoordinates]+908', 173.255883735445) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131992</ID>
                                          <Description>"Standard Order 202 - Deliver to Elder"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1705.35144042969) --X1
writeDouble('[VehicleCoordinates]+8F8', 1705.35144042969) --X2
writeDouble('[VehicleCoordinates]+D0', 699.0947265625) --Y1
writeDouble('[VehicleCoordinates]+900', 699.0947265625) -- Y2
writeDouble('[VehicleCoordinates]+D8', 244.412511481352) -- Z1
writeDouble('[VehicleCoordinates]+908', 244.412511481352) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>131993</ID>
                                      <Description>"Standard Order 203 - Item 1/12"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1267.8548919228) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1267.8548919228) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1646.3246292339) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1646.3246292339) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',198.27245856991) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',198.27245856991) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>131994</ID>
                                          <Description>"Standard Order 203 - Item 2/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1257.75463867188) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1257.75463867188) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1666.81970214844) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1666.81970214844) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',195.882545684041) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',195.882545684041) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131995</ID>
                                          <Description>"Standard Order 203 - Item 3/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1357.1895575324) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1357.1895575324) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1846.7839355469) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1846.7839355469) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',216.9525278956) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',216.9525278956) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131996</ID>
                                          <Description>"Standard Order 203 - Item 4/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1319.7728271484) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1319.1868896484) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1642.3930664063) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1641.7930908203) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',234.86518859863) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',234.9733581543) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131997</ID>
                                          <Description>"Standard Order 203 - Item 5/12 (Climb Up)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1345.455444) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1345.455444) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1666.74353) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1666.74353) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',202.34729) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',202.34729) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131998</ID>
                                          <Description>"Standard Order 203 - Item 6/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1365.3018822422) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1365.3018822422) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1726.0574927578) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1726.0574927578) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',199.63899968271) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',199.63899968271) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>131999</ID>
                                          <Description>"Standard Order 203 - Item 7/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1210.1854578017) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1210.1854578017) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1695.7620058053) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1695.7620058053) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',193.52524614346) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',193.52524614346) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132000</ID>
                                          <Description>"Standard Order 203 - Item 8/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1240.3508300781) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1240.3508300781) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1762.4304752998) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1762.4304752998) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',192.45311621568) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',192.45311621568) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132001</ID>
                                          <Description>"Standard Order 203 - Item 9/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1279.0793660853) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1279.0793660853) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1814.3584493929) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1814.3584493929) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',195.39042671922) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',195.39042671922) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132002</ID>
                                          <Description>"Standard Order 203 - Item 10/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1321.9486137072) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1321.9486137072) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1755.5569006608) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1755.5569006608) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',198.71090830573) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',198.71090830573) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132003</ID>
                                          <Description>"Standard Order 203 - Item 11/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1306.7666247547) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1306.7666247547) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1754.9561118842) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1754.9561118842) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',197.82233535725) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',197.82233535725) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132004</ID>
                                          <Description>"Standard Order 203 - Item 12/12"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1308.7158148351) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1308.7158148351) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1722.3410699305) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1722.3410699305) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',196.97431192659) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',196.97431192659) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132005</ID>
                                      <Description>"Standard Order 204 - Pick up item"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1321.75479916266) --X1
writeDouble('[VehicleCoordinates]+8F8', 1321.75479916266) --X2
writeDouble('[VehicleCoordinates]+D0', 1781.333984375) --Y1
writeDouble('[VehicleCoordinates]+900', 1781.333984375) -- Y2
writeDouble('[VehicleCoordinates]+D8', 199.04028204791) -- Z1
writeDouble('[VehicleCoordinates]+908', 199.04028204791) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132006</ID>
                                      <Description>"Standard Order 205 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1607.94860839844) --X1
writeDouble('[VehicleCoordinates]+8F8', 1607.94860839844) --X2
writeDouble('[VehicleCoordinates]+D0', -274.140829576729) --Y1
writeDouble('[VehicleCoordinates]+900', -274.140829576729) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.984857813475) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.984857813475) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132007</ID>
                                      <Description>"Standard Order 206 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2140.7678905886) --X1
writeDouble('[VehicleCoordinates]+8F8', 2140.7678905886) --X2
writeDouble('[VehicleCoordinates]+D0', -891.205335171187) --Y1
writeDouble('[VehicleCoordinates]+900', -891.205335171187) -- Y2
writeDouble('[VehicleCoordinates]+D8', 149.236557576236) -- Z1
writeDouble('[VehicleCoordinates]+908', 149.236557576236) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132008</ID>
                                      <Description>"Standard Order 207, 208 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 170.875869750977) --X1
writeDouble('[VehicleCoordinates]+8F8', 170.875869750977) --X2
writeDouble('[VehicleCoordinates]+D0', 1647.17614746094) --Y1
writeDouble('[VehicleCoordinates]+900', 1647.17614746094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 260.368743896484) -- Z1
writeDouble('[VehicleCoordinates]+908', 260.368743896484) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132009</ID>
                                      <Description>"Standard Order 209 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132010</ID>
                                      <Description>"Standard Order 210, 211 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132011</ID>
                                      <Description>"Standard Order 212 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132012</ID>
                                      <Description>"Standard Order 213 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132013</ID>
                                      <Description>"Standard Order 214, 215 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133066</ID>
                                      <Description>"Standard Order 604 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132014</ID>
                                  <Description>"From Timefall Farm"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132015</ID>
                                      <Description>"Teleport to: Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 115.351102065019) --X1
writeDouble('[VehicleCoordinates]+8F8', 115.351102065019) --X2
writeDouble('[VehicleCoordinates]+D0', -1629.64987632092) --Y1
writeDouble('[VehicleCoordinates]+900', -1629.64987632092) -- Y2
writeDouble('[VehicleCoordinates]+D8', 108.919290458693) -- Z1
writeDouble('[VehicleCoordinates]+908', 108.919290458693) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132016</ID>
                                      <Description>"Standard Order 216 - Deliver to Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2184.02127121671) --X1
writeDouble('[VehicleCoordinates]+8F8', 2184.02127121671) --X2
writeDouble('[VehicleCoordinates]+D0', 1189.45777916304) --Y1
writeDouble('[VehicleCoordinates]+900', 1189.45777916304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 177.263346793139) -- Z1
writeDouble('[VehicleCoordinates]+908', 177.263346793139) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132017</ID>
                                      <Description>"Standard Order 217, 218 - Deliver to Elder"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1705.35144042969) --X1
writeDouble('[VehicleCoordinates]+8F8', 1705.35144042969) --X2
writeDouble('[VehicleCoordinates]+D0', 699.0947265625) --Y1
writeDouble('[VehicleCoordinates]+900', 699.0947265625) -- Y2
writeDouble('[VehicleCoordinates]+D8', 244.412511481352) -- Z1
writeDouble('[VehicleCoordinates]+908', 244.412511481352) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132018</ID>
                                      <Description>"Standard Order 219 - Deliver to Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1226.47027420112) --X1
writeDouble('[VehicleCoordinates]+8F8', 1226.47027420112) --X2
writeDouble('[VehicleCoordinates]+D0', 1307.98022460938) --Y1
writeDouble('[VehicleCoordinates]+900', 1307.98022460938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 183.580974329453) -- Z1
writeDouble('[VehicleCoordinates]+908', 183.580974329453) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132019</ID>
                                      <Description>"Standard Order 220 - Pick up 2 of 5 items at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -45.4810066223145) --X1
writeDouble('[VehicleCoordinates]+8F8', -45.4810066223145) --X2
writeDouble('[VehicleCoordinates]+D0', -1266.28552246094) --Y1
writeDouble('[VehicleCoordinates]+900', -1266.28552246094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 116.924080021855) -- Z1
writeDouble('[VehicleCoordinates]+908', 116.924080021855) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132020</ID>
                                          <Description>"Standard Order 220 - Pick up 3 of 5 items at MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 286.290642498279) --X1
writeDouble('[VehicleCoordinates]+8F8', 286.290642498279) --X2
writeDouble('[VehicleCoordinates]+D0', -1225.44865830959) --Y1
writeDouble('[VehicleCoordinates]+900', -1225.44865830959) -- Y2
writeDouble('[VehicleCoordinates]+D8', 103.500809471737) -- Z1
writeDouble('[VehicleCoordinates]+908', 103.500809471737) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132021</ID>
                                      <Description>"Standard Order 221 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1607.94860839844) --X1
writeDouble('[VehicleCoordinates]+8F8', 1607.94860839844) --X2
writeDouble('[VehicleCoordinates]+D0', -274.140829576729) --Y1
writeDouble('[VehicleCoordinates]+900', -274.140829576729) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.984857813475) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.984857813475) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132022</ID>
                                      <Description>"Standard Order 222 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1235.27709960938) --X1
writeDouble('[VehicleCoordinates]+8F8', -1235.27709960938) --X2
writeDouble('[VehicleCoordinates]+D0', -1252.37450712258) --Y1
writeDouble('[VehicleCoordinates]+900', -1252.37450712258) -- Y2
writeDouble('[VehicleCoordinates]+D8', 410.93840658829) -- Z1
writeDouble('[VehicleCoordinates]+908', 410.93840658829) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132023</ID>
                                      <Description>"Standard Order 223 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -402.304512128479) --X1
writeDouble('[VehicleCoordinates]+8F8', -402.304512128479) --X2
writeDouble('[VehicleCoordinates]+D0', -1165.69761503304) --Y1
writeDouble('[VehicleCoordinates]+900', -1165.69761503304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 247.350454353234) -- Z1
writeDouble('[VehicleCoordinates]+908', 247.350454353234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132024</ID>
                                      <Description>"Standard Order 224 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1831.26241262823) --X1
writeDouble('[VehicleCoordinates]+8F8', -1831.26241262823) --X2
writeDouble('[VehicleCoordinates]+D0', -712.536589082141) --Y1
writeDouble('[VehicleCoordinates]+900', -712.536589082141) -- Y2
writeDouble('[VehicleCoordinates]+D8', 465.668199942371) -- Z1
writeDouble('[VehicleCoordinates]+908', 465.668199942371) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132025</ID>
                                      <Description>"Standard Order 225 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1997.68957519531) --X1
writeDouble('[VehicleCoordinates]+8F8', 1997.68957519531) --X2
writeDouble('[VehicleCoordinates]+D0', -15.4660186767578) --Y1
writeDouble('[VehicleCoordinates]+900', -15.4660186767578) -- Y2
writeDouble('[VehicleCoordinates]+D8', 151.910415649414) -- Z1
writeDouble('[VehicleCoordinates]+908', 151.910415649414) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132026</ID>
                                      <Description>"Standard Order 226 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132027</ID>
                                      <Description>"Standard Order 227, 228 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132028</ID>
                                      <Description>"Standard Order 229 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132029</ID>
                                      <Description>"Standard Order 230 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132030</ID>
                                      <Description>"Standard Order 231 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1221.86779785156) --X1
writeDouble('[VehicleCoordinates]+8F8', -1221.86779785156) --X2
writeDouble('[VehicleCoordinates]+D0', -229.087647924799) --Y1
writeDouble('[VehicleCoordinates]+900', -229.087647924799) -- Y2
writeDouble('[VehicleCoordinates]+D8', 531.693955322326) -- Z1
writeDouble('[VehicleCoordinates]+908', 531.693955322326) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133073</ID>
                                      <Description>"Standard Order 605 - Pick up item 1/6"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',147.41123152994) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',147.41123152994) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1881.4320790162) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1881.4320790162) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',102.28429014757) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',102.28429014757) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133075</ID>
                                          <Description>"Standard Order 605 - Pick up item 2/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',141.84106512118) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',141.84106512118) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1913.165530414) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1913.165530414) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',101.8128207686) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',101.8128207686) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133077</ID>
                                          <Description>"Standard Order 605 - Pick up item 3/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',139.61857661471) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',139.61857661471) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1976.58422249) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1976.58422249) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',99.265052509785) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',99.265052509785) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133079</ID>
                                          <Description>"Standard Order 605 - Pick up item 4/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',53.368358758482) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',53.368358758482) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-2019.4171142578) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-2019.4171142578) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',92.511147751415) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',92.511147751415) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133081</ID>
                                          <Description>"Standard Order 605 - Pick up item 5/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',172.68481445313) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',172.68481445313) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-2087.3237304688) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-2087.3237304688) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',101.81091308594) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',101.81091308594) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133083</ID>
                                          <Description>"Standard Order 605 - Pick up item 6/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',219.18691326596) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',219.18691326596) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1996.0391374235) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1996.0391374235) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',119.32598063679) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',119.32598063679) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133085</ID>
                                          <Description>"Standard Order 605 - Deliver to Timefall Farm"</Description>
                                          <GroupHeader>1</GroupHeader>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133070</ID>
                                      <Description>"Standard Order 606 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133071</ID>
                                      <Description>"Standard Order 607 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133072</ID>
                                      <Description>"Standard Order 608 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132031</ID>
                                  <Description>"From Junk Dealer"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132032</ID>
                                      <Description>"Teleport to: Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1607.94860839844) --X1
writeDouble('[VehicleCoordinates]+8F8', 1607.94860839844) --X2
writeDouble('[VehicleCoordinates]+D0', -274.140829576729) --Y1
writeDouble('[VehicleCoordinates]+900', -274.140829576729) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.984857813475) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.984857813475) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132033</ID>
                                      <Description>"Standard Order 232 - Deliver to Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2184.02127121671) --X1
writeDouble('[VehicleCoordinates]+8F8', 2184.02127121671) --X2
writeDouble('[VehicleCoordinates]+D0', 1189.45777916304) --Y1
writeDouble('[VehicleCoordinates]+900', 1189.45777916304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 177.263346793139) -- Z1
writeDouble('[VehicleCoordinates]+908', 177.263346793139) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132034</ID>
                                      <Description>"Standard Order 233, 234 - Deliver to Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1226.47027420112) --X1
writeDouble('[VehicleCoordinates]+8F8', 1226.47027420112) --X2
writeDouble('[VehicleCoordinates]+D0', 1307.98022460938) --Y1
writeDouble('[VehicleCoordinates]+900', 1307.98022460938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 183.580974329453) -- Z1
writeDouble('[VehicleCoordinates]+908', 183.580974329453) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132035</ID>
                                      <Description>"Standard Order 235 -  Pick up 1/6 &amp; 4/6 items at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1453.71704101563) --X1
writeDouble('[VehicleCoordinates]+8F8', 1453.71704101563) --X2
writeDouble('[VehicleCoordinates]+D0', 212.112176940245) --Y1
writeDouble('[VehicleCoordinates]+900', 212.112176940245) -- Y2
writeDouble('[VehicleCoordinates]+D8', 133.719818115234) -- Z1
writeDouble('[VehicleCoordinates]+908', 133.719818115234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132036</ID>
                                          <Description>"Standard Order 235 -  Pick up 2/6 &amp; 3/6 items at MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1418.0397287627) --X1
writeDouble('[VehicleCoordinates]+8F8', 1418.0397287627) --X2
writeDouble('[VehicleCoordinates]+D0', 29.8784554046374) --Y1
writeDouble('[VehicleCoordinates]+900', 29.8784554046374) -- Y2
writeDouble('[VehicleCoordinates]+D8', 128.727154180244) -- Z1
writeDouble('[VehicleCoordinates]+908', 128.727154180244) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132037</ID>
                                          <Description>"Standard Order 235 -  Pick up 5/6 &amp; 6/6 items at MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1329.70216027083) --X1
writeDouble('[VehicleCoordinates]+8F8', 1329.70216027083) --X2
writeDouble('[VehicleCoordinates]+D0', -99.677134081765) --Y1
writeDouble('[VehicleCoordinates]+900', -99.677134081765) -- Y2
writeDouble('[VehicleCoordinates]+D8', 133.769827856341) -- Z1
writeDouble('[VehicleCoordinates]+908', 133.769827856341) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132038</ID>
                                      <Description>"Standard Order 236 - pick up 1/5, 3/5, 5/5 items in the hole"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',958.29585021564) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',958.29585021564) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-344.1984418655) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-344.1984418655) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',124.30037030346) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',124.30037030346) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132039</ID>
                                          <Description>"Standard Order 236 - pick up 2/5 item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1024.9230985239) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1024.9230985239) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-279.1773761947) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-279.1773761947) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',128.92820413863) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',128.92820413863) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132040</ID>
                                          <Description>"Standard Order 236 - pick up 4/5 item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',996.49557442751) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',996.49557442751) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-306.09789986696) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-306.09789986696) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',122.58292092403) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',122.58292092403) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132041</ID>
                                      <Description>"Standard Order 237 - Pick up item - 10/110kg"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1196.1630371895) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1196.1630371895) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-656.0759033604) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-656.0759033604) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',140.98315813245) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',140.98315813245) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132042</ID>
                                          <Description>"Standard Order 237 - Pick up item - 10/110kg"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1280.5443115234) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1280.5443115234) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-750.63696289063) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-750.63696289063) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',141.24099114128) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',141.24099114128) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132043</ID>
                                          <Description>"Standard Order 237 - Pick up item - 10/110kg"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1240.4854736328) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1240.4854736328) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-609.84149169922) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-609.84149169922) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',136.90911541924) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',136.90911541924) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132044</ID>
                                          <Description>"Standard Order 237 - Pick up item - 10/110kg"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1205.4151138713) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1205.4151138713) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-625.61503749585) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-625.61503749585) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',139.63539247158) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',139.63539247158) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132045</ID>
                                          <Description>"Standard Order 237 - Pick up item - 20/110kg"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1247.3529571525) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1247.3529571525) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-668.8130471562) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-668.8130471562) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',141.68599751819) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',141.68599751819) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132046</ID>
                                          <Description>"Standard Order 237 - Pick up item - 20/110kg"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1221.5205154885) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1221.5205154885) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-667.15997436718) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-667.15997436718) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',145.02259149903) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',145.02259149903) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132047</ID>
                                          <Description>"Standard Order 237 - Pick up item - 30/110kg"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1180.2353507674) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1180.2353507674) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-591.17808547624) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-591.17808547624) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',139.80634240771) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',139.80634240771) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132048</ID>
                                      <Description>"Standard Order 238, 239, 240 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2140.7678905886) --X1
writeDouble('[VehicleCoordinates]+8F8', 2140.7678905886) --X2
writeDouble('[VehicleCoordinates]+D0', -891.205335171187) --Y1
writeDouble('[VehicleCoordinates]+900', -891.205335171187) -- Y2
writeDouble('[VehicleCoordinates]+D8', 149.236557576236) -- Z1
writeDouble('[VehicleCoordinates]+908', 149.236557576236) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132049</ID>
                                          <Description>"Standard Order 241 - Can't be done via vehicle"</Description>
                                          <GroupHeader>1</GroupHeader>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132050</ID>
                                      <Description>"Standard Order 242 - Deliver to Photographer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2159.29223628451) --X1
writeDouble('[VehicleCoordinates]+8F8', -2159.29223628451) --X2
writeDouble('[VehicleCoordinates]+D0', 606.801757861564) --Y1
writeDouble('[VehicleCoordinates]+900', 606.801757861564) -- Y2
writeDouble('[VehicleCoordinates]+D8', 264.913360571171) -- Z1
writeDouble('[VehicleCoordinates]+908', 264.913360571171) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132051</ID>
                                      <Description>"Standard Order 243 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -325.113752107106) --X1
writeDouble('[VehicleCoordinates]+8F8', -325.113752107106) --X2
writeDouble('[VehicleCoordinates]+D0', 983.230529372708) --Y1
writeDouble('[VehicleCoordinates]+900', 983.230529372708) -- Y2
writeDouble('[VehicleCoordinates]+D8', 735.897462587294) -- Z1
writeDouble('[VehicleCoordinates]+908', 735.897462587294) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132052</ID>
                                      <Description>"Standard Order 244 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1997.68957519531) --X1
writeDouble('[VehicleCoordinates]+8F8', 1997.68957519531) --X2
writeDouble('[VehicleCoordinates]+D0', -15.4660186767578) --Y1
writeDouble('[VehicleCoordinates]+900', -15.4660186767578) -- Y2
writeDouble('[VehicleCoordinates]+D8', 151.910415649414) -- Z1
writeDouble('[VehicleCoordinates]+908', 151.910415649414) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132053</ID>
                                      <Description>"Standard Order 245 - Deliver to Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 738.7852565107) --X1
writeDouble('[VehicleCoordinates]+8F8', 738.7852565107) --X2
writeDouble('[VehicleCoordinates]+D0', -641.454963174569) --Y1
writeDouble('[VehicleCoordinates]+900', -641.454963174569) -- Y2
writeDouble('[VehicleCoordinates]+D8', 111.161303309287) -- Z1
writeDouble('[VehicleCoordinates]+908', 111.161303309287) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132054</ID>
                                      <Description>"Standard Order 246 - Deliver to Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1151.38770162807) --X1
writeDouble('[VehicleCoordinates]+8F8', 1151.38770162807) --X2
writeDouble('[VehicleCoordinates]+D0', 29.2159338650015) --Y1
writeDouble('[VehicleCoordinates]+900', 29.2159338650015) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.269395761401) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.269395761401) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132055</ID>
                                      <Description>"Standard Order 247 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132056</ID>
                                      <Description>"Standard Order 248, 249, 250 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132057</ID>
                                      <Description>"Standard Order 251, 252 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132058</ID>
                                      <Description>"Standard Order 253, 254 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133086</ID>
                                      <Description>"Standard Order 609 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132059</ID>
                                  <Description>"From Chiral Artist's Studio"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132060</ID>
                                      <Description>"Teleport to: Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2140.7678905886) --X1
writeDouble('[VehicleCoordinates]+8F8', 2140.7678905886) --X2
writeDouble('[VehicleCoordinates]+D0', -891.205335171187) --Y1
writeDouble('[VehicleCoordinates]+900', -891.205335171187) -- Y2
writeDouble('[VehicleCoordinates]+D8', 149.236557576236) -- Z1
writeDouble('[VehicleCoordinates]+908', 149.236557576236) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132061</ID>
                                      <Description>"Standard Order 255, 256, 257 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1607.94860839844) --X1
writeDouble('[VehicleCoordinates]+8F8', 1607.94860839844) --X2
writeDouble('[VehicleCoordinates]+D0', -274.140829576729) --Y1
writeDouble('[VehicleCoordinates]+900', -274.140829576729) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.984857813475) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.984857813475) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132062</ID>
                                      <Description>"Standard Order 258 - item 1/6"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1437.9321402952) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1437.9321402952) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-849.57819742411) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-849.57819742411) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',126.99237641022) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',126.99237641022) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132063</ID>
                                          <Description>"Standard Order 258 - item 4/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1453.1640257201) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1453.1640257201) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-861.52930775017) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-861.52930775017) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',127.77757157786) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',127.77757157786) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132064</ID>
                                          <Description>"Standard Order 258 - item 2/6 &amp; 5/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1478.8576395473) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1478.8576395473) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-910.5815253232) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-910.5815253232) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',128.14613801531) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',128.14613801531) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132065</ID>
                                          <Description>"Standard Order 258 - item 3/6 &amp; 6/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1490.5404031112) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1490.5404031112) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-958.72961966339) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-958.72961966339) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',127.23222074637) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',127.23222074637) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132066</ID>
                                      <Description>"Standard Order 259 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -325.113752107106) --X1
writeDouble('[VehicleCoordinates]+8F8', -325.113752107106) --X2
writeDouble('[VehicleCoordinates]+D0', 983.230529372708) --Y1
writeDouble('[VehicleCoordinates]+900', 983.230529372708) -- Y2
writeDouble('[VehicleCoordinates]+D8', 735.897462587294) -- Z1
writeDouble('[VehicleCoordinates]+908', 735.897462587294) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132067</ID>
                                      <Description>"Standard Order 260 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -402.304512128479) --X1
writeDouble('[VehicleCoordinates]+8F8', -402.304512128479) --X2
writeDouble('[VehicleCoordinates]+D0', -1165.69761503304) --Y1
writeDouble('[VehicleCoordinates]+900', -1165.69761503304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 247.350454353234) -- Z1
writeDouble('[VehicleCoordinates]+908', 247.350454353234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132068</ID>
                                      <Description>"Standard Order 261 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1831.26241262823) --X1
writeDouble('[VehicleCoordinates]+8F8', -1831.26241262823) --X2
writeDouble('[VehicleCoordinates]+D0', -712.536589082141) --Y1
writeDouble('[VehicleCoordinates]+900', -712.536589082141) -- Y2
writeDouble('[VehicleCoordinates]+D8', 465.668199942371) -- Z1
writeDouble('[VehicleCoordinates]+908', 465.668199942371) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132069</ID>
                                      <Description>"Standard Order 262 - Deliver to Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 738.7852565107) --X1
writeDouble('[VehicleCoordinates]+8F8', 738.7852565107) --X2
writeDouble('[VehicleCoordinates]+D0', -641.454963174569) --Y1
writeDouble('[VehicleCoordinates]+900', -641.454963174569) -- Y2
writeDouble('[VehicleCoordinates]+D8', 111.161303309287) -- Z1
writeDouble('[VehicleCoordinates]+908', 111.161303309287) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132070</ID>
                                      <Description>"Standard Order 263, 264 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132071</ID>
                                      <Description>"Standard Order 265 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132072</ID>
                                      <Description>"Standard Order 266 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1221.86779785156) --X1
writeDouble('[VehicleCoordinates]+8F8', -1221.86779785156) --X2
writeDouble('[VehicleCoordinates]+D0', -229.087647924799) --Y1
writeDouble('[VehicleCoordinates]+900', -229.087647924799) -- Y2
writeDouble('[VehicleCoordinates]+D8', 531.693955322326) -- Z1
writeDouble('[VehicleCoordinates]+908', 531.693955322326) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133089</ID>
                                      <Description>"Standard Order 610 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 115.351102065019) --X1
writeDouble('[VehicleCoordinates]+8F8', 115.351102065019) --X2
writeDouble('[VehicleCoordinates]+D0', -1629.64987632092) --Y1
writeDouble('[VehicleCoordinates]+900', -1629.64987632092) -- Y2
writeDouble('[VehicleCoordinates]+D8', 108.919290458693) -- Z1
writeDouble('[VehicleCoordinates]+908', 108.919290458693) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133090</ID>
                                      <Description>"Standard Order 611 - Deliver to Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1151.38770162807) --X1
writeDouble('[VehicleCoordinates]+8F8', 1151.38770162807) --X2
writeDouble('[VehicleCoordinates]+D0', 29.2159338650015) --Y1
writeDouble('[VehicleCoordinates]+900', 29.2159338650015) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.269395761401) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.269395761401) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132073</ID>
                                  <Description>"From Waystation North of Mountain Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132074</ID>
                                      <Description>"Teleport to: Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 170.875869750977) --X1
writeDouble('[VehicleCoordinates]+8F8', 170.875869750977) --X2
writeDouble('[VehicleCoordinates]+D0', 1647.17614746094) --Y1
writeDouble('[VehicleCoordinates]+900', 1647.17614746094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 260.368743896484) -- Z1
writeDouble('[VehicleCoordinates]+908', 260.368743896484) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132075</ID>
                                      <Description>"Standard Order 267, 268 - Deliver to Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1226.47027420112) --X1
writeDouble('[VehicleCoordinates]+8F8', 1226.47027420112) --X2
writeDouble('[VehicleCoordinates]+D0', 1307.98022460938) --Y1
writeDouble('[VehicleCoordinates]+900', 1307.98022460938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 183.580974329453) -- Z1
writeDouble('[VehicleCoordinates]+908', 183.580974329453) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132076</ID>
                                      <Description>"Standard Order 269 - Pick up 1.2/4.8kg of item"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-106.57125367397) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-106.57125367397) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1730.0203414074) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1730.0203414074) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',322.44619194296) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',322.44619194296) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132077</ID>
                                          <Description>"Standard Order 269 - Pick up 1.2/4.8kg of item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-110.49656060829) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-110.49656060829) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1700.4948383556) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1700.4948383556) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',330.28547692626) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',330.28547692626) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132078</ID>
                                          <Description>"Standard Order 269 - Pick up 1.2/4.8kg of item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-134.73580079686) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-134.73580079686) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1659.2966488947) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1659.2966488947) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',348.11319021941) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',348.11319021941) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132079</ID>
                                          <Description>"Standard Order 269 - Pick up 1.2/4.8kg of item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-174.32967754949) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-174.32967754949) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1706.1379804537) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1706.1379804537) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',349.85135555345) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',349.85135555345) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132080</ID>
                                      <Description>"Standard Order 270, 271 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -939.111646158212) --X1
writeDouble('[VehicleCoordinates]+8F8', -939.111646158212) --X2
writeDouble('[VehicleCoordinates]+D0', 1058.93283134418) --Y1
writeDouble('[VehicleCoordinates]+900', 1058.93283134418) -- Y2
writeDouble('[VehicleCoordinates]+D8', 596.160614547307) -- Z1
writeDouble('[VehicleCoordinates]+908', 596.160614547307) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132081</ID>
                                      <Description>"Standard Order 272, 273 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -325.113752107106) --X1
writeDouble('[VehicleCoordinates]+8F8', -325.113752107106) --X2
writeDouble('[VehicleCoordinates]+D0', 983.230529372708) --Y1
writeDouble('[VehicleCoordinates]+900', 983.230529372708) -- Y2
writeDouble('[VehicleCoordinates]+D8', 735.897462587294) -- Z1
writeDouble('[VehicleCoordinates]+908', 735.897462587294) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132082</ID>
                                      <Description>"Standard Order 274, 275 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132083</ID>
                                      <Description>"Standard Order 276, 277 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132084</ID>
                                      <Description>"Standard Order 278 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132085</ID>
                                      <Description>"Standard Order 279 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132086</ID>
                                      <Description>"Standard Order 280, 281, 282 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132087</ID>
                                      <Description>"Standard Order 283 - Pick up 1/4 &amp; 2/4 items at MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -762.880743824688) --X1
writeDouble('[VehicleCoordinates]+8F8', -762.880743824688) --X2
writeDouble('[VehicleCoordinates]+D0', 1811.14760256781) --Y1
writeDouble('[VehicleCoordinates]+900', 1811.14760256781) -- Y2
writeDouble('[VehicleCoordinates]+D8', 223.408607687459) -- Z1
writeDouble('[VehicleCoordinates]+908', 223.408607687459) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132088</ID>
                                          <Description>"Standard Order 283 - Pick up 3/4 &amp; 4/4 items at MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -852.131401307823) --X1
writeDouble('[VehicleCoordinates]+8F8', -852.131401307823) --X2
writeDouble('[VehicleCoordinates]+D0', 1921.13070426408) --Y1
writeDouble('[VehicleCoordinates]+900', 1921.13070426408) -- Y2
writeDouble('[VehicleCoordinates]+D8', 223.012044045121) -- Z1
writeDouble('[VehicleCoordinates]+908', 223.012044045121) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132089</ID>
                                      <Description>"Standard Order 284 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133093</ID>
                                      <Description>"Standard Order 612 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132090</ID>
                                  <Description>"From Roboticist"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132091</ID>
                                      <Description>"Teleport to: Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -649.183700512192) --X1
writeDouble('[VehicleCoordinates]+8F8', -649.183700512192) --X2
writeDouble('[VehicleCoordinates]+D0', -136.553804305087) --Y1
writeDouble('[VehicleCoordinates]+900', -136.553804305087) -- Y2
writeDouble('[VehicleCoordinates]+D8', 535.161209155776) -- Z1
writeDouble('[VehicleCoordinates]+908', 535.161209155776) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132092</ID>
                                      <Description>"Standard Order 285, 286 - Deliver to Doctor"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1430.92370007196) --X1
writeDouble('[VehicleCoordinates]+8F8', -1430.92370007196) --X2
writeDouble('[VehicleCoordinates]+D0', 66.8332373271705) --Y1
writeDouble('[VehicleCoordinates]+900', 66.8332373271705) -- Y2
writeDouble('[VehicleCoordinates]+D8', 358.963532917869) -- Z1
writeDouble('[VehicleCoordinates]+908', 358.963532917869) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132093</ID>
                                      <Description>"Standard Order 297 - Deliver to Novelists's Son"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2429.98510742188) --X1
writeDouble('[VehicleCoordinates]+8F8', -2429.98510742188) --X2
writeDouble('[VehicleCoordinates]+D0', 1292.8735588775) --Y1
writeDouble('[VehicleCoordinates]+900', 1292.8735588775) -- Y2
writeDouble('[VehicleCoordinates]+D8', 249.609417378204) -- Z1
writeDouble('[VehicleCoordinates]+908', 249.609417378204) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132094</ID>
                                      <Description>"Standard Order 288, 289 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132095</ID>
                                      <Description>"Standard Order 290 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132096</ID>
                                      <Description>"Standard Order 291 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133101</ID>
                                      <Description>"Standard Order 613 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 170.875869750977) --X1
writeDouble('[VehicleCoordinates]+8F8', 170.875869750977) --X2
writeDouble('[VehicleCoordinates]+D0', 1647.17614746094) --Y1
writeDouble('[VehicleCoordinates]+900', 1647.17614746094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 260.368743896484) -- Z1
writeDouble('[VehicleCoordinates]+908', 260.368743896484) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133096</ID>
                                      <Description>"Standard Order 614 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -402.304512128479) --X1
writeDouble('[VehicleCoordinates]+8F8', -402.304512128479) --X2
writeDouble('[VehicleCoordinates]+D0', -1165.69761503304) --Y1
writeDouble('[VehicleCoordinates]+900', -1165.69761503304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 247.350454353234) -- Z1
writeDouble('[VehicleCoordinates]+908', 247.350454353234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133056</ID>
                                      <Description>"Standard Order 615 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133098</ID>
                                      <Description>"Standard Order 616 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132097</ID>
                                  <Description>"From Mountaineer"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132098</ID>
                                      <Description>"Teleport to: Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -939.111646158212) --X1
writeDouble('[VehicleCoordinates]+8F8', -939.111646158212) --X2
writeDouble('[VehicleCoordinates]+D0', 1058.93283134418) --Y1
writeDouble('[VehicleCoordinates]+900', 1058.93283134418) -- Y2
writeDouble('[VehicleCoordinates]+D8', 596.160614547307) -- Z1
writeDouble('[VehicleCoordinates]+908', 596.160614547307) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132099</ID>
                                      <Description>"Standard Order 292 - Deliver to Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2184.02127121671) --X1
writeDouble('[VehicleCoordinates]+8F8', 2184.02127121671) --X2
writeDouble('[VehicleCoordinates]+D0', 1189.45777916304) --Y1
writeDouble('[VehicleCoordinates]+900', 1189.45777916304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 177.263346793139) -- Z1
writeDouble('[VehicleCoordinates]+908', 177.263346793139) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132100</ID>
                                      <Description>"Standard Order 293 - item 1/4 (up the hill)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1020.9779745338) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1020.9779745338) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',801.54884572831) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',801.54884572831) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',452.56333922045) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',452.56333922045) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132101</ID>
                                          <Description>"Standard Order 293 - item 2/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1155.0991570321) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1155.0991570321) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',766.86851044722) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',766.86851044722) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',423.16703076116) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',423.16703076116) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132102</ID>
                                          <Description>"Standard Order 293 - item 3/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1078.751738712) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1078.751738712) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',714.22802705212) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',714.22802705212) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',420.56455322169) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',420.56455322169) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132103</ID>
                                          <Description>"Standard Order 293 - item 4/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1085.8330106226) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1085.8330106226) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',761.29662383418) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',761.29662383418) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',429.16905965509) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',429.16905965509) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132104</ID>
                                      <Description>"Standard Order 294 - 2.5/50.5kg of item"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-847.37842134885) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-847.37842134885) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1379.042711089) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1379.042711089) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',513.79712083068) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',513.79712083068) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132105</ID>
                                          <Description>"Standard Order 294 - 16.0/50.5kg of item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-898.61132830308) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-898.61132830308) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1524.6029052734) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1524.6029052734) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',454.44966690505) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',454.44966690505) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132106</ID>
                                          <Description>"Standard Order 294 - 32.0/50.5kg of item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-874.58925656776) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-874.58925656776) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1467.8437384153) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1467.8437384153) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',472.547338556) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',472.547338556) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132107</ID>
                                      <Description>"Standard Order 295 - Pick up 2 items from Doctor private locker"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1430.92370007196) --X1
writeDouble('[VehicleCoordinates]+8F8', -1430.92370007196) --X2
writeDouble('[VehicleCoordinates]+D0', 66.8332373271705) --Y1
writeDouble('[VehicleCoordinates]+900', 66.8332373271705) -- Y2
writeDouble('[VehicleCoordinates]+D8', 358.963532917869) -- Z1
writeDouble('[VehicleCoordinates]+908', 358.963532917869) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132108</ID>
                                      <Description>"Standard Order 296 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -325.113752107106) --X1
writeDouble('[VehicleCoordinates]+8F8', -325.113752107106) --X2
writeDouble('[VehicleCoordinates]+D0', 983.230529372708) --Y1
writeDouble('[VehicleCoordinates]+900', 983.230529372708) -- Y2
writeDouble('[VehicleCoordinates]+D8', 735.897462587294) -- Z1
writeDouble('[VehicleCoordinates]+908', 735.897462587294) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132109</ID>
                                      <Description>"Standard Order 297 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132110</ID>
                                      <Description>"Standard Order 298 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133103</ID>
                                      <Description>"Standard Order 617 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 170.875869750977) --X1
writeDouble('[VehicleCoordinates]+8F8', 170.875869750977) --X2
writeDouble('[VehicleCoordinates]+D0', 1647.17614746094) --Y1
writeDouble('[VehicleCoordinates]+900', 1647.17614746094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 260.368743896484) -- Z1
writeDouble('[VehicleCoordinates]+908', 260.368743896484) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133104</ID>
                                      <Description>"Standard Order 618 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -402.304512128479) --X1
writeDouble('[VehicleCoordinates]+8F8', -402.304512128479) --X2
writeDouble('[VehicleCoordinates]+D0', -1165.69761503304) --Y1
writeDouble('[VehicleCoordinates]+900', -1165.69761503304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 247.350454353234) -- Z1
writeDouble('[VehicleCoordinates]+908', 247.350454353234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133097</ID>
                                      <Description>"Standard Order 619 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132111</ID>
                                  <Description>"From Photographer"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132112</ID>
                                      <Description>"Teleport to: Photographer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2159.29223628451) --X1
writeDouble('[VehicleCoordinates]+8F8', -2159.29223628451) --X2
writeDouble('[VehicleCoordinates]+D0', 606.801757861564) --Y1
writeDouble('[VehicleCoordinates]+900', 606.801757861564) -- Y2
writeDouble('[VehicleCoordinates]+D8', 264.913360571171) -- Z1
writeDouble('[VehicleCoordinates]+908', 264.913360571171) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132113</ID>
                                      <Description>"Standard Order 299 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1607.94860839844) --X1
writeDouble('[VehicleCoordinates]+8F8', 1607.94860839844) --X2
writeDouble('[VehicleCoordinates]+D0', -274.140829576729) --Y1
writeDouble('[VehicleCoordinates]+900', -274.140829576729) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.984857813475) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.984857813475) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132114</ID>
                                      <Description>"Standard Order 300 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 170.875869750977) --X1
writeDouble('[VehicleCoordinates]+8F8', 170.875869750977) --X2
writeDouble('[VehicleCoordinates]+D0', 1647.17614746094) --Y1
writeDouble('[VehicleCoordinates]+900', 1647.17614746094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 260.368743896484) -- Z1
writeDouble('[VehicleCoordinates]+908', 260.368743896484) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132115</ID>
                                      <Description>"Standard Order 301 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -939.111646158212) --X1
writeDouble('[VehicleCoordinates]+8F8', -939.111646158212) --X2
writeDouble('[VehicleCoordinates]+D0', 1058.93283134418) --Y1
writeDouble('[VehicleCoordinates]+900', 1058.93283134418) -- Y2
writeDouble('[VehicleCoordinates]+D8', 596.160614547307) -- Z1
writeDouble('[VehicleCoordinates]+908', 596.160614547307) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132116</ID>
                                      <Description>"Standard Order 302 - pick up item 1/2"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-2363.0506020499) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-2363.0506020499) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',942.06192211871) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',942.06192211871) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',213.18114305809) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',213.18114305809) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132117</ID>
                                          <Description>"Standard Order 302 - pick up item 2/2 (floating down river)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-2363.0506020499) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-2363.0506020499) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',942.06192211871) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',942.06192211871) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',213.18114305809) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',213.18114305809) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132118</ID>
                                      <Description>"Standard Order 303 - Pick up item 30.0/90.0 &amp; 15.0/90.0 from MULES Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1549.63763756896) --X1
writeDouble('[VehicleCoordinates]+8F8', -1549.63763756896) --X2
writeDouble('[VehicleCoordinates]+D0', 1279.34696475638) --Y1
writeDouble('[VehicleCoordinates]+900', 1279.34696475638) -- Y2
writeDouble('[VehicleCoordinates]+D8', 240.661286312599) -- Z1
writeDouble('[VehicleCoordinates]+908', 240.661286312599) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132119</ID>
                                          <Description>"Standard Order 303 - Pick up item 30.0/90.0 &amp; 15.0/90.0 from MULES Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1698.36560058594) --X1
writeDouble('[VehicleCoordinates]+8F8', -1698.36560058594) --X2
writeDouble('[VehicleCoordinates]+D0', 1087.97488277915) --Y1
writeDouble('[VehicleCoordinates]+900', 1087.97488277915) -- Y2
writeDouble('[VehicleCoordinates]+D8', 219.390731680823) -- Z1
writeDouble('[VehicleCoordinates]+908', 219.390731680823) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132120</ID>
                                      <Description>"Standard Order 304 - pick up item 1/3"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1848.572265625) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1848.572265625) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',555.29579718184) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',555.29579718184) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',249.56055791295) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',249.56055791295) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132121</ID>
                                          <Description>"Standard Order 304 - pick up item 2/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1880.9894003657) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1880.9894003657) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',692.52956191218) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',692.52956191218) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',235.29332471947) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',235.29332471947) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132122</ID>
                                          <Description>"Standard Order 304 - pick up item 3/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1785.084732606) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1785.084732606) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',756.95251049835) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',756.95251049835) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',229.87956601978) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',229.87956601978) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132123</ID>
                                      <Description>"Standard Order 305 - pick up item 1/5"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-2554.8566894531) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-2554.8566894531) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',701.13177075962) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',701.13177075962) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',214.09094807906) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',214.09094807906) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132124</ID>
                                          <Description>"Standard Order 305 - pick up item 2/5"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-2550.5119703665) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-2550.5119703665) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',774.07172378449) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',774.07172378449) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',208.5499748704) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',208.5499748704) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132125</ID>
                                          <Description>"Standard Order 305 - pick up item 3/5 (floating down river)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-2452.7404280756) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-2452.7404280756) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',729.03378846501) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',729.03378846501) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',218.50450595428) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',218.50450595428) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132126</ID>
                                          <Description>"Standard Order 305 - pick up item 4/5"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-2449.8762344045) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-2449.8762344045) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',807.76465528819) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',807.76465528819) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',208.17579736513) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',208.17579736513) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132127</ID>
                                          <Description>"Standard Order 305 - pick up item 5/5"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-2583.8107988636) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-2583.8107988636) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',775.45929936081) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',775.45929936081) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',208.82917981845) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',208.82917981845) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132128</ID>
                                      <Description>"Standard Order 306 - Pick up item from MULES Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1549.63763756896) --X1
writeDouble('[VehicleCoordinates]+8F8', -1549.63763756896) --X2
writeDouble('[VehicleCoordinates]+D0', 1279.34696475638) --Y1
writeDouble('[VehicleCoordinates]+900', 1279.34696475638) -- Y2
writeDouble('[VehicleCoordinates]+D8', 240.661286312599) -- Z1
writeDouble('[VehicleCoordinates]+908', 240.661286312599) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132129</ID>
                                      <Description>"Standard Order 307 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1997.68957519531) --X1
writeDouble('[VehicleCoordinates]+8F8', 1997.68957519531) --X2
writeDouble('[VehicleCoordinates]+D0', -15.4660186767578) --Y1
writeDouble('[VehicleCoordinates]+900', -15.4660186767578) -- Y2
writeDouble('[VehicleCoordinates]+D8', 151.910415649414) -- Z1
writeDouble('[VehicleCoordinates]+908', 151.910415649414) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132130</ID>
                                      <Description>"Standard Order 308 - Deliver to Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 738.7852565107) --X1
writeDouble('[VehicleCoordinates]+8F8', 738.7852565107) --X2
writeDouble('[VehicleCoordinates]+D0', -641.454963174569) --Y1
writeDouble('[VehicleCoordinates]+900', -641.454963174569) -- Y2
writeDouble('[VehicleCoordinates]+D8', 111.161303309287) -- Z1
writeDouble('[VehicleCoordinates]+908', 111.161303309287) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132131</ID>
                                      <Description>"Standard Order 309 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132132</ID>
                                      <Description>"Standard Order 310, 311 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132133</ID>
                                  <Description>"From Spiritualist"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132134</ID>
                                      <Description>"Teleport to: Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -325.113752107106) --X1
writeDouble('[VehicleCoordinates]+8F8', -325.113752107106) --X2
writeDouble('[VehicleCoordinates]+D0', 983.230529372708) --Y1
writeDouble('[VehicleCoordinates]+900', 983.230529372708) -- Y2
writeDouble('[VehicleCoordinates]+D8', 735.897462587294) -- Z1
writeDouble('[VehicleCoordinates]+908', 735.897462587294) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132135</ID>
                                      <Description>"Standard Order 312 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2140.7678905886) --X1
writeDouble('[VehicleCoordinates]+8F8', 2140.7678905886) --X2
writeDouble('[VehicleCoordinates]+D0', -891.205335171187) --Y1
writeDouble('[VehicleCoordinates]+900', -891.205335171187) -- Y2
writeDouble('[VehicleCoordinates]+D8', 149.236557576236) -- Z1
writeDouble('[VehicleCoordinates]+908', 149.236557576236) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132136</ID>
                                      <Description>"Standard Order 313 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 170.875869750977) --X1
writeDouble('[VehicleCoordinates]+8F8', 170.875869750977) --X2
writeDouble('[VehicleCoordinates]+D0', 1647.17614746094) --Y1
writeDouble('[VehicleCoordinates]+900', 1647.17614746094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 260.368743896484) -- Z1
writeDouble('[VehicleCoordinates]+908', 260.368743896484) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132137</ID>
                                      <Description>"Standard Order 314 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -939.111646158212) --X1
writeDouble('[VehicleCoordinates]+8F8', -939.111646158212) --X2
writeDouble('[VehicleCoordinates]+D0', 1058.93283134418) --Y1
writeDouble('[VehicleCoordinates]+900', 1058.93283134418) -- Y2
writeDouble('[VehicleCoordinates]+D8', 596.160614547307) -- Z1
writeDouble('[VehicleCoordinates]+908', 596.160614547307) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132138</ID>
                                      <Description>"Standard Order 315 - item 1/3"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',363.29219637558) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',363.29219637558) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-557.45777600137) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-557.45777600137) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',182.6769389767) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',182.6769389767) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132139</ID>
                                          <Description>"Standard Order 315 - item 2/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',423.74906813702) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',423.74906813702) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-600.92645736403) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-600.92645736403) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',155.55702553523) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',155.55702553523) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132140</ID>
                                          <Description>"Standard Order 315 - item 3/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',348.55181884766) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',348.55181884766) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-596.10729980469) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-596.10729980469) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',174.07145690918) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',174.07145690918) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132141</ID>
                                      <Description>"Standard Order 316 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1997.68957519531) --X1
writeDouble('[VehicleCoordinates]+8F8', 1997.68957519531) --X2
writeDouble('[VehicleCoordinates]+D0', -15.4660186767578) --Y1
writeDouble('[VehicleCoordinates]+900', -15.4660186767578) -- Y2
writeDouble('[VehicleCoordinates]+D8', 151.910415649414) -- Z1
writeDouble('[VehicleCoordinates]+908', 151.910415649414) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132142</ID>
                                      <Description>"Standard Order 317, 318 - Deliver to Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 738.7852565107) --X1
writeDouble('[VehicleCoordinates]+8F8', 738.7852565107) --X2
writeDouble('[VehicleCoordinates]+D0', -641.454963174569) --Y1
writeDouble('[VehicleCoordinates]+900', -641.454963174569) -- Y2
writeDouble('[VehicleCoordinates]+D8', 111.161303309287) -- Z1
writeDouble('[VehicleCoordinates]+908', 111.161303309287) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132143</ID>
                                      <Description>"Standard Order 319 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132144</ID>
                                      <Description>"Standard Order 320 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132145</ID>
                                      <Description>"Standard Order 321 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133109</ID>
                                      <Description>"Standard Order 620 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -402.304512128479) --X1
writeDouble('[VehicleCoordinates]+8F8', -402.304512128479) --X2
writeDouble('[VehicleCoordinates]+D0', -1165.69761503304) --Y1
writeDouble('[VehicleCoordinates]+900', -1165.69761503304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 247.350454353234) -- Z1
writeDouble('[VehicleCoordinates]+908', 247.350454353234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132146</ID>
                                  <Description>"From Doctor"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132147</ID>
                                      <Description>"Teleport to: Doctor"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1430.92370007196) --X1
writeDouble('[VehicleCoordinates]+8F8', -1430.92370007196) --X2
writeDouble('[VehicleCoordinates]+D0', 66.8332373271705) --Y1
writeDouble('[VehicleCoordinates]+900', 66.8332373271705) -- Y2
writeDouble('[VehicleCoordinates]+D8', 358.963532917869) -- Z1
writeDouble('[VehicleCoordinates]+908', 358.963532917869) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132148</ID>
                                      <Description>"Standard Order 322 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -649.183700512192) --X1
writeDouble('[VehicleCoordinates]+8F8', -649.183700512192) --X2
writeDouble('[VehicleCoordinates]+D0', -136.553804305087) --Y1
writeDouble('[VehicleCoordinates]+900', -136.553804305087) -- Y2
writeDouble('[VehicleCoordinates]+D8', 535.161209155776) -- Z1
writeDouble('[VehicleCoordinates]+908', 535.161209155776) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132149</ID>
                                      <Description>"Standard Order 323, 324 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -939.111646158212) --X1
writeDouble('[VehicleCoordinates]+8F8', -939.111646158212) --X2
writeDouble('[VehicleCoordinates]+D0', 1058.93283134418) --Y1
writeDouble('[VehicleCoordinates]+900', 1058.93283134418) -- Y2
writeDouble('[VehicleCoordinates]+D8', 596.160614547307) -- Z1
writeDouble('[VehicleCoordinates]+908', 596.160614547307) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132150</ID>
                                      <Description>"Standard Order 325 - Grab 2 out of 3 items from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1549.63763756896) --X1
writeDouble('[VehicleCoordinates]+8F8', -1549.63763756896) --X2
writeDouble('[VehicleCoordinates]+D0', 1279.34696475638) --Y1
writeDouble('[VehicleCoordinates]+900', 1279.34696475638) -- Y2
writeDouble('[VehicleCoordinates]+D8', 240.661286312599) -- Z1
writeDouble('[VehicleCoordinates]+908', 240.661286312599) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132151</ID>
                                          <Description>"Standard Order 325 - Grab 1 out of 3 items from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1698.36560058594) --X1
writeDouble('[VehicleCoordinates]+8F8', -1698.36560058594) --X2
writeDouble('[VehicleCoordinates]+D0', 1087.97488277915) --Y1
writeDouble('[VehicleCoordinates]+900', 1087.97488277915) -- Y2
writeDouble('[VehicleCoordinates]+D8', 219.390731680823) -- Z1
writeDouble('[VehicleCoordinates]+908', 219.390731680823) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132152</ID>
                                      <Description>"Standard Order 326 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132153</ID>
                                      <Description>"Standard Order 327 - Deliver to Novelists's Son"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2429.98510742188) --X1
writeDouble('[VehicleCoordinates]+8F8', -2429.98510742188) --X2
writeDouble('[VehicleCoordinates]+D0', 1292.8735588775) --Y1
writeDouble('[VehicleCoordinates]+900', 1292.8735588775) -- Y2
writeDouble('[VehicleCoordinates]+D8', 249.609417378204) -- Z1
writeDouble('[VehicleCoordinates]+908', 249.609417378204) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132154</ID>
                                      <Description>"Standard Order 328 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132155</ID>
                                      <Description>"Standard Order 329, 330 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132156</ID>
                                      <Description>"Standard Order 331, 332 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132157</ID>
                                      <Description>"Standard Order 333 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1221.86779785156) --X1
writeDouble('[VehicleCoordinates]+8F8', -1221.86779785156) --X2
writeDouble('[VehicleCoordinates]+D0', -229.087647924799) --Y1
writeDouble('[VehicleCoordinates]+900', -229.087647924799) -- Y2
writeDouble('[VehicleCoordinates]+D8', 531.693955322326) -- Z1
writeDouble('[VehicleCoordinates]+908', 531.693955322326) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132158</ID>
                                  <Description>"From Geologist"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132159</ID>
                                      <Description>"Teleport to: Geologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -893.040383008573) --X1
writeDouble('[VehicleCoordinates]+8F8', -893.040383008573) --X2
writeDouble('[VehicleCoordinates]+D0', -783.167170839996) --Y1
writeDouble('[VehicleCoordinates]+900', -783.167170839996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 624.149068809963) -- Z1
writeDouble('[VehicleCoordinates]+908', 624.149068809963) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132160</ID>
                                      <Description>"Standard Order 334 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 115.351102065019) --X1
writeDouble('[VehicleCoordinates]+8F8', 115.351102065019) --X2
writeDouble('[VehicleCoordinates]+D0', -1629.64987632092) --Y1
writeDouble('[VehicleCoordinates]+900', -1629.64987632092) -- Y2
writeDouble('[VehicleCoordinates]+D8', 108.919290458693) -- Z1
writeDouble('[VehicleCoordinates]+908', 108.919290458693) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132161</ID>
                                      <Description>"Standard Order 335, 336 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -649.183700512192) --X1
writeDouble('[VehicleCoordinates]+8F8', -649.183700512192) --X2
writeDouble('[VehicleCoordinates]+D0', -136.553804305087) --Y1
writeDouble('[VehicleCoordinates]+900', -136.553804305087) -- Y2
writeDouble('[VehicleCoordinates]+D8', 535.161209155776) -- Z1
writeDouble('[VehicleCoordinates]+908', 535.161209155776) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132162</ID>
                                      <Description>"Standard Order 337 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1235.27709960938) --X1
writeDouble('[VehicleCoordinates]+8F8', -1235.27709960938) --X2
writeDouble('[VehicleCoordinates]+D0', -1252.37450712258) --Y1
writeDouble('[VehicleCoordinates]+900', -1252.37450712258) -- Y2
writeDouble('[VehicleCoordinates]+D8', 410.93840658829) -- Z1
writeDouble('[VehicleCoordinates]+908', 410.93840658829) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132163</ID>
                                      <Description>"Standard Order 338 - item 1/3"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-703.69049658092) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-703.69049658092) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1152.8899694933) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1152.8899694933) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',391.2554409163) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',391.2554409163) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132164</ID>
                                          <Description>"Standard Order 338 - item 2/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-702.52904551612) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-702.52904551612) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1193.5121592797) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1193.5121592797) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',366.21221731609) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',366.21221731609) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132165</ID>
                                          <Description>"Standard Order 338 - item 3/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-684.22084039416) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-684.22084039416) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1122.7587121028) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1122.7587121028) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',409.28503397667) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',409.28503397667) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132166</ID>
                                          <Description>"Standard Order 338 - Deliver to Paleontologist"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1235.27709960938) --X1
writeDouble('[VehicleCoordinates]+8F8', -1235.27709960938) --X2
writeDouble('[VehicleCoordinates]+D0', -1252.37450712258) --Y1
writeDouble('[VehicleCoordinates]+900', -1252.37450712258) -- Y2
writeDouble('[VehicleCoordinates]+D8', 410.93840658829) -- Z1
writeDouble('[VehicleCoordinates]+908', 410.93840658829) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132167</ID>
                                      <Description>"Standard Order 339 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -402.304512128479) --X1
writeDouble('[VehicleCoordinates]+8F8', -402.304512128479) --X2
writeDouble('[VehicleCoordinates]+D0', -1165.69761503304) --Y1
writeDouble('[VehicleCoordinates]+900', -1165.69761503304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 247.350454353234) -- Z1
writeDouble('[VehicleCoordinates]+908', 247.350454353234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132168</ID>
                                      <Description>"Standard Order 340, 341 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1831.26241262823) --X1
writeDouble('[VehicleCoordinates]+8F8', -1831.26241262823) --X2
writeDouble('[VehicleCoordinates]+D0', -712.536589082141) --Y1
writeDouble('[VehicleCoordinates]+900', -712.536589082141) -- Y2
writeDouble('[VehicleCoordinates]+D8', 465.668199942371) -- Z1
writeDouble('[VehicleCoordinates]+908', 465.668199942371) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132169</ID>
                                      <Description>"Standard Order 342 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132170</ID>
                                      <Description>"Standard Order 343 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132171</ID>
                                      <Description>"Standard Order 344 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1221.86779785156) --X1
writeDouble('[VehicleCoordinates]+8F8', -1221.86779785156) --X2
writeDouble('[VehicleCoordinates]+D0', -229.087647924799) --Y1
writeDouble('[VehicleCoordinates]+900', -229.087647924799) -- Y2
writeDouble('[VehicleCoordinates]+D8', 531.693955322326) -- Z1
writeDouble('[VehicleCoordinates]+908', 531.693955322326) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133111</ID>
                                      <Description>"Standard Order 621 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132172</ID>
                                  <Description>"From Paleontologist"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132173</ID>
                                      <Description>"Teleport to: Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1235.27709960938) --X1
writeDouble('[VehicleCoordinates]+8F8', -1235.27709960938) --X2
writeDouble('[VehicleCoordinates]+D0', -1252.37450712258) --Y1
writeDouble('[VehicleCoordinates]+900', -1252.37450712258) -- Y2
writeDouble('[VehicleCoordinates]+D8', 410.93840658829) -- Z1
writeDouble('[VehicleCoordinates]+908', 410.93840658829) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132174</ID>
                                      <Description>"Standard Order 345, 346 - Deliver to Geologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -893.040383008573) --X1
writeDouble('[VehicleCoordinates]+8F8', -893.040383008573) --X2
writeDouble('[VehicleCoordinates]+D0', -783.167170839996) --Y1
writeDouble('[VehicleCoordinates]+900', -783.167170839996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 624.149068809963) -- Z1
writeDouble('[VehicleCoordinates]+908', 624.149068809963) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132175</ID>
                                      <Description>"Standard Order 347 - Pick up item 1/2 from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1886.37829589844) --X1
writeDouble('[VehicleCoordinates]+8F8', -1886.37829589844) --X2
writeDouble('[VehicleCoordinates]+D0', -1422.99836564608) --Y1
writeDouble('[VehicleCoordinates]+900', -1422.99836564608) -- Y2
writeDouble('[VehicleCoordinates]+D8', 316.825536068178) -- Z1
writeDouble('[VehicleCoordinates]+908', 316.825536068178) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132176</ID>
                                          <Description>"Standard Order 347 - Pick up item 2/2 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2031.86502385937) --X1
writeDouble('[VehicleCoordinates]+8F8', -2031.86502385937) --X2
writeDouble('[VehicleCoordinates]+D0', -1494.35781756771) --Y1
writeDouble('[VehicleCoordinates]+900', -1494.35781756771) -- Y2
writeDouble('[VehicleCoordinates]+D8', 285.722850381182) -- Z1
writeDouble('[VehicleCoordinates]+908', 285.722850381182) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132177</ID>
                                      <Description>"Standard Order 348 - Pick up 5 items (need oxygen mask)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1367.2418212891) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1367.2418212891) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1339.6722412109) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1339.6722412109) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',338.92679330887) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',338.92679330887) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132178</ID>
                                      <Description>"Standard Order 349 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -402.304512128479) --X1
writeDouble('[VehicleCoordinates]+8F8', -402.304512128479) --X2
writeDouble('[VehicleCoordinates]+D0', -1165.69761503304) --Y1
writeDouble('[VehicleCoordinates]+900', -1165.69761503304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 247.350454353234) -- Z1
writeDouble('[VehicleCoordinates]+908', 247.350454353234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132179</ID>
                                      <Description>"Standard Order 350, 351 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1831.26241262823) --X1
writeDouble('[VehicleCoordinates]+8F8', -1831.26241262823) --X2
writeDouble('[VehicleCoordinates]+D0', -712.536589082141) --Y1
writeDouble('[VehicleCoordinates]+900', -712.536589082141) -- Y2
writeDouble('[VehicleCoordinates]+D8', 465.668199942371) -- Z1
writeDouble('[VehicleCoordinates]+908', 465.668199942371) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132180</ID>
                                      <Description>"Standard Order 352 - item 1/4"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-2013.1335006859) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-2013.1335006859) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-986.71009980704) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-986.71009980704) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',314.51487843827) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',314.51487843827) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132181</ID>
                                          <Description>"Standard Order 352 - item 2/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-2022.5320648579) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-2022.5320648579) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1059.9523925781) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1059.9523925781) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',322.07672385274) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',322.07672385274) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132182</ID>
                                          <Description>"Standard Order 352 - item 3/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1934.5028009983) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1934.5028009983) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1014.3208618164) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1014.3208618164) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',324.29585873074) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',324.29585873074) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132183</ID>
                                          <Description>"Standard Order 352 - item 4/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1992.5492597812) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1992.5492597812) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1043.9993589354) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1043.9993589354) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',318.7481039047) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',318.7481039047) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132184</ID>
                                          <Description>"Standard Order 352 - Deliver to Evo-devo Biologist"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1831.26241262823) --X1
writeDouble('[VehicleCoordinates]+8F8', -1831.26241262823) --X2
writeDouble('[VehicleCoordinates]+D0', -712.536589082141) --Y1
writeDouble('[VehicleCoordinates]+900', -712.536589082141) -- Y2
writeDouble('[VehicleCoordinates]+D8', 465.668199942371) -- Z1
writeDouble('[VehicleCoordinates]+908', 465.668199942371) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132185</ID>
                                      <Description>"Standard Order 353 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1997.68957519531) --X1
writeDouble('[VehicleCoordinates]+8F8', 1997.68957519531) --X2
writeDouble('[VehicleCoordinates]+D0', -15.4660186767578) --Y1
writeDouble('[VehicleCoordinates]+900', -15.4660186767578) -- Y2
writeDouble('[VehicleCoordinates]+D8', 151.910415649414) -- Z1
writeDouble('[VehicleCoordinates]+908', 151.910415649414) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132186</ID>
                                      <Description>"Standard Order 354 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132187</ID>
                                      <Description>"Standard Order 355 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132188</ID>
                                      <Description>"Standard Order 356, 357 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1221.86779785156) --X1
writeDouble('[VehicleCoordinates]+8F8', -1221.86779785156) --X2
writeDouble('[VehicleCoordinates]+D0', -229.087647924799) --Y1
writeDouble('[VehicleCoordinates]+900', -229.087647924799) -- Y2
writeDouble('[VehicleCoordinates]+D8', 531.693955322326) -- Z1
writeDouble('[VehicleCoordinates]+908', 531.693955322326) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132189</ID>
                                  <Description>"From Veteran Porter"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132190</ID>
                                      <Description>"Teleport to: Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -402.304512128479) --X1
writeDouble('[VehicleCoordinates]+8F8', -402.304512128479) --X2
writeDouble('[VehicleCoordinates]+D0', -1165.69761503304) --Y1
writeDouble('[VehicleCoordinates]+900', -1165.69761503304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 247.350454353234) -- Z1
writeDouble('[VehicleCoordinates]+908', 247.350454353234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132191</ID>
                                      <Description>"Standard Order 358, 359 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 115.351102065019) --X1
writeDouble('[VehicleCoordinates]+8F8', 115.351102065019) --X2
writeDouble('[VehicleCoordinates]+D0', -1629.64987632092) --Y1
writeDouble('[VehicleCoordinates]+900', -1629.64987632092) -- Y2
writeDouble('[VehicleCoordinates]+D8', 108.919290458693) -- Z1
writeDouble('[VehicleCoordinates]+908', 108.919290458693) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132192</ID>
                                      <Description>"Standard Order 360, 361 - Deliver to Geologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -893.040383008573) --X1
writeDouble('[VehicleCoordinates]+8F8', -893.040383008573) --X2
writeDouble('[VehicleCoordinates]+D0', -783.167170839996) --Y1
writeDouble('[VehicleCoordinates]+900', -783.167170839996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 624.149068809963) -- Z1
writeDouble('[VehicleCoordinates]+908', 624.149068809963) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132193</ID>
                                      <Description>"Standard Order 362 - Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1235.27709960938) --X1
writeDouble('[VehicleCoordinates]+8F8', -1235.27709960938) --X2
writeDouble('[VehicleCoordinates]+D0', -1252.37450712258) --Y1
writeDouble('[VehicleCoordinates]+900', -1252.37450712258) -- Y2
writeDouble('[VehicleCoordinates]+D8', 410.93840658829) -- Z1
writeDouble('[VehicleCoordinates]+908', 410.93840658829) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132194</ID>
                                      <Description>"Standard Order 363 - Pick up item 1/4"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',11.854673866904) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',11.854673866904) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-924.94092122136) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-924.94092122136) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',128.53994263086) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',128.53994263086) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132195</ID>
                                          <Description>"Standard Order 363 - Pick up item 2/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',37.278104784601) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',37.278104784601) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-972.22440127135) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-972.22440127135) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',126.6594808175) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',126.6594808175) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132196</ID>
                                          <Description>"Standard Order 363 - Pick up item 3/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',39.263241389672) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',39.263241389672) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1007.2879536069) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1007.2879536069) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',124.44816751317) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',124.44816751317) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132197</ID>
                                          <Description>"Standard Order 363 - Pick up item 4/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-39.205049653292) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-39.205049653292) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-883.49269767776) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-883.49269767776) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',139.55341548387) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',139.55341548387) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132198</ID>
                                      <Description>"Standard Order 364 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1831.26241262823) --X1
writeDouble('[VehicleCoordinates]+8F8', -1831.26241262823) --X2
writeDouble('[VehicleCoordinates]+D0', -712.536589082141) --Y1
writeDouble('[VehicleCoordinates]+900', -712.536589082141) -- Y2
writeDouble('[VehicleCoordinates]+D8', 465.668199942371) -- Z1
writeDouble('[VehicleCoordinates]+908', 465.668199942371) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132199</ID>
                                      <Description>"Standard Order 365 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133113</ID>
                                      <Description>"Standard Order 622 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -939.111646158212) --X1
writeDouble('[VehicleCoordinates]+8F8', -939.111646158212) --X2
writeDouble('[VehicleCoordinates]+D0', 1058.93283134418) --Y1
writeDouble('[VehicleCoordinates]+900', 1058.93283134418) -- Y2
writeDouble('[VehicleCoordinates]+D8', 596.160614547307) -- Z1
writeDouble('[VehicleCoordinates]+908', 596.160614547307) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133114</ID>
                                      <Description>"Standard Order 623 - Pick up item 1/3 from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 286.290642498279) --X1
writeDouble('[VehicleCoordinates]+8F8', 286.290642498279) --X2
writeDouble('[VehicleCoordinates]+D0', -1225.44865830959) --Y1
writeDouble('[VehicleCoordinates]+900', -1225.44865830959) -- Y2
writeDouble('[VehicleCoordinates]+D8', 103.500809471737) -- Z1
writeDouble('[VehicleCoordinates]+908', 103.500809471737) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>133116</ID>
                                          <Description>"Standard Order 623 - Pick up item 2/3 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 212.90758372087) --X1
writeDouble('[VehicleCoordinates]+8F8', 212.90758372087) --X2
writeDouble('[VehicleCoordinates]+D0', -1322.76818123451) --Y1
writeDouble('[VehicleCoordinates]+900', -1322.76818123451) -- Y2
writeDouble('[VehicleCoordinates]+D8', 110.773302238177) -- Z1
writeDouble('[VehicleCoordinates]+908', 110.773302238177) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>133118</ID>
                                          <Description>"Standard Order 623 - Pick up item 3/3 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -45.4810066223145) --X1
writeDouble('[VehicleCoordinates]+8F8', -45.4810066223145) --X2
writeDouble('[VehicleCoordinates]+D0', -1266.28552246094) --Y1
writeDouble('[VehicleCoordinates]+900', -1266.28552246094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 116.924080021855) -- Z1
writeDouble('[VehicleCoordinates]+908', 116.924080021855) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133120</ID>
                                      <Description>"Standard Order 624 - Pick up 3 items from Geologist private locker"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -893.040383008573) --X1
writeDouble('[VehicleCoordinates]+8F8', -893.040383008573) --X2
writeDouble('[VehicleCoordinates]+D0', -783.167170839996) --Y1
writeDouble('[VehicleCoordinates]+900', -783.167170839996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 624.149068809963) -- Z1
writeDouble('[VehicleCoordinates]+908', 624.149068809963) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133123</ID>
                                      <Description>"Standard Order 625 - Pick up 3 items from Mountain Knot City private locker"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133135</ID>
                                      <Description>"Standard Order 626 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132200</ID>
                                  <Description>"From Evo-Devo Biologist"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132201</ID>
                                      <Description>"Teleport to: Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1831.26241262823) --X1
writeDouble('[VehicleCoordinates]+8F8', -1831.26241262823) --X2
writeDouble('[VehicleCoordinates]+D0', -712.536589082141) --Y1
writeDouble('[VehicleCoordinates]+900', -712.536589082141) -- Y2
writeDouble('[VehicleCoordinates]+D8', 465.668199942371) -- Z1
writeDouble('[VehicleCoordinates]+908', 465.668199942371) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132202</ID>
                                      <Description>"Standard Order 366 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 115.351102065019) --X1
writeDouble('[VehicleCoordinates]+8F8', 115.351102065019) --X2
writeDouble('[VehicleCoordinates]+D0', -1629.64987632092) --Y1
writeDouble('[VehicleCoordinates]+900', -1629.64987632092) -- Y2
writeDouble('[VehicleCoordinates]+D8', 108.919290458693) -- Z1
writeDouble('[VehicleCoordinates]+908', 108.919290458693) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132203</ID>
                                      <Description>"Standard Order 367 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -649.183700512192) --X1
writeDouble('[VehicleCoordinates]+8F8', -649.183700512192) --X2
writeDouble('[VehicleCoordinates]+D0', -136.553804305087) --Y1
writeDouble('[VehicleCoordinates]+900', -136.553804305087) -- Y2
writeDouble('[VehicleCoordinates]+D8', 535.161209155776) -- Z1
writeDouble('[VehicleCoordinates]+908', 535.161209155776) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132204</ID>
                                      <Description>"Standard Order 368 - Deliver to Geologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -893.040383008573) --X1
writeDouble('[VehicleCoordinates]+8F8', -893.040383008573) --X2
writeDouble('[VehicleCoordinates]+D0', -783.167170839996) --Y1
writeDouble('[VehicleCoordinates]+900', -783.167170839996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 624.149068809963) -- Z1
writeDouble('[VehicleCoordinates]+908', 624.149068809963) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132205</ID>
                                      <Description>"Standard Order 369, 370 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1235.27709960938) --X1
writeDouble('[VehicleCoordinates]+8F8', -1235.27709960938) --X2
writeDouble('[VehicleCoordinates]+D0', -1252.37450712258) --Y1
writeDouble('[VehicleCoordinates]+900', -1252.37450712258) -- Y2
writeDouble('[VehicleCoordinates]+D8', 410.93840658829) -- Z1
writeDouble('[VehicleCoordinates]+908', 410.93840658829) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132206</ID>
                                      <Description>"Standard Order 371 - Pick up 1 out of 2 items from MULES Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1970.29462433288) --X1
writeDouble('[VehicleCoordinates]+8F8', -1970.29462433288) --X2
writeDouble('[VehicleCoordinates]+D0', -1226.92988345318) --Y1
writeDouble('[VehicleCoordinates]+900', -1226.92988345318) -- Y2
writeDouble('[VehicleCoordinates]+D8', 317.755384444125) -- Z1
writeDouble('[VehicleCoordinates]+908', 317.755384444125) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132207</ID>
                                          <Description>"Standard Order 371 - Pick up 1 out of 2 items from MULES Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1886.37829589844) --X1
writeDouble('[VehicleCoordinates]+8F8', -1886.37829589844) --X2
writeDouble('[VehicleCoordinates]+D0', -1422.99836564608) --Y1
writeDouble('[VehicleCoordinates]+900', -1422.99836564608) -- Y2
writeDouble('[VehicleCoordinates]+D8', 316.825536068178) -- Z1
writeDouble('[VehicleCoordinates]+908', 316.825536068178) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132208</ID>
                                      <Description>"Standard Order 372 - Pick up 1/3 &amp; 2/3 item (requires oxygen mask)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1367.9691180718) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1367.9691180718) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1339.9783935547) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1339.9783935547) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',338.89294526638) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',338.89294526638) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132209</ID>
                                          <Description>"Standard Order 372 - Pick up 3/3 item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1398.1967773438) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1398.1967773438) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1367.8083534591) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1367.8083534591) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',359.53475855905) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',359.53475855905) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132210</ID>
                                      <Description>"Standard Order 373 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1997.68957519531) --X1
writeDouble('[VehicleCoordinates]+8F8', 1997.68957519531) --X2
writeDouble('[VehicleCoordinates]+D0', -15.4660186767578) --Y1
writeDouble('[VehicleCoordinates]+900', -15.4660186767578) -- Y2
writeDouble('[VehicleCoordinates]+D8', 151.910415649414) -- Z1
writeDouble('[VehicleCoordinates]+908', 151.910415649414) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132211</ID>
                                      <Description>"Standard Order 374 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132212</ID>
                                      <Description>"Standard Order 375 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132213</ID>
                                      <Description>"Standard Order 376 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1221.86779785156) --X1
writeDouble('[VehicleCoordinates]+8F8', -1221.86779785156) --X2
writeDouble('[VehicleCoordinates]+D0', -229.087647924799) --Y1
writeDouble('[VehicleCoordinates]+900', -229.087647924799) -- Y2
writeDouble('[VehicleCoordinates]+D8', 531.693955322326) -- Z1
writeDouble('[VehicleCoordinates]+908', 531.693955322326) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133125</ID>
                                      <Description>"Standard Order 627 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132214</ID>
                                  <Description>"From Film Director"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132215</ID>
                                      <Description>"Teleport to: Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1997.68957519531) --X1
writeDouble('[VehicleCoordinates]+8F8', 1997.68957519531) --X2
writeDouble('[VehicleCoordinates]+D0', -15.4660186767578) --Y1
writeDouble('[VehicleCoordinates]+900', -15.4660186767578) -- Y2
writeDouble('[VehicleCoordinates]+D8', 151.910415649414) -- Z1
writeDouble('[VehicleCoordinates]+908', 151.910415649414) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132216</ID>
                                      <Description>"Standard Order 377 - Deliver to Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2184.02127121671) --X1
writeDouble('[VehicleCoordinates]+8F8', 2184.02127121671) --X2
writeDouble('[VehicleCoordinates]+D0', 1189.45777916304) --Y1
writeDouble('[VehicleCoordinates]+900', 1189.45777916304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 177.263346793139) -- Z1
writeDouble('[VehicleCoordinates]+908', 177.263346793139) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132217</ID>
                                      <Description>"Standard Order 378 - Deliver to Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1226.47027420112) --X1
writeDouble('[VehicleCoordinates]+8F8', 1226.47027420112) --X2
writeDouble('[VehicleCoordinates]+D0', 1307.98022460938) --Y1
writeDouble('[VehicleCoordinates]+900', 1307.98022460938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 183.580974329453) -- Z1
writeDouble('[VehicleCoordinates]+908', 183.580974329453) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132218</ID>
                                      <Description>"Standard Order 379 - Pick up 4 items in the river"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',622.46131481996) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',622.46131481996) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-596.44840383272) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-596.44840383272) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',155.83684553198) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',155.83684553198) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132219</ID>
                                          <Description>"Standard Order 379 - (Player Only) Teleport Back to Vehicle"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',623.51251220703) -- X Coord
writeFloat('[PlayerCoordinates]+84',-601.41424560547) -- Y Coord
writeFloat('[PlayerCoordinates]+88',157.29495239258) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132220</ID>
                                      <Description>"Standard Order 380 - Pick up 4 Items (Requires Oxygen Mask)"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',2194.0072407674) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',2194.0072407674) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',303.16184733088) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',303.16184733088) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',173.26002681873) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',173.26002681873) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132221</ID>
                                          <Description>"Standard Order 380 - (Player Only) Teleport Back to Vehicle"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',2197.001953125) -- X Coord
writeFloat('[PlayerCoordinates]+84',296.94464111328) -- Y Coord
writeFloat('[PlayerCoordinates]+88',175.28324890137) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132222</ID>
                                      <Description>"Standard Order 381 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132223</ID>
                                      <Description>"Standard Order 382 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132224</ID>
                                      <Description>"Standard Order 383 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1221.86779785156) --X1
writeDouble('[VehicleCoordinates]+8F8', -1221.86779785156) --X2
writeDouble('[VehicleCoordinates]+D0', -229.087647924799) --Y1
writeDouble('[VehicleCoordinates]+900', -229.087647924799) -- Y2
writeDouble('[VehicleCoordinates]+D8', 531.693955322326) -- Z1
writeDouble('[VehicleCoordinates]+908', 531.693955322326) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132225</ID>
                                  <Description>"From Cosplayer"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132226</ID>
                                      <Description>"Teleport to: Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 738.7852565107) --X1
writeDouble('[VehicleCoordinates]+8F8', 738.7852565107) --X2
writeDouble('[VehicleCoordinates]+D0', -641.454963174569) --Y1
writeDouble('[VehicleCoordinates]+900', -641.454963174569) -- Y2
writeDouble('[VehicleCoordinates]+D8', 111.161303309287) -- Z1
writeDouble('[VehicleCoordinates]+908', 111.161303309287) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132227</ID>
                                      <Description>"Standard Order 384 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2140.7678905886) --X1
writeDouble('[VehicleCoordinates]+8F8', 2140.7678905886) --X2
writeDouble('[VehicleCoordinates]+D0', -891.205335171187) --Y1
writeDouble('[VehicleCoordinates]+900', -891.205335171187) -- Y2
writeDouble('[VehicleCoordinates]+D8', 149.236557576236) -- Z1
writeDouble('[VehicleCoordinates]+908', 149.236557576236) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132228</ID>
                                      <Description>"Standard Order 385 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -939.111646158212) --X1
writeDouble('[VehicleCoordinates]+8F8', -939.111646158212) --X2
writeDouble('[VehicleCoordinates]+D0', 1058.93283134418) --Y1
writeDouble('[VehicleCoordinates]+900', 1058.93283134418) -- Y2
writeDouble('[VehicleCoordinates]+D8', 596.160614547307) -- Z1
writeDouble('[VehicleCoordinates]+908', 596.160614547307) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132229</ID>
                                      <Description>"Standard Order 386 - Deliver to Photographer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2159.29223628451) --X1
writeDouble('[VehicleCoordinates]+8F8', -2159.29223628451) --X2
writeDouble('[VehicleCoordinates]+D0', 606.801757861564) --Y1
writeDouble('[VehicleCoordinates]+900', 606.801757861564) -- Y2
writeDouble('[VehicleCoordinates]+D8', 264.913360571171) -- Z1
writeDouble('[VehicleCoordinates]+908', 264.913360571171) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132230</ID>
                                      <Description>"Standard Order 387 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -325.113752107106) --X1
writeDouble('[VehicleCoordinates]+8F8', -325.113752107106) --X2
writeDouble('[VehicleCoordinates]+D0', 983.230529372708) --Y1
writeDouble('[VehicleCoordinates]+900', 983.230529372708) -- Y2
writeDouble('[VehicleCoordinates]+D8', 735.897462587294) -- Z1
writeDouble('[VehicleCoordinates]+908', 735.897462587294) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132231</ID>
                                      <Description>"Standard Order 388 - Pick up item 1 of 7 from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -45.4810066223145) --X1
writeDouble('[VehicleCoordinates]+8F8', -45.4810066223145) --X2
writeDouble('[VehicleCoordinates]+D0', -1266.28552246094) --Y1
writeDouble('[VehicleCoordinates]+900', -1266.28552246094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 116.924080021855) -- Z1
writeDouble('[VehicleCoordinates]+908', 116.924080021855) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132232</ID>
                                          <Description>"Standard Order 388 - Pick up item 2, 3 of 7 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 212.90758372087) --X1
writeDouble('[VehicleCoordinates]+8F8', 212.90758372087) --X2
writeDouble('[VehicleCoordinates]+D0', -1322.76818123451) --Y1
writeDouble('[VehicleCoordinates]+900', -1322.76818123451) -- Y2
writeDouble('[VehicleCoordinates]+D8', 110.773302238177) -- Z1
writeDouble('[VehicleCoordinates]+908', 110.773302238177) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132233</ID>
                                          <Description>"Standard Order 388 - Pick up item 4, 5, 6, 7 of 7 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 286.290642498279) --X1
writeDouble('[VehicleCoordinates]+8F8', 286.290642498279) --X2
writeDouble('[VehicleCoordinates]+D0', -1225.44865830959) --Y1
writeDouble('[VehicleCoordinates]+900', -1225.44865830959) -- Y2
writeDouble('[VehicleCoordinates]+D8', 103.500809471737) -- Z1
writeDouble('[VehicleCoordinates]+908', 103.500809471737) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132234</ID>
                                      <Description>"Standard Order 389 - Pick up 4 items in private locker of Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132235</ID>
                                      <Description>"Standard Order 390 - Pick up 3 items"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',468.97945988313) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',468.97945988313) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-553.7304683033) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-553.7304683033) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',158.61697264854) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',158.61697264854) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132236</ID>
                                          <Description>"Standard Order 390 - (Player Only) Teleport back to Vehicle"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',465.45025634766) -- X Coord
writeFloat('[PlayerCoordinates]+84',-548.40533447266) -- Y Coord
writeFloat('[PlayerCoordinates]+88',159.51136779785) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132237</ID>
                                      <Description>"Standard Order 391 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132238</ID>
                                      <Description>"Standard Order 392 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133127</ID>
                                      <Description>"Standard Order 628 - Deliver to Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1151.38770162807) --X1
writeDouble('[VehicleCoordinates]+8F8', 1151.38770162807) --X2
writeDouble('[VehicleCoordinates]+D0', 29.2159338650015) --Y1
writeDouble('[VehicleCoordinates]+900', 29.2159338650015) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.269395761401) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.269395761401) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132239</ID>
                                  <Description>"From First Prepper"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132240</ID>
                                      <Description>"Teleport to: First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132241</ID>
                                      <Description>"Standard Order 393 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1607.94860839844) --X1
writeDouble('[VehicleCoordinates]+8F8', 1607.94860839844) --X2
writeDouble('[VehicleCoordinates]+D0', -274.140829576729) --Y1
writeDouble('[VehicleCoordinates]+900', -274.140829576729) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.984857813475) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.984857813475) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132242</ID>
                                      <Description>"Standard Order 394 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 170.875869750977) --X1
writeDouble('[VehicleCoordinates]+8F8', 170.875869750977) --X2
writeDouble('[VehicleCoordinates]+D0', 1647.17614746094) --Y1
writeDouble('[VehicleCoordinates]+900', 1647.17614746094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 260.368743896484) -- Z1
writeDouble('[VehicleCoordinates]+908', 260.368743896484) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132243</ID>
                                      <Description>"Standard Order 395 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -939.111646158212) --X1
writeDouble('[VehicleCoordinates]+8F8', -939.111646158212) --X2
writeDouble('[VehicleCoordinates]+D0', 1058.93283134418) --Y1
writeDouble('[VehicleCoordinates]+900', 1058.93283134418) -- Y2
writeDouble('[VehicleCoordinates]+D8', 596.160614547307) -- Z1
writeDouble('[VehicleCoordinates]+908', 596.160614547307) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132244</ID>
                                      <Description>"Standard Order 396 - item 1/2"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-116.54009246826) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-116.54009246826) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',783.6116333) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',783.6116333) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',737.0638428) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',737.0638428) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132245</ID>
                                          <Description>"Standard Order 396 - item 2/2 (West up the hill)"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-43.431091308594) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-43.431091308594) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',826.97729492188) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',826.97729492188) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',664.44244384766) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',664.44244384766) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132246</ID>
                                      <Description>"Standard Order 397 - Pick up item 1/5, 2/5 from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 542.179931640625) --X1
writeDouble('[VehicleCoordinates]+8F8', 542.179931640625) --X2
writeDouble('[VehicleCoordinates]+D0', 883.924469714286) --Y1
writeDouble('[VehicleCoordinates]+900', 883.924469714286) -- Y2
writeDouble('[VehicleCoordinates]+D8', 173.255883735445) -- Z1
writeDouble('[VehicleCoordinates]+908', 173.255883735445) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132247</ID>
                                          <Description>"Standard Order 397 - Pick up item 3/5, 4/5 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 673.999725637608) --X1
writeDouble('[VehicleCoordinates]+8F8', 673.999725637608) --X2
writeDouble('[VehicleCoordinates]+D0', 722.279145174543) --Y1
writeDouble('[VehicleCoordinates]+900', 722.279145174543) -- Y2
writeDouble('[VehicleCoordinates]+D8', 163.758468332118) -- Z1
writeDouble('[VehicleCoordinates]+908', 163.758468332118) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132248</ID>
                                          <Description>"Standard Order 397 - Pick up item 5/5 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1064.90069554793) --X1
writeDouble('[VehicleCoordinates]+8F8', 1064.90069554793) --X2
writeDouble('[VehicleCoordinates]+D0', 926.85973361315) --Y1
writeDouble('[VehicleCoordinates]+900', 926.85973361315) -- Y2
writeDouble('[VehicleCoordinates]+D8', 159.482284356258) -- Z1
writeDouble('[VehicleCoordinates]+908', 159.482284356258) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132249</ID>
                                      <Description>"Standard Order 398 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132250</ID>
                                      <Description>"Standard Order 399 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132251</ID>
                                      <Description>"Standard Order 400 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132252</ID>
                                      <Description>"Standard Order 401 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132253</ID>
                                      <Description>"Standard Order 402 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133129</ID>
                                      <Description>"Standard Order 629 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132254</ID>
                                  <Description>"From Collector"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132255</ID>
                                      <Description>"Teleport to: Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1151.38770162807) --X1
writeDouble('[VehicleCoordinates]+8F8', 1151.38770162807) --X2
writeDouble('[VehicleCoordinates]+D0', 29.2159338650015) --Y1
writeDouble('[VehicleCoordinates]+900', 29.2159338650015) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.269395761401) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.269395761401) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132256</ID>
                                      <Description>"Standard Order 403 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1607.94860839844) --X1
writeDouble('[VehicleCoordinates]+8F8', 1607.94860839844) --X2
writeDouble('[VehicleCoordinates]+D0', -274.140829576729) --Y1
writeDouble('[VehicleCoordinates]+900', -274.140829576729) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.984857813475) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.984857813475) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132257</ID>
                                      <Description>"Standard Order 404 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -939.111646158212) --X1
writeDouble('[VehicleCoordinates]+8F8', -939.111646158212) --X2
writeDouble('[VehicleCoordinates]+D0', 1058.93283134418) --Y1
writeDouble('[VehicleCoordinates]+900', 1058.93283134418) -- Y2
writeDouble('[VehicleCoordinates]+D8', 596.160614547307) -- Z1
writeDouble('[VehicleCoordinates]+908', 596.160614547307) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132258</ID>
                                      <Description>"Standard Order 405 - Pick up item 1 and 2 of 3 from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1453.71704101563) --X1
writeDouble('[VehicleCoordinates]+8F8', 1453.71704101563) --X2
writeDouble('[VehicleCoordinates]+D0', 212.112176940245) --Y1
writeDouble('[VehicleCoordinates]+900', 212.112176940245) -- Y2
writeDouble('[VehicleCoordinates]+D8', 133.719818115234) -- Z1
writeDouble('[VehicleCoordinates]+908', 133.719818115234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132259</ID>
                                          <Description>"Standard Order 405 - Pick up item 3 of 3 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1418.0397287627) --X1
writeDouble('[VehicleCoordinates]+8F8', 1418.0397287627) --X2
writeDouble('[VehicleCoordinates]+D0', 29.8784554046374) --Y1
writeDouble('[VehicleCoordinates]+900', 29.8784554046374) -- Y2
writeDouble('[VehicleCoordinates]+D8', 128.727154180244) -- Z1
writeDouble('[VehicleCoordinates]+908', 128.727154180244) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132260</ID>
                                      <Description>"Standard Order 406 - Pick up 2 items in private locker of Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132261</ID>
                                      <Description>"Standard Order 407 - Pick up item 1/6"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1321.75479916266) --X1
writeDouble('[VehicleCoordinates]+8F8', 1321.75479916266) --X2
writeDouble('[VehicleCoordinates]+D0', 1781.333984375) --Y1
writeDouble('[VehicleCoordinates]+900', 1781.333984375) -- Y2
writeDouble('[VehicleCoordinates]+D8', 199.04028204791) -- Z1
writeDouble('[VehicleCoordinates]+908', 199.04028204791) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132262</ID>
                                          <Description>"Standard Order 407 - Pick up item 2/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1236.1307947623) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1236.0378417969) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1771.5621218638) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1771.4079589844) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',197.44762137429) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',197.41754150391) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132263</ID>
                                          <Description>"Standard Order 407 - Pick up item 3/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1208.7172244518) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1208.7172244518) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1700.1091915638) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1700.1091915638) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',193.42579634342) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',193.42579634342) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132264</ID>
                                          <Description>"Standard Order 407 - Pick up item 4/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1273.5101212414) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1273.5101212414) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1777.1420602091) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1777.1420602091) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',194.56978920037) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',194.56978920037) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132265</ID>
                                          <Description>"Standard Order 407 - Pick up item 5/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1214.4372575348) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1214.4372575348) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1714.5256832646) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1714.5256832646) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',192.51670899861) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',192.51670899861) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132266</ID>
                                          <Description>"Standard Order 407 - Pick up item 6/6"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1208.7172244518) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1208.7172244518) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1700.1091915638) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1700.1091915638) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',193.42579634342) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',193.42579634342) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132267</ID>
                                      <Description>"Standard Order 408 - Pick up 2 of 4 items from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1418.0397287627) --X1
writeDouble('[VehicleCoordinates]+8F8', 1418.0397287627) --X2
writeDouble('[VehicleCoordinates]+D0', 29.8784554046374) --Y1
writeDouble('[VehicleCoordinates]+900', 29.8784554046374) -- Y2
writeDouble('[VehicleCoordinates]+D8', 128.727154180244) -- Z1
writeDouble('[VehicleCoordinates]+908', 128.727154180244) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132268</ID>
                                          <Description>"Standard Order 408 - Pick up 2 of 4 items from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1329.70216027083) --X1
writeDouble('[VehicleCoordinates]+8F8', 1329.70216027083) --X2
writeDouble('[VehicleCoordinates]+D0', -99.677134081765) --Y1
writeDouble('[VehicleCoordinates]+900', -99.677134081765) -- Y2
writeDouble('[VehicleCoordinates]+D8', 133.769827856341) -- Z1
writeDouble('[VehicleCoordinates]+908', 133.769827856341) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132269</ID>
                                      <Description>"Standard Order 409 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132270</ID>
                                      <Description>"Standard Order 410 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132271</ID>
                                  <Description>"From Novelists's Son"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132272</ID>
                                      <Description>"Teleport to: Novelists's Son"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2429.98510742188) --X1
writeDouble('[VehicleCoordinates]+8F8', -2429.98510742188) --X2
writeDouble('[VehicleCoordinates]+D0', 1292.8735588775) --Y1
writeDouble('[VehicleCoordinates]+900', 1292.8735588775) -- Y2
writeDouble('[VehicleCoordinates]+D8', 249.609417378204) -- Z1
writeDouble('[VehicleCoordinates]+908', 249.609417378204) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132273</ID>
                                      <Description>"Standard Order 411 - Pick up item 1/3, 2/3 from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1698.36560058594) --X1
writeDouble('[VehicleCoordinates]+8F8', -1698.36560058594) --X2
writeDouble('[VehicleCoordinates]+D0', 1087.97488277915) --Y1
writeDouble('[VehicleCoordinates]+900', 1087.97488277915) -- Y2
writeDouble('[VehicleCoordinates]+D8', 219.390731680823) -- Z1
writeDouble('[VehicleCoordinates]+908', 219.390731680823) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132274</ID>
                                          <Description>"Standard Order 411 - Pick up item 3/3 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1549.63763756896) --X1
writeDouble('[VehicleCoordinates]+8F8', -1549.63763756896) --X2
writeDouble('[VehicleCoordinates]+D0', 1279.34696475638) --Y1
writeDouble('[VehicleCoordinates]+900', 1279.34696475638) -- Y2
writeDouble('[VehicleCoordinates]+D8', 240.661286312599) -- Z1
writeDouble('[VehicleCoordinates]+908', 240.661286312599) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132275</ID>
                                      <Description>"Standard Order 412 - Pick up item 1/3 &amp; 2/3 from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -762.880743824688) --X1
writeDouble('[VehicleCoordinates]+8F8', -762.880743824688) --X2
writeDouble('[VehicleCoordinates]+D0', 1811.14760256781) --Y1
writeDouble('[VehicleCoordinates]+900', 1811.14760256781) -- Y2
writeDouble('[VehicleCoordinates]+D8', 223.408607687459) -- Z1
writeDouble('[VehicleCoordinates]+908', 223.408607687459) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132276</ID>
                                          <Description>"Standard Order 412 - Pick up item 3/3 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -852.131401307823) --X1
writeDouble('[VehicleCoordinates]+8F8', -852.131401307823) --X2
writeDouble('[VehicleCoordinates]+D0', 1921.13070426408) --Y1
writeDouble('[VehicleCoordinates]+900', 1921.13070426408) -- Y2
writeDouble('[VehicleCoordinates]+D8', 223.012044045121) -- Z1
writeDouble('[VehicleCoordinates]+908', 223.012044045121) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132277</ID>
                                      <Description>"Standard Order 413 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132278</ID>
                                      <Description>"Standard Order 414 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132279</ID>
                                      <Description>"Standard Order 415 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132280</ID>
                                  <Description>"From Lake Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132281</ID>
                                      <Description>"Teleport to: Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132282</ID>
                                      <Description>"Standard Order 416, 417, 418 - Deliver to Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2184.02127121671) --X1
writeDouble('[VehicleCoordinates]+8F8', 2184.02127121671) --X2
writeDouble('[VehicleCoordinates]+D0', 1189.45777916304) --Y1
writeDouble('[VehicleCoordinates]+900', 1189.45777916304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 177.263346793139) -- Z1
writeDouble('[VehicleCoordinates]+908', 177.263346793139) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132283</ID>
                                      <Description>"Standard Order 419, 420, 421 - Deliver to Elder"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1705.35144042969) --X1
writeDouble('[VehicleCoordinates]+8F8', 1705.35144042969) --X2
writeDouble('[VehicleCoordinates]+D0', 699.0947265625) --Y1
writeDouble('[VehicleCoordinates]+900', 699.0947265625) -- Y2
writeDouble('[VehicleCoordinates]+D8', 244.412511481352) -- Z1
writeDouble('[VehicleCoordinates]+908', 244.412511481352) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132284</ID>
                                      <Description>"Standard Order 422, 423, 424 - Deliver to Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1226.47027420112) --X1
writeDouble('[VehicleCoordinates]+8F8', 1226.47027420112) --X2
writeDouble('[VehicleCoordinates]+D0', 1307.98022460938) --Y1
writeDouble('[VehicleCoordinates]+900', 1307.98022460938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 183.580974329453) -- Z1
writeDouble('[VehicleCoordinates]+908', 183.580974329453) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132285</ID>
                                      <Description>"Standard Order 425 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1607.94860839844) --X1
writeDouble('[VehicleCoordinates]+8F8', 1607.94860839844) --X2
writeDouble('[VehicleCoordinates]+D0', -274.140829576729) --Y1
writeDouble('[VehicleCoordinates]+900', -274.140829576729) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.984857813475) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.984857813475) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132286</ID>
                                      <Description>"Standard Order 426 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2140.7678905886) --X1
writeDouble('[VehicleCoordinates]+8F8', 2140.7678905886) --X2
writeDouble('[VehicleCoordinates]+D0', -891.205335171187) --Y1
writeDouble('[VehicleCoordinates]+900', -891.205335171187) -- Y2
writeDouble('[VehicleCoordinates]+D8', 149.236557576236) -- Z1
writeDouble('[VehicleCoordinates]+908', 149.236557576236) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132287</ID>
                                      <Description>"Standard Order 427 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1235.27709960938) --X1
writeDouble('[VehicleCoordinates]+8F8', -1235.27709960938) --X2
writeDouble('[VehicleCoordinates]+D0', -1252.37450712258) --Y1
writeDouble('[VehicleCoordinates]+900', -1252.37450712258) -- Y2
writeDouble('[VehicleCoordinates]+D8', 410.93840658829) -- Z1
writeDouble('[VehicleCoordinates]+908', 410.93840658829) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132288</ID>
                                      <Description>"Standard Order 428 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -402.304512128479) --X1
writeDouble('[VehicleCoordinates]+8F8', -402.304512128479) --X2
writeDouble('[VehicleCoordinates]+D0', -1165.69761503304) --Y1
writeDouble('[VehicleCoordinates]+900', -1165.69761503304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 247.350454353234) -- Z1
writeDouble('[VehicleCoordinates]+908', 247.350454353234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132289</ID>
                                      <Description>"Standard Order 429 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1831.26241262823) --X1
writeDouble('[VehicleCoordinates]+8F8', -1831.26241262823) --X2
writeDouble('[VehicleCoordinates]+D0', -712.536589082141) --Y1
writeDouble('[VehicleCoordinates]+900', -712.536589082141) -- Y2
writeDouble('[VehicleCoordinates]+D8', 465.668199942371) -- Z1
writeDouble('[VehicleCoordinates]+908', 465.668199942371) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132290</ID>
                                      <Description>"Standard Order 430 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1997.68957519531) --X1
writeDouble('[VehicleCoordinates]+8F8', 1997.68957519531) --X2
writeDouble('[VehicleCoordinates]+D0', -15.4660186767578) --Y1
writeDouble('[VehicleCoordinates]+900', -15.4660186767578) -- Y2
writeDouble('[VehicleCoordinates]+D8', 151.910415649414) -- Z1
writeDouble('[VehicleCoordinates]+908', 151.910415649414) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132291</ID>
                                      <Description>"Standard Order 431 - Pick up 6 items"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',2635.0594470507) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',2635.0594470507) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1661.0913097852) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1661.0913097852) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',185.3188211192) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',185.3188211192) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132292</ID>
                                      <Description>"Standard Order 432 - Pick up 1, 2, 5, 6, 8, 9 of 9 of item"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',2631.9213867188) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',2631.9213867188) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1714.2733587196) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1714.2733587196) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',204.81868824387) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',204.81868824387) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132293</ID>
                                          <Description>"Standard Order 432 - Pick up 3, 4, 9 of 9 of item"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',2654.6081542969) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',2654.6081542969) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1731.5268554688) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1731.5268554688) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',204.83534283414) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',204.83534283414) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132294</ID>
                                      <Description>"Standard Order 433 - Pick up 2 items from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2339.37231445313) --X1
writeDouble('[VehicleCoordinates]+8F8', 2339.37231445313) --X2
writeDouble('[VehicleCoordinates]+D0', 1371.75949751723) --Y1
writeDouble('[VehicleCoordinates]+900', 1371.75949751723) -- Y2
writeDouble('[VehicleCoordinates]+D8', 181.743011474609) -- Z1
writeDouble('[VehicleCoordinates]+908', 181.743011474609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132295</ID>
                                          <Description>"Standard Order 433 - Pick up 4 items from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2463.60405191884) --X1
writeDouble('[VehicleCoordinates]+8F8', 2463.60405191884) --X2
writeDouble('[VehicleCoordinates]+D0', 1354.73044474371) --Y1
writeDouble('[VehicleCoordinates]+900', 1354.73044474371) -- Y2
writeDouble('[VehicleCoordinates]+D8', 185.547360344177) -- Z1
writeDouble('[VehicleCoordinates]+908', 185.547360344177) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132296</ID>
                                      <Description>"Standard Order 434, 435, 436 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132297</ID>
                                      <Description>"Standard Order 437, 438, 439, 440 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132298</ID>
                                      <Description>"Standard Order 441, 442 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132299</ID>
                                      <Description>"Standard Order 443, 444 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1221.86779785156) --X1
writeDouble('[VehicleCoordinates]+8F8', -1221.86779785156) --X2
writeDouble('[VehicleCoordinates]+D0', -229.087647924799) --Y1
writeDouble('[VehicleCoordinates]+900', -229.087647924799) -- Y2
writeDouble('[VehicleCoordinates]+D8', 531.693955322326) -- Z1
writeDouble('[VehicleCoordinates]+908', 531.693955322326) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133060</ID>
                                      <Description>"Standard Order 630 - Deliver to Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1151.38770162807) --X1
writeDouble('[VehicleCoordinates]+8F8', 1151.38770162807) --X2
writeDouble('[VehicleCoordinates]+D0', 29.2159338650015) --Y1
writeDouble('[VehicleCoordinates]+900', 29.2159338650015) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.269395761401) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.269395761401) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132300</ID>
                                  <Description>"From Distribution Center South of Lake Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132301</ID>
                                      <Description>"Teleport to: Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132302</ID>
                                      <Description>"Standard Order 445, 446, 447 - Deliver to Engineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2184.02127121671) --X1
writeDouble('[VehicleCoordinates]+8F8', 2184.02127121671) --X2
writeDouble('[VehicleCoordinates]+D0', 1189.45777916304) --Y1
writeDouble('[VehicleCoordinates]+900', 1189.45777916304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 177.263346793139) -- Z1
writeDouble('[VehicleCoordinates]+908', 177.263346793139) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132303</ID>
                                      <Description>"Standard Order 448, 449 - Deliver to Elder"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1705.35144042969) --X1
writeDouble('[VehicleCoordinates]+8F8', 1705.35144042969) --X2
writeDouble('[VehicleCoordinates]+D0', 699.0947265625) --Y1
writeDouble('[VehicleCoordinates]+900', 699.0947265625) -- Y2
writeDouble('[VehicleCoordinates]+D8', 244.412511481352) -- Z1
writeDouble('[VehicleCoordinates]+908', 244.412511481352) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132304</ID>
                                      <Description>"Standard Order 450 - Pick up 3 items"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',874.68406409558) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',874.68406409558) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',265.99862670898) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',265.99862670898) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',152.16543430012) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',152.16543430012) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132305</ID>
                                          <Description>"Standard Order 450 - (Player Only) Teleport Back to Vehicle"</Description>
                                          <Color>0000FF</Color>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',871.43188476563) -- X Coord
writeFloat('[PlayerCoordinates]+84',257.96017456055) -- Y Coord
writeFloat('[PlayerCoordinates]+88',153.22640991211) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132306</ID>
                                          <Description>"Standard Order 450 - Deliver to Elder"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1705.35144042969) --X1
writeDouble('[VehicleCoordinates]+8F8', 1705.35144042969) --X2
writeDouble('[VehicleCoordinates]+D0', 699.0947265625) --Y1
writeDouble('[VehicleCoordinates]+900', 699.0947265625) -- Y2
writeDouble('[VehicleCoordinates]+D8', 244.412511481352) -- Z1
writeDouble('[VehicleCoordinates]+908', 244.412511481352) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132307</ID>
                                      <Description>"Standard Order 451, 452, 453 - Deliver to Craftsman"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1226.47027420112) --X1
writeDouble('[VehicleCoordinates]+8F8', 1226.47027420112) --X2
writeDouble('[VehicleCoordinates]+D0', 1307.98022460938) --Y1
writeDouble('[VehicleCoordinates]+900', 1307.98022460938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 183.580974329453) -- Z1
writeDouble('[VehicleCoordinates]+908', 183.580974329453) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132308</ID>
                                      <Description>"Standard Order 454 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 115.351102065019) --X1
writeDouble('[VehicleCoordinates]+8F8', 115.351102065019) --X2
writeDouble('[VehicleCoordinates]+D0', -1629.64987632092) --Y1
writeDouble('[VehicleCoordinates]+900', -1629.64987632092) -- Y2
writeDouble('[VehicleCoordinates]+D8', 108.919290458693) -- Z1
writeDouble('[VehicleCoordinates]+908', 108.919290458693) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132309</ID>
                                      <Description>"Standard Order 455, 456, 457 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1607.94860839844) --X1
writeDouble('[VehicleCoordinates]+8F8', 1607.94860839844) --X2
writeDouble('[VehicleCoordinates]+D0', -274.140829576729) --Y1
writeDouble('[VehicleCoordinates]+900', -274.140829576729) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.984857813475) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.984857813475) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132310</ID>
                                      <Description>"Standard Order 458 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2140.7678905886) --X1
writeDouble('[VehicleCoordinates]+8F8', 2140.7678905886) --X2
writeDouble('[VehicleCoordinates]+D0', -891.205335171187) --Y1
writeDouble('[VehicleCoordinates]+900', -891.205335171187) -- Y2
writeDouble('[VehicleCoordinates]+D8', 149.236557576236) -- Z1
writeDouble('[VehicleCoordinates]+908', 149.236557576236) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132311</ID>
                                      <Description>"Standard Order 459, 460, 461 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 170.875869750977) --X1
writeDouble('[VehicleCoordinates]+8F8', 170.875869750977) --X2
writeDouble('[VehicleCoordinates]+D0', 1647.17614746094) --Y1
writeDouble('[VehicleCoordinates]+900', 1647.17614746094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 260.368743896484) -- Z1
writeDouble('[VehicleCoordinates]+908', 260.368743896484) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132312</ID>
                                      <Description>"Standard Order 462 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -325.113752107106) --X1
writeDouble('[VehicleCoordinates]+8F8', -325.113752107106) --X2
writeDouble('[VehicleCoordinates]+D0', 983.230529372708) --Y1
writeDouble('[VehicleCoordinates]+900', 983.230529372708) -- Y2
writeDouble('[VehicleCoordinates]+D8', 735.897462587294) -- Z1
writeDouble('[VehicleCoordinates]+908', 735.897462587294) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132313</ID>
                                      <Description>"Standard Order 463, 464 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1997.68957519531) --X1
writeDouble('[VehicleCoordinates]+8F8', 1997.68957519531) --X2
writeDouble('[VehicleCoordinates]+D0', -15.4660186767578) --Y1
writeDouble('[VehicleCoordinates]+900', -15.4660186767578) -- Y2
writeDouble('[VehicleCoordinates]+D8', 151.910415649414) -- Z1
writeDouble('[VehicleCoordinates]+908', 151.910415649414) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132314</ID>
                                      <Description>"Standard Order 465 - Deliver to Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 738.7852565107) --X1
writeDouble('[VehicleCoordinates]+8F8', 738.7852565107) --X2
writeDouble('[VehicleCoordinates]+D0', -641.454963174569) --Y1
writeDouble('[VehicleCoordinates]+900', -641.454963174569) -- Y2
writeDouble('[VehicleCoordinates]+D8', 111.161303309287) -- Z1
writeDouble('[VehicleCoordinates]+908', 111.161303309287) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132315</ID>
                                      <Description>"Standard Order 466 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132316</ID>
                                      <Description>"Standard Order 467 - Deliver to Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1151.38770162807) --X1
writeDouble('[VehicleCoordinates]+8F8', 1151.38770162807) --X2
writeDouble('[VehicleCoordinates]+D0', 29.2159338650015) --Y1
writeDouble('[VehicleCoordinates]+900', 29.2159338650015) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.269395761401) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.269395761401) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132317</ID>
                                      <Description>"Standard Order 468, 469 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132318</ID>
                                      <Description>"Standard Order 470 - Pick up 1 and 2 of 6 item from MULES Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1329.70216027083) --X1
writeDouble('[VehicleCoordinates]+8F8', 1329.70216027083) --X2
writeDouble('[VehicleCoordinates]+D0', -99.677134081765) --Y1
writeDouble('[VehicleCoordinates]+900', -99.677134081765) -- Y2
writeDouble('[VehicleCoordinates]+D8', 133.769827856341) -- Z1
writeDouble('[VehicleCoordinates]+908', 133.769827856341) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132319</ID>
                                          <Description>"Standard Order 470 - Pick up 3 and 4 of 6 item from MULES Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1418.0397287627) --X1
writeDouble('[VehicleCoordinates]+8F8', 1418.0397287627) --X2
writeDouble('[VehicleCoordinates]+D0', 29.8784554046374) --Y1
writeDouble('[VehicleCoordinates]+900', 29.8784554046374) -- Y2
writeDouble('[VehicleCoordinates]+D8', 128.727154180244) -- Z1
writeDouble('[VehicleCoordinates]+908', 128.727154180244) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132320</ID>
                                          <Description>"Standard Order 470 - Pick up 5 and 6 of 6 item from MULES Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1453.71704101563) --X1
writeDouble('[VehicleCoordinates]+8F8', 1453.71704101563) --X2
writeDouble('[VehicleCoordinates]+D0', 212.112176940245) --Y1
writeDouble('[VehicleCoordinates]+900', 212.112176940245) -- Y2
writeDouble('[VehicleCoordinates]+D8', 133.719818115234) -- Z1
writeDouble('[VehicleCoordinates]+908', 133.719818115234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132321</ID>
                                          <Description>"Standard Order 470 - Deliver to Lake Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132322</ID>
                                      <Description>"Standard Order 471 - Pick up item 1/10"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',694.15516340401) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',694.15516340401) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',183.90393388603) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',183.90393388603) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',155.47574164098) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',155.47574164098) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132323</ID>
                                          <Description>"Standard Order 471 - Pick up item 2/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',745.84764219745) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',745.84764219745) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',203.5121823865) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',203.5121823865) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',155.89416737236) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',155.89416737236) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132324</ID>
                                          <Description>"Standard Order 471 - Pick up item 3/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',745.84764219745) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',745.84764219745) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',203.5121823865) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',203.5121823865) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',155.89416737236) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',155.89416737236) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132325</ID>
                                          <Description>"Standard Order 471 - Pick up item 4/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',702.10377265527) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',702.10377265527) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',152.39650930103) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',152.39650930103) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',155.61605934589) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',155.61605934589) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132326</ID>
                                          <Description>"Standard Order 471 - Pick up item 5/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',694.15516340401) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',694.15516340401) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',183.90393388603) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',183.90393388603) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',155.47574164098) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',155.47574164098) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132327</ID>
                                          <Description>"Standard Order 471 - Pick up item 6/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',663.16403941518) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',651.63000488281) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',182.84749773848) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',216.02435302734) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',159.07428698113) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',161.08010864258) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132328</ID>
                                          <Description>"Standard Order 471 - Pick up item 7/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',751.32877570901) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',751.32877570901) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',159.05488688036) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',159.05488688036) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',155.70265618439) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',155.70265618439) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132329</ID>
                                          <Description>"Standard Order 471 - Pick up item 8/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',638.87801536752) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',638.87801536752) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',115.83717161227) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',115.83717161227) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',159.79027556732) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',159.79027556732) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132330</ID>
                                          <Description>"Standard Order 471 - Pick up item 9/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',638.87801536752) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',638.87801536752) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',115.83717161227) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',115.83717161227) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',159.79027556732) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',159.79027556732) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132331</ID>
                                          <Description>"Standard Order 471 - Pick up item 10/10"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',638.87801536752) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',638.87801536752) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',115.83717161227) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',115.83717161227) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',159.79027556732) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',159.79027556732) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132332</ID>
                                      <Description>"Standard Order 472, 473 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132333</ID>
                                      <Description>"Standard Order 474, 476 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132334</ID>
                                      <Description>"Standard Order 475 - Pick up 4 of 12 items from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1064.90069554793) --X1
writeDouble('[VehicleCoordinates]+8F8', 1064.90069554793) --X2
writeDouble('[VehicleCoordinates]+D0', 926.85973361315) --Y1
writeDouble('[VehicleCoordinates]+900', 926.85973361315) -- Y2
writeDouble('[VehicleCoordinates]+D8', 159.482284356258) -- Z1
writeDouble('[VehicleCoordinates]+908', 159.482284356258) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132335</ID>
                                          <Description>"Standard Order 475 - Pick up 4 of 12 items from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 673.999725637608) --X1
writeDouble('[VehicleCoordinates]+8F8', 673.999725637608) --X2
writeDouble('[VehicleCoordinates]+D0', 722.279145174543) --Y1
writeDouble('[VehicleCoordinates]+900', 722.279145174543) -- Y2
writeDouble('[VehicleCoordinates]+D8', 163.758468332118) -- Z1
writeDouble('[VehicleCoordinates]+908', 163.758468332118) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132336</ID>
                                          <Description>"Standard Order 475 - Pick up 4 of 12 items from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 542.179931640625) --X1
writeDouble('[VehicleCoordinates]+8F8', 542.179931640625) --X2
writeDouble('[VehicleCoordinates]+D0', 883.924469714286) --Y1
writeDouble('[VehicleCoordinates]+900', 883.924469714286) -- Y2
writeDouble('[VehicleCoordinates]+D8', 173.255883735445) -- Z1
writeDouble('[VehicleCoordinates]+908', 173.255883735445) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132337</ID>
                                          <Description>"Standard Order 475 - Deliver to South Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132338</ID>
                                      <Description>"Standard Order 477 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132339</ID>
                                      <Description>"Standard Order 478 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1221.86779785156) --X1
writeDouble('[VehicleCoordinates]+8F8', -1221.86779785156) --X2
writeDouble('[VehicleCoordinates]+D0', -229.087647924799) --Y1
writeDouble('[VehicleCoordinates]+900', -229.087647924799) -- Y2
writeDouble('[VehicleCoordinates]+D8', 531.693955322326) -- Z1
writeDouble('[VehicleCoordinates]+908', 531.693955322326) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133041</ID>
                                      <Description>"Standard Order 631 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 115.351102065019) --X1
writeDouble('[VehicleCoordinates]+8F8', 115.351102065019) --X2
writeDouble('[VehicleCoordinates]+D0', -1629.64987632092) --Y1
writeDouble('[VehicleCoordinates]+900', -1629.64987632092) -- Y2
writeDouble('[VehicleCoordinates]+D8', 108.919290458693) -- Z1
writeDouble('[VehicleCoordinates]+908', 108.919290458693) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133043</ID>
                                      <Description>"Standard Order 632 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -402.304512128479) --X1
writeDouble('[VehicleCoordinates]+8F8', -402.304512128479) --X2
writeDouble('[VehicleCoordinates]+D0', -1165.69761503304) --Y1
writeDouble('[VehicleCoordinates]+900', -1165.69761503304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 247.350454353234) -- Z1
writeDouble('[VehicleCoordinates]+908', 247.350454353234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133046</ID>
                                      <Description>"Standard Order 633 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132340</ID>
                                  <Description>"From Weather Station"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132341</ID>
                                      <Description>"Teleport to: Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132342</ID>
                                      <Description>"Standard Order 479, 480 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 115.351102065019) --X1
writeDouble('[VehicleCoordinates]+8F8', 115.351102065019) --X2
writeDouble('[VehicleCoordinates]+D0', -1629.64987632092) --Y1
writeDouble('[VehicleCoordinates]+900', -1629.64987632092) -- Y2
writeDouble('[VehicleCoordinates]+D8', 108.919290458693) -- Z1
writeDouble('[VehicleCoordinates]+908', 108.919290458693) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132343</ID>
                                      <Description>"Standard Order 481, 482 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1607.94860839844) --X1
writeDouble('[VehicleCoordinates]+8F8', 1607.94860839844) --X2
writeDouble('[VehicleCoordinates]+D0', -274.140829576729) --Y1
writeDouble('[VehicleCoordinates]+900', -274.140829576729) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.984857813475) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.984857813475) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132344</ID>
                                      <Description>"Standard Order 483, 484 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2140.7678905886) --X1
writeDouble('[VehicleCoordinates]+8F8', 2140.7678905886) --X2
writeDouble('[VehicleCoordinates]+D0', -891.205335171187) --Y1
writeDouble('[VehicleCoordinates]+900', -891.205335171187) -- Y2
writeDouble('[VehicleCoordinates]+D8', 149.236557576236) -- Z1
writeDouble('[VehicleCoordinates]+908', 149.236557576236) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132345</ID>
                                      <Description>"Standard Order 485, 486 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 170.875869750977) --X1
writeDouble('[VehicleCoordinates]+8F8', 170.875869750977) --X2
writeDouble('[VehicleCoordinates]+D0', 1647.17614746094) --Y1
writeDouble('[VehicleCoordinates]+900', 1647.17614746094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 260.368743896484) -- Z1
writeDouble('[VehicleCoordinates]+908', 260.368743896484) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132346</ID>
                                      <Description>"Standard Order 487 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -649.183700512192) --X1
writeDouble('[VehicleCoordinates]+8F8', -649.183700512192) --X2
writeDouble('[VehicleCoordinates]+D0', -136.553804305087) --Y1
writeDouble('[VehicleCoordinates]+900', -136.553804305087) -- Y2
writeDouble('[VehicleCoordinates]+D8', 535.161209155776) -- Z1
writeDouble('[VehicleCoordinates]+908', 535.161209155776) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132347</ID>
                                      <Description>"Standard Order 488 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -402.304512128479) --X1
writeDouble('[VehicleCoordinates]+8F8', -402.304512128479) --X2
writeDouble('[VehicleCoordinates]+D0', -1165.69761503304) --Y1
writeDouble('[VehicleCoordinates]+900', -1165.69761503304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 247.350454353234) -- Z1
writeDouble('[VehicleCoordinates]+908', 247.350454353234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132348</ID>
                                      <Description>"Standard Order 489 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132349</ID>
                                      <Description>"Standard Order 490 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132350</ID>
                                      <Description>"Standard Order 491, 492, 493 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132351</ID>
                                      <Description>"Standard Order 494 - Pick up item 1/3"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',499.844119586) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',499.844119586) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-436.62975688497) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-436.62975688497) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',167.41021101718) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',167.41021101718) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132352</ID>
                                          <Description>"Standard Order 494 - Pick up item 2/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',535.51287436488) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',535.51287436488) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-371.87997865718) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-371.87997865718) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',155.88347774737) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',155.88347774737) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132353</ID>
                                          <Description>"Standard Order 494 - Pick up item 3/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',533.64145605157) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',533.64145605157) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-444.41544437845) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-444.41544437845) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',156.93405795194) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',156.93405795194) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132354</ID>
                                      <Description>"Standard Order 495, 496 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132355</ID>
                                      <Description>"Standard Order 497, 498 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133048</ID>
                                      <Description>"Standard Order 634 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -402.304512128479) --X1
writeDouble('[VehicleCoordinates]+8F8', -402.304512128479) --X2
writeDouble('[VehicleCoordinates]+D0', -1165.69761503304) --Y1
writeDouble('[VehicleCoordinates]+900', -1165.69761503304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 247.350454353234) -- Z1
writeDouble('[VehicleCoordinates]+908', 247.350454353234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133050</ID>
                                      <Description>"Standard Order 635 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132356</ID>
                                  <Description>"From South Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132357</ID>
                                      <Description>"Teleport to: South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132358</ID>
                                      <Description>"Standard Order 499 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 115.351102065019) --X1
writeDouble('[VehicleCoordinates]+8F8', 115.351102065019) --X2
writeDouble('[VehicleCoordinates]+D0', -1629.64987632092) --Y1
writeDouble('[VehicleCoordinates]+900', -1629.64987632092) -- Y2
writeDouble('[VehicleCoordinates]+D8', 108.919290458693) -- Z1
writeDouble('[VehicleCoordinates]+908', 108.919290458693) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132359</ID>
                                      <Description>"Standard Order 500, 501 - Deliver to Junk Dealer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1607.94860839844) --X1
writeDouble('[VehicleCoordinates]+8F8', 1607.94860839844) --X2
writeDouble('[VehicleCoordinates]+D0', -274.140829576729) --Y1
writeDouble('[VehicleCoordinates]+900', -274.140829576729) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.984857813475) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.984857813475) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132360</ID>
                                      <Description>"Standard Order 502, 503 - Deliver to Chiral Artist's Studio"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2140.7678905886) --X1
writeDouble('[VehicleCoordinates]+8F8', 2140.7678905886) --X2
writeDouble('[VehicleCoordinates]+D0', -891.205335171187) --Y1
writeDouble('[VehicleCoordinates]+900', -891.205335171187) -- Y2
writeDouble('[VehicleCoordinates]+D8', 149.236557576236) -- Z1
writeDouble('[VehicleCoordinates]+908', 149.236557576236) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132361</ID>
                                      <Description>"Standard Order 504 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -649.183700512192) --X1
writeDouble('[VehicleCoordinates]+8F8', -649.183700512192) --X2
writeDouble('[VehicleCoordinates]+D0', -136.553804305087) --Y1
writeDouble('[VehicleCoordinates]+900', -136.553804305087) -- Y2
writeDouble('[VehicleCoordinates]+D8', 535.161209155776) -- Z1
writeDouble('[VehicleCoordinates]+908', 535.161209155776) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132362</ID>
                                      <Description>"Standard Order 505 - Deliver to Geologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -893.040383008573) --X1
writeDouble('[VehicleCoordinates]+8F8', -893.040383008573) --X2
writeDouble('[VehicleCoordinates]+D0', -783.167170839996) --Y1
writeDouble('[VehicleCoordinates]+900', -783.167170839996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 624.149068809963) -- Z1
writeDouble('[VehicleCoordinates]+908', 624.149068809963) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132363</ID>
                                      <Description>"Standard Order 506 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1235.27709960938) --X1
writeDouble('[VehicleCoordinates]+8F8', -1235.27709960938) --X2
writeDouble('[VehicleCoordinates]+D0', -1252.37450712258) --Y1
writeDouble('[VehicleCoordinates]+900', -1252.37450712258) -- Y2
writeDouble('[VehicleCoordinates]+D8', 410.93840658829) -- Z1
writeDouble('[VehicleCoordinates]+908', 410.93840658829) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132364</ID>
                                      <Description>"Standard Order 507 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1997.68957519531) --X1
writeDouble('[VehicleCoordinates]+8F8', 1997.68957519531) --X2
writeDouble('[VehicleCoordinates]+D0', -15.4660186767578) --Y1
writeDouble('[VehicleCoordinates]+900', -15.4660186767578) -- Y2
writeDouble('[VehicleCoordinates]+D8', 151.910415649414) -- Z1
writeDouble('[VehicleCoordinates]+908', 151.910415649414) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132365</ID>
                                      <Description>"Standard Order 508 - Deliver to Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 738.7852565107) --X1
writeDouble('[VehicleCoordinates]+8F8', 738.7852565107) --X2
writeDouble('[VehicleCoordinates]+D0', -641.454963174569) --Y1
writeDouble('[VehicleCoordinates]+900', -641.454963174569) -- Y2
writeDouble('[VehicleCoordinates]+D8', 111.161303309287) -- Z1
writeDouble('[VehicleCoordinates]+908', 111.161303309287) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132366</ID>
                                      <Description>"Standard Order 509, 510 - Deliver to Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1151.38770162807) --X1
writeDouble('[VehicleCoordinates]+8F8', 1151.38770162807) --X2
writeDouble('[VehicleCoordinates]+D0', 29.2159338650015) --Y1
writeDouble('[VehicleCoordinates]+900', 29.2159338650015) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.269395761401) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.269395761401) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132367</ID>
                                      <Description>"Standard Order 511 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132368</ID>
                                      <Description>"Standard Order 512, 513 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132369</ID>
                                      <Description>"Standard Order 514 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132370</ID>
                                      <Description>"Standard Order 515 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132371</ID>
                                  <Description>"From Mama's Lab"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132372</ID>
                                      <Description>"Teleport to: Mama's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1013.66293989933) --X1
writeDouble('[VehicleCoordinates]+8F8', 1013.66293989933) --X2
writeDouble('[VehicleCoordinates]+D0', -973.060315833813) --Y1
writeDouble('[VehicleCoordinates]+900', -973.060315833813) -- Y2
writeDouble('[VehicleCoordinates]+D8', 161.76572519014) -- Z1
writeDouble('[VehicleCoordinates]+908', 161.76572519014) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132373</ID>
                                      <Description>"Standard Order 516 - Pick up item 1/4"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',472.52000574194) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',472.52000574194) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-856.948457844) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-856.948457844) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',99.324810282258) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',99.324810282258) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132374</ID>
                                          <Description>"Standard Order 516 - Pick up item 2/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',477.82701870966) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',477.82701870966) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-813.26383212041) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-813.26383212041) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',92.307882513056) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',92.307882513056) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132375</ID>
                                          <Description>"Standard Order 516 - Pick up item 3/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',602.99721401595) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',602.99721401595) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-793.12836798771) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-793.12836798771) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',82.221621653415) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',82.221621653415) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132376</ID>
                                          <Description>"Standard Order 516 - Pick up item 4/4"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',510.20526123047) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',510.20526123047) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-819.00867949137) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-819.00867949137) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',83.81810760498) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',83.81810760498) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132377</ID>
                                          <Description>"Standard Order 516 - Deliver to South Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132378</ID>
                                  <Description>"From Distribution Center North of Mountain Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132379</ID>
                                      <Description>"Teleport to: Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132380</ID>
                                      <Description>"Standard Order 517 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 115.351102065019) --X1
writeDouble('[VehicleCoordinates]+8F8', 115.351102065019) --X2
writeDouble('[VehicleCoordinates]+D0', -1629.64987632092) --Y1
writeDouble('[VehicleCoordinates]+900', -1629.64987632092) -- Y2
writeDouble('[VehicleCoordinates]+D8', 108.919290458693) -- Z1
writeDouble('[VehicleCoordinates]+908', 108.919290458693) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132381</ID>
                                      <Description>"Standard Order 518, 519, 520 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 170.875869750977) --X1
writeDouble('[VehicleCoordinates]+8F8', 170.875869750977) --X2
writeDouble('[VehicleCoordinates]+D0', 1647.17614746094) --Y1
writeDouble('[VehicleCoordinates]+900', 1647.17614746094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 260.368743896484) -- Z1
writeDouble('[VehicleCoordinates]+908', 260.368743896484) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132382</ID>
                                      <Description>"Standard Order 521 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -649.183700512192) --X1
writeDouble('[VehicleCoordinates]+8F8', -649.183700512192) --X2
writeDouble('[VehicleCoordinates]+D0', -136.553804305087) --Y1
writeDouble('[VehicleCoordinates]+900', -136.553804305087) -- Y2
writeDouble('[VehicleCoordinates]+D8', 535.161209155776) -- Z1
writeDouble('[VehicleCoordinates]+908', 535.161209155776) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132383</ID>
                                      <Description>"Standard Order 522, 523 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -939.111646158212) --X1
writeDouble('[VehicleCoordinates]+8F8', -939.111646158212) --X2
writeDouble('[VehicleCoordinates]+D0', 1058.93283134418) --Y1
writeDouble('[VehicleCoordinates]+900', 1058.93283134418) -- Y2
writeDouble('[VehicleCoordinates]+D8', 596.160614547307) -- Z1
writeDouble('[VehicleCoordinates]+908', 596.160614547307) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132384</ID>
                                      <Description>"Standard Order 524, 525 - Deliver to Photographer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2159.29223628451) --X1
writeDouble('[VehicleCoordinates]+8F8', -2159.29223628451) --X2
writeDouble('[VehicleCoordinates]+D0', 606.801757861564) --Y1
writeDouble('[VehicleCoordinates]+900', 606.801757861564) -- Y2
writeDouble('[VehicleCoordinates]+D8', 264.913360571171) -- Z1
writeDouble('[VehicleCoordinates]+908', 264.913360571171) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132385</ID>
                                      <Description>"Standard Order 526 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -325.113752107106) --X1
writeDouble('[VehicleCoordinates]+8F8', -325.113752107106) --X2
writeDouble('[VehicleCoordinates]+D0', 983.230529372708) --Y1
writeDouble('[VehicleCoordinates]+900', 983.230529372708) -- Y2
writeDouble('[VehicleCoordinates]+D8', 735.897462587294) -- Z1
writeDouble('[VehicleCoordinates]+908', 735.897462587294) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132386</ID>
                                      <Description>"Standard Order 527, 528 - Deliver to Doctor"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1430.92370007196) --X1
writeDouble('[VehicleCoordinates]+8F8', -1430.92370007196) --X2
writeDouble('[VehicleCoordinates]+D0', 66.8332373271705) --Y1
writeDouble('[VehicleCoordinates]+900', 66.8332373271705) -- Y2
writeDouble('[VehicleCoordinates]+D8', 358.963532917869) -- Z1
writeDouble('[VehicleCoordinates]+908', 358.963532917869) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132387</ID>
                                      <Description>"Standard Order 529 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1831.26241262823) --X1
writeDouble('[VehicleCoordinates]+8F8', -1831.26241262823) --X2
writeDouble('[VehicleCoordinates]+D0', -712.536589082141) --Y1
writeDouble('[VehicleCoordinates]+900', -712.536589082141) -- Y2
writeDouble('[VehicleCoordinates]+D8', 465.668199942371) -- Z1
writeDouble('[VehicleCoordinates]+908', 465.668199942371) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132388</ID>
                                      <Description>"Standard Order 530 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132389</ID>
                                      <Description>"Standard Order 531, 532, 533, 534, 535 - Deliver to Novelists's Son"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2429.98510742188) --X1
writeDouble('[VehicleCoordinates]+8F8', -2429.98510742188) --X2
writeDouble('[VehicleCoordinates]+D0', 1292.8735588775) --Y1
writeDouble('[VehicleCoordinates]+900', 1292.8735588775) -- Y2
writeDouble('[VehicleCoordinates]+D8', 249.609417378204) -- Z1
writeDouble('[VehicleCoordinates]+908', 249.609417378204) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132390</ID>
                                      <Description>"Standard Order 536 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132391</ID>
                                      <Description>"Standard Order 537, 538 - Deliver to Distribution Center South of Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1054.52221679688) --X1
writeDouble('[VehicleCoordinates]+8F8', 1054.52221679688) --X2
writeDouble('[VehicleCoordinates]+D0', 415.385344523893) --Y1
writeDouble('[VehicleCoordinates]+900', 415.385344523893) -- Y2
writeDouble('[VehicleCoordinates]+D8', 143.551446895804) -- Z1
writeDouble('[VehicleCoordinates]+908', 143.551446895804) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132392</ID>
                                      <Description>"Standard Order 539 - South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132393</ID>
                                      <Description>"Standard Order 540 - Pick up 8 items from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -762.880743824688) --X1
writeDouble('[VehicleCoordinates]+8F8', -762.880743824688) --X2
writeDouble('[VehicleCoordinates]+D0', 1811.14760256781) --Y1
writeDouble('[VehicleCoordinates]+900', 1811.14760256781) -- Y2
writeDouble('[VehicleCoordinates]+D8', 223.408607687459) -- Z1
writeDouble('[VehicleCoordinates]+908', 223.408607687459) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132394</ID>
                                      <Description>"Standard Order 541, 543 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132395</ID>
                                      <Description>"Standard Order 542 - Pick up Item 1, 2, 3 out of 20 from MULEs Postbox"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1698.36560058594) --X1
writeDouble('[VehicleCoordinates]+8F8', -1698.36560058594) --X2
writeDouble('[VehicleCoordinates]+D0', 1087.97488277915) --Y1
writeDouble('[VehicleCoordinates]+900', 1087.97488277915) -- Y2
writeDouble('[VehicleCoordinates]+D8', 219.390731680823) -- Z1
writeDouble('[VehicleCoordinates]+908', 219.390731680823) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132396</ID>
                                          <Description>"Standard Order 542 - Pick up Item 4, 5, 6, 7, 8, 9, 10, 11 out of 20 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1549.63763756896) --X1
writeDouble('[VehicleCoordinates]+8F8', -1549.63763756896) --X2
writeDouble('[VehicleCoordinates]+D0', 1279.34696475638) --Y1
writeDouble('[VehicleCoordinates]+900', 1279.34696475638) -- Y2
writeDouble('[VehicleCoordinates]+D8', 240.661286312599) -- Z1
writeDouble('[VehicleCoordinates]+908', 240.661286312599) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132397</ID>
                                          <Description>"Standard Order 542 - Pick up Item 12, 13, 14, 15, 16, 17, 18, 19, 20 out of 20 from MULEs Postbox"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2031.99719238281) --X1
writeDouble('[VehicleCoordinates]+8F8', -2031.99719238281) --X2
writeDouble('[VehicleCoordinates]+D0', 1277.17714151068) --Y1
writeDouble('[VehicleCoordinates]+900', 1277.17714151068) -- Y2
writeDouble('[VehicleCoordinates]+D8', 222.56957095333) -- Z1
writeDouble('[VehicleCoordinates]+908', 222.56957095333) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                        <CheatEntry>
                                          <ID>132398</ID>
                                          <Description>"Standard Order 542 - Deliver to Mountain Knot City"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132399</ID>
                                      <Description>"Standard Order 544, 545 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1221.86779785156) --X1
writeDouble('[VehicleCoordinates]+8F8', -1221.86779785156) --X2
writeDouble('[VehicleCoordinates]+D0', -229.087647924799) --Y1
writeDouble('[VehicleCoordinates]+900', -229.087647924799) -- Y2
writeDouble('[VehicleCoordinates]+D8', 531.693955322326) -- Z1
writeDouble('[VehicleCoordinates]+908', 531.693955322326) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133052</ID>
                                      <Description>"Standard Order 636 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132400</ID>
                                  <Description>"From Mountain Knot City"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132401</ID>
                                      <Description>"Teleport to: Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132402</ID>
                                      <Description>"Standard Order 546, 547 - Deliver to Waystation North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 170.875869750977) --X1
writeDouble('[VehicleCoordinates]+8F8', 170.875869750977) --X2
writeDouble('[VehicleCoordinates]+D0', 1647.17614746094) --Y1
writeDouble('[VehicleCoordinates]+900', 1647.17614746094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 260.368743896484) -- Z1
writeDouble('[VehicleCoordinates]+908', 260.368743896484) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132403</ID>
                                      <Description>"Standard Order 548, 549 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -649.183700512192) --X1
writeDouble('[VehicleCoordinates]+8F8', -649.183700512192) --X2
writeDouble('[VehicleCoordinates]+D0', -136.553804305087) --Y1
writeDouble('[VehicleCoordinates]+900', -136.553804305087) -- Y2
writeDouble('[VehicleCoordinates]+D8', 535.161209155776) -- Z1
writeDouble('[VehicleCoordinates]+908', 535.161209155776) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132404</ID>
                                      <Description>"Standard Order 550, 551 - Deliver to Mountaineer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -939.111646158212) --X1
writeDouble('[VehicleCoordinates]+8F8', -939.111646158212) --X2
writeDouble('[VehicleCoordinates]+D0', 1058.93283134418) --Y1
writeDouble('[VehicleCoordinates]+900', 1058.93283134418) -- Y2
writeDouble('[VehicleCoordinates]+D8', 596.160614547307) -- Z1
writeDouble('[VehicleCoordinates]+908', 596.160614547307) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132405</ID>
                                      <Description>"Standard Order 552, 553 - Deliver to Photographer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2159.29223628451) --X1
writeDouble('[VehicleCoordinates]+8F8', -2159.29223628451) --X2
writeDouble('[VehicleCoordinates]+D0', 606.801757861564) --Y1
writeDouble('[VehicleCoordinates]+900', 606.801757861564) -- Y2
writeDouble('[VehicleCoordinates]+D8', 264.913360571171) -- Z1
writeDouble('[VehicleCoordinates]+908', 264.913360571171) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132406</ID>
                                      <Description>"Standard Order 554, 555 - Deliver to Spiritualist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -325.113752107106) --X1
writeDouble('[VehicleCoordinates]+8F8', -325.113752107106) --X2
writeDouble('[VehicleCoordinates]+D0', 983.230529372708) --Y1
writeDouble('[VehicleCoordinates]+900', 983.230529372708) -- Y2
writeDouble('[VehicleCoordinates]+D8', 735.897462587294) -- Z1
writeDouble('[VehicleCoordinates]+908', 735.897462587294) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132407</ID>
                                      <Description>"Standard Order 556, 557, 558 - Deliver to Doctor"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1430.92370007196) --X1
writeDouble('[VehicleCoordinates]+8F8', -1430.92370007196) --X2
writeDouble('[VehicleCoordinates]+D0', 66.8332373271705) --Y1
writeDouble('[VehicleCoordinates]+900', 66.8332373271705) -- Y2
writeDouble('[VehicleCoordinates]+D8', 358.963532917869) -- Z1
writeDouble('[VehicleCoordinates]+908', 358.963532917869) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132408</ID>
                                      <Description>"Standard Order 559, 560 - Deliver to Geologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -893.040383008573) --X1
writeDouble('[VehicleCoordinates]+8F8', -893.040383008573) --X2
writeDouble('[VehicleCoordinates]+D0', -783.167170839996) --Y1
writeDouble('[VehicleCoordinates]+900', -783.167170839996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 624.149068809963) -- Z1
writeDouble('[VehicleCoordinates]+908', 624.149068809963) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132409</ID>
                                      <Description>"Standard Order 561 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1235.27709960938) --X1
writeDouble('[VehicleCoordinates]+8F8', -1235.27709960938) --X2
writeDouble('[VehicleCoordinates]+D0', -1252.37450712258) --Y1
writeDouble('[VehicleCoordinates]+900', -1252.37450712258) -- Y2
writeDouble('[VehicleCoordinates]+D8', 410.93840658829) -- Z1
writeDouble('[VehicleCoordinates]+908', 410.93840658829) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132410</ID>
                                      <Description>"Standard Order 562 - Deliver to Timefall Farm"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 115.351102065019) --X1
writeDouble('[VehicleCoordinates]+8F8', 115.351102065019) --X2
writeDouble('[VehicleCoordinates]+D0', -1629.64987632092) --Y1
writeDouble('[VehicleCoordinates]+900', -1629.64987632092) -- Y2
writeDouble('[VehicleCoordinates]+D8', 108.919290458693) -- Z1
writeDouble('[VehicleCoordinates]+908', 108.919290458693) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132411</ID>
                                      <Description>"Standard Order 563, 564 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -402.304512128479) --X1
writeDouble('[VehicleCoordinates]+8F8', -402.304512128479) --X2
writeDouble('[VehicleCoordinates]+D0', -1165.69761503304) --Y1
writeDouble('[VehicleCoordinates]+900', -1165.69761503304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 247.350454353234) -- Z1
writeDouble('[VehicleCoordinates]+908', 247.350454353234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132412</ID>
                                      <Description>"Standard Order 565, 566 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1831.26241262823) --X1
writeDouble('[VehicleCoordinates]+8F8', -1831.26241262823) --X2
writeDouble('[VehicleCoordinates]+D0', -712.536589082141) --Y1
writeDouble('[VehicleCoordinates]+900', -712.536589082141) -- Y2
writeDouble('[VehicleCoordinates]+D8', 465.668199942371) -- Z1
writeDouble('[VehicleCoordinates]+908', 465.668199942371) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132413</ID>
                                      <Description>"Standard Order 567, 568 - Deliver to Film Director"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1997.68957519531) --X1
writeDouble('[VehicleCoordinates]+8F8', 1997.68957519531) --X2
writeDouble('[VehicleCoordinates]+D0', -15.4660186767578) --Y1
writeDouble('[VehicleCoordinates]+900', -15.4660186767578) -- Y2
writeDouble('[VehicleCoordinates]+D8', 151.910415649414) -- Z1
writeDouble('[VehicleCoordinates]+908', 151.910415649414) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132414</ID>
                                      <Description>"Standard Order 569, 570 - Deliver to Cosplayer"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 738.7852565107) --X1
writeDouble('[VehicleCoordinates]+8F8', 738.7852565107) --X2
writeDouble('[VehicleCoordinates]+D0', -641.454963174569) --Y1
writeDouble('[VehicleCoordinates]+900', -641.454963174569) -- Y2
writeDouble('[VehicleCoordinates]+D8', 111.161303309287) -- Z1
writeDouble('[VehicleCoordinates]+908', 111.161303309287) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132415</ID>
                                      <Description>"Standard Order 571, 572 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132416</ID>
                                      <Description>"Standard Order 573, 574 - Deliver to Collector"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1151.38770162807) --X1
writeDouble('[VehicleCoordinates]+8F8', 1151.38770162807) --X2
writeDouble('[VehicleCoordinates]+D0', 29.2159338650015) --Y1
writeDouble('[VehicleCoordinates]+900', 29.2159338650015) -- Y2
writeDouble('[VehicleCoordinates]+D8', 134.269395761401) -- Z1
writeDouble('[VehicleCoordinates]+908', 134.269395761401) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132417</ID>
                                      <Description>"Standard Order 575, 576 - Deliver to Novelists's Son"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2429.98510742188) --X1
writeDouble('[VehicleCoordinates]+8F8', -2429.98510742188) --X2
writeDouble('[VehicleCoordinates]+D0', 1292.8735588775) --Y1
writeDouble('[VehicleCoordinates]+900', 1292.8735588775) -- Y2
writeDouble('[VehicleCoordinates]+D8', 249.609417378204) -- Z1
writeDouble('[VehicleCoordinates]+908', 249.609417378204) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132418</ID>
                                      <Description>"Standard Order 577, 578 - Deliver to Lake Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2578.24438476563) --X1
writeDouble('[VehicleCoordinates]+8F8', 2578.24438476563) --X2
writeDouble('[VehicleCoordinates]+D0', 2013.99584960938) --Y1
writeDouble('[VehicleCoordinates]+900', 2013.99584960938) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.465883132245) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.465883132245) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132419</ID>
                                      <Description>"Standard Order 579, 580 - Deliver to Weather Station"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 51.3278233655956) --X1
writeDouble('[VehicleCoordinates]+8F8', 51.3278233655956) --X2
writeDouble('[VehicleCoordinates]+D0', -74.697151184082) --Y1
writeDouble('[VehicleCoordinates]+900', -74.697151184082) -- Y2
writeDouble('[VehicleCoordinates]+D8', 310.060264070773) -- Z1
writeDouble('[VehicleCoordinates]+908', 310.060264070773) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132420</ID>
                                      <Description>"Standard Order 581 - Deliver to South Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1386.42834472656) --X1
writeDouble('[VehicleCoordinates]+8F8', 1386.42834472656) --X2
writeDouble('[VehicleCoordinates]+D0', -1286.35160940996) --Y1
writeDouble('[VehicleCoordinates]+900', -1286.35160940996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 138.261296221005) -- Z1
writeDouble('[VehicleCoordinates]+908', 138.261296221005) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132421</ID>
                                      <Description>"Standard Order 582, 583 - Deliver to Distribution Center North of Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1746.50036621094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1746.50036621094) --X2
writeDouble('[VehicleCoordinates]+D0', 2039.28461942861) --Y1
writeDouble('[VehicleCoordinates]+900', 2039.28461942861) -- Y2
writeDouble('[VehicleCoordinates]+D8', 225.991669961092) -- Z1
writeDouble('[VehicleCoordinates]+908', 225.991669961092) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132422</ID>
                                      <Description>"Standard Order 584, 585 - Deliver to Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1221.86779785156) --X1
writeDouble('[VehicleCoordinates]+8F8', -1221.86779785156) --X2
writeDouble('[VehicleCoordinates]+D0', -229.087647924799) --Y1
writeDouble('[VehicleCoordinates]+900', -229.087647924799) -- Y2
writeDouble('[VehicleCoordinates]+D8', 531.693955322326) -- Z1
writeDouble('[VehicleCoordinates]+908', 531.693955322326) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133054</ID>
                                      <Description>"Standard Order 637 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132423</ID>
                                  <Description>"From Heartman's Lab"</Description>
                                  <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                                  <GroupHeader>1</GroupHeader>
                                  <CheatEntries>
                                    <CheatEntry>
                                      <ID>132424</ID>
                                      <Description>"Teleport to: Heartman's Lab"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1221.86779785156) --X1
writeDouble('[VehicleCoordinates]+8F8', -1221.86779785156) --X2
writeDouble('[VehicleCoordinates]+D0', -229.087647924799) --Y1
writeDouble('[VehicleCoordinates]+900', -229.087647924799) -- Y2
writeDouble('[VehicleCoordinates]+D8', 531.693955322326) -- Z1
writeDouble('[VehicleCoordinates]+908', 531.693955322326) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132425</ID>
                                      <Description>"Standard Order 586, 587 - Deliver to Roboticist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -649.183700512192) --X1
writeDouble('[VehicleCoordinates]+8F8', -649.183700512192) --X2
writeDouble('[VehicleCoordinates]+D0', -136.553804305087) --Y1
writeDouble('[VehicleCoordinates]+900', -136.553804305087) -- Y2
writeDouble('[VehicleCoordinates]+D8', 535.161209155776) -- Z1
writeDouble('[VehicleCoordinates]+908', 535.161209155776) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132426</ID>
                                      <Description>"Standard Order 588 - Deliver to Doctor"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1430.92370007196) --X1
writeDouble('[VehicleCoordinates]+8F8', -1430.92370007196) --X2
writeDouble('[VehicleCoordinates]+D0', 66.8332373271705) --Y1
writeDouble('[VehicleCoordinates]+900', 66.8332373271705) -- Y2
writeDouble('[VehicleCoordinates]+D8', 358.963532917869) -- Z1
writeDouble('[VehicleCoordinates]+908', 358.963532917869) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132427</ID>
                                      <Description>"Standard Order 589, 590 - Deliver to Geologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -893.040383008573) --X1
writeDouble('[VehicleCoordinates]+8F8', -893.040383008573) --X2
writeDouble('[VehicleCoordinates]+D0', -783.167170839996) --Y1
writeDouble('[VehicleCoordinates]+900', -783.167170839996) -- Y2
writeDouble('[VehicleCoordinates]+D8', 624.149068809963) -- Z1
writeDouble('[VehicleCoordinates]+908', 624.149068809963) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132428</ID>
                                      <Description>"Standard Order 591, 592, 593 - Deliver to Paleontologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1235.27709960938) --X1
writeDouble('[VehicleCoordinates]+8F8', -1235.27709960938) --X2
writeDouble('[VehicleCoordinates]+D0', -1252.37450712258) --Y1
writeDouble('[VehicleCoordinates]+900', -1252.37450712258) -- Y2
writeDouble('[VehicleCoordinates]+D8', 410.93840658829) -- Z1
writeDouble('[VehicleCoordinates]+908', 410.93840658829) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132429</ID>
                                      <Description>"Standard Order 594, 595 - Deliver to Evo-devo Biologist"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1831.26241262823) --X1
writeDouble('[VehicleCoordinates]+8F8', -1831.26241262823) --X2
writeDouble('[VehicleCoordinates]+D0', -712.536589082141) --Y1
writeDouble('[VehicleCoordinates]+900', -712.536589082141) -- Y2
writeDouble('[VehicleCoordinates]+D8', 465.668199942371) -- Z1
writeDouble('[VehicleCoordinates]+908', 465.668199942371) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132430</ID>
                                      <Description>"Standard Order 596, 597 - Deliver to Mountain Knot City"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1097.30987242924) --X1
writeDouble('[VehicleCoordinates]+8F8', -1097.30987242924) --X2
writeDouble('[VehicleCoordinates]+D0', 282.611919976647) --Y1
writeDouble('[VehicleCoordinates]+900', 282.611919976647) -- Y2
writeDouble('[VehicleCoordinates]+D8', 352.350160803609) -- Z1
writeDouble('[VehicleCoordinates]+908', 352.350160803609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132431</ID>
                                      <Description>"Standard Order 598 - Pick up 4 items"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-991.72135703353) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-991.72135703353) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-629.81854770826) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-629.81854770826) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',682.24178317672) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',682.24178317672) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132432</ID>
                                          <Description>"Standard Order 598 - (Player Only) Teleport Back to Vehicle"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-990.73754882813) -- X Coord
writeFloat('[PlayerCoordinates]+84',-633.95098876953) -- Y Coord
writeFloat('[PlayerCoordinates]+88',687.26910400391) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>132433</ID>
                                      <Description>"Standard Order 599 - Pick up item 1/3"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1156.4705406989) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1156.4705406989) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-712.16086824326) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-712.16086824326) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',629.47804777237) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',629.47804777237) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                      <CheatEntries>
                                        <CheatEntry>
                                          <ID>132434</ID>
                                          <Description>"Standard Order 599 - Pick up item 2/3, 3/3"</Description>
                                          <VariableType>Auto Assembler Script</VariableType>
                                          <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1237.3637674405) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1237.3637674405) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1258.2967487481) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1258.2967487481) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',410.51202418713) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',410.51202418713) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                        </CheatEntry>
                                      </CheatEntries>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133057</ID>
                                      <Description>"Standard Order 638 - Deliver to Veteran Porter"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -402.304512128479) --X1
writeDouble('[VehicleCoordinates]+8F8', -402.304512128479) --X2
writeDouble('[VehicleCoordinates]+D0', -1165.69761503304) --Y1
writeDouble('[VehicleCoordinates]+900', -1165.69761503304) -- Y2
writeDouble('[VehicleCoordinates]+D8', 247.350454353234) -- Z1
writeDouble('[VehicleCoordinates]+908', 247.350454353234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                    <CheatEntry>
                                      <ID>133105</ID>
                                      <Description>"Standard Order 639 - Deliver to First Prepper"</Description>
                                      <VariableType>Auto Assembler Script</VariableType>
                                      <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -215.136096792216) --X1
writeDouble('[VehicleCoordinates]+8F8', -215.136096792216) --X2
writeDouble('[VehicleCoordinates]+D0', 718.149110347746) --Y1
writeDouble('[VehicleCoordinates]+900', 718.149110347746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 787.233213871004) -- Z1
writeDouble('[VehicleCoordinates]+908', 787.233213871004) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                    </CheatEntry>
                                  </CheatEntries>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132435</ID>
                      <Description>"Mule Postboxes [Dangerous]"</Description>
                      <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>132436</ID>
                          <Description>"Eastern Region"</Description>
                          <Options moAllowManualCollapseAndExpand="1"/>
                          <GroupHeader>1</GroupHeader>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>132437</ID>
                              <Description>"Player"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>132438</ID>
                                  <Description>"North Region"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 347.7147217)
writeFloat('[PlayerCoordinates]+84', 806.9052734)
writeFloat('[PlayerCoordinates]+88', 164.5243073)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132439</ID>
                                  <Description>"South Region"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -622.9569702)
writeFloat('[PlayerCoordinates]+84', -107.1672058)
writeFloat('[PlayerCoordinates]+88', 223.7973175)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132997</ID>
                                  <Description>"Ruined Factory - Outside"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',277.41485595703) -- X Coord
writeFloat('[PlayerCoordinates]+84',519.83526611328) -- Y Coord
writeFloat('[PlayerCoordinates]+88',298.10589599609) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>133006</ID>
                                  <Description>"Ruined Factory - Inside"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',341.39114379883) -- X Coord
writeFloat('[PlayerCoordinates]+84',517.20544433594) -- Y Coord
writeFloat('[PlayerCoordinates]+88',298.10589599609) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>133026</ID>
                                  <Description>"Ruined Factory - Inside by Terminal"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',353.88189697266) -- X Coord
writeFloat('[PlayerCoordinates]+84',570.36444091797) -- Y Coord
writeFloat('[PlayerCoordinates]+88',291.35690307617) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>132440</ID>
                              <Description>"Vehicle"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>132441</ID>
                                  <Description>"North Region"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 353.032836914063) --X1
writeDouble('[VehicleCoordinates]+8F8', 353.032836914063) --X2
writeDouble('[VehicleCoordinates]+D0', 810.902099609375) --Y1
writeDouble('[VehicleCoordinates]+900', 810.902099609375) -- Y2
writeDouble('[VehicleCoordinates]+D8', 162.930827675191) -- Z1
writeDouble('[VehicleCoordinates]+908', 162.930827675191) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132442</ID>
                                  <Description>"South Region"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -623.585700250143) --X1
writeDouble('[VehicleCoordinates]+8F8', -623.585700250143) --X2
writeDouble('[VehicleCoordinates]+D0', -109.13662082921) --Y1
writeDouble('[VehicleCoordinates]+900', -109.13662082921) -- Y2
writeDouble('[VehicleCoordinates]+D8', 222.927660603733) -- Z1
writeDouble('[VehicleCoordinates]+908', 222.927660603733) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>132443</ID>
                          <Description>"Central Region"</Description>
                          <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                          <GroupHeader>1</GroupHeader>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>132444</ID>
                              <Description>"Player"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>132445</ID>
                                  <Description>"South of Lake Knot City #1 (West Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2339.476074)
writeFloat('[PlayerCoordinates]+84', 1372.439453)
writeFloat('[PlayerCoordinates]+88', 182.6830597)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132446</ID>
                                  <Description>"South of Lake Knot City #2 (East Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2464.028809)
writeFloat('[PlayerCoordinates]+84', 1354.382446)
writeFloat('[PlayerCoordinates]+88', 186.3952332)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132447</ID>
                                  <Description>"West of Engineer #1 (SouthEast Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1674.913452)
writeFloat('[PlayerCoordinates]+84', 960.6556396)
writeFloat('[PlayerCoordinates]+88', 175.3177338)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132448</ID>
                                  <Description>"West of Engineer #2 (North Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.813354)
writeFloat('[PlayerCoordinates]+84', 1064.050903)
writeFloat('[PlayerCoordinates]+88', 176.1360779)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132449</ID>
                                  <Description>"West of Engineer #3 (SouthWest Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1519.881714)
writeFloat('[PlayerCoordinates]+84', 992.4251099)
writeFloat('[PlayerCoordinates]+88', 173.4361572)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132450</ID>
                                  <Description>"South West of Craftsman #1 (Northeast Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1065.5354)
writeFloat('[PlayerCoordinates]+84', 921.6898804)
writeFloat('[PlayerCoordinates]+88', 160.447403)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132451</ID>
                                  <Description>"South West of Craftsman #2 (SouthWest Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 676.0421753)
writeFloat('[PlayerCoordinates]+84', 721.0518188)
writeFloat('[PlayerCoordinates]+88', 164.790802)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132452</ID>
                                  <Description>"South West of Craftsman #3 (NorthWest Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 539.6925049)
writeFloat('[PlayerCoordinates]+84', 885.2458496)
writeFloat('[PlayerCoordinates]+88', 174.2861328)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132453</ID>
                                  <Description>"Area Surrounding Collector #1 (North Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1450.897339)
writeFloat('[PlayerCoordinates]+84', 210.0477753)
writeFloat('[PlayerCoordinates]+88', 134.6021881)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132454</ID>
                                  <Description>"Area Surrounding Collector #2 (Center Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1416.170044)
writeFloat('[PlayerCoordinates]+84', 33.30061722)
writeFloat('[PlayerCoordinates]+88', 130.302597)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132455</ID>
                                  <Description>"Area Surrounding Collector #3 (South Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1322.740356)
writeFloat('[PlayerCoordinates]+84', -104.4131546)
writeFloat('[PlayerCoordinates]+88', 134.1850281)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132456</ID>
                                  <Description>"North of Timefall Farm #1 (SouthWest Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -47.38366318)
writeFloat('[PlayerCoordinates]+84', -1264.429321)
writeFloat('[PlayerCoordinates]+88', 117.9734192)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132457</ID>
                                  <Description>"North of Timefall Farm #2 (SouthEast Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 212.8048248)
writeFloat('[PlayerCoordinates]+84', -1321.593384)
writeFloat('[PlayerCoordinates]+88', 111.9862213)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132458</ID>
                                  <Description>"North of Timefall Farm #3 (East Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 287.2895203)
writeFloat('[PlayerCoordinates]+84', -1231.669556)
writeFloat('[PlayerCoordinates]+88', 104.318367)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132459</ID>
                                  <Description>"East of Distribution Center North of Mountain Knot City (NorthWest Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -852.6716919)
writeFloat('[PlayerCoordinates]+84', 1918.503418)
writeFloat('[PlayerCoordinates]+88', 224.05896)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132460</ID>
                                  <Description>"East of Distribution Center North of Mountain Knot City (SouthEast Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -758.4589233)
writeFloat('[PlayerCoordinates]+84', 1811.8302)
writeFloat('[PlayerCoordinates]+88', 224.3075867)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132461</ID>
                                  <Description>"West of Mountaineer #1 (NorthEast Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1550.640991)
writeFloat('[PlayerCoordinates]+84', 1282.209595)
writeFloat('[PlayerCoordinates]+88', 241.9241943)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132462</ID>
                                  <Description>"West of Mountaineer #2 (South/Center Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1695.691895)
writeFloat('[PlayerCoordinates]+84', 1088.499268)
writeFloat('[PlayerCoordinates]+88', 220.418869)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132463</ID>
                                  <Description>"West of Mountaineer #3 (NorthWest Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2035.770142)
writeFloat('[PlayerCoordinates]+84', 1277.723877)
writeFloat('[PlayerCoordinates]+88', 223.827774)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132464</ID>
                                  <Description>"West of Paleontologist #1 (North Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1973.025146)
writeFloat('[PlayerCoordinates]+84', -1232.20105)
writeFloat('[PlayerCoordinates]+88', 319.3590088)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132465</ID>
                                  <Description>"West of Paleontologist #2 (SouthEast Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1888.633545)
writeFloat('[PlayerCoordinates]+84', -1423.368896)
writeFloat('[PlayerCoordinates]+88', 317.8652344)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132466</ID>
                                  <Description>"West of Paleontologist #3 (SouthWest Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2034.582642)
writeFloat('[PlayerCoordinates]+84', -1499.935303)
writeFloat('[PlayerCoordinates]+88', 287.5764771)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>132467</ID>
                              <Description>"Vehicle"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>132468</ID>
                                  <Description>"South of Lake Knot City #1 (West Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2339.37231445313) --X1
writeDouble('[VehicleCoordinates]+8F8', 2339.37231445313) --X2
writeDouble('[VehicleCoordinates]+D0', 1371.75949751723) --Y1
writeDouble('[VehicleCoordinates]+900', 1371.75949751723) -- Y2
writeDouble('[VehicleCoordinates]+D8', 181.743011474609) -- Z1
writeDouble('[VehicleCoordinates]+908', 181.743011474609) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132469</ID>
                                  <Description>"South of Lake Knot City #2 (East Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2463.60405191884) --X1
writeDouble('[VehicleCoordinates]+8F8', 2463.60405191884) --X2
writeDouble('[VehicleCoordinates]+D0', 1354.73044474371) --Y1
writeDouble('[VehicleCoordinates]+900', 1354.73044474371) -- Y2
writeDouble('[VehicleCoordinates]+D8', 185.547360344177) -- Z1
writeDouble('[VehicleCoordinates]+908', 185.547360344177) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132470</ID>
                                  <Description>"West of Engineer #1 (SouthEast Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1676.29306249085) --X1
writeDouble('[VehicleCoordinates]+8F8', 1676.29306249085) --X2
writeDouble('[VehicleCoordinates]+D0', 957.384109861756) --Y1
writeDouble('[VehicleCoordinates]+900', 957.384109861756) -- Y2
writeDouble('[VehicleCoordinates]+D8', 174.757174924946) -- Z1
writeDouble('[VehicleCoordinates]+908', 174.757174924946) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132471</ID>
                                  <Description>"West of Engineer #2 (North Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1617.93617112409) --X1
writeDouble('[VehicleCoordinates]+8F8', 1617.93617112409) --X2
writeDouble('[VehicleCoordinates]+D0', 1064.90197753906) --Y1
writeDouble('[VehicleCoordinates]+900', 1064.90197753906) -- Y2
writeDouble('[VehicleCoordinates]+D8', 175.162870201336) -- Z1
writeDouble('[VehicleCoordinates]+908', 175.162870201336) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132472</ID>
                                  <Description>"West of Engineer #3 (SouthWest Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1520.09213235634) --X1
writeDouble('[VehicleCoordinates]+8F8', 1520.09213235634) --X2
writeDouble('[VehicleCoordinates]+D0', 994.568443457356) --Y1
writeDouble('[VehicleCoordinates]+900', 994.568443457356) -- Y2
writeDouble('[VehicleCoordinates]+D8', 172.358861432918) -- Z1
writeDouble('[VehicleCoordinates]+908', 172.358861432918) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132473</ID>
                                  <Description>"South West of Craftsman #1 (Northeast Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1064.90069554793) --X1
writeDouble('[VehicleCoordinates]+8F8', 1064.90069554793) --X2
writeDouble('[VehicleCoordinates]+D0', 926.85973361315) --Y1
writeDouble('[VehicleCoordinates]+900', 926.85973361315) -- Y2
writeDouble('[VehicleCoordinates]+D8', 159.482284356258) -- Z1
writeDouble('[VehicleCoordinates]+908', 159.482284356258) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132474</ID>
                                  <Description>"South West of Craftsman #2 (SouthWest Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 673.999725637608) --X1
writeDouble('[VehicleCoordinates]+8F8', 673.999725637608) --X2
writeDouble('[VehicleCoordinates]+D0', 722.279145174543) --Y1
writeDouble('[VehicleCoordinates]+900', 722.279145174543) -- Y2
writeDouble('[VehicleCoordinates]+D8', 163.758468332118) -- Z1
writeDouble('[VehicleCoordinates]+908', 163.758468332118) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132475</ID>
                                  <Description>"South West of Craftsman #3 (NorthWest Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 542.179931640625) --X1
writeDouble('[VehicleCoordinates]+8F8', 542.179931640625) --X2
writeDouble('[VehicleCoordinates]+D0', 883.924469714286) --Y1
writeDouble('[VehicleCoordinates]+900', 883.924469714286) -- Y2
writeDouble('[VehicleCoordinates]+D8', 173.255883735445) -- Z1
writeDouble('[VehicleCoordinates]+908', 173.255883735445) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132476</ID>
                                  <Description>"Area Surrounding Collector #1 (North Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1453.71704101563) --X1
writeDouble('[VehicleCoordinates]+8F8', 1453.71704101563) --X2
writeDouble('[VehicleCoordinates]+D0', 212.112176940245) --Y1
writeDouble('[VehicleCoordinates]+900', 212.112176940245) -- Y2
writeDouble('[VehicleCoordinates]+D8', 133.719818115234) -- Z1
writeDouble('[VehicleCoordinates]+908', 133.719818115234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132477</ID>
                                  <Description>"Area Surrounding Collector #2 (Center Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1418.0397287627) --X1
writeDouble('[VehicleCoordinates]+8F8', 1418.0397287627) --X2
writeDouble('[VehicleCoordinates]+D0', 29.8784554046374) --Y1
writeDouble('[VehicleCoordinates]+900', 29.8784554046374) -- Y2
writeDouble('[VehicleCoordinates]+D8', 128.727154180244) -- Z1
writeDouble('[VehicleCoordinates]+908', 128.727154180244) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132478</ID>
                                  <Description>"Area Surrounding Collector #3 (South Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1329.70216027083) --X1
writeDouble('[VehicleCoordinates]+8F8', 1329.70216027083) --X2
writeDouble('[VehicleCoordinates]+D0', -99.677134081765) --Y1
writeDouble('[VehicleCoordinates]+900', -99.677134081765) -- Y2
writeDouble('[VehicleCoordinates]+D8', 133.769827856341) -- Z1
writeDouble('[VehicleCoordinates]+908', 133.769827856341) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132479</ID>
                                  <Description>"North of Timefall Farm #1 (SouthWest Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -45.4810066223145) --X1
writeDouble('[VehicleCoordinates]+8F8', -45.4810066223145) --X2
writeDouble('[VehicleCoordinates]+D0', -1266.28552246094) --Y1
writeDouble('[VehicleCoordinates]+900', -1266.28552246094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 116.924080021855) -- Z1
writeDouble('[VehicleCoordinates]+908', 116.924080021855) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132480</ID>
                                  <Description>"North of Timefall Farm #2 (SouthEast Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 212.90758372087) --X1
writeDouble('[VehicleCoordinates]+8F8', 212.90758372087) --X2
writeDouble('[VehicleCoordinates]+D0', -1322.76818123451) --Y1
writeDouble('[VehicleCoordinates]+900', -1322.76818123451) -- Y2
writeDouble('[VehicleCoordinates]+D8', 110.773302238177) -- Z1
writeDouble('[VehicleCoordinates]+908', 110.773302238177) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132481</ID>
                                  <Description>"North of Timefall Farm #3 (East Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 286.290642498279) --X1
writeDouble('[VehicleCoordinates]+8F8', 286.290642498279) --X2
writeDouble('[VehicleCoordinates]+D0', -1225.44865830959) --Y1
writeDouble('[VehicleCoordinates]+900', -1225.44865830959) -- Y2
writeDouble('[VehicleCoordinates]+D8', 103.500809471737) -- Z1
writeDouble('[VehicleCoordinates]+908', 103.500809471737) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132482</ID>
                                  <Description>"East of Distribution Center North of Mountain Knot City (NorthWest Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -852.131401307823) --X1
writeDouble('[VehicleCoordinates]+8F8', -852.131401307823) --X2
writeDouble('[VehicleCoordinates]+D0', 1921.13070426408) --Y1
writeDouble('[VehicleCoordinates]+900', 1921.13070426408) -- Y2
writeDouble('[VehicleCoordinates]+D8', 223.012044045121) -- Z1
writeDouble('[VehicleCoordinates]+908', 223.012044045121) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132483</ID>
                                  <Description>"East of Distribution Center North of Mountain Knot City (SouthEast Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -762.880743824688) --X1
writeDouble('[VehicleCoordinates]+8F8', -762.880743824688) --X2
writeDouble('[VehicleCoordinates]+D0', 1811.14760256781) --Y1
writeDouble('[VehicleCoordinates]+900', 1811.14760256781) -- Y2
writeDouble('[VehicleCoordinates]+D8', 223.408607687459) -- Z1
writeDouble('[VehicleCoordinates]+908', 223.408607687459) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132484</ID>
                                  <Description>"West of Mountaineer #1 (NorthEast Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1549.63763756896) --X1
writeDouble('[VehicleCoordinates]+8F8', -1549.63763756896) --X2
writeDouble('[VehicleCoordinates]+D0', 1279.34696475638) --Y1
writeDouble('[VehicleCoordinates]+900', 1279.34696475638) -- Y2
writeDouble('[VehicleCoordinates]+D8', 240.661286312599) -- Z1
writeDouble('[VehicleCoordinates]+908', 240.661286312599) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132485</ID>
                                  <Description>"West of Mountaineer #2 (South/Center Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1698.36560058594) --X1
writeDouble('[VehicleCoordinates]+8F8', -1698.36560058594) --X2
writeDouble('[VehicleCoordinates]+D0', 1087.97488277915) --Y1
writeDouble('[VehicleCoordinates]+900', 1087.97488277915) -- Y2
writeDouble('[VehicleCoordinates]+D8', 219.390731680823) -- Z1
writeDouble('[VehicleCoordinates]+908', 219.390731680823) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132486</ID>
                                  <Description>"West of Mountaineer #3 (NorthWest Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2031.99719238281) --X1
writeDouble('[VehicleCoordinates]+8F8', -2031.99719238281) --X2
writeDouble('[VehicleCoordinates]+D0', 1277.17714151068) --Y1
writeDouble('[VehicleCoordinates]+900', 1277.17714151068) -- Y2
writeDouble('[VehicleCoordinates]+D8', 222.56957095333) -- Z1
writeDouble('[VehicleCoordinates]+908', 222.56957095333) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132487</ID>
                                  <Description>"West of Paleontologist #1 (North Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1970.29462433288) --X1
writeDouble('[VehicleCoordinates]+8F8', -1970.29462433288) --X2
writeDouble('[VehicleCoordinates]+D0', -1226.92988345318) --Y1
writeDouble('[VehicleCoordinates]+900', -1226.92988345318) -- Y2
writeDouble('[VehicleCoordinates]+D8', 317.755384444125) -- Z1
writeDouble('[VehicleCoordinates]+908', 317.755384444125) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132488</ID>
                                  <Description>"West of Paleontologist #2 (SouthEast Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1886.37829589844) --X1
writeDouble('[VehicleCoordinates]+8F8', -1886.37829589844) --X2
writeDouble('[VehicleCoordinates]+D0', -1422.99836564608) --Y1
writeDouble('[VehicleCoordinates]+900', -1422.99836564608) -- Y2
writeDouble('[VehicleCoordinates]+D8', 316.825536068178) -- Z1
writeDouble('[VehicleCoordinates]+908', 316.825536068178) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132489</ID>
                                  <Description>"West of Paleontologist #3 (SouthWest Postbox)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2031.86502385937) --X1
writeDouble('[VehicleCoordinates]+8F8', -2031.86502385937) --X2
writeDouble('[VehicleCoordinates]+D0', -1494.35781756771) --Y1
writeDouble('[VehicleCoordinates]+900', -1494.35781756771) -- Y2
writeDouble('[VehicleCoordinates]+D8', 285.722850381182) -- Z1
writeDouble('[VehicleCoordinates]+908', 285.722850381182) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132490</ID>
                      <Description>"Hot Springs"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>132491</ID>
                          <Description>"Player"</Description>
                          <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                          <GroupHeader>1</GroupHeader>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>132492</ID>
                              <Description>"Central Region"</Description>
                              <Options moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>132493</ID>
                                  <Description>"The Northeastern Healing Spring"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1340.466309)
writeFloat('[PlayerCoordinates]+84', 1288.383301)
writeFloat('[PlayerCoordinates]+88', 182.5351105)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132494</ID>
                                  <Description>"The Crater Digestive Bath"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1731.767578)
writeFloat('[PlayerCoordinates]+84', -99.78659821)
writeFloat('[PlayerCoordinates]+88', 133.0311279)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132495</ID>
                                  <Description>"World's End Miracle Pool"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2254.47998)
writeFloat('[PlayerCoordinates]+84', 950.5306396)
writeFloat('[PlayerCoordinates]+88', 213.2780762)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132496</ID>
                                  <Description>"The Hidden Valley Digestive Bath"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1412.829468)
writeFloat('[PlayerCoordinates]+84', 43.66280365)
writeFloat('[PlayerCoordinates]+88', 360.8777466)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132497</ID>
                                  <Description>"The Falling Snows Invigorating Waters"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -534.6016235)
writeFloat('[PlayerCoordinates]+84', -135.2055206)
writeFloat('[PlayerCoordinates]+88', 545.9819336)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132498</ID>
                                  <Description>"The Heartwarming Spa"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1192.753662)
writeFloat('[PlayerCoordinates]+84', -233.138031)
writeFloat('[PlayerCoordinates]+88', 539.5395508)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132499</ID>
                                  <Description>"The Recharging Spring"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1840.82019)
writeFloat('[PlayerCoordinates]+84', -832.0254517)
writeFloat('[PlayerCoordinates]+88', 389.4522705)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>132500</ID>
                          <Description>"Vehicle"</Description>
                          <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                          <GroupHeader>1</GroupHeader>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>132501</ID>
                              <Description>"Central Region"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>132502</ID>
                                  <Description>"The Northeastern Healing Spring"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1339.7134750128) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1339.7134750128) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',1281.3366829037) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',1281.3366829037) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',181.80118412958) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',181.80118412958) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132503</ID>
                                  <Description>"The Crater Digestive Bath"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',1739.5397949219) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',1739.5397949219) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-107.90338796815) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-107.90338796815) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',130.47675201872) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',130.47675201872) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132504</ID>
                                  <Description>"World's End Miracle Pool"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-2247.8695003616) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-2247.8695003616) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',943.14053506586) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',943.14053506586) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',211.44186332225) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',211.44186332225) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132505</ID>
                                  <Description>"The Hidden Valley Digestive Bath"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1407.8285775594) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1407.8285775594) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',35.769364157802) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',35.769364157802) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',359.23476202815) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',359.23476202815) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132506</ID>
                                  <Description>"The Falling Snows Invigorating Waters"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-548.61670527262) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-548.61670527262) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-132.89735840248) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-132.89735840248) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',546.60176559867) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',546.60176559867) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132507</ID>
                                  <Description>"The Heartwarming Spa"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1192.0837578053) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1192.0837578053) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-234.29205322266) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-234.29205322266) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',538.29813084491) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',538.29813084491) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132508</ID>
                                  <Description>"The Recharging Spring"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1834.3568862893) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1834.3568862893) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-831.33782043604) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-831.33782043604) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',387.38759193365) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',387.38759193365) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132509</ID>
                      <Description>"Memory Chip Locations"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>132510</ID>
                          <Description>"Player"</Description>
                          <Options moAllowManualCollapseAndExpand="1"/>
                          <GroupHeader>1</GroupHeader>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>132511</ID>
                              <Description>"Eastern Region"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>132512</ID>
                                  <Description>"Memory Chip 1 - Frame Arms: Byakko"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 305.3226013)
writeFloat('[PlayerCoordinates]+84', 1109.664429)
writeFloat('[PlayerCoordinates]+88', 158.6854248)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132513</ID>
                                  <Description>"Memory Chip 2 - Frame Arms Girls: Byakko"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1526.256348)
writeFloat('[PlayerCoordinates]+84', 648.0244751)
writeFloat('[PlayerCoordinates]+88', 207.1336517)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132514</ID>
                                  <Description>"Memory Chip 15 - Big Fish"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2061.078125)
writeFloat('[PlayerCoordinates]+84', -633.9224243)
writeFloat('[PlayerCoordinates]+88', 156.3375244)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132515</ID>
                                  <Description>"Memory Chip 18 - The Seven Samurai"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -522.343689)
writeFloat('[PlayerCoordinates]+84', -59.92718887)
writeFloat('[PlayerCoordinates]+88', 248.2678375)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132516</ID>
                                  <Description>"Memory Chip 41 - Death Stranding/Low Roar"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1734.271362)
writeFloat('[PlayerCoordinates]+84', -523.2963257)
writeFloat('[PlayerCoordinates]+88', 146.0898895)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132517</ID>
                                  <Description>"Memory Chip 42 - Lucio Fulci’s Horror &amp; Thriller Compilation"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 464.7811584)
writeFloat('[PlayerCoordinates]+84', 232.5404968)
writeFloat('[PlayerCoordinates]+88', 249.9402924)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132518</ID>
                                  <Description>"Memory Chip 43 - Profondo Rosso Original Motion Picture Soundtrack"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1601.461914)
writeFloat('[PlayerCoordinates]+84', 1007.476196)
writeFloat('[PlayerCoordinates]+88', 149.9267578)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132519</ID>
                                  <Description>"Memory Chip 45 - dawn/SILENT POETS"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1344.4610595703) -- X Coord
writeFloat('[PlayerCoordinates]+84',-23.613605499268) -- Y Coord
writeFloat('[PlayerCoordinates]+88',287.42327880859) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132520</ID>
                                  <Description>"Memory Chip 49 - God of War Original Video Game Soundtrack"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1035.6492919922) -- X Coord
writeFloat('[PlayerCoordinates]+84',446.87802124023) -- Y Coord
writeFloat('[PlayerCoordinates]+88',249.23272705078) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>132521</ID>
                              <Description>"Central Region"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>132522</ID>
                                  <Description>"Memory Chip 3 - Frame Arms: Kagetora"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2762.211182)
writeFloat('[PlayerCoordinates]+84', 1994.752441)
writeFloat('[PlayerCoordinates]+88', 226.2251282)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132523</ID>
                                  <Description>"Memory Chip 4 - Frame Arms: Genbu"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 20.12612534)
writeFloat('[PlayerCoordinates]+84', -234.8839417)
writeFloat('[PlayerCoordinates]+88', 295.3948364)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132524</ID>
                                  <Description>"Memory Chip 5 - Frame Arms: Mingwu"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1037.479004)
writeFloat('[PlayerCoordinates]+84', -949.3127441)
writeFloat('[PlayerCoordinates]+88', 158.2014923)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132525</ID>
                                  <Description>"Memory Chip 6 - Kotobukiya Ludens Girl Model"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1786.029175)
writeFloat('[PlayerCoordinates]+84', 1939.587891)
writeFloat('[PlayerCoordinates]+88', 239.7809143)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132526</ID>
                                  <Description>"Memory Chip 7 - Prime 1 Studio 1/2 Scale Ludens Statue"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1044.637451)
writeFloat('[PlayerCoordinates]+84', 618.6408691)
writeFloat('[PlayerCoordinates]+88', 426.966095)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132527</ID>
                                  <Description>"Memory Chip 8 - Sentinel 1/6 Ludens Action Figure"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1715.0113525391) -- X Coord
writeFloat('[PlayerCoordinates]+84',389.47662353516) -- Y Coord
writeFloat('[PlayerCoordinates]+88',272.96578979492) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132528</ID>
                                  <Description>"Memory Chip 9 - Max Factory Ludens figma"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1672.410522)
writeFloat('[PlayerCoordinates]+84', -1227.48645)
writeFloat('[PlayerCoordinates]+88', 129.5138397)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132529</ID>
                                  <Description>"Memory Chip 11 - Christine"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1850.883423)
writeFloat('[PlayerCoordinates]+84', 799.9724731)
writeFloat('[PlayerCoordinates]+88', 194.0888214)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132530</ID>
                                  <Description>"Memory Chip 12 - Godzilla"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1194.658325)
writeFloat('[PlayerCoordinates]+84', 180.8851318)
writeFloat('[PlayerCoordinates]+88', 351.3838501)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132531</ID>
                                  <Description>"Memory Chip 13 - The Walk"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -260.7485657)
writeFloat('[PlayerCoordinates]+84', 764.059082)
writeFloat('[PlayerCoordinates]+88', 836.0373535)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132532</ID>
                                  <Description>"Memory Chip 14 - Stand By Me"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -351.7303467)
writeFloat('[PlayerCoordinates]+84', 2291.748779)
writeFloat('[PlayerCoordinates]+88', 228.4796753)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132533</ID>
                                  <Description>"Memory Chip 16 - Fright Night"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 887.1785889)
writeFloat('[PlayerCoordinates]+84', 1807.272461)
writeFloat('[PlayerCoordinates]+88', 173.8918304)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132534</ID>
                                  <Description>"Memory Chip 17 - Matango"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2184.953125)
writeFloat('[PlayerCoordinates]+84', 503.3970032)
writeFloat('[PlayerCoordinates]+88', 174.6264038)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132535</ID>
                                  <Description>"Memory Chip 19 - The Bridge on the River Kwai"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 645.4030151)
writeFloat('[PlayerCoordinates]+84', -1224.511597)
writeFloat('[PlayerCoordinates]+88', 82.30245972)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132536</ID>
                                  <Description>"Memory Chip 20 - Dr. Strangelove"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1048.530151)
writeFloat('[PlayerCoordinates]+84', -339.1749573)
writeFloat('[PlayerCoordinates]+88', 495.9084473)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132537</ID>
                                  <Description>"Memory Chip 21 - Eggshell Carving"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2446.21875)
writeFloat('[PlayerCoordinates]+84', 1385.121094)
writeFloat('[PlayerCoordinates]+88', 189.335495)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132538</ID>
                                  <Description>"Memory Chip 22 - Glasscraft"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1681.754761)
writeFloat('[PlayerCoordinates]+84', 1318.588501)
writeFloat('[PlayerCoordinates]+88', 174.0605469)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132539</ID>
                                  <Description>"Memory Chip 23 - Coffee Cup"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 338.1799316)
writeFloat('[PlayerCoordinates]+84', -1230.550659)
writeFloat('[PlayerCoordinates]+88', 104.4452591)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132540</ID>
                                  <Description>"Memory Chip 24 - Soap Bubble"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 85.89586639)
writeFloat('[PlayerCoordinates]+84', -1589.502197)
writeFloat('[PlayerCoordinates]+88', 125.0923767)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132541</ID>
                                  <Description>"Memory Chip 25 - Frozen Soap Bubble"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1276.22168)
writeFloat('[PlayerCoordinates]+84', -222.9790649)
writeFloat('[PlayerCoordinates]+88', 591.480957)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132542</ID>
                                  <Description>"Memory Chip 26 - Dandelion Seeds"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -448.8872681)
writeFloat('[PlayerCoordinates]+84', 560.1846313)
writeFloat('[PlayerCoordinates]+88', 706.6471558)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132543</ID>
                                  <Description>"Memory Chip 27 - Wine Glass"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1245.559082)
writeFloat('[PlayerCoordinates]+84', 958.6608276)
writeFloat('[PlayerCoordinates]+88', 449.2102051)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132544</ID>
                                  <Description>"Memory Chip 28 - Pottery"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1126.537354)
writeFloat('[PlayerCoordinates]+84', -1102.964478)
writeFloat('[PlayerCoordinates]+88', 160.5681)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132545</ID>
                                  <Description>"Memory Chip 29 - Snow Crystal"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1009.758545)
writeFloat('[PlayerCoordinates]+84', 163.1565247)
writeFloat('[PlayerCoordinates]+88', 456.9030762)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132546</ID>
                                  <Description>"Memory Chip 30 - Fused Silica"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1370.215332)
writeFloat('[PlayerCoordinates]+84', -1339.221191)
writeFloat('[PlayerCoordinates]+88', 339.9326477)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132547</ID>
                                  <Description>"Memory Chip 31 - Reverse Trike: "Ride" Type"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',465.96322631836) -- X Coord
writeFloat('[PlayerCoordinates]+84',-859.97082519531) -- Y Coord
writeFloat('[PlayerCoordinates]+88',102.04444122314) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132548</ID>
                                  <Description>"Memory Chip 32 - Honda NSR250R"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1624.102661)
writeFloat('[PlayerCoordinates]+84', 1045.278076)
writeFloat('[PlayerCoordinates]+88', 176.3342285)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132549</ID>
                                  <Description>"Memory Chip 33 - Honda Rebel 500"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 11.00675392)
writeFloat('[PlayerCoordinates]+84', -1250.198975)
writeFloat('[PlayerCoordinates]+88', 122.8499985)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132550</ID>
                                  <Description>"Memory Chip 34 - Triumph Bonneville Bobber"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1459.526001)
writeFloat('[PlayerCoordinates]+84', 186.265152)
writeFloat('[PlayerCoordinates]+88', 134.6276855)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132551</ID>
                                  <Description>"Memory Chip 35 - Triumph Street Triple RS"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1639.299683)
writeFloat('[PlayerCoordinates]+84', -297.3280945)
writeFloat('[PlayerCoordinates]+88', 138.3884888)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132552</ID>
                                  <Description>"Memory Chip 36 -  Yamaha MT-09"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',572.68743896484) -- X Coord
writeFloat('[PlayerCoordinates]+84',884.79681396484) -- Y Coord
writeFloat('[PlayerCoordinates]+88',170.16705322266) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132553</ID>
                                  <Description>"Memory Chip 37 - Yamaha RD500LC"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -722.5377197)
writeFloat('[PlayerCoordinates]+84', 1792.618286)
writeFloat('[PlayerCoordinates]+88', 224.4454193)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132554</ID>
                                  <Description>"Memory Chip 38 - Kawasaki Z1 (900 Super Four)"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1695.2076416016) -- X Coord
writeFloat('[PlayerCoordinates]+84',1256.111328125) -- Y Coord
writeFloat('[PlayerCoordinates]+88',222.83842468262) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132555</ID>
                                  <Description>"Memory Chip 39 - Kawasaki Ninja H2R"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1911.68042)
writeFloat('[PlayerCoordinates]+84', -1411.432129)
writeFloat('[PlayerCoordinates]+88', 317.8957825)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132556</ID>
                                  <Description>"Memory Chip 44 - Thelma Original Motion Picture Soundtrack"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 670.0088501)
writeFloat('[PlayerCoordinates]+84', 1501.601318)
writeFloat('[PlayerCoordinates]+88', 172.663147)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132557</ID>
                                  <Description>"Memory Chip 46 - Low Roar/Low Roar"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 25.40239716)
writeFloat('[PlayerCoordinates]+84', -967.6439209)
writeFloat('[PlayerCoordinates]+88', 127.9529419)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132558</ID>
                                  <Description>"Memory Chip 47 - 0/Low Roar"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2618.421387)
writeFloat('[PlayerCoordinates]+84', 1676.081909)
writeFloat('[PlayerCoordinates]+88', 188.8448486)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132559</ID>
                                  <Description>"Memory Chip 48 - Once In A Long, Long While…/Low Roar"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2098.852295)
writeFloat('[PlayerCoordinates]+84', 288.4703064)
writeFloat('[PlayerCoordinates]+88', 154.211792)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132560</ID>
                                  <Description>"Memory Chip 50 - Bronson Soundtrack"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -108.3263321)
writeFloat('[PlayerCoordinates]+84', 1789.714233)
writeFloat('[PlayerCoordinates]+88', 294.3502197)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132561</ID>
                                  <Description>"Memory Chip 51 - Valhalla Rising: Original Soundtrack by Peter Peter &amp; Peter Kyed"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 403.8961792)
writeFloat('[PlayerCoordinates]+84', -2104.087891)
writeFloat('[PlayerCoordinates]+88', 284.1140442)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132562</ID>
                                  <Description>"Memory Chip 52 - Nicolas Winding Refn The Wicked Die Young"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -915.0614014)
writeFloat('[PlayerCoordinates]+84', 79.17208099)
writeFloat('[PlayerCoordinates]+88', 487.6524658)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132563</ID>
                                  <Description>"Memory Chip 54 - An Unknown Man's Journal Part 1"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1237.696655)
writeFloat('[PlayerCoordinates]+84', 1677.309448)
writeFloat('[PlayerCoordinates]+88', 194.8792267)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132564</ID>
                                  <Description>"Memory Chip 55 - An Unknown Man's Journal Part 2"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1189.2738037109) -- X Coord
writeFloat('[PlayerCoordinates]+84',-622.20397949219) -- Y Coord
writeFloat('[PlayerCoordinates]+88',142.57870483398) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132565</ID>
                                  <Description>"Memory Chip 56 - An Unknown Man's Journal Part 3"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1782.747681)
writeFloat('[PlayerCoordinates]+84', 1964.137573)
writeFloat('[PlayerCoordinates]+88', 204.5719604)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>132566</ID>
                              <Description>"Western Region"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>132567</ID>
                                  <Description>"Memory Chip 10 - Good Smile Company Nendoroid Jumbo Ludens"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -633.8301392)
writeFloat('[PlayerCoordinates]+84', 120.0190582)
writeFloat('[PlayerCoordinates]+88', 99.559226989746)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132568</ID>
                                  <Description>"Memory Chip 40 - Harley-Davidson Pan America 1250"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -91.27903748)
writeFloat('[PlayerCoordinates]+84', 858.9177246)
writeFloat('[PlayerCoordinates]+88', 109.5956421)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132569</ID>
                                  <Description>"Memory Chip 53 -  My Life Directed By Nicolas Winding Refn"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -480.1652527)
writeFloat('[PlayerCoordinates]+84', 486.0870056)
writeFloat('[PlayerCoordinates]+88', 110.5067673)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132570</ID>
                      <Description>"Road Pavers"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>132571</ID>
                          <Description>"Central Region"</Description>
                          <Options moAllowManualCollapseAndExpand="1"/>
                          <GroupHeader>1</GroupHeader>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>132572</ID>
                              <Description>"Player"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>132573</ID>
                                  <Description>"Auto-Paver UC Route 23-1"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2453.14624)
writeFloat('[PlayerCoordinates]+84', 1699.640625)
writeFloat('[PlayerCoordinates]+88', 211.4180145)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132574</ID>
                                  <Description>"Auto-Paver UC Route 23-2"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 2311.13623)
writeFloat('[PlayerCoordinates]+84', 1403.849365)
writeFloat('[PlayerCoordinates]+88', 186.8805084)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132575</ID>
                                  <Description>"Auto-Paver UC Route 23-3"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1985.889404)
writeFloat('[PlayerCoordinates]+84', 1407.069824)
writeFloat('[PlayerCoordinates]+88', 169.5019684)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132576</ID>
                                  <Description>"Auto-Paver UC Route 23-4"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1829.855713)
writeFloat('[PlayerCoordinates]+84', 1440.04834)
writeFloat('[PlayerCoordinates]+88', 170.9070892)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132577</ID>
                                  <Description>"Auto-Paver UC Route 23-5"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1618.688354)
writeFloat('[PlayerCoordinates]+84', 1312.620972)
writeFloat('[PlayerCoordinates]+88', 168.8905792)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132578</ID>
                                  <Description>"Auto-Paver UC Route 23-6"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1377.54895)
writeFloat('[PlayerCoordinates]+84', 1200.65271)
writeFloat('[PlayerCoordinates]+88', 179.8018036)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132579</ID>
                                  <Description>"Auto-Paver UC Route 23-7"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1288.580444)
writeFloat('[PlayerCoordinates]+84', 957.550293)
writeFloat('[PlayerCoordinates]+88', 169.3945465)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132580</ID>
                                  <Description>"Auto-Paver UC Route 23-8"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1247.076904)
writeFloat('[PlayerCoordinates]+84', 837.4451294)
writeFloat('[PlayerCoordinates]+88', 166.352829)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132581</ID>
                                  <Description>"Auto-Paver UC Route 23-9"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1116.213745)
writeFloat('[PlayerCoordinates]+84', 654.8239746)
writeFloat('[PlayerCoordinates]+88', 173.6411743)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132582</ID>
                                  <Description>"Auto-Paver UC Route 23-10"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 970.8752441)
writeFloat('[PlayerCoordinates]+84', 362.0913391)
writeFloat('[PlayerCoordinates]+88', 155.4854889)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132583</ID>
                                  <Description>"Auto-Paver UC Route 23-11"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 862.5824585)
writeFloat('[PlayerCoordinates]+84', 97.48329926)
writeFloat('[PlayerCoordinates]+88', 154.0669098)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132584</ID>
                                  <Description>"Auto-Paver UC Route 23-12"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 713.2119751)
writeFloat('[PlayerCoordinates]+84', -62.8556633)
writeFloat('[PlayerCoordinates]+88', 158.2936554)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132585</ID>
                                  <Description>"Auto-Paver UC Route 23-13"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 712.274231)
writeFloat('[PlayerCoordinates]+84', -206.9367676)
writeFloat('[PlayerCoordinates]+88', 153.6023254)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132586</ID>
                                  <Description>"Auto-Paver UC Route 23-14"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 798.9649048)
writeFloat('[PlayerCoordinates]+84', -448.7363892)
writeFloat('[PlayerCoordinates]+88', 156.8727264)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132587</ID>
                                  <Description>"Auto-Paver UC Route 23-15"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 843.2941895)
writeFloat('[PlayerCoordinates]+84', -719.6339722)
writeFloat('[PlayerCoordinates]+88', 172.478302)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132588</ID>
                                  <Description>"Auto-Paver UC Route 23-16"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1003.420654)
writeFloat('[PlayerCoordinates]+84', -755.526123)
writeFloat('[PlayerCoordinates]+88', 153.5244446)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132589</ID>
                                  <Description>"Auto-Paver UC Route 23-17"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1104.900024)
writeFloat('[PlayerCoordinates]+84', -851.0733643)
writeFloat('[PlayerCoordinates]+88', 152.1719818)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132590</ID>
                                  <Description>"Auto-Paver UC Route 23-18"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1255.769287)
writeFloat('[PlayerCoordinates]+84', -1001.83905)
writeFloat('[PlayerCoordinates]+88', 148.2466431)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132591</ID>
                                  <Description>"Auto-Paver UC Route 41-1"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 1146.322388)
writeFloat('[PlayerCoordinates]+84', 1195.00061)
writeFloat('[PlayerCoordinates]+88', 178.6529694)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132592</ID>
                                  <Description>"Auto-Paver UC Route 41-2"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 846.9970093)
writeFloat('[PlayerCoordinates]+84', 1286.466309)
writeFloat('[PlayerCoordinates]+88', 180.8608704)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132593</ID>
                                  <Description>"Auto-Paver UC Route 41-3"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 470.3439941)
writeFloat('[PlayerCoordinates]+84', 1481.882324)
writeFloat('[PlayerCoordinates]+88', 174.1802368)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132594</ID>
                                  <Description>"Auto-Paver UC Route 41-4"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 490.9615173)
writeFloat('[PlayerCoordinates]+84', 1638.019897)
writeFloat('[PlayerCoordinates]+88', 173.9845428)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132595</ID>
                                  <Description>"Auto-Paver UC Route 41-5"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 359.7417908)
writeFloat('[PlayerCoordinates]+84', 1903.619873)
writeFloat('[PlayerCoordinates]+88', 178.6823578)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132596</ID>
                                  <Description>"Auto-Paver UC Route 41-6"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', 39.72900772)
writeFloat('[PlayerCoordinates]+84', 1990.067627)
writeFloat('[PlayerCoordinates]+88', 210.7412415)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132597</ID>
                                  <Description>"Auto-Paver UC Route 41-7"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -195.2884827)
writeFloat('[PlayerCoordinates]+84', 2135.605713)
writeFloat('[PlayerCoordinates]+88', 213.7081757)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132598</ID>
                                  <Description>"Auto-Paver UC Route 41-8"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -558.8688354)
writeFloat('[PlayerCoordinates]+84', 2285.988281)
writeFloat('[PlayerCoordinates]+88', 257.3166504)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132599</ID>
                                  <Description>"Auto-Paver UC Route 41-9"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -792.6043091)
writeFloat('[PlayerCoordinates]+84', 2166.758057)
writeFloat('[PlayerCoordinates]+88', 263.3792419)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132600</ID>
                                  <Description>"Auto-Paver UC Route 41-10"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1160.645386)
writeFloat('[PlayerCoordinates]+84', 2036.688843)
writeFloat('[PlayerCoordinates]+88', 229.9067688)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132601</ID>
                                  <Description>"Auto-Paver UC Route 41-11"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1361.537842)
writeFloat('[PlayerCoordinates]+84', 2076.553955)
writeFloat('[PlayerCoordinates]+88', 221.8985901)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132602</ID>
                                  <Description>"Auto-Paver UC Route 41-12"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1547.109131)
writeFloat('[PlayerCoordinates]+84', 1935.644165)
writeFloat('[PlayerCoordinates]+88', 224.309845)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132603</ID>
                                  <Description>"Auto-Paver UC Route 41-13"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1907.11731)
writeFloat('[PlayerCoordinates]+84', 1876.725098)
writeFloat('[PlayerCoordinates]+88', 236.8751526)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132604</ID>
                                  <Description>"Auto-Paver UC Route 41-14"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -2025.526367)
writeFloat('[PlayerCoordinates]+84', 1640.04895)
writeFloat('[PlayerCoordinates]+88', 229.2415161)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132605</ID>
                                  <Description>"Auto-Paver UC Route 41-15"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1895.238647)
writeFloat('[PlayerCoordinates]+84', 1490.789062)
writeFloat('[PlayerCoordinates]+88', 223.1715546)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132606</ID>
                                  <Description>"Auto-Paver UC Route 41-16"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1906.622314)
writeFloat('[PlayerCoordinates]+84', 1354.921143)
writeFloat('[PlayerCoordinates]+88', 221.3041687)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132607</ID>
                                  <Description>"Auto-Paver UC Route 41-17"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1943.136719)
writeFloat('[PlayerCoordinates]+84', 1120.62561)
writeFloat('[PlayerCoordinates]+88', 218.1954651)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132608</ID>
                                  <Description>"Auto-Paver UC Route 41-18"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1780.78418)
writeFloat('[PlayerCoordinates]+84', 939.0974731)
writeFloat('[PlayerCoordinates]+88', 223.4832611)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132609</ID>
                                  <Description>"Auto-Paver UC Route 41-19"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1784.200562)
writeFloat('[PlayerCoordinates]+84', 682.1999512)
writeFloat('[PlayerCoordinates]+88', 240.7770233)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132610</ID>
                                  <Description>"Auto-Paver UC Route 41-20"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1761.403687)
writeFloat('[PlayerCoordinates]+84', 326.7902527)
writeFloat('[PlayerCoordinates]+88', 273.279541)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132611</ID>
                                  <Description>"Auto-Paver UC Route 41-21"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1586.323608)
writeFloat('[PlayerCoordinates]+84', 379.0655823)
writeFloat('[PlayerCoordinates]+88', 300.0988464)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132612</ID>
                                  <Description>"Auto-Paver UC Route 41-22"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
writeFloat('[PlayerCoordinates]+80', -1217.474854)
writeFloat('[PlayerCoordinates]+84', 292.9422302)
writeFloat('[PlayerCoordinates]+88', 363.2103271)




function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132805</ID>
                                  <Description>"Auto-Paver UC Route 41-23"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-1187.0806884766) -- X Coord
writeFloat('[PlayerCoordinates]+84',448.60034179688) -- Y Coord
writeFloat('[PlayerCoordinates]+88',382.45858764648) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132804</ID>
                                  <Description>"Auto-Paver UC Route 41-24"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-957.986328125) -- X Coord
writeFloat('[PlayerCoordinates]+84',381.91415405273) -- Y Coord
writeFloat('[PlayerCoordinates]+88',444.57873535156) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132802</ID>
                                  <Description>"Auto-Paver UC Route 41-25"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-788.24206542969) -- X Coord
writeFloat('[PlayerCoordinates]+84',405.96148681641) -- Y Coord
writeFloat('[PlayerCoordinates]+88',479.97555541992) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132806</ID>
                                  <Description>"Auto-Paver UC Route 41-26"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-466.52941894531) -- X Coord
writeFloat('[PlayerCoordinates]+84',274.6549987793) -- Y Coord
writeFloat('[PlayerCoordinates]+88',559.29931640625) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132807</ID>
                                  <Description>"Auto-Paver UC Route 41-27"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',-256.97659301758) -- X Coord
writeFloat('[PlayerCoordinates]+84',277.44952392578) -- Y Coord
writeFloat('[PlayerCoordinates]+88',510.40487670898) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132987</ID>
                                  <Description>"Auto-Paver UC Route 41-28"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',172.89840698242) -- X Coord
writeFloat('[PlayerCoordinates]+84',515.01354980469) -- Y Coord
writeFloat('[PlayerCoordinates]+88',417.17828369141) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132808</ID>
                                  <Description>"Auto-Paver UC Route 41-29"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',153.07804870605) -- X Coord
writeFloat('[PlayerCoordinates]+84',206.49270629883) -- Y Coord
writeFloat('[PlayerCoordinates]+88',313.49258422852) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132809</ID>
                                  <Description>"Auto-Paver UC Route 41-30"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',393.99450683594) -- X Coord
writeFloat('[PlayerCoordinates]+84',132.54885864258) -- Y Coord
writeFloat('[PlayerCoordinates]+88',222.07008361816) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132878</ID>
                                  <Description>"Auto-Paver UC Route 41-31"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',618.18829345703) -- X Coord
writeFloat('[PlayerCoordinates]+84',508.34286499023) -- Y Coord
writeFloat('[PlayerCoordinates]+88',185.087890625) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132879</ID>
                                  <Description>"Auto-Paver UC Route 41-32"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',709.70568847656) -- X Coord
writeFloat('[PlayerCoordinates]+84',605.64715576172) -- Y Coord
writeFloat('[PlayerCoordinates]+88',170.54331970215) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132880</ID>
                                  <Description>"Auto-Paver UC Route 41-33"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',768.94732666016) -- X Coord
writeFloat('[PlayerCoordinates]+84',527.00286865234) -- Y Coord
writeFloat('[PlayerCoordinates]+88',159.05082702637) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>132613</ID>
                              <Description>"Vehicle"</Description>
                              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                              <GroupHeader>1</GroupHeader>
                              <CheatEntries>
                                <CheatEntry>
                                  <ID>132614</ID>
                                  <Description>"Auto-Paver UC Route 23-1"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2442.0808190761) --X1
writeDouble('[VehicleCoordinates]+8F8', 2442.0808190761) --X2
writeDouble('[VehicleCoordinates]+D0', 1704.68666043396) --Y1
writeDouble('[VehicleCoordinates]+900', 1704.68666043396) -- Y2
writeDouble('[VehicleCoordinates]+D8', 210.021445795168) -- Z1
writeDouble('[VehicleCoordinates]+908', 210.021445795168) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132615</ID>
                                  <Description>"Auto-Paver UC Route 23-2"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 2317.23063883206) --X1
writeDouble('[VehicleCoordinates]+8F8', 2317.23063883206) --X2
writeDouble('[VehicleCoordinates]+D0', 1398.79102660746) --Y1
writeDouble('[VehicleCoordinates]+900', 1398.79102660746) -- Y2
writeDouble('[VehicleCoordinates]+D8', 184.864189992258) -- Z1
writeDouble('[VehicleCoordinates]+908', 184.864189992258) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132616</ID>
                                  <Description>"Auto-Paver UC Route 23-3"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1986.04507356329) --X1
writeDouble('[VehicleCoordinates]+8F8', 1986.04507356329) --X2
writeDouble('[VehicleCoordinates]+D0', 1417.87097167969) --Y1
writeDouble('[VehicleCoordinates]+900', 1417.87097167969) -- Y2
writeDouble('[VehicleCoordinates]+D8', 167.819427490234) -- Z1
writeDouble('[VehicleCoordinates]+908', 167.819427490234) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132617</ID>
                                  <Description>"Auto-Paver UC Route 23-4"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1832.73596278671) --X1
writeDouble('[VehicleCoordinates]+8F8', 1832.73596278671) --X2
writeDouble('[VehicleCoordinates]+D0', 1452.07067871094) --Y1
writeDouble('[VehicleCoordinates]+900', 1452.07067871094) -- Y2
writeDouble('[VehicleCoordinates]+D8', 169.744624355255) -- Z1
writeDouble('[VehicleCoordinates]+908', 169.744624355255) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132618</ID>
                                  <Description>"Auto-Paver UC Route 23-5"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1625.62109456806) --X1
writeDouble('[VehicleCoordinates]+8F8', 1625.62109456806) --X2
writeDouble('[VehicleCoordinates]+D0', 1314.66109266777) --Y1
writeDouble('[VehicleCoordinates]+900', 1314.66109266777) -- Y2
writeDouble('[VehicleCoordinates]+D8', 166.498027620692) -- Z1
writeDouble('[VehicleCoordinates]+908', 166.498027620692) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132619</ID>
                                  <Description>"Auto-Paver UC Route 23-6"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1379.1860932167) --X1
writeDouble('[VehicleCoordinates]+8F8', 1379.1860932167) --X2
writeDouble('[VehicleCoordinates]+D0', 1212.33807472204) --Y1
writeDouble('[VehicleCoordinates]+900', 1212.33807472204) -- Y2
writeDouble('[VehicleCoordinates]+D8', 178.047237210321) -- Z1
writeDouble('[VehicleCoordinates]+908', 178.047237210321) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132620</ID>
                                  <Description>"Auto-Paver UC Route 23-7"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1279.35766601563) --X1
writeDouble('[VehicleCoordinates]+8F8', 1279.35766601563) --X2
writeDouble('[VehicleCoordinates]+D0', 958.328399267764) --Y1
writeDouble('[VehicleCoordinates]+900', 958.328399267764) -- Y2
writeDouble('[VehicleCoordinates]+D8', 167.982704650646) -- Z1
writeDouble('[VehicleCoordinates]+908', 167.982704650646) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132621</ID>
                                  <Description>"Auto-Paver UC Route 23-8"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1239.14562988281) --X1
writeDouble('[VehicleCoordinates]+8F8', 1239.14562988281) --X2
writeDouble('[VehicleCoordinates]+D0', 841.346497278864) --Y1
writeDouble('[VehicleCoordinates]+900', 841.346497278864) -- Y2
writeDouble('[VehicleCoordinates]+D8', 164.825652727755) -- Z1
writeDouble('[VehicleCoordinates]+908', 164.825652727755) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132622</ID>
                                  <Description>"Auto-Paver UC Route 23-9"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1107.67634006451) --X1
writeDouble('[VehicleCoordinates]+8F8', 1107.67634006451) --X2
writeDouble('[VehicleCoordinates]+D0', 661.34481472908) --Y1
writeDouble('[VehicleCoordinates]+900', 661.34481472908) -- Y2
writeDouble('[VehicleCoordinates]+D8', 171.902974790855) -- Z1
writeDouble('[VehicleCoordinates]+908', 171.902974790855) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132623</ID>
                                  <Description>"Auto-Paver UC Route 23-10"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 959.101870486069) --X1
writeDouble('[VehicleCoordinates]+8F8', 959.101870486069) --X2
writeDouble('[VehicleCoordinates]+D0', 365.98756619463) --Y1
writeDouble('[VehicleCoordinates]+900', 365.98756619463) -- Y2
writeDouble('[VehicleCoordinates]+D8', 153.925854788254) -- Z1
writeDouble('[VehicleCoordinates]+908', 153.925854788254) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132624</ID>
                                  <Description>"Auto-Paver UC Route 23-11"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 855.001037597656) --X1
writeDouble('[VehicleCoordinates]+8F8', 855.001037597656) --X2
writeDouble('[VehicleCoordinates]+D0', 103.919731031745) --Y1
writeDouble('[VehicleCoordinates]+900', 103.919731031745) -- Y2
writeDouble('[VehicleCoordinates]+D8', 152.482773043932) -- Z1
writeDouble('[VehicleCoordinates]+908', 152.482773043932) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132625</ID>
                                  <Description>"Auto-Paver UC Route 23-12"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 702.134460449219) --X1
writeDouble('[VehicleCoordinates]+8F8', 702.134460449219) --X2
writeDouble('[VehicleCoordinates]+D0', -63.9743050782479) --Y1
writeDouble('[VehicleCoordinates]+900', -63.9743050782479) -- Y2
writeDouble('[VehicleCoordinates]+D8', 157.122079353043) -- Z1
writeDouble('[VehicleCoordinates]+908', 157.122079353043) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132626</ID>
                                  <Description>"Auto-Paver UC Route 23-13"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 702.471984863281) --X1
writeDouble('[VehicleCoordinates]+8F8', 702.471984863281) --X2
writeDouble('[VehicleCoordinates]+D0', -208.011706038022) --Y1
writeDouble('[VehicleCoordinates]+900', -208.011706038022) -- Y2
writeDouble('[VehicleCoordinates]+D8', 152.124013696801) -- Z1
writeDouble('[VehicleCoordinates]+908', 152.124013696801) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132627</ID>
                                  <Description>"Auto-Paver UC Route 23-14"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 794.752228252051) --X1
writeDouble('[VehicleCoordinates]+8F8', 794.752228252051) --X2
writeDouble('[VehicleCoordinates]+D0', -460.084596395936) --Y1
writeDouble('[VehicleCoordinates]+900', -460.084596395936) -- Y2
writeDouble('[VehicleCoordinates]+D8', 155.509546968079) -- Z1
writeDouble('[VehicleCoordinates]+908', 155.509546968079) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132628</ID>
                                  <Description>"Auto-Paver UC Route 23-15"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 834.292724609375) --X1
writeDouble('[VehicleCoordinates]+8F8', 834.292724609375) --X2
writeDouble('[VehicleCoordinates]+D0', -725.231201171875) --Y1
writeDouble('[VehicleCoordinates]+900', -725.231201171875) -- Y2
writeDouble('[VehicleCoordinates]+D8', 171.096970639053) -- Z1
writeDouble('[VehicleCoordinates]+908', 171.096970639053) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132629</ID>
                                  <Description>"Auto-Paver UC Route 23-16"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 996.869692327011) --X1
writeDouble('[VehicleCoordinates]+8F8', 996.869692327011) --X2
writeDouble('[VehicleCoordinates]+D0', -764.42067623233) --Y1
writeDouble('[VehicleCoordinates]+900', -764.42067623233) -- Y2
writeDouble('[VehicleCoordinates]+D8', 152.068341498099) -- Z1
writeDouble('[VehicleCoordinates]+908', 152.068341498099) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132630</ID>
                                  <Description>"Auto-Paver UC Route 23-17"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1096.42126464844) --X1
writeDouble('[VehicleCoordinates]+8F8', 1096.42126464844) --X2
writeDouble('[VehicleCoordinates]+D0', -854.691314397453) --Y1
writeDouble('[VehicleCoordinates]+900', -854.691314397453) -- Y2
writeDouble('[VehicleCoordinates]+D8', 150.736859994194) -- Z1
writeDouble('[VehicleCoordinates]+908', 150.736859994194) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132631</ID>
                                  <Description>"Auto-Paver UC Route 23-18"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1251.04479980469) --X1
writeDouble('[VehicleCoordinates]+8F8', 1251.04479980469) --X2
writeDouble('[VehicleCoordinates]+D0', -1008.68579101563) --Y1
writeDouble('[VehicleCoordinates]+900', -1008.68579101563) -- Y2
writeDouble('[VehicleCoordinates]+D8', 146.891348068035) -- Z1
writeDouble('[VehicleCoordinates]+908', 146.891348068035) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132632</ID>
                                  <Description>"Auto-Paver UC Route 41-1"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 1150.53009154918) --X1
writeDouble('[VehicleCoordinates]+8F8', 1150.53009154918) --X2
writeDouble('[VehicleCoordinates]+D0', 1204.56750488281) --Y1
writeDouble('[VehicleCoordinates]+900', 1204.56750488281) -- Y2
writeDouble('[VehicleCoordinates]+D8', 176.898577959151) -- Z1
writeDouble('[VehicleCoordinates]+908', 176.898577959151) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132633</ID>
                                  <Description>"Auto-Paver UC Route 41-2"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 851.779824083613) --X1
writeDouble('[VehicleCoordinates]+8F8', 851.779824083613) --X2
writeDouble('[VehicleCoordinates]+D0', 1295.29054208228) --Y1
writeDouble('[VehicleCoordinates]+900', 1295.29054208228) -- Y2
writeDouble('[VehicleCoordinates]+D8', 179.101870769769) -- Z1
writeDouble('[VehicleCoordinates]+908', 179.101870769769) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132634</ID>
                                  <Description>"Auto-Paver UC Route 41-3"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 480.192383656482) --X1
writeDouble('[VehicleCoordinates]+8F8', 480.192383656482) --X2
writeDouble('[VehicleCoordinates]+D0', 1487.14617751125) --Y1
writeDouble('[VehicleCoordinates]+900', 1487.14617751125) -- Y2
writeDouble('[VehicleCoordinates]+D8', 172.386107432179) -- Z1
writeDouble('[VehicleCoordinates]+908', 172.386107432179) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132635</ID>
                                  <Description>"Auto-Paver UC Route 41-4"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 500.850250244141) --X1
writeDouble('[VehicleCoordinates]+8F8', 500.850250244141) --X2
writeDouble('[VehicleCoordinates]+D0', 1632.28918457031) --Y1
writeDouble('[VehicleCoordinates]+900', 1632.28918457031) -- Y2
writeDouble('[VehicleCoordinates]+D8', 172.344511785084) -- Z1
writeDouble('[VehicleCoordinates]+908', 172.344511785084) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132636</ID>
                                  <Description>"Auto-Paver UC Route 41-5"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 366.921743600044) --X1
writeDouble('[VehicleCoordinates]+8F8', 366.921743600044) --X2
writeDouble('[VehicleCoordinates]+D0', 1910.13995512461) --Y1
writeDouble('[VehicleCoordinates]+900', 1910.13995512461) -- Y2
writeDouble('[VehicleCoordinates]+D8', 176.944052196663) -- Z1
writeDouble('[VehicleCoordinates]+908', 176.944052196663) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132637</ID>
                                  <Description>"Auto-Paver UC Route 41-6"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', 46.3181376829277) --X1
writeDouble('[VehicleCoordinates]+8F8', 46.3181376829277) --X2
writeDouble('[VehicleCoordinates]+D0', 1998.86719017877) --Y1
writeDouble('[VehicleCoordinates]+900', 1998.86719017877) -- Y2
writeDouble('[VehicleCoordinates]+D8', 208.908618400897) -- Z1
writeDouble('[VehicleCoordinates]+908', 208.908618400897) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132638</ID>
                                  <Description>"Auto-Paver UC Route 41-7"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -193.147800827181) --X1
writeDouble('[VehicleCoordinates]+8F8', -193.147800827181) --X2
writeDouble('[VehicleCoordinates]+D0', 2145.42797851563) --Y1
writeDouble('[VehicleCoordinates]+900', 2145.42797851563) -- Y2
writeDouble('[VehicleCoordinates]+D8', 212.021382065097) -- Z1
writeDouble('[VehicleCoordinates]+908', 212.021382065097) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132639</ID>
                                  <Description>"Auto-Paver UC Route 41-8"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -566.533782418817) --X1
writeDouble('[VehicleCoordinates]+8F8', -566.533782418817) --X2
writeDouble('[VehicleCoordinates]+D0', 2293.71435546875) --Y1
writeDouble('[VehicleCoordinates]+900', 2293.71435546875) -- Y2
writeDouble('[VehicleCoordinates]+D8', 255.653000418097) -- Z1
writeDouble('[VehicleCoordinates]+908', 255.653000418097) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132640</ID>
                                  <Description>"Auto-Paver UC Route 41-9"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -799.987031459677) --X1
writeDouble('[VehicleCoordinates]+8F8', -799.987031459677) --X2
writeDouble('[VehicleCoordinates]+D0', 2174.99328422564) --Y1
writeDouble('[VehicleCoordinates]+900', 2174.99328422564) -- Y2
writeDouble('[VehicleCoordinates]+D8', 261.870437860467) -- Z1
writeDouble('[VehicleCoordinates]+908', 261.870437860467) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132641</ID>
                                  <Description>"Auto-Paver UC Route 41-10"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1161.91052246094) --X1
writeDouble('[VehicleCoordinates]+8F8', -1161.91052246094) --X2
writeDouble('[VehicleCoordinates]+D0', 2046.38586425781) --Y1
writeDouble('[VehicleCoordinates]+900', 2046.38586425781) -- Y2
writeDouble('[VehicleCoordinates]+D8', 228.112930297852) -- Z1
writeDouble('[VehicleCoordinates]+908', 228.112930297852) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132642</ID>
                                  <Description>"Auto-Paver UC Route 41-11"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1368.24572753906) --X1
writeDouble('[VehicleCoordinates]+8F8', -1368.24572753906) --X2
writeDouble('[VehicleCoordinates]+D0', 2084.41870117188) --Y1
writeDouble('[VehicleCoordinates]+900', 2084.41870117188) -- Y2
writeDouble('[VehicleCoordinates]+D8', 219.990333848073) -- Z1
writeDouble('[VehicleCoordinates]+908', 219.990333848073) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132643</ID>
                                  <Description>"Auto-Paver UC Route 41-12"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1551.05699141063) --X1
writeDouble('[VehicleCoordinates]+8F8', -1551.05699141063) --X2
writeDouble('[VehicleCoordinates]+D0', 1945.86828613281) --Y1
writeDouble('[VehicleCoordinates]+900', 1945.86828613281) -- Y2
writeDouble('[VehicleCoordinates]+D8', 222.643507149487) -- Z1
writeDouble('[VehicleCoordinates]+908', 222.643507149487) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132644</ID>
                                  <Description>"Auto-Paver UC Route 41-13"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1912.22619628906) --X1
writeDouble('[VehicleCoordinates]+8F8', -1912.22619628906) --X2
writeDouble('[VehicleCoordinates]+D0', 1885.48229980469) --Y1
writeDouble('[VehicleCoordinates]+900', 1885.48229980469) -- Y2
writeDouble('[VehicleCoordinates]+D8', 235.229557357241) -- Z1
writeDouble('[VehicleCoordinates]+908', 235.229557357241) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132645</ID>
                                  <Description>"Auto-Paver UC Route 41-14"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -2036.37609863281) --X1
writeDouble('[VehicleCoordinates]+8F8', -2036.37609863281) --X2
writeDouble('[VehicleCoordinates]+D0', 1640.39556648879) --Y1
writeDouble('[VehicleCoordinates]+900', 1640.39556648879) -- Y2
writeDouble('[VehicleCoordinates]+D8', 227.429133007035) -- Z1
writeDouble('[VehicleCoordinates]+908', 227.429133007035) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132646</ID>
                                  <Description>"Auto-Paver UC Route 41-15"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1902.17590332031) --X1
writeDouble('[VehicleCoordinates]+8F8', -1902.17590332031) --X2
writeDouble('[VehicleCoordinates]+D0', 1483.40588378906) --Y1
writeDouble('[VehicleCoordinates]+900', 1483.40588378906) -- Y2
writeDouble('[VehicleCoordinates]+D8', 221.478233384456) -- Z1
writeDouble('[VehicleCoordinates]+908', 221.478233384456) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132647</ID>
                                  <Description>"Auto-Paver UC Route 41-16"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1915.9462890625) --X1
writeDouble('[VehicleCoordinates]+8F8', -1915.9462890625) --X2
writeDouble('[VehicleCoordinates]+D0', 1359.74951171875) --Y1
writeDouble('[VehicleCoordinates]+900', 1359.74951171875) -- Y2
writeDouble('[VehicleCoordinates]+D8', 219.26511276731) -- Z1
writeDouble('[VehicleCoordinates]+908', 219.26511276731) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132648</ID>
                                  <Description>"Auto-Paver UC Route 41-17"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1956.62463337649) --X1
writeDouble('[VehicleCoordinates]+8F8', -1956.62463337649) --X2
writeDouble('[VehicleCoordinates]+D0', 1125.78369388171) --Y1
writeDouble('[VehicleCoordinates]+900', 1125.78369388171) -- Y2
writeDouble('[VehicleCoordinates]+D8', 216.829617049458) -- Z1
writeDouble('[VehicleCoordinates]+908', 216.829617049458) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132649</ID>
                                  <Description>"Auto-Paver UC Route 41-18"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1791.95520019531) --X1
writeDouble('[VehicleCoordinates]+8F8', -1791.95520019531) --X2
writeDouble('[VehicleCoordinates]+D0', 936.552673339844) --Y1
writeDouble('[VehicleCoordinates]+900', 936.552673339844) -- Y2
writeDouble('[VehicleCoordinates]+D8', 221.702116056625) -- Z1
writeDouble('[VehicleCoordinates]+908', 221.702116056625) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132650</ID>
                                  <Description>"Auto-Paver UC Route 41-19"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1795.39697265625) --X1
writeDouble('[VehicleCoordinates]+8F8', -1795.39697265625) --X2
writeDouble('[VehicleCoordinates]+D0', 681.913543642499) --Y1
writeDouble('[VehicleCoordinates]+900', 681.913543642499) -- Y2
writeDouble('[VehicleCoordinates]+D8', 239.150047307136) -- Z1
writeDouble('[VehicleCoordinates]+908', 239.150047307136) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132651</ID>
                                  <Description>"Auto-Paver UC Route 41-20"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1764.2080078125) --X1
writeDouble('[VehicleCoordinates]+8F8', -1764.2080078125) --X2
writeDouble('[VehicleCoordinates]+D0', 316.475875834156) --Y1
writeDouble('[VehicleCoordinates]+900', 316.475875834156) -- Y2
writeDouble('[VehicleCoordinates]+D8', 271.580222930974) -- Z1
writeDouble('[VehicleCoordinates]+908', 271.580222930974) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132652</ID>
                                  <Description>"Auto-Paver UC Route 41-21"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1575.04772811104) --X1
writeDouble('[VehicleCoordinates]+8F8', -1575.04772811104) --X2
writeDouble('[VehicleCoordinates]+D0', 385.355081324058) --Y1
writeDouble('[VehicleCoordinates]+900', 385.355081324058) -- Y2
writeDouble('[VehicleCoordinates]+D8', 300.851469220826) -- Z1
writeDouble('[VehicleCoordinates]+908', 300.851469220826) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132653</ID>
                                  <Description>"Auto-Paver UC Route 41-22"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>[enable]
{$lua}
X1 = readDouble('[VehicleCoordinates]+C8')
X2 = readDouble('[VehicleCoordinates]+8F8')
if X1 == X2 then
writeDouble('[VehicleCoordinates]+C8', -1216.54582084075) --X1
writeDouble('[VehicleCoordinates]+8F8', -1216.54582084075) --X2
writeDouble('[VehicleCoordinates]+D0', 281.612884521484) --Y1
writeDouble('[VehicleCoordinates]+900', 281.612884521484) -- Y2
writeDouble('[VehicleCoordinates]+D8', 361.314899770281) -- Z1
writeDouble('[VehicleCoordinates]+908', 361.314899770281) -- Z2
end


function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[disable]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132846</ID>
                                  <Description>"Auto-Paver UC Route 41-23"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-1196.4039278344) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-1196.4039278344) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',453.9422526133) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',453.9422526133) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',380.61605905702) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',380.61605905702) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132847</ID>
                                  <Description>"Auto-Paver UC Route 41-24"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-973.99561203708) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-973.99561203708) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',380.53897507775) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',380.53897507775) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',446.15291450197) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',446.15291450197) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132849</ID>
                                  <Description>"Auto-Paver UC Route 41-25"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-773.79475086742) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-773.79475086742) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',411.89520930171) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',411.89520930171) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',482.67213861051) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',482.67213861051) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132848</ID>
                                  <Description>"Auto-Paver UC Route 41-26"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-457.04880447841) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-457.04880447841) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',277.03025944506) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',277.03025944506) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',558.09044397078) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',558.09044397078) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132850</ID>
                                  <Description>"Auto-Paver UC Route 41-27"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',-268.93919919326) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',-268.93919919326) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',276.46442254176) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',276.46442254176) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',506.95541708206) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',506.95541708206) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132874</ID>
                                  <Description>"Auto-Paver UC Route 41-28"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',166.40418110235) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',166.40418110235) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',508.34461635946) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',508.34461635946) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',416.38707793523) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',416.38707793523) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132875</ID>
                                  <Description>"Auto-Paver UC Route 41-29"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',156.24398290283) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',156.24398290283) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',204.61320934051) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',204.61320934051) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',311.0593891684) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',311.0593891684) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132876</ID>
                                  <Description>"Auto-Paver UC Route 41-30"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',389.48972951954) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',389.48972951954) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',144.80882932268) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',144.80882932268) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',222.92714577752) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',222.92714577752) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132877</ID>
                                  <Description>"Auto-Paver UC Route 41-31"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',628.96002919014) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',628.96002919014) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',503.9127466354) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',503.9127466354) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',182.667704271) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',182.667704271) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132881</ID>
                                  <Description>"Auto-Paver UC Route 41-32"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',701.23638720054) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',701.23638720054) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',592.94320217879) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',592.94320217879) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',169.23416057413) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',169.23416057413) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                                <CheatEntry>
                                  <ID>132882</ID>
                                  <Description>"Auto-Paver UC Route 41-33"</Description>
                                  <VariableType>Auto Assembler Script</VariableType>
                                  <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',766.60884095638) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',766.60884095638) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',518.19213097949) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',518.19213097949) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',156.3113822902) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',156.3113822902) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                                </CheatEntry>
                              </CheatEntries>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2236</ID>
                      <Description>"Create Your Own Teleport Scripts"</Description>
                      <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>2006</ID>
                          <Description>"Create a Player Coordinate printout (Credits to kraqurjak)"</Description>
                          <VariableType>Auto Assembler Script</VariableType>
                          <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
GetLuaEngine().MenuItem5.doClick() -- Clears Lua Engine


print"{$lua}"
print"[ENABLE]"
print""


 -- &lt;-Change All pointers to your X Y and Z Cords -&gt; --
XCoord = "[PlayerCoordinates]+80" -- Do Not Remove The "
YCoord = "[PlayerCoordinates]+84" -- Do Not Remove The "
ZCoord = "[PlayerCoordinates]+88" -- Do Not Remove The "

 X = "writeFloat('"..XCoord.."',"..(readFloat(""..XCoord.."")..") -- X Coord") -- Store Pointer To X
print (X)    -- Print X String

 Y = "writeFloat('"..YCoord.."',"..(readFloat(""..YCoord.."")..") -- Y Coord") -- Store Pointer To Y
print (Y)   -- Print Y String

 Z = "writeFloat('"..ZCoord.."',"..(readFloat(""..ZCoord.."")..") -- Z Coord") -- Store Pointer To Z
print (Z)   -- Print Z String

print ""

--(Optional) Makes Script Activate But Remain Unchecked So you Can Use Again With Hotkey And Not Have To Uncheck First In New Script
--print "return 'nop'"

--Another option to Auto Un X Box.. This would allow you to Un X after a set amount of time. This is set to 500ms - Change to whatever timer you want
print [[if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end]]
print""
print"[DISABLE]"

-- (Optional) Makes Script Activate But Remain Unchecked So you Can Use Again With Hotkey And Not Have To Uncheck First
return 'nop'

-- (Optional) Could use timer instead
--if not syntaxcheck then
-- synchronize(function()
--   local t = createTimer()
--   t.Interval,t.OnTimer = 500,function(tm)
--     tm.Destroy()
--     memrec.Active = false
--   end
-- end)
--end




[DISABLE]


</AssemblerScript>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>2008</ID>
                          <Description>"Create a Vehicle Coordinate printout (Credits to kraqurjak)"</Description>
                          <VariableType>Auto Assembler Script</VariableType>
                          <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
GetLuaEngine().MenuItem5.doClick() -- Clears Lua Engine


print"{$lua}"
print"[ENABLE]"
print""


 -- &lt;-Change All pointers to your X Y and Z Cords -&gt; --
XCoord1 = "[VehicleCoordinates]+C8" -- Do Not Remove The "
XCoord2 = "[VehicleCoordinates]+8F8" -- Do Not Remove The "
YCoord1 = "[VehicleCoordinates]+D0" -- Do Not Remove The "
YCoord2 = "[VehicleCoordinates]+900" -- Do Not Remove The "
ZCoord1 = "[VehicleCoordinates]+D8" -- Do Not Remove The "
ZCoord2 = "[VehicleCoordinates]+908" -- Do Not Remove The "

 X1 = "writeFloat('"..XCoord1.."',"..(readDouble(""..XCoord1.."")..") -- X1 Coord") -- Store Pointer To X1
print (X1)    -- Print X1 String

 X2 = "writeFloat('"..XCoord2.."',"..(readDouble(""..XCoord2.."")..") -- X2 Coord") -- Store Pointer To X2
print (X2)    -- Print X2 String

 Y1 = "writeFloat('"..YCoord1.."',"..(readDouble(""..YCoord1.."")..") -- Y1 Coord") -- Store Pointer To Y1
print (Y1)   -- Print Y1 String

 Y2 = "writeFloat('"..YCoord2.."',"..(readDouble(""..YCoord2.."")..") -- Y2 Coord") -- Store Pointer To Y2
print (Y2)   -- Print Y2 String

 Z1 = "writeFloat('"..ZCoord1.."',"..(readDouble(""..ZCoord1.."")..") -- Z1 Coord") -- Store Pointer To Z1
print (Z1)   -- Print Z1 String

 Z2 = "writeFloat('"..ZCoord2.."',"..(readDouble(""..ZCoord2.."")..") -- Z2 Coord") -- Store Pointer To Z2
print (Z2)   -- Print Z2 String

print ""

--(Optional) Makes Script Activate But Remain Unchecked So you Can Use Again With Hotkey And Not Have To Uncheck First In New Script
--print "return 'nop'"

--Another option to Auto Un X Box.. This would allow you to Un X after a set amount of time. This is set to 500ms - Change to whatever timer you want
print [[if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end]]
print""
print"[DISABLE]"

-- (Optional) Makes Script Activate But Remain Unchecked So you Can Use Again With Hotkey And Not Have To Uncheck First
return 'nop'

-- (Optional) Could use timer instead
--if not syntaxcheck then
-- synchronize(function()
--   local t = createTimer()
--   t.Interval,t.OnTimer = 500,function(tm)
--     tm.Destroy()
--     memrec.Active = false
--   end
-- end)
--end




[DISABLE]


</AssemblerScript>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>2004</ID>
                          <Description>"Create a Player Coordinate Script (Credits to kraqurjak and TheyCallMeTim13)"</Description>
                          <VariableType>Auto Assembler Script</VariableType>
                          <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
local script = {}                -- Creates container (script) so we have a container to store script in using table.insert(script,)

table.insert(script, "{$lua}")   -- Sending {$lua} To New script
table.insert(script, "[ENABLE]") -- Sending DISABLE To New script
table.insert(script, "")         -- Sending Space To New Script

 -- &lt;-Change All 3 Pointers Match Your X Y and Z Pointers -&gt; --
XCoord = "[PlayerCoordinates]+80" -- Do Not Remove The "
YCoord = "[PlayerCoordinates]+84" -- Do Not Remove The "
ZCoord = "[PlayerCoordinates]+88" -- Do Not Remove The "

 X = "writeFloat('"..XCoord.."',"..(readFloat(""..XCoord.."")..") -- X Coord") -- Store Pointer To X
table.insert(script, X)           -- Send Value Of What's Inside X To New Script Because We Don't Have "" Around X To Define It As A String

 Y = "writeFloat('"..YCoord.."',"..(readFloat(""..YCoord.."")..") -- Y Coord") -- Store Pointer To Y
table.insert(script, Y)           -- Send Value Of What's Inside Y To New Script Because We Don't Have "" Around Y To Define It As A String

 Z = "writeFloat('"..ZCoord.."',"..(readFloat(""..ZCoord.."")..") -- Z Coord") -- Store Pointer To Z
table.insert(script, Z)           -- Send Value Of What's Inside Z To New Script Because We Don't Have "" Around Z To Define It As A String

table.insert(script, "")          -- Sending Space To New Script



-- This will disable the script after 500ms so you dont have to keep unchecking it (adds this timer to saved script)
-- Sends timer To New Script Everything Between [[ ]]
table.insert(script, [[if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end]])

table.insert(script, "")          -- Sending Space To New Script
table.insert(script, "[DISABLE]") -- Sending DISABLE To New script

MRLoc = AddressList.getMemoryRecordByDescription('Add New Locations Player') -- Where You Want Saves To Go and put into MRLoc

local mr = AddressList.createMemoryRecord() -- Creates Memory Record (New Entry In CE) and stored it into mr
mr.Type = vtAutoAssembler                   -- Makes mr (New Entry) An Auto Assembler Script
mr.appendToEntry(MRLoc)                     -- adds MRloc (Locations Script Will GO) to mr (New Script)
mr.Description = 'Teleport to: '            -- Name of mr (New Script)
mr.Script = table.concat(script, '\n')      -- Sends Everything with Table.insert (script,) to mr (New Script)

-- This will disable the script after 500ms so you dont have to keep unchecking it (Timer For This Script)
if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false        -- This Is The Part Of The Timer That Unchecks The Script
   end
 end)
end


[DISABLE]
</AssemblerScript>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>2223</ID>
                          <Description>"Create a Vehicle Coordinate Script (Credits to kraqurjak and TheyCallMeTim13)"</Description>
                          <VariableType>Auto Assembler Script</VariableType>
                          <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
local script = {}                -- Creates container (script) so we have a container to store script in using table.insert(script,)

table.insert(script, "{$lua}")   -- Sending {$lua} To New script
table.insert(script, "[ENABLE]") -- Sending DISABLE To New script
table.insert(script, "")         -- Sending Space To New Script

 -- &lt;-Change All pointers to your X Y and Z Cords -&gt; --
XCoord1 = "[VehicleCoordinates]+C8" -- Do Not Remove The "
XCoord2 = "[VehicleCoordinates]+8F8" -- Do Not Remove The "
YCoord1 = "[VehicleCoordinates]+D0" -- Do Not Remove The "
YCoord2 = "[VehicleCoordinates]+900" -- Do Not Remove The "
ZCoord1 = "[VehicleCoordinates]+D8" -- Do Not Remove The "
ZCoord2 = "[VehicleCoordinates]+908" -- Do Not Remove The "

 X1 = "writeDouble('"..XCoord1.."',"..(readDouble(""..XCoord1.."")..") -- X Coord1") -- Store Pointer To X1
table.insert(script, X1)           -- Send Value Of What's Inside X1 To New Script Because We Don't Have "" Around X1 To Define It As A String

 X2 = "writeDouble('"..XCoord2.."',"..(readDouble(""..XCoord2.."")..") -- X Coord2") -- Store Pointer To X2
table.insert(script, X2)           -- Send Value Of What's Inside X2 To New Script Because We Don't Have "" Around X2 To Define It As A String

 Y1 = "writeDouble('"..YCoord1.."',"..(readDouble(""..YCoord1.."")..") -- Y Coord1") -- Store Pointer To Y1
table.insert(script, Y1)           -- Send Value Of What's Inside Y1 To New Script Because We Don't Have "" Around Y1 To Define It As A String

 Y2 = "writeDouble('"..YCoord2.."',"..(readDouble(""..YCoord2.."")..") -- Y Coord2") -- Store Pointer To Y2
table.insert(script, Y2)           -- Send Value Of What's Inside Y2 To New Script Because We Don't Have "" Around Y2 To Define It As A String

 Z1 = "writeDouble('"..ZCoord1.."',"..(readDouble(""..ZCoord1.."")..") -- Z Coord1") -- Store Pointer To Z1
table.insert(script, Z1)           -- Send Value Of What's Inside Z1 To New Script Because We Don't Have "" Around Z1 To Define It As A String

 Z2 = "writeDouble('"..ZCoord2.."',"..(readDouble(""..ZCoord2.."")..") -- Z Coord2") -- Store Pointer To Z2
table.insert(script, Z2)           -- Send Value Of What's Inside Z2 To New Script Because We Don't Have "" Around Z2 To Define It As A String

table.insert(script, "")          -- Sending Space To New Script



-- This will disable the script after 500ms so you dont have to keep unchecking it (adds this timer to saved script)
-- Sends timer To New Script Everything Between [[ ]]
table.insert(script, [[if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end]])

table.insert(script, "")          -- Sending Space To New Script
table.insert(script, "[DISABLE]") -- Sending DISABLE To New script

MRLoc = AddressList.getMemoryRecordByDescription('Add New Locations Vehicle') -- Where You Want Saves To Go and put into MRLoc

local mr = AddressList.createMemoryRecord() -- Creates Memory Record (New Entry In CE) and stored it into mr
mr.Type = vtAutoAssembler                   -- Makes mr (New Entry) An Auto Assembler Script
mr.appendToEntry(MRLoc)                     -- adds MRloc (Locations Script Will GO) to mr (New Script)
mr.Description = 'Teleport to: '            -- Name of mr (New Script)
mr.Script = table.concat(script, '\n')      -- Sends Everything with Table.insert (script,) to mr (New Script)

-- This will disable the script after 500ms so you dont have to keep unchecking it (Timer For This Script)
if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false        -- This Is The Part Of The Timer That Unchecks The Script
   end
 end)
end


[DISABLE]
</AssemblerScript>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>2222</ID>
                          <Description>"Add New Locations Player"</Description>
                          <GroupHeader>1</GroupHeader>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>133512</ID>
                              <Description>"Teleport to: "</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',1006.6188964844) -- X Coord
writeFloat('[PlayerCoordinates]+84',868.97216796875) -- Y Coord
writeFloat('[PlayerCoordinates]+88',137.78482055664) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>133522</ID>
                              <Description>"Teleport to: "</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>{$lua}
[ENABLE]

writeFloat('[PlayerCoordinates]+80',611.58361816406) -- X Coord
writeFloat('[PlayerCoordinates]+84',-260.26776123047) -- Y Coord
writeFloat('[PlayerCoordinates]+88',159.36399841309) -- Z Coord

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>2234</ID>
                          <Description>"Add New Locations Vehicle"</Description>
                          <GroupHeader>1</GroupHeader>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>133275</ID>
                              <Description>"Checkpoint 1"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',50.110080238213) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',50.110080238213) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1963.0607621006) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1963.0607621006) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',98.712374034008) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',98.712374034008) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>133273</ID>
                              <Description>"Checkpoint 2"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',253.97822570801) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',253.97822570801) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-2138.7099609375) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-2138.7099609375) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',118.22048314774) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',118.22048314774) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>133274</ID>
                              <Description>"end of lap"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>{$lua}
[ENABLE]

writeDouble('[VehicleCoordinates]+C8',126.94054183873) -- X Coord1
writeDouble('[VehicleCoordinates]+8F8',126.94054183873) -- X Coord2
writeDouble('[VehicleCoordinates]+D0',-1990.8356793966) -- Y Coord1
writeDouble('[VehicleCoordinates]+900',-1990.8356793966) -- Y Coord2
writeDouble('[VehicleCoordinates]+D8',99.680886947947) -- Z Coord1
writeDouble('[VehicleCoordinates]+908',99.680886947947) -- Z Coord2

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133460</ID>
                      <Description>"Teleport Player to Waypoint (read note)"</Description>
                      <Options moManualExpandCollapse="1"/>
                      <Color>0000FF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]

X1 = readFloat('[WaypointCoordinates]+10')
if X1 &lt; 0 or X1 &gt; 0
then

local modAddy = readPointer('[WaypointCoordinates]+10')  -- We store the pointer of this address into local variable modAddy
 writePointer('[PlayerCoordinates]+80',modAddy)          --  We write the pointer of modAddy to the pointer at this address

local modAddy = readPointer('[WaypointCoordinates]+14')  -- We store the pointer of this address into local variable modAddy
 writePointer('[PlayerCoordinates]+84',modAddy)          --  We write the pointer of modAddy to the pointer at this address

local modAddy = readPointer('[WaypointCoordinates]+18')  -- We store the pointer of this address into local variable modAddy
 writePointer('[PlayerCoordinates]+88',modAddy)          --  We write the pointer of modAddy to the pointer at this address
end

if not syntaxcheck then  -- this to end is just to deselect the script.. Un X the box. This is 100% optional
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]


</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>133461</ID>
                          <Description>"Note: Make sure that waypoint pointers have updated before using"</Description>
                          <GroupHeader>1</GroupHeader>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>132661</ID>
                  <Description>"Weapon &amp; Damage Scripts"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>130643</ID>
                      <Description>"Infinite Ammo - No Reload (Player Only)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InfAmmo:
  dd 1

[DISABLE]
flag_InfAmmo:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133255</ID>
                      <Description>"Infinite Max Ammo / Infinite Equipment Use [Keeps Original Value]"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InfEquipment2:
  dd 1

[DISABLE]
flag_InfEquipment2:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133480</ID>
                      <Description>"No Recoil"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_NoRecoil:
  dd 1

[DISABLE]
flag_NoRecoil:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132890</ID>
                      <Description>"Rapid Fire"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_RapidFire:
  dd 1

[DISABLE]
flag_RapidFire:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133481</ID>
                      <Description>"Infinite Equipment/Weapon Use [Set to 10 - Weapons, Ladders, Container Spray, PCC, Anchors etc]"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InfEquipmentUse:
  dd 1

[DISABLE]
flag_InfEquipmentUse:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132781</ID>
                      <Description>"Machine Gun Overheated [Can't Fire, stops MULEs from using]"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_MachineGunDead:
  dd 1

[DISABLE]
flag_MachineGunDead:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132782</ID>
                      <Description>"Infinite Machine Gun"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_MachineGunMax:
  dd 1

[DISABLE]
flag_MachineGunMax:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130501</ID>
                      <Description>"No Ammo [Enemy Only] - (Works On Episode 9 - Order 65 - Phase 1 Fight &amp; Clifford)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
Flag_EnemyAmmo0:
dd 1

[DISABLE]
Flag_EnemyAmmo0:
dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130469</ID>
                      <Description>"Episode 9 - Order65 Phase 2 [Punch Out] - Player Infinite Health"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_Order65_InfPlayerHealth_PunchOut:
dd 1

[DISABLE]
flag_Order65_InfPlayerHealth_PunchOut:
dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130467</ID>
                      <Description>"Episode 9 - Order65 Phase 2 [Punch Out] - Palyer Infinite Stamina"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_Order65_PlayerMaxStamina_PunchOut:
dd 1

[DISABLE]
flag_Order65_PlayerMaxStamina_PunchOut:
dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132948</ID>
                      <Description>"BTs - Pause Fight &amp; Remove Oil / Then Continue (read notes, just something funny)"</Description>
                      <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>132949</ID>
                          <Description>"Note: freezes your controls on [at least] episode 2 boss where you have to restart game, save beforehand on others"</Description>
                          <Color>0000FF</Color>
                          <GroupHeader>1</GroupHeader>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>132944</ID>
                          <Description>"BTs - Pause Fight &amp; Remove Oil [Disables after 20 seconds, or do it manually, must disable to continue to next script]"</Description>
                          <Options moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
                          <VariableType>Auto Assembler Script</VariableType>
                          <AssemblerScript>[ENABLE]
flag_BTOilNoHP:
dd 1

{$lua}
if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 20000,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end


[DISABLE]
flag_BTOilNoHP:
dd 0
</AssemblerScript>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>132945</ID>
                              <Description>"BTs - Restart Fight (Auto-Disables)"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
flag_BTOilHPGainBack:
dd 1

{$lua}
function onMemRecPostExecute(memoryrecord, newState, succeeded )
    if memoryrecord.Type == vtAutoAssembler and memoryrecord.Script:find("NO_ACTIVATE") and newState and succeeded then
        memoryrecord.disableWithoutExecute()
    end
end
{$asm}

{NO_ACTIVATE}

[DISABLE]
flag_BTOilHPGainBack:
dd 0
</AssemblerScript>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>132791</ID>
                  <Description>"One Hit Kill Scripts"</Description>
                  <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>130551</ID>
                      <Description>"One Hit Kill - MULEs [Non-Lethal]"</Description>
                      <Options moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]

flag_MULEsNonLethalHealth0:
dd 1

[DISABLE]
flag_MULEsNonLethalHealth0:
dd 0
</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>133311</ID>
                          <Description>"All MULEs wake up with Full (Non-Lethal) Health [Disable afterwards, gives MULEs infinite non-lethal health]"</Description>
                          <VariableType>Auto Assembler Script</VariableType>
                          <AssemblerScript>[ENABLE]
flag_MULEsNonLethalHealth1000:
dd 1

[DISABLE]
flag_MULEsNonLethalHealth1000:
dd 0
</AssemblerScript>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130553</ID>
                      <Description>"One Hit Kill - MULEs [Lethal]"</Description>
                      <Options moManualExpandCollapse="1"/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_MULEsLethalHealth0:
dd 1

[DISABLE]
flag_MULEsLethalHealth0:
dd 0
</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>130554</ID>
                          <Description>"Put MULEs Health back to full that you haven't killed yet after using MULEs One Hit Kill [Lethal] [Disable afterwards, gives MULEs infinite lethal health]"</Description>
                          <VariableType>Auto Assembler Script</VariableType>
                          <AssemblerScript>[ENABLE]

flag_MULEsLethalHealth1000:
dd 1

[DISABLE]
flag_MULEsLethalHealth1000:
dd 0
</AssemblerScript>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130378</ID>
                      <Description>"One Hit Kill - All BT's"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_OneHitKillBT:
dd 1

flag_Order64_OneHitKillBT:
dd 1

[DISABLE]
flag_OneHitKillBT:
dd 0

flag_Order64_OneHitKillBT:
dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133517</ID>
                      <Description>"One Hit Kill - Cliff Unger"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_CliffUngerHealth0:
dd 1

[DISABLE]
flag_CliffUngerHealth0:
dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130509</ID>
                      <Description>"One Hit Kill - Episode 9 - Order 65 Phase 1  [Shootout &amp; Hand-to-Hand]"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_Order65Phase1OneHitKill:
dd 1

[DISABLE]
flag_Order65Phase1OneHitKill:
dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132842</ID>
                      <Description>"One Hit Kill - Episode 9 - Order 65 Phase 2  [Punchout] (read below note)"</Description>
                      <Color>0000FF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_Order65Punchout_Higgs1HitKill:
dd 1

[DISABLE]
flag_Order65Punchout_Higgs1HitKill:
dd 0
</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>132845</ID>
                          <Description>"there's scripted events after boss reaches 200 health i don't know how to avoid"</Description>
                          <GroupHeader>1</GroupHeader>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>132725</ID>
                  <Description>"Cargo - Damage, etc."</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>130391</ID>
                      <Description>"Prevent Cargo Fall Damage (Recommended If Using Vehicle Teleporting Scripts)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]

aobscanmodule(NoFallDamageAOB,ds.exe,C4 C1 7A 11 4E 34 * * * * 75) // should be unique

NoFallDamageAOB:
db 90 90 90 90 90 90

registersymbol(NoFallDamageAOB)

[DISABLE]

NoFallDamageAOB:
db C4 C1 7A 11 4E 34

unregistersymbol(NoFallDamageAOB)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133576</ID>
                      <Description>"0% Damage &amp; Container Damage [Legit Max] - All Cargo (Including Not Carried/Offloaded) (open Cargo Management to catch all addresses)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2022-05-03
  Author : crashin73331

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(AllCargoDurabilityAOB,ds.exe,C5 FA 10 41 34 * * * * * * * * 77) // should be unique
alloc(newmem,$1000,AllCargoDurabilityAOB)

label(code)
label(return)

newmem:

code:
//cmp word ptr [rcx+80],#12
//je return
  cvtsi2ss xmm0,[rax+58] //Max Container Damage Durability
  vmovss [rcx+30],xmm0 //goods damage
  cvtsi2ss xmm0,[rax+5C] //Max Damage Durability
  //vmovss xmm0,[rcx+34] //original code.
  vmovss [rcx+34],xmm0 //container damage.
  jmp return

AllCargoDurabilityAOB:
  jmp newmem
return:
registersymbol(AllCargoDurabilityAOB)

[DISABLE]

AllCargoDurabilityAOB:
  db C5 FA 10 41 34

unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: ds.exe+2C53961

ds.exe+2C53940: 48 8B 41 28              - mov rax,[rcx+28]
ds.exe+2C53944: C5 E8 57 D2              - vxorps xmm2,xmm2,xmm2
ds.exe+2C53948: C5 F0 57 C9              - vxorps xmm1,xmm1,xmm1
ds.exe+2C5394C: 8B 50 54                 - mov edx,[rax+54]
ds.exe+2C5394F: C4 E1 EA 2A D2           - vcvtsi2ss xmm2,rdx,rdx
ds.exe+2C53954: C5 F8 2E D1              - vucomiss xmm2,xmm1
ds.exe+2C53958: 7A 07                    - jp ds.exe+2C53961
ds.exe+2C5395A: 75 05                    - jne ds.exe+2C53961
ds.exe+2C5395C: C5 F8 57 C0              - vxorps xmm0,xmm0,xmm0
ds.exe+2C53960: C3                       - ret 
// ---------- INJECTING HERE ----------
ds.exe+2C53961: C5 FA 10 41 34           - vmovss xmm0,[rcx+34]
// ---------- DONE INJECTING  ----------
ds.exe+2C53966: C5 FA 5E D2              - vdivss xmm2,xmm0,xmm2
ds.exe+2C5396A: C5 F8 2F CA              - vcomiss xmm1,xmm2
ds.exe+2C5396E: 77 0C                    - ja ds.exe+2C5397C
ds.exe+2C53970: C5 FA 10 05 DC 65 F2 00  - vmovss xmm0,[ds.exe+3B79F54]
ds.exe+2C53978: C5 FA 5D CA              - vminss xmm1,xmm0,xmm2
ds.exe+2C5397C: C5 F8 28 C1              - vmovaps xmm0,xmm1
ds.exe+2C53980: C3                       - ret 
ds.exe+2C53981: CC                       - int 3 
ds.exe+2C53982: CC                       - int 3 
ds.exe+2C53983: CC                       - int 3 
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133581</ID>
                      <Description>"0% Damage &amp; Container Damage [Legit Max] - All Cargo (Excluding Not Carried/Offloaded) (open Cargo Management to catch all addresses)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2022-05-03
  Author : crashin73331

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(AllCargoDurabilityAOB,ds.exe,C5 FA 10 41 34 * * * * * * * * 77) // should be unique
alloc(newmem,$1000,AllCargoDurabilityAOB)

label(code)
label(return)

newmem:
cmp word ptr [rcx+80],#1
jne code
  cvtsi2ss xmm0,[rax+58] //Max Container Damage Durability
  vmovss [rcx+30],xmm0 //goods damage
  cvtsi2ss xmm0,[rax+5C] //Max Damage Durability
  //vmovss xmm0,[rcx+34] //original code.
  vmovss [rcx+34],xmm0 //container damage.


code:
vmovss xmm0,[rcx+34] //original code.
  jmp return

AllCargoDurabilityAOB:
  jmp newmem
return:
registersymbol(AllCargoDurabilityAOB)

[DISABLE]

AllCargoDurabilityAOB:
  db C5 FA 10 41 34

unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: ds.exe+2C53961

ds.exe+2C53940: 48 8B 41 28              - mov rax,[rcx+28]
ds.exe+2C53944: C5 E8 57 D2              - vxorps xmm2,xmm2,xmm2
ds.exe+2C53948: C5 F0 57 C9              - vxorps xmm1,xmm1,xmm1
ds.exe+2C5394C: 8B 50 54                 - mov edx,[rax+54]
ds.exe+2C5394F: C4 E1 EA 2A D2           - vcvtsi2ss xmm2,rdx,rdx
ds.exe+2C53954: C5 F8 2E D1              - vucomiss xmm2,xmm1
ds.exe+2C53958: 7A 07                    - jp ds.exe+2C53961
ds.exe+2C5395A: 75 05                    - jne ds.exe+2C53961
ds.exe+2C5395C: C5 F8 57 C0              - vxorps xmm0,xmm0,xmm0
ds.exe+2C53960: C3                       - ret 
// ---------- INJECTING HERE ----------
ds.exe+2C53961: C5 FA 10 41 34           - vmovss xmm0,[rcx+34]
// ---------- DONE INJECTING  ----------
ds.exe+2C53966: C5 FA 5E D2              - vdivss xmm2,xmm0,xmm2
ds.exe+2C5396A: C5 F8 2F CA              - vcomiss xmm1,xmm2
ds.exe+2C5396E: 77 0C                    - ja ds.exe+2C5397C
ds.exe+2C53970: C5 FA 10 05 DC 65 F2 00  - vmovss xmm0,[ds.exe+3B79F54]
ds.exe+2C53978: C5 FA 5D CA              - vminss xmm1,xmm0,xmm2
ds.exe+2C5397C: C5 F8 28 C1              - vmovaps xmm0,xmm1
ds.exe+2C53980: C3                       - ret 
ds.exe+2C53981: CC                       - int 3 
ds.exe+2C53982: CC                       - int 3 
ds.exe+2C53983: CC                       - int 3 
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>277</ID>
                      <Description>"0% Damage &amp; Container Damage [Legit Max] (Carried on Back &amp; Tool Rack)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : ds.exe
  Author : Anon-9

  This script sets non-special slots to Max durability
}

[ENABLE]

aobscanmodule(fPerfectDurability,ds.exe,C5 FA 10 5A 34) // should be unique
alloc(newmem,$1000,fPerfectDurability)

label(code)
label(return)

newmem:

code:
  cvtsi2ss xmm3,[rax+58] //should be max dura
  vmovss [rdx+30],xmm3 //goods damage
  cvtsi2ss xmm3,[rax+54] //5C?
  //vmovss xmm3,[rdx+34] //original code.
  vmovss [rdx+34],xmm3 //container damage.
  jmp return

fPerfectDurability:
  jmp newmem
return:
registersymbol(fPerfectDurability)

[DISABLE]

fPerfectDurability:
  db C5 FA 10 5A 34

unregistersymbol(fPerfectDurability)
dealloc(newmem)


//new ds.exe+2C5896B
{
// ORIGINAL CODE - INJECTION POINT: ds.exe+298EA3B

ds.exe+298EA10: 49 8B 03                 - mov rax,[r11]
ds.exe+298EA13: 4C 8B 40 18              - mov r8,[rax+18]
ds.exe+298EA17: 48 63 40 10              - movsxd  rax,dword ptr [rax+10]
ds.exe+298EA1B: 4D 8D 0C C0              - lea r9,[r8+rax*8]
ds.exe+298EA1F: 4D 3B C1                 - cmp r8,r9
ds.exe+298EA22: 0F 84 AA 00 00 00        - je ds.exe+298EAD2
ds.exe+298EA28: 0F 1F 84 00 00 00 00 00  - nop dword ptr [rax+rax+00000000]
ds.exe+298EA30: 49 8B 10                 - mov rdx,[r8]
ds.exe+298EA33: C5 E8 57 D2              - vxorps xmm2,xmm2,xmm2
ds.exe+298EA37: 48 8B 42 28              - mov rax,[rdx+28]
// ---------- INJECTING HERE ----------
ds.exe+298EA3B: C5 FA 10 5A 34           - vmovss xmm3,[rdx+34]
// ---------- DONE INJECTING  ----------
ds.exe+298EA40: C5 E2 58 03              - vaddss xmm0,xmm3,[rbx]
ds.exe+298EA44: 8B 48 54                 - mov ecx,[rax+54]
ds.exe+298EA47: C4 E1 EA 2A D1           - vcvtsi2ss xmm2,rdx,rcx
ds.exe+298EA4C: C5 F8 2F D4              - vcomiss xmm2,xmm4
ds.exe+298EA50: C5 FA 11 03              - vmovss [rbx],xmm0
ds.exe+298EA54: C4 C1 6A 58 4D 00        - vaddss xmm1,xmm2,[r13+00]
ds.exe+298EA5A: C4 C1 7A 11 4D 00        - vmovss [r13+00],xmm1
ds.exe+298EA60: 76 12                    - jna ds.exe+298EA74
ds.exe+298EA62: C4 C1 7A 10 02           - vmovss xmm0,[r10]
ds.exe+298EA67: C5 E2 5E CA              - vdivss xmm1,xmm3,xmm2
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133565</ID>
                      <Description>"0% Damage &amp; Container Damage [Legit Max] (Offloaded/Not Carried)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2022-05-03
  Author : Anon-9
  Updated: crashin73331

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(OffloadCargoDurabilityAOB,ds.exe,C5 F8 2F 77 34 72 CB) // should be unique
alloc(newmem,$1000,OffloadCargoDurabilityAOB)

label(code)
label(return)

newmem:

code:
cvtsi2ss xmm6,[rax+58] //should be max dura
vmovss [rdi+30],xmm6 //cargo damage
cvtsi2ss xmm6,[rax+5C]
  //vcomiss xmm6,[rdi+34] // original code
 vmovss [rdi+34],xmm6 //cargo container damage
  jmp return

OffloadCargoDurabilityAOB:
  jmp newmem
return:
registersymbol(OffloadCargoDurabilityAOB)

[DISABLE]

OffloadCargoDurabilityAOB:
  db C5 F8 2F 77 34

unregistersymbol(OffloadCargoDurabilityAOB)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: ds.exe+2C87E40

ds.exe+2C87E24: 45 84 C9           - test r9l,r9l
ds.exe+2C87E27: 75 22              - jne ds.exe+2C87E4B
ds.exe+2C87E29: 8B 87 04 02 00 00  - mov eax,[rdi+00000204]
ds.exe+2C87E2F: C1 E8 05           - shr eax,05
ds.exe+2C87E32: A8 01              - test al,01
ds.exe+2C87E34: 75 15              - jne ds.exe+2C87E4B
ds.exe+2C87E36: 32 C0              - xor al,al
ds.exe+2C87E38: EB 17              - jmp ds.exe+2C87E51
ds.exe+2C87E3A: 45 32 C9           - xor r9l,r9l
ds.exe+2C87E3D: 0F B6 D1           - movzx edx,cl
// ---------- INJECTING HERE ----------
ds.exe+2C87E40: C5 F8 2F 77 34     - vcomiss xmm6,[rdi+34]
// ---------- DONE INJECTING  ----------
ds.exe+2C87E45: 72 CB              - jb ds.exe+2C87E12
ds.exe+2C87E47: B0 40              - mov al,40
ds.exe+2C87E49: EB C9              - jmp ds.exe+2C87E14
ds.exe+2C87E4B: B0 80              - mov al,-80
ds.exe+2C87E4D: 41 0F B6 D0        - movzx edx,r8l
ds.exe+2C87E51: 80 E1 7F           - and cl,7F
ds.exe+2C87E54: 0A C8              - or cl,al
ds.exe+2C87E56: 88 4B 38           - mov [rbx+38],cl
ds.exe+2C87E59: 80 7F 20 05        - cmp byte ptr [rdi+20],05
ds.exe+2C87E5D: 75 55              - jne ds.exe+2C87EB4
}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>130447</ID>
                      <Description>"Turn All Cargo S [Small] (do not use online)"</Description>
                      <Color>0000FF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_AllSmallCargo:
  dd 1

[DISABLE]
flag_AllSmallCargo:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>132754</ID>
                  <Description>"Timers"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>132755</ID>
                      <Description>"0 Seconds Spent on all Urgent Standard Orders"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_CurrentTimeStandardOrders0:
  dd 1

[DISABLE]
flag_CurrentTimeStandardOrders0:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132761</ID>
                      <Description>"100 Minutes Max Time on all Urgent Standard Orders"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_MaxTimeStandardOrders100Min:
  dd 1

[DISABLE]
flag_MaxTimeStandardOrders100Min:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>132872</ID>
                  <Description>"Materials/Facility/Structures Related"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>132708</ID>
                      <Description>"Infinite+99,999 Facilities &amp; Preppers Terminal Materials [Open the Terminal First to get Pointers]"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InfFacilityChiralCrystals:
  dd 1

flag_MaxMaterialStorage:
  dd 1

[DISABLE]
flag_InfFacilityChiralCrystals:
  dd 0

flag_MaxMaterialStorage:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133451</ID>
                      <Description>"Infinite+99,999 PCC (Safehouse) Terminal Materials [Open the Terminal First to get Pointers]"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_PCCStructureFacilityMaterials99999:
  dd 1

flag_PCCMaxMaterialStorage99999:
  dd 1

[DISABLE]
flag_PCCStructureFacilityMaterials99999:
  dd 0

flag_PCCMaxMaterialStorage99999:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133195</ID>
                      <Description>"Instant Level 3 Structures Adding Any Material (doesn't give correct amount of likes if this matters to you)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InstantBuildLevel3:
  dd 1

[DISABLE]
flag_InstantBuildLevel3:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132873</ID>
                      <Description>"[All Structures] - set all materials already used to 15000 [read notes]"</Description>
                      <Color>0000FF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_AutoPaverMaterials8000:
  dd 1

[DISABLE]
flag_AutoPaverMaterials8000:
  dd 0
</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>133467</ID>
                          <Description>"Don't use this if you haven't already built all roads"</Description>
                          <Color>0000FF</Color>
                          <GroupHeader>1</GroupHeader>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>132913</ID>
                          <Description>"Option 1: you can either keep this enabled and save game/reload latest save data for it to automatically build"</Description>
                          <GroupHeader>1</GroupHeader>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>132988</ID>
                          <Description>"Option 2: Enable it after you get to the "add materials" screen and then add any 1 material"</Description>
                          <GroupHeader>1</GroupHeader>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132910</ID>
                      <Description>"Repair All Roads"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_RepairAllRoads:
  dd 1

[DISABLE]
flag_RepairAllRoads:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132905</ID>
                      <Description>"Repair All Structures [Ladders, Timefall Shelter, Zip-lines, etc) - [Resets after game restart]"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_RepairAllStructures:
  dd 1

[DISABLE]
flag_RepairAllStructures:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132936</ID>
                      <Description>"Instant Structure Build"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_0StructureBuildTime:
  dd 1

[DISABLE]
flag_0StructureBuildTime:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132938</ID>
                      <Description>"Infinite Chiral Bandwidth"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : ds.exe
  Author : Anon-9

  This script attempts to JMP away from bandwidth calculations
}

[ENABLE]

aobscanmodule(InfiniteChiralBandwidthAOB,ds.exe,74 51 44 8B B6 14 A6 56 00) // should be unique
registersymbol(InfiniteChiralBandwidthAOB)

InfiniteChiralBandwidthAOB:
  db EB //je to jmp


[DISABLE]

InfiniteChiralBandwidth:
  db 74

unregistersymbol(*)
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>133162</ID>
                  <Description>"Firing Range Scripts"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>133163</ID>
                      <Description>"Infinite+Max Drill Time Remaining (99 Minutes)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_InfDrillTrainingTimer:
  dd 1

[DISABLE]
flag_InfDrillTrainingTimer:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133164</ID>
                      <Description>"Infinite+Max Drill Time Remaining (10 Minutes)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_10MinDrillTrainingTimer:
  dd 1

[DISABLE]
flag_10MinDrillTrainingTimer:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>133240</ID>
                  <Description>"Race Track Scripts"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>133288</ID>
                      <Description>"Race Track - Instant Win Rank S [0 time]"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_RaceTrackInstantWin:
  dd 1

[DISABLE]
flag_RaceTrackInstantWin:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>3559</ID>
              <Description>"Disable Save Data Check"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2022-03-17
  Author : Crashin, credits to giofrida


  bypass the profile check, allow you to use other peoples saves
  https://www.pcgamingwiki.com/wiki/Death_Stranding#Corrupted_save_data
}

[ENABLE]

aobscanmodule(DisableSaveDataCheck,ds.exe,75 05 41 C6 46 3A 11 48 8D 8D)

DisableSaveDataCheck:
db EB

registersymbol(DisableSaveDataCheck)

[DISABLE]

DisableSaveDataCheck:
db 75

unregistersymbol(DisableSaveDataCheck)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>133308</ID>
              <Description>"In-Progress"</Description>
              <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>87544</ID>
                  <Description>"Max Structure Durability - Base Pointer"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <VariableType>Float</VariableType>
                  <Address>"ds.exe"+079875C0</Address>
                  <Offsets>
                    <Offset>A0</Offset>
                    <Offset>88</Offset>
                    <Offset>70</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>87543</ID>
                      <Description>"Max Durability - Zip-line (Lv. 1)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>+0</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133303</ID>
                      <Description>"Max Durability - Zip-line (Lv. 2)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>+4</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133301</ID>
                      <Description>"Max Durability - Zip-line (Lv. 3)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>+8</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>133577</ID>
                  <Description>"Outdated Scripts"</Description>
                  <Options moAlwaysHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>132731</ID>
                      <Description>"0% Cargo Damage [All] (Set to 30000)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_Damage0:
  dd 1

[DISABLE]
flag_Damage0:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132741</ID>
                      <Description>"0% Container Damage [All] (Set to 1000)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
flag_ContainerDamage0:
  dd 1

[DISABLE]
flag_ContainerDamage0:
  dd 0
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133556</ID>
                      <Description>"0% Cargo Damage [Legit Max] (Highlight Item)-Disable After Done (May Not Display Correctly Until Disabled)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]

ztimer = createTimer()
ztimer.setInterval(100)
ztimer.onTimer = function(bad)

local modAddy = readInteger('[ItemID]+5C')  -- We store the pointer of this address into local variable modAddy
 writeFloat('[SlotID]+34',modAddy)          --  We write the pointer of modAddy to the pointer at this address

end

[DISABLE]



ztimer.destroy()
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133558</ID>
                      <Description>"0% Cargo Container Damage [Legit Max] (Highlight Item)-Disable After Done  (May Not Display Correctly Until Disabled)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]

z2timer = createTimer()
z2timer.setInterval(100)
z2timer.onTimer = function(bad2)

local modAddy = readInteger('[ItemID]+58')  -- We store the pointer of this address into local variable modAddy
 writeFloat('[SlotID]+30',modAddy)          --  We write the pointer of modAddy to the pointer at this address

 end

[DISABLE]

z2timer.destroy()
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>133573</ID>
                      <Description>"Equipped Slot / WIP (need to make max a symbol)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : ds.exe
  Version: 
  Date   : 2022-05-03
  Author : pc

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(SampleAOB,ds.exe,C5 FA 10 41 34 80 78) // should be unique
alloc(newmem,$1000,SampleAOB)
registersymbol(Testing)
alloc(Testing, 8)
label(code)
label(return)

newmem:
mov [Testing],rax

code:
  vmovss xmm0,[rcx+34]
  jmp return

SampleAOB:
  jmp newmem
return:
registersymbol(SampleAOB)

[DISABLE]

SampleAOB:
  db C5 FA 10 41 34

unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: ds.exe+282DF80

ds.exe+282DF45: 49 8D B7 BC 00 00 00  - lea rsi,[r15+000000BC]
ds.exe+282DF4C: 48 8D 34 EE           - lea rsi,[rsi+rbp*8]
ds.exe+282DF50: 48 8B CE              - mov rcx,rsi
ds.exe+282DF53: E8 C8 33 81 00        - call ds.exe+3041320
ds.exe+282DF58: 48 8B 8F 18 38 00 00  - mov rcx,[rdi+00003818]
ds.exe+282DF5F: 80 B9 80 00 00 00 01  - cmp byte ptr [rcx+00000080],01
ds.exe+282DF66: 0F 85 86 03 00 00     - jne ds.exe+282E2F2
ds.exe+282DF6C: 80 BF F8 37 00 00 00  - cmp byte ptr [rdi+000037F8],00
ds.exe+282DF73: 0F 84 99 01 00 00     - je ds.exe+282E112
ds.exe+282DF79: 48 8B 87 20 38 00 00  - mov rax,[rdi+00003820]
// ---------- INJECTING HERE ----------
ds.exe+282DF80: C5 FA 10 41 34        - vmovss xmm0,[rcx+34]
// ---------- DONE INJECTING  ----------
ds.exe+282DF85: 80 78 21 01           - cmp byte ptr [rax+21],01
ds.exe+282DF89: 0F 85 84 00 00 00     - jne ds.exe+282E013
ds.exe+282DF8F: C5 F8 2F F0           - vcomiss xmm6,xmm0
ds.exe+282DF93: 0F 83 E5 00 00 00     - jae ds.exe+282E07E
ds.exe+282DF99: 80 BF 16 38 00 00 00  - cmp byte ptr [rdi+00003816],00
ds.exe+282DFA0: 75 6C                 - jne ds.exe+282E00E
ds.exe+282DFA2: 0F B6 48 20           - movzx ecx,byte ptr [rax+20]
ds.exe+282DFA6: E8 45 C7 11 00        - call ds.exe+294A6F0
ds.exe+282DFAB: 84 C0                 - test al,al
ds.exe+282DFAD: 74 55                 - je ds.exe+282E004
}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>Vehicle Durability:
0=Destroyed
7500=Trike Max
15000=Truck Max
6500=MULEs Truck
-----------------------------
Vehicle Physical Condition:
0-1, 
0=Full Rust
1=No Rust
-----------------------------
Vehicle Battery:
0=Dead Battery
4500=Truck Max
5850=Truck: Longe Range (Lvl 1)
7200=Truck: Longe Range (Lvl 2)
9000=Truck: Longe Range (Lvl 3)
3000=Reverse Trike Max
4500=Reverse Trike: "Ride" Type
6000="Reverse Trike: Long Range Max
2250=MULEs Truck
-----------------------------
Bridge Boots Durability:
0=Broken Boots
1000=Bridge Boots (Lvl 1)
1300=Bridge Boots (Lvl 2)
1700=Bridge Boots (Lvl 3)
600=MULE Boots
600=Chiral Boots
800=Terrorists Boots
800=Porter Boots
-----------------------------
BB Stress Bar 
0=No Stress
1000=Full Stress
-----------------------------
Backpack Physical Condition
0=Full Rust
5000=No Rust
-----------------------------
Optional Backpack Cover Condition 
0=Destroyed/Have To Go Create Another
3000=Max for Lvl 1
4500=Max for Lvl 2
-----------------------------
*****All Normal Difficulty if it changes*****
Episode 9 - Order 64 - BT Boss Health
200000=Max
Episode 9 - Order 65 - Higgs Health [Phase 1 Part 1 - Shooting]
12000=Max
Episode 9 - Order 65 - Higgs Health [Phase 1 Part 2 - Knife Fight]
13000=Max
Episode 9 - Order 65 - Higgs Health [Phase 2 - Punch Out]
5000=Max
Episode 9 - Order 65 - Player Health [Phase 2 - Punch Out]
1000=Max
Episode 9 - Order 65 - Player Stamina [Phase 2 - Punch Out]
1=Max
All Other BT's
100=Max
MULEs (Southwest of Craftsman at least)
1000=Max
I saw some with this in instructions:
1500=Max
-----------------------------
Blood Bags:
500=Blood Bag Max
1000=High-capacity Blood Bags
-----------------------------
0=100% Container Damage
900=Max Thermal Container Damage
3000=Max Thermal Damage
-----------------------------
Machine Gun Timer:
0=Attack
~100-101=Overheated
-----------------------------
100=Max Roads
360000=(lvl 1) Structures, Ladder, Anchor (Lvl 1) etc.
540000=(Lvl 2) Structures, Anchor (Lvl 2) etc.
900000=(Lvl 2) Structures
</Comments>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>"ds.exe"+2930379</Address>
      <Comment>No Recoil
</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
  <Signature>
    <SignedHash HashSize="132">0RL_DD9b;oMTKjbGlwF4?3S4mG8ft_%IG5:ki2},]mkMrfSG8GR;V1;xrfLBYjT*7bdeQy!0Lf^J[^ommrMXW-[}cDyxrpAN}Gz(3T-a!(J1S.D}3}F:,*w[wMf=+tlTXPSjT.^+eA+o6kwH(!kYy$+1ByD7.T+oSEt0w</SignedHash>
    <PublicKey Size="302">5dZ*HQ*y;zWn;@=c[2e[VRL9^Zj1l_07XMnH9]OY008Q9%uk6JiEShentj5pZC@m]H?k2wty4UFzJ=p:GEF9e)Bd*n!Ad.QwzFq9KE4Hrt;ZmY7Xsa(g]22Ir,,.G(V{hEP[Baii)QpaOQcXTWUoEGlL)$_^[dgBcaryjj6b#r[aBN_ZZU[$ILJ@we={SNZEd!K7ZLL.o.TS_K;(mR00056+F6x7=Ek2?S#i!YKH)-dv$+?F8_e2F?q2rQ;uMR:%ilSyjDibW^py*I)ukpRu%W59HSg=*R9BZgN{1[!0M{5PQgjbvj^KINhjrlOX$WVRQ$V70G]BbZ.Isc*G}#!$AHP=NfZ[8;1wR#ehD@UWFBt$x#0{%Z89+syH:q</PublicKey>
  </Signature>
</CheatTable>

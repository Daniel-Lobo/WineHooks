Title::How to use: 
::<ul style='font-size:20px'>
	<li> Find your game in the list on the left and click it</li>
	<li> The page you are reading now will be replaced with the b<game page>b where you can view additional info and change settings </li>    
	<li> On the top of the game page, there will be the b<play button>b you can click to start playing and the b<create shortcut>b button</li> 
	<li> You will be asked to indicate where the game is located the 1st time you play it with the program</li>  
	<li> The program is only effective if you start the game with it, or from a shortcut created by it</li>  
	<li> The program will never modify any of the corresponding game's files unless otherwise stated in the corresponding b<game page>b</li>
</ul> 
 
 
::Section::Support:: 
You can get and offer support on patreon: ||n
<input style="padding-left:15px; maring-top:5px" name='Clicked' id="patreon_home" type="image" onclick="SendMessage(this.name, this.id);" src="patreon.png"</input> 
||nYou can support me donating>>n 
<input style='padding-left:15px; maring-top:5px' name='Clicked' id='Donate' type='image' onclick="SendMessage(this.name, this.id);" src='https://www.paypalobjects.com/en_US/GB/i/btn/btn_donateCC_LG.gif'</input>  

<br><br><br>If you want a patch for a steam game or ported to the steam version, send the 
game as a gift to a< steam--this account >a
    
::Section::Credits::
Written by a<peixoto--Peixoto>a >>n 

Uses a<minhook--Minhook>a and a<GUID--GUID ahk>a >>n

4K resolution fix for DirectX 6 and earlier adapted from a<_4K_--UCyborg's solution>a

::Section::Licence::

For b<non commercial>b purposes, FREE to use modify and redistribute under the
a<GPL--GPL v3 licence>a  

::Section::Texture swapping::
Texture swapping is a feature that allows the replacement of the textures in 
a game with new textures that have no restrictions in size other then the
maximum size supported by the video card - at least 4096x4096 in Direc3D9
shader model 3.0 and newer cards. In all supported games, even those whose 
engines only support 16 bit 256x256 textures - as it happens is many early 
Direct3D games - it is possible to swap the original textures with high
resolution textures||n

This feature is refered to as i|texture swapping|i because the original textures 
within the game's files are never modified. The program just tells Direct3D - or
OpenGl - to use a replacement texture, instead or the original, for rendering.
On the next few paragraphs you will find a tutorial on how to use this feature 
that applies to all games supported||n

Swapping a texture requires you to dump that texture to disk while the game is
running and then paste the image you want to use as the replacement in the right
location. Before following this tutorial, you should click the game you want to 
modify in the list on the left and inspect how the texture swapping options are 
configured. This configuration is individual for each game. The 
i|texture swapping|i options are the following:||n

<style>
	td {border-bottom: 1px solid black;}
</style>

<table>
	<tr><td> Show\Hide Thumbnail </td><td> A hotkey that shows or hides a thumbnail in the top left 
										   corner of the screen with one of the textures currently 
										   loaded, you will use this to search for the texture you
										   want to dump. Hold this when you start the game to have
										   search activated at start </td></tr> 	
	<tr><td> Next                </td><td> A hotkey to select the next texture </td></tr> 
	<tr><td> Previous            </td><td> A hotkey to select the previous texture </td></tr> 
	<tr><td> Fast Browsing       </td><td> A hotkey to hold together with the Next or Previous 
						                   hotkeys to browse textures  more quickly </td></tr> 
	<tr><td> Dump Texture        </td><td> A hotkey to dump the current texture to disk </td></tr>  
	<tr><td> Path                </td><td> A directory there will contain two folders. The i|dumps|i 
										   folder, which is where the program will dump textures to,
										   and the i|replacements|i folder, where the replacements
										   should be placed </td></tr> 
</table>

||n cc<Dumping textures>cc ||n

<ul>
<li>Start the game then press the <b>Show\Hide Thumbnail</b> hotkey
during gameplay. Now you will see a thumbnail (whose size can be customized in 
the i|texture swapping|i options) in the top left corner of the screen with one 
of the textures currently loaded. The texture in the thumbnail is also disabled 
in the game||n</li>

<li>Use the b| Next |b and b|Previous|b hotkeys to browse all currently loaded 
textures (hold the b|Fast Browsing|b hotkey to browse them more quickly). 
When you find a texture you want to modify, press the b|Dump Texture|b hotkey 
to dump that texture to disk||n</li>

<li>Textures will be dumped to a folder called b|Dumps|b in the path specified in the
b|Path|b option. e.g.: if the path is|n i|"c:\some folder\some game"|i, the textures 
will be dumped to i|"c:\some folder\some game\dumps"|i.|n That folder is always 
automatically created by the program||n </li>

<li>Textures will be dumped in the .dds format and named dump0.dds, dump1.dds and 
so on. You should not modify texture dumps, but you can rename them if you like||n </li>
</ul>

cc<Installing the replacement texture>cc ||n

To finally replace a texture, all you have to do is to place a replacement 
image with the right format and name in the right location||n

In the example above, the b|path|b option was configured as 
i|'c:\some folder\some game'|i, so the replacements should be installed in
i|'c:\some folder\some game\replacements'|i||n 

A replacement file replaces a dump with the same name as it, so if you dumped a 
texture and renamed it to i|somename.dds|i, the replacement should also be called 
i|somename.dds|i, but it should be installed in the replacements folder, while the 
dump must remain in the dumps folder||n

cc<Default replacement>cc ||n
Put a .dds file (preferably DXT5 format) named checkerboard.dds on
My Documents\Games and that texture will be used to replace any dump missing
a replacement||n  

cc<Format of the replacement texture>cc ||n
Replacement textures must also be in the .dds file format. The recommended 
pixel format for all games is a<s3--DXT5>a, but remember that textures in compressed DXTn 
formats must have sizes that are integer multiples of 4. Even if some programs
can create a<s3--DXTn>a files with different sizes, those won't be loaded||n 

To get arround this limitation, or if you want the best possible quality,
use the A8R8G8B8 format or - for OpenGl, Direct3D 10 and Direct3D 11 games -
A8B8G8R8 ||n 

If you want small files, use the DXT1 format, but note that this format doesn't 
support partial transparency||n

On Direct3D 7 and earlier, you will frequently find textures with transparency, 
but no alpha channel. These textures use a<ckey--chroma keying>a. For these
textures, create replacements preferably in the X8R8G8B8 format - R5G6B5 and
X1R5G5B5 will also work. The replacement texture will inherit the color key of 
the original texture. If the replacement texture doesn't display transparency
correctly, use the same pixel format as the original. This happens because 
of a poorly implemented code to convert pixel formats and will be fixed in a near
future  ||n

cc<Mipmaps>cc >>n
Mipmaps are supported in all formats and APIs, but pay attention to the following:>>n

On DirectX 7 and earlier, mipmapped textures must have power of two dimensions>>n

On DirectX 8 and earlier, having texture swapping enabled, forces 
mipmap and anisotropic filtering for all textures - naturally, if
the texture has no mipmaps, only anisotropic filtering is used  >>n

On DirectX 9, forcing mipmap and anisotropic 
filtering is optional, because it can cause bugs in latter DirectX 9
games, but such games should already set mipmap filtering wherever needed and 
have and option to enable anisotropic filtering 
>>n

DirectX 10 and 11 games should already set mipmapg filtering wherever needed
and give you an option to enable anisotropic filtering. On these games, 
replacement textures must have at least the same number of mipmap levels as the 
textures they are intended to replace, or bugs may happen >>n

On OpenGl, having texture swapping enabled, forces mipmap and 
anisotropic filtering, but only for replacement textures. On modern
OpenGl games, as in Direct3D 10 and 11, always use 
mipmapped textures with at least as many levels as the textures they are intended 
to replace >>n  

cc<Distributing textures>cc ||n

If you want to distribute textures you have created, you can b<compile>b  
your dumps into a single tinny file: dump._dds. That not only reduces the size of
the files you have to distribute, but also can avoid trouble by distributing 
copyrighted material>>n  

You can distribute only the dump._dds file, without need to distribute the 
original dumps. The replacements, obviously, must be distributed>>n 

After compiling your dumps, the program ignores all .dds files in the dumps 
folder and considers only the compiled textures. Therefore, if you dump new 
textures, run the compiler again>>n

The compiler can be run from within each game's page. The compile button will be
just bellow the other texture swapping options
 

::Section::Pixel shader override::
Pixel shader override is a feature that allows pixel shaders to be modified. 
So far, Direct3D 8 and 9 are supported and new shaders can be written either in 
Direct3D's shader assembly or high level shading (shader model 3.0) languages||n

Modifying a pixel shader requires you to dump the pixel shader's bytecode
to disk while the game is running, and then paste the code you
want to override that shader with in the right location. Before following 
this tutorial, you should click the game you want to 
modify in the list on the left to get to know and configure the pixel shader
override options. This configuration is individual for each game and its options  
are as follows:||n

<table>
<tr><td> Enable\Disable search </td><td> Hotkey to start\stop browsing shaders </td></tr> 
<tr><td> Change text color     </td><td> A hotkey that changes the color of the text shown
                                         on screen when shader searching is enabled with 
                                         information about the current selected shader</td></tr> 
<tr><td> Next                  </td><td> A hotkey to select the next shader</td></tr> 
<tr><td> Previous              </td><td> A hotkey to select the previous shader</td></tr> 
<tr><td> Fast Browsing         </td><td> A hotkey to hold together with the Next or Previous 
                                         hotkeys to browse shaders more quickly </td></tr> 
<tr><td> Change Shader         </td><td> A hotkey the changes the mode how the current selected 
                                         shader is temporally modified for easy identification</td></tr> 
<tr><td> Dump Shader           </td><td> A hotkey to dump the current shader to disk </td></tr> 
</table>

||n cc<Dumping shaders>cc ||n

<ul>
<li>Start the game then press the b|enable\disable search|b hotkey
during gameplay. Now you will see the assembly code of a shader on the 
screen or the text: 'no pixel shaders' - most Direct3D8 games actually don't use 
shaders ||n</li>

<li>Use the b| next|b and b|previous|b hotkeys to browse all currently loaded 
shaders - hold the b|fast browsing|b hotkey to browse them more quickly. The
shader whose code is currently being shown is replaced by a simple shader that
either shows only the texture or the vertex color. The b| change shader|b hotkey 
toggles between these two modes - Direct3D 8 only. When you find a shader you 
want to modify, press the b|dump shader |b hotkey to dump that shader to disk||n</li>

<li>Shaders will be dumped to a folder called b|pixelshaders|b in the path you 
specified when added the game to the games list. If the game was already 
included, you can view the path in the error.log file. Two files will
be dumped: a binary file (.bin) and a text file (.txt). These files will be named
b|dump0.bin\dump0.txt|b, b|dump1.bin\dump1.txt|b and so on ||n</li>
</ul>

cc<Replacing shaders>cc ||n

The next time you start the game, any b|dump.bin|b file with a corresponding 
b| dump.txt |b gets replaced with the shader on the dump.txt file. Initially, that file
contains the original code from the shader, but it can be modified at will using 
shader asm ||n

Another method for modifying a shader contained in a dump.bin file is to create
a dump.hlsl file with hlsl - SM 3.0 code||n


::link::AHK->http://www.autohotkey.com/
::link::CE->http://www.cheatengine.org/
::link::AHKdll->http://www.autohotkey.com/board/topic/39588-autohotkeydll/
::link::ddraww->http://bitpatch.com/ddwrapper.html
::link::GUID->https://github.com/shajul/Autohotkey/blob/master/Library/GUID.ahk
::link::detours->http://research.microsoft.com/en-us/projects/detours/
::link::slink->https://msdn.microsoft.com/en-us/library/windows/desktop/aa365680%28v=vs.85%29.aspx
::link::ckey->https://en.wikipedia.org/wiki/Chroma_key  
::link::minhook->https://www.nuget.org/packages/minhook
::link::_bsd->http://opensource.org/licenses/bsd-license.php
::link::downlink->http://www.vogons.org/viewtopic.php?f=24&t=53121
::link::_4K_->https://github.com/UCyborg/LegacyD3DResolutionHack 
::link::steam->http://steamcommunity.com/profiles/76561198167521866/
::link::gammatool->Tools\Gamma.exe 128\1  
::link::GPL->https://www.gnu.org/licenses/gpl-3.0.en.html
::link::s3->https://en.wikipedia.org/wiki/S3_Texture_Compression::
::link::patreon->https://www.patreon.com/user?u=44312848::

[Settings]
ImportIcons=1

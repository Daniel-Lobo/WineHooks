; <COMPILER: v1.1.15.03>
Global dsound := {}
dsound.CLSID_DirectSound := "{47d4d946-62e8-11cf-93bc-444553540000}"
dsound.CLSID_DirectSound8 := "{3901cc3f-84b5-4fa4-ba35-aa8172b8a09b}"
dsound.CLSID_DirectSoundCapture := "{b0210780-89cd-11d0-af08-00a0c925cd16}"
dsound.CLSID_DirectSoundCapture8 := "{e4bcac13-7f99-4908-9a8e-74e3bf24b6e1}"
dsound.CLSID_DirectSoundFullDuplex := "{fea4300c-7959-4147-b26a-2377b9e7a91d}"
dsound.DSDEVID_DefaultPlayback := "{def00000-9c6d-47ed-aaf1-4dda8f2b5c03}"
dsound.DSDEVID_DefaultCapture := "{def00001-9c6d-47ed-aaf1-4dda8f2b5c03}"
dsound.DSDEVID_DefaultVoicePlayback := "{def00002-9c6d-47ed-aaf1-4dda8f2b5c03}"
dsound.DSDEVID_DefaultVoiceCapture := "{def00003-9c6d-47ed-aaf1-4dda8f2b5c03}"
dsound.IID_IReferenceClock := "{56a86897-0ad4-11ce-b03a-0020af0ba770}"
dsound.IID_IDirectSound := "{279AFA83-4981-11CE-A521-0020AF0BE560}"
dsound.IID_IDirectSound8 := "{C50A7E93-F395-4834-9EF6-7FA99DE50966}"
dsound.IID_IDirectSoundBuffer := "{279AFA85-4981-11CE-A521-0020AF0BE560}"
dsound.IID_IDirectSoundBuffer8 := "{6825a449-7524-4d82-920f-50e36ab3ab1e}"
dsound.GUID_All_Objects := "{aa114de5-c262-4169-a1c8-23d698cc73b5}"
dsound.IID_IDirectSound3DListener := "{279AFA84-4981-11CE-A521-0020AF0BE560}"
dsound.IID_IDirectSound3DBuffer := "{279AFA86-4981-11CE-A521-0020AF0BE560}"
dsound.IID_IDirectSoundCapture := "{b0210781-89cd-11d0-af08-00a0c925cd16}"
dsound.IID_IDirectSoundCaptureBuffer := "{b0210782-89cd-11d0-af08-00a0c925cd16}"
dsound.IID_IDirectSoundCaptureBuffer8 := "{990df4-dbb-4872-833e-6d303e80aeb6}"
dsound.IID_IDirectSoundNotify := "{b0210783-89cd-11d0-af08-00a0c925cd16}"
dsound.IID_IKsPropertySet := "{31efac30-515c-11d0-a9aa-00aa0061be93}"
dsound.IID_IDirectSoundFXGargle := "{d616f352-d622-11ce-aac5-0020af0b99a3}"
dsound.IID_IDirectSoundFXChorus := "{880842e3-145f-43e6-a934-a71806e50547}"
dsound.IID_IDirectSoundFXFlanger := "{903e9878-2c92-4072-9b2c-ea68f5396783}"
dsound.IID_IDirectSoundFXEcho := "{8bd28edf-50db-4e92-a2bd-445488d1ed42}"
dsound.IID_IDirectSoundFXDistortion := "{8ecf4326-455f-4d8b-bda9-8d5d3e9e3e0b}"
dsound.IID_IDirectSoundFXCompressor := "{4bbd1154-62f6-4e2c-a15c-d3b6c417f7a0}"
dsound.IID_IDirectSoundFXParamEq := "{c03ca9fe-fe90-4204-8078-82334cd177da}"
dsound.IID_IDirectSoundFXI3DL2Reverb := "{4b166a6a-0d66-43f3-80e3-ee6280dee1a4}"
dsound.IID_IDirectSoundFXWavesReverb := "{46858c3a-0dc6-45e3-b760-d4eef16cb325}"
dsound.IID_IDirectSoundCaptureFXAec := "{ad74143d-903d-4ab7-8066-28d363036d65}"
dsound.IID_IDirectSoundCaptureFXNoiseSuppress := "{ed311e41-fbae-4175-9625-cd0854f693ca}"
dsound.IID_IDirectSoundFullDuplex := "{edcb4c7a-daab-4216-a42e-6c50596ddc1d}"
dsound.DS3DALG_NO_VIRTUALIZATION := "{c241333f-1c1b-11d2-94f5-00c04fc28aca}"
dsound.DS3DALG_HRTF_FULL := "{c2413340-1c1b-11d2-94f5-00c04fc28aca}"
dsound.DS3DALG_HRTF_LIGHT := "{c2413342-1c1b-11d2-94f5-00c04fc28aca}"
dsound.GUID_DSFX_STANDARD_GARGLE := "{dafd8210-5711-4b91-9fe3-f75b7ae279bf}"
dsound.GUID_DSFX_STANDARD_CHORUS := "{efe6629c-81f7-4281-bd91-c9d604a95af6}"
dsound.GUID_DSFX_STANDARD_FLANGER := "{efca3d92-dfd8-4672-a603-7420894bad98}"
dsound.GUID_DSFX_STANDARD_ECHO := "{ef3e932c-d40b-4f51-8ccf-3f98f1b29d5d}"
dsound.GUID_DSFX_STANDARD_DISTORTION := "{ef114c90-cd1d-484e-96e5-09cfaf912a21}"
dsound.GUID_DSFX_STANDARD_COMPRESSOR := "{ef011f79-4000-406d-87af-bffb3fc39d57}"
dsound.GUID_DSFX_STANDARD_PARAMEQ := "{120ced89-3bf4-4173-a132-3cb406cf3231}"
dsound.GUID_DSFX_STANDARD_I3DL2REVERB := "{ef985e71-d5c7-42d4-ba4d-2d073e2e96f4}"
dsound.GUID_DSFX_WAVES_REVERB := "{87fc0268-9a55-4360-95aa-004a1d9de26c}"
dsound.GUID_DSCFX_CLASS_AEC := "{BF963D80L-C559-11D0-8A2B-00A0C9255AC1}"
dsound.GUID_DSCFX_MS_AEC := "{cdebb919-379a-488a-8765-f53cfd36de40}"
dsound.GUID_DSCFX_SYSTEM_AEC := "{1c22c56d-9879-4f5b-a389-27996ddc2810}"
dsound.GUID_DSCFX_CLASS_NS := "{e07f903f-62fd-4e60-8cdd-dea7236665b5}"
dsound.GUID_DSCFX_MS_NS := "{11c5c73b-66e9-4ba1-a0ba-e814c6eed92d}"
dsound.GUID_DSCFX_SYSTEM_NS := "{5ab0882e-7274-4516-877d-4eee99ba4fd0}"
dsound.IReferenceClock := {}
dsound.IReferenceClock.name := "IReferenceClock"
dsound.IReferenceClock.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(GetTime)              (THIS_ REFERENCE_TIME *pTime) PURE;
    STDMETHOD(AdviseTime)           (THIS_ REFERENCE_TIME rtBaseTime, REFERENCE_TIME rtStreamTime,                                           HANDLE hEvent, LPDWORD pdwAdviseCookie) PURE;
    STDMETHOD(AdvisePeriodic)       (THIS_ REFERENCE_TIME rtStartTime, REFERENCE_TIME rtPeriodTime,                                           HANDLE hSemaphore, LPDWORD pdwAdviseCookie) PURE;
    STDMETHOD(Unadvise)             (THIS_ DWORD dwAdviseCookie) PURE;
"
)
dsound.IDirectSound := {}
dsound.IDirectSound.name := "IDirectSound"
dsound.IDirectSound.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(CreateSoundBuffer)    (THIS_ LPCDSBUFFERDESC pcDSBufferDesc, LPDIRECTSOUNDBUFFER *ppDSBuffer, LPUNKNOWN pUnkOuter) PURE;
    STDMETHOD(GetCaps)              (THIS_ LPDSCAPS pDSCaps) PURE;
    STDMETHOD(DuplicateSoundBuffer) (THIS_ LPDIRECTSOUNDBUFFER pDSBufferOriginal, LPDIRECTSOUNDBUFFER *ppDSBufferDuplicate) PURE;
    STDMETHOD(SetCooperativeLevel)  (THIS_ HWND hwnd, DWORD dwLevel) PURE;
    STDMETHOD(Compact)              (THIS) PURE;
    STDMETHOD(GetSpeakercfg)     (THIS_ LPDWORD pdwSpeakercfg) PURE;
    STDMETHOD(SetSpeakercfg)     (THIS_ DWORD dwSpeakercfg) PURE;
    STDMETHOD(Initialize)           (THIS_ LPCGUID pcGuidDevice) PURE;
"
)
dsound.IDirectSound8 := {}
dsound.IDirectSound8.name := "IDirectSound8"
dsound.IDirectSound8.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(CreateSoundBuffer)    (THIS_ LPCDSBUFFERDESC pcDSBufferDesc, LPDIRECTSOUNDBUFFER *ppDSBuffer, LPUNKNOWN pUnkOuter) PURE;
    STDMETHOD(GetCaps)              (THIS_ LPDSCAPS pDSCaps) PURE;
    STDMETHOD(DuplicateSoundBuffer) (THIS_ LPDIRECTSOUNDBUFFER pDSBufferOriginal, LPDIRECTSOUNDBUFFER *ppDSBufferDuplicate) PURE;
    STDMETHOD(SetCooperativeLevel)  (THIS_ HWND hwnd, DWORD dwLevel) PURE;
    STDMETHOD(Compact)              (THIS) PURE;
    STDMETHOD(GetSpeakercfg)     (THIS_ LPDWORD pdwSpeakercfg) PURE;
    STDMETHOD(SetSpeakercfg)     (THIS_ DWORD dwSpeakercfg) PURE;
    STDMETHOD(Initialize)           (THIS_ LPCGUID pcGuidDevice) PURE;
    STDMETHOD(VerifyCertification)  (THIS_ LPDWORD pdwCertified) PURE;
"
)
dsound.IDirectSoundBuffer := {}
dsound.IDirectSoundBuffer.name := "IDirectSoundBuffer"
dsound.IDirectSoundBuffer.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(GetCaps)              (THIS_ LPDSBCAPS pDSBufferCaps) PURE;
    STDMETHOD(GetCurrentPosition)   (THIS_ LPDWORD pdwCurrentPlayCursor, LPDWORD pdwCurrentWriteCursor) PURE;
    STDMETHOD(GetFormat)            (THIS_ LPWAVEFORMATEX pwfxFormat, DWORD dwSizeAllocated, LPDWORD pdwSizeWritten) PURE;
    STDMETHOD(GetVolume)            (THIS_ LPLONG plVolume) PURE;
    STDMETHOD(GetPan)               (THIS_ LPLONG plPan) PURE;
    STDMETHOD(GetFrequency)         (THIS_ LPDWORD pdwFrequency) PURE;
    STDMETHOD(GetStatus)            (THIS_ LPDWORD pdwStatus) PURE;
    STDMETHOD(Initialize)           (THIS_ LPDIRECTSOUND pDirectSound, LPCDSBUFFERDESC pcDSBufferDesc) PURE;
    STDMETHOD(Lock)                 (THIS_ DWORD dwOffset, DWORD dwBytes, LPVOID *ppvAudioPtr1, LPDWORD pdwAudioBytes1,                                           LPVOID *ppvAudioPtr2, LPDWORD pdwAudioBytes2, DWORD dwFlags) PURE;
    STDMETHOD(Play)                 (THIS_ DWORD dwReserved1, DWORD dwPriority, DWORD dwFlags) PURE;
    STDMETHOD(SetCurrentPosition)   (THIS_ DWORD dwNewPosition) PURE;
    STDMETHOD(SetFormat)            (THIS_ LPCWAVEFORMATEX pcfxFormat) PURE;
    STDMETHOD(SetVolume)            (THIS_ LONG lVolume) PURE;
    STDMETHOD(SetPan)               (THIS_ LONG lPan) PURE;
    STDMETHOD(SetFrequency)         (THIS_ DWORD dwFrequency) PURE;
    STDMETHOD(Stop)                 (THIS) PURE;
    STDMETHOD(Unlock)               (THIS_ LPVOID pvAudioPtr1, DWORD dwAudioBytes1, LPVOID pvAudioPtr2, DWORD dwAudioBytes2) PURE;
    STDMETHOD(Restore)              (THIS) PURE;
"
)
dsound.IDirectSoundBuffer8 := {}
dsound.IDirectSoundBuffer8.name := "IDirectSoundBuffer8"
dsound.IDirectSoundBuffer8.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(GetCaps)              (THIS_ LPDSBCAPS pDSBufferCaps) PURE;
    STDMETHOD(GetCurrentPosition)   (THIS_ LPDWORD pdwCurrentPlayCursor, LPDWORD pdwCurrentWriteCursor) PURE;
    STDMETHOD(GetFormat)            (THIS_ LPWAVEFORMATEX pwfxFormat, DWORD dwSizeAllocated, LPDWORD pdwSizeWritten) PURE;
    STDMETHOD(GetVolume)            (THIS_ LPLONG plVolume) PURE;
    STDMETHOD(GetPan)               (THIS_ LPLONG plPan) PURE;
    STDMETHOD(GetFrequency)         (THIS_ LPDWORD pdwFrequency) PURE;
    STDMETHOD(GetStatus)            (THIS_ LPDWORD pdwStatus) PURE;
    STDMETHOD(Initialize)           (THIS_ LPDIRECTSOUND pDirectSound, LPCDSBUFFERDESC pcDSBufferDesc) PURE;
    STDMETHOD(Lock)                 (THIS_ DWORD dwOffset, DWORD dwBytes, LPVOID *ppvAudioPtr1, LPDWORD pdwAudioBytes1,                                           LPVOID *ppvAudioPtr2, LPDWORD pdwAudioBytes2, DWORD dwFlags) PURE;
    STDMETHOD(Play)                 (THIS_ DWORD dwReserved1, DWORD dwPriority, DWORD dwFlags) PURE;
    STDMETHOD(SetCurrentPosition)   (THIS_ DWORD dwNewPosition) PURE;
    STDMETHOD(SetFormat)            (THIS_ LPCWAVEFORMATEX pcfxFormat) PURE;
    STDMETHOD(SetVolume)            (THIS_ LONG lVolume) PURE;
    STDMETHOD(SetPan)               (THIS_ LONG lPan) PURE;
    STDMETHOD(SetFrequency)         (THIS_ DWORD dwFrequency) PURE;
    STDMETHOD(Stop)                 (THIS) PURE;
    STDMETHOD(Unlock)               (THIS_ LPVOID pvAudioPtr1, DWORD dwAudioBytes1, LPVOID pvAudioPtr2, DWORD dwAudioBytes2) PURE;
    STDMETHOD(Restore)              (THIS) PURE;
    STDMETHOD(SetFX)                (THIS_ DWORD dwEffectsCount, LPDSEFFECTDESC pDSFXDesc, LPDWORD pdwResultCodes) PURE;
    STDMETHOD(AcquireResources)     (THIS_ DWORD dwFlags, DWORD dwEffectsCount, LPDWORD pdwResultCodes) PURE;
    STDMETHOD(GetObjectInPath)      (THIS_ REFGUID rguidObject, DWORD dwIndex, REFGUID rguidInterface, LPVOID *ppObject) PURE;
"
)
dsound.IDirectSound3DListener := {}
dsound.IDirectSound3DListener.name := "IDirectSound3DListener"
dsound.IDirectSound3DListener.def :=
( 
"
    STDMETHOD(QueryInterface)           (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)            (THIS) PURE;
    STDMETHOD_(ULONG,Release)           (THIS) PURE;
    STDMETHOD(GetAllParameters)         (THIS_ LPDS3DLISTENER pListener) PURE;
    STDMETHOD(GetDistanceFactor)        (THIS_ D3DVALUE* pflDistanceFactor) PURE;
    STDMETHOD(GetDopplerFactor)         (THIS_ D3DVALUE* pflDopplerFactor) PURE;
    STDMETHOD(GetOrientation)           (THIS_ D3DVECTOR* pvOrientFront, D3DVECTOR* pvOrientTop) PURE;
    STDMETHOD(GetPosition)              (THIS_ D3DVECTOR* pvPosition) PURE;
    STDMETHOD(GetRolloffFactor)         (THIS_ D3DVALUE* pflRolloffFactor) PURE;
    STDMETHOD(GetVelocity)              (THIS_ D3DVECTOR* pvVelocity) PURE;
    STDMETHOD(SetAllParameters)         (THIS_ LPCDS3DLISTENER pcListener, DWORD dwApply) PURE;
    STDMETHOD(SetDistanceFactor)        (THIS_ D3DVALUE flDistanceFactor, DWORD dwApply) PURE;
    STDMETHOD(SetDopplerFactor)         (THIS_ D3DVALUE flDopplerFactor, DWORD dwApply) PURE;
    STDMETHOD(SetOrientation)           (THIS_ D3DVALUE xFront, D3DVALUE yFront, D3DVALUE zFront,                                               D3DVALUE xTop, D3DVALUE yTop, D3DVALUE zTop, DWORD dwApply) PURE;
    STDMETHOD(SetPosition)              (THIS_ D3DVALUE x, D3DVALUE y, D3DVALUE z, DWORD dwApply) PURE;
    STDMETHOD(SetRolloffFactor)         (THIS_ D3DVALUE flRolloffFactor, DWORD dwApply) PURE;
    STDMETHOD(SetVelocity)              (THIS_ D3DVALUE x, D3DVALUE y, D3DVALUE z, DWORD dwApply) PURE;
    STDMETHOD(CommitDeferredSettings)   (THIS) PURE;
"
)
dsound.IDirectSound3DBuffer := {}
dsound.IDirectSound3DBuffer.name := "IDirectSound3DBuffer"
dsound.IDirectSound3DBuffer.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(GetAllParameters)     (THIS_ LPDS3DBUFFER pDs3dBuffer) PURE;
    STDMETHOD(GetConeAngles)        (THIS_ LPDWORD pdwInsideConeAngle, LPDWORD pdwOutsideConeAngle) PURE;
    STDMETHOD(GetConeOrientation)   (THIS_ D3DVECTOR* pvOrientation) PURE;
    STDMETHOD(GetConeOutsideVolume) (THIS_ LPLONG plConeOutsideVolume) PURE;
    STDMETHOD(GetMaxDistance)       (THIS_ D3DVALUE* pflMaxDistance) PURE;
    STDMETHOD(GetMinDistance)       (THIS_ D3DVALUE* pflMinDistance) PURE;
    STDMETHOD(GetMode)              (THIS_ LPDWORD pdwMode) PURE;
    STDMETHOD(GetPosition)          (THIS_ D3DVECTOR* pvPosition) PURE;
    STDMETHOD(GetVelocity)          (THIS_ D3DVECTOR* pvVelocity) PURE;
    STDMETHOD(SetAllParameters)     (THIS_ LPCDS3DBUFFER pcDs3dBuffer, DWORD dwApply) PURE;
    STDMETHOD(SetConeAngles)        (THIS_ DWORD dwInsideConeAngle, DWORD dwOutsideConeAngle, DWORD dwApply) PURE;
    STDMETHOD(SetConeOrientation)   (THIS_ D3DVALUE x, D3DVALUE y, D3DVALUE z, DWORD dwApply) PURE;
    STDMETHOD(SetConeOutsideVolume) (THIS_ LONG lConeOutsideVolume, DWORD dwApply) PURE;
    STDMETHOD(SetMaxDistance)       (THIS_ D3DVALUE flMaxDistance, DWORD dwApply) PURE;
    STDMETHOD(SetMinDistance)       (THIS_ D3DVALUE flMinDistance, DWORD dwApply) PURE;
    STDMETHOD(SetMode)              (THIS_ DWORD dwMode, DWORD dwApply) PURE;
    STDMETHOD(SetPosition)          (THIS_ D3DVALUE x, D3DVALUE y, D3DVALUE z, DWORD dwApply) PURE;
    STDMETHOD(SetVelocity)          (THIS_ D3DVALUE x, D3DVALUE y, D3DVALUE z, DWORD dwApply) PURE;
"
)
dsound.IDirectSoundCapture := {}
dsound.IDirectSoundCapture.name := "IDirectSoundCapture"
dsound.IDirectSoundCapture.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(CreateCaptureBuffer)  (THIS_ LPCDSCBUFFERDESC pcDSCBufferDesc, LPDIRECTSOUNDCAPTUREBUFFER *ppDSCBuffer, LPUNKNOWN pUnkOuter) PURE;
    STDMETHOD(GetCaps)              (THIS_ LPDSCCAPS pDSCCaps) PURE;
    STDMETHOD(Initialize)           (THIS_ LPCGUID pcGuidDevice) PURE;
"
)
dsound.IDirectSoundCaptureBuffer := {}
dsound.IDirectSoundCaptureBuffer.name := "IDirectSoundCaptureBuffer"
dsound.IDirectSoundCaptureBuffer.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(GetCaps)              (THIS_ LPDSCBCAPS pDSCBCaps) PURE;
    STDMETHOD(GetCurrentPosition)   (THIS_ LPDWORD pdwCapturePosition, LPDWORD pdwReadPosition) PURE;
    STDMETHOD(GetFormat)            (THIS_ LPWAVEFORMATEX pwfxFormat, DWORD dwSizeAllocated, LPDWORD pdwSizeWritten) PURE;
    STDMETHOD(GetStatus)            (THIS_ LPDWORD pdwStatus) PURE;
    STDMETHOD(Initialize)           (THIS_ LPDIRECTSOUNDCAPTURE pDirectSoundCapture, LPCDSCBUFFERDESC pcDSCBufferDesc) PURE;
    STDMETHOD(Lock)                 (THIS_ DWORD dwOffset, DWORD dwBytes, LPVOID *ppvAudioPtr1, LPDWORD pdwAudioBytes1,                                           LPVOID *ppvAudioPtr2, LPDWORD pdwAudioBytes2, DWORD dwFlags) PURE;
    STDMETHOD(Start)                (THIS_ DWORD dwFlags) PURE;
    STDMETHOD(Stop)                 (THIS) PURE;
    STDMETHOD(Unlock)               (THIS_ LPVOID pvAudioPtr1, DWORD dwAudioBytes1, LPVOID pvAudioPtr2, DWORD dwAudioBytes2) PURE;
"
)
dsound.IDirectSoundCaptureBuffer8 := {}
dsound.IDirectSoundCaptureBuffer8.name := "IDirectSoundCaptureBuffer8"
dsound.IDirectSoundCaptureBuffer8.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(GetCaps)              (THIS_ LPDSCBCAPS pDSCBCaps) PURE;
    STDMETHOD(GetCurrentPosition)   (THIS_ LPDWORD pdwCapturePosition, LPDWORD pdwReadPosition) PURE;
    STDMETHOD(GetFormat)            (THIS_ LPWAVEFORMATEX pwfxFormat, DWORD dwSizeAllocated, LPDWORD pdwSizeWritten) PURE;
    STDMETHOD(GetStatus)            (THIS_ LPDWORD pdwStatus) PURE;
    STDMETHOD(Initialize)           (THIS_ LPDIRECTSOUNDCAPTURE pDirectSoundCapture, LPCDSCBUFFERDESC pcDSCBufferDesc) PURE;
    STDMETHOD(Lock)                 (THIS_ DWORD dwOffset, DWORD dwBytes, LPVOID *ppvAudioPtr1, LPDWORD pdwAudioBytes1,                                           LPVOID *ppvAudioPtr2, LPDWORD pdwAudioBytes2, DWORD dwFlags) PURE;
    STDMETHOD(Start)                (THIS_ DWORD dwFlags) PURE;
    STDMETHOD(Stop)                 (THIS) PURE;
    STDMETHOD(Unlock)               (THIS_ LPVOID pvAudioPtr1, DWORD dwAudioBytes1, LPVOID pvAudioPtr2, DWORD dwAudioBytes2) PURE;
    STDMETHOD(GetObjectInPath)      (THIS_ REFGUID rguidObject, DWORD dwIndex, REFGUID rguidInterface, LPVOID *ppObject) PURE;
    STDMETHOD(GetFXStatus)          (DWORD dwFXCount, LPDWORD pdwFXStatus) PURE;
"
)
dsound.IDirectSoundNotify := {}
dsound.IDirectSoundNotify.name := "IDirectSoundNotify"
dsound.IDirectSoundNotify.def :=
( 
"
    STDMETHOD(QueryInterface)           (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)            (THIS) PURE;
    STDMETHOD_(ULONG,Release)           (THIS) PURE;
    STDMETHOD(SetNotificationPositions) (THIS_ DWORD dwPositionNotifies, LPCDSBPOSITIONNOTIFY pcPositionNotifies) PURE;
"
)
dsound.IKsPropertySet := {}
dsound.IKsPropertySet.name := "IKsPropertySet"
dsound.IKsPropertySet.def :=
( 
"
    STDMETHOD(QueryInterface)   (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)    (THIS) PURE;
    STDMETHOD_(ULONG,Release)   (THIS) PURE;
    STDMETHOD(Get)              (THIS_ REFGUID rguidPropSet, ULONG ulId, LPVOID pInstanceData, ULONG ulInstanceLength,                                       LPVOID pPropertyData, ULONG ulDataLength, PULONG pulBytesReturned) PURE;
    STDMETHOD(Set)              (THIS_ REFGUID rguidPropSet, ULONG ulId, LPVOID pInstanceData, ULONG ulInstanceLength,                                       LPVOID pPropertyData, ULONG ulDataLength) PURE;
    STDMETHOD(QuerySupport)     (THIS_ REFGUID rguidPropSet, ULONG ulId, PULONG pulTypeSupport) PURE;
"
)
dsound.IDirectSoundFXGargle := {}
dsound.IDirectSoundFXGargle.name := "IDirectSoundFXGargle"
dsound.IDirectSoundFXGargle.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(SetAllParameters)     (THIS_ LPCDSFXGargle pcDsFxGargle) PURE;
    STDMETHOD(GetAllParameters)     (THIS_ LPDSFXGargle pDsFxGargle) PURE;
"
)
dsound.IDirectSoundFXChorus := {}
dsound.IDirectSoundFXChorus.name := "IDirectSoundFXChorus"
dsound.IDirectSoundFXChorus.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(SetAllParameters)     (THIS_ LPCDSFXChorus pcDsFxChorus) PURE;
    STDMETHOD(GetAllParameters)     (THIS_ LPDSFXChorus pDsFxChorus) PURE;
"
)
dsound.IDirectSoundFXFlanger := {}
dsound.IDirectSoundFXFlanger.name := "IDirectSoundFXFlanger"
dsound.IDirectSoundFXFlanger.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(SetAllParameters)     (THIS_ LPCDSFXFlanger pcDsFxFlanger) PURE;
    STDMETHOD(GetAllParameters)     (THIS_ LPDSFXFlanger pDsFxFlanger) PURE;
"
)
dsound.IDirectSoundFXEcho := {}
dsound.IDirectSoundFXEcho.name := "IDirectSoundFXEcho"
dsound.IDirectSoundFXEcho.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(SetAllParameters)     (THIS_ LPCDSFXEcho pcDsFxEcho) PURE;
    STDMETHOD(GetAllParameters)     (THIS_ LPDSFXEcho pDsFxEcho) PURE;
"
)
dsound.IDirectSoundFXDistortion := {}
dsound.IDirectSoundFXDistortion.name := "IDirectSoundFXDistortion"
dsound.IDirectSoundFXDistortion.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(SetAllParameters)     (THIS_ LPCDSFXDistortion pcDsFxDistortion) PURE;
    STDMETHOD(GetAllParameters)     (THIS_ LPDSFXDistortion pDsFxDistortion) PURE;
"
)
dsound.IDirectSoundFXCompressor := {}
dsound.IDirectSoundFXCompressor.name := "IDirectSoundFXCompressor"
dsound.IDirectSoundFXCompressor.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(SetAllParameters)     (THIS_ LPCDSFXCompressor pcDsFxCompressor) PURE;
    STDMETHOD(GetAllParameters)     (THIS_ LPDSFXCompressor pDsFxCompressor) PURE;
"
)
dsound.IDirectSoundFXParamEq := {}
dsound.IDirectSoundFXParamEq.name := "IDirectSoundFXParamEq"
dsound.IDirectSoundFXParamEq.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(SetAllParameters)     (THIS_ LPCDSFXParamEq pcDsFxParamEq) PURE;
    STDMETHOD(GetAllParameters)     (THIS_ LPDSFXParamEq pDsFxParamEq) PURE;
"
)
dsound.IDirectSoundFXI3DL2Reverb := {}
dsound.IDirectSoundFXI3DL2Reverb.name := "IDirectSoundFXI3DL2Reverb"
dsound.IDirectSoundFXI3DL2Reverb.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(SetAllParameters)     (THIS_ LPCDSFXI3DL2Reverb pcDsFxI3DL2Reverb) PURE;
    STDMETHOD(GetAllParameters)     (THIS_ LPDSFXI3DL2Reverb pDsFxI3DL2Reverb) PURE;
    STDMETHOD(SetPreset)            (THIS_ DWORD dwPreset) PURE;
    STDMETHOD(GetPreset)            (THIS_ LPDWORD pdwPreset) PURE;
    STDMETHOD(SetQuality)           (THIS_ LONG lQuality) PURE;
    STDMETHOD(GetQuality)           (THIS_ LONG *plQuality) PURE;
"
)
dsound.IDirectSoundFXWavesReverb := {}
dsound.IDirectSoundFXWavesReverb.name := "IDirectSoundFXWavesReverb"
dsound.IDirectSoundFXWavesReverb.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(SetAllParameters)     (THIS_ LPCDSFXWavesReverb pcDsFxWavesReverb) PURE;
    STDMETHOD(GetAllParameters)     (THIS_ LPDSFXWavesReverb pDsFxWavesReverb) PURE;
"
)
dsound.IDirectSoundCaptureFXAec := {}
dsound.IDirectSoundCaptureFXAec.name := "IDirectSoundCaptureFXAec"
dsound.IDirectSoundCaptureFXAec.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(SetAllParameters)     (THIS_ LPCDSCFXAec pDscFxAec) PURE;
    STDMETHOD(GetAllParameters)     (THIS_ LPDSCFXAec pDscFxAec) PURE;
    STDMETHOD(GetStatus)            (THIS_ PDWORD pdwStatus) PURE;
    STDMETHOD(Reset)                (THIS) PURE;
"
)
dsound.IDirectSoundCaptureFXNoiseSuppress := {}
dsound.IDirectSoundCaptureFXNoiseSuppress.name := "IDirectSoundCaptureFXNoiseSuppress"
dsound.IDirectSoundCaptureFXNoiseSuppress.def :=
( 
"
    STDMETHOD(QueryInterface)       (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)        (THIS) PURE;
    STDMETHOD_(ULONG,Release)       (THIS) PURE;
    STDMETHOD(SetAllParameters)     (THIS_ LPCDSCFXNoiseSuppress pcDscFxNoiseSuppress) PURE;
    STDMETHOD(GetAllParameters)     (THIS_ LPDSCFXNoiseSuppress pDscFxNoiseSuppress) PURE;
    STDMETHOD(Reset)                (THIS) PURE;
"
)
dsound.IDirectSoundFullDuplex := {}
dsound.IDirectSoundFullDuplex.name := "IDirectSoundFullDuplex"
dsound.IDirectSoundFullDuplex.def :=
( 
"
    STDMETHOD(QueryInterface)   (THIS_ REFIID, LPVOID *) PURE;
    STDMETHOD_(ULONG,AddRef)    (THIS) PURE;
    STDMETHOD_(ULONG,Release)   (THIS) PURE;
    STDMETHOD(Initialize)     (THIS_ LPCGUID pCaptureGuid, LPCGUID pRenderGuid, LPCDSCBUFFERDESC lpDscBufferDesc, LPCDSBUFFERDESC lpDsBufferDesc, HWND hWnd, DWORD dwLevel, LPLPDIRECTSOUNDCAPTUREBUFFER8 lplpDirectSoundCaptureBuffer8, LPLPDIRECTSOUNDBUFFER8 lplpDirectSoundBuffer8) PURE;
"
)
Global DS3D_DEFAULTCONEANGLE := 360
Global DS3D_DEFERRED := 1
Global DS3D_MAXCONEANGLE := 360
Global DS3DMODE_DISABLE := 2
Global DS3DMODE_HEADRELATIVE := 1
Global DS_UNCERTIFIED := 1
Global DSBCAPS_CTRL3D := 16
Global DSBCAPS_CTRLFREQUENCY := 32
Global DSBCAPS_CTRLFX := 512
Global DSBCAPS_CTRLPAN := 64
Global DSBCAPS_CTRLPOSITIONNOTIFY := 256
Global DSBCAPS_CTRLVOLUME := 128
Global DSBCAPS_GETCURRENTPOSITION2 := 65536
Global DSBCAPS_GLOBALFOCUS := 32768
Global DSBCAPS_LOCDEFER := 262144
Global DSBCAPS_LOCHARDWARE := 4
Global DSBCAPS_LOCSOFTWARE := 8
Global DSBCAPS_MUTE3DATMAXDISTANCE := 131072
Global DSBCAPS_PRIMARYBUFFER := 1
Global DSBCAPS_STATIC := 2
Global DSBCAPS_STICKYFOCUS := 16384
Global DSBFREQUENCY_MAX := 100000
Global DSBFREQUENCY_MIN := 100
Global DSBLOCK_ENTIREBUFFER := 2
Global DSBLOCK_FROMWRITECURSOR := 1
Global DSBPAN_RIGHT := 10000
Global DSBPLAY_LOCHARDWARE := 2
Global DSBPLAY_LOCSOFTWARE := 4
Global DSBPLAY_LOOPING := 1
Global DSBPLAY_TERMINATEBY_DISTANCE := 16
Global DSBPLAY_TERMINATEBY_PRIORITY := 32
Global DSBPLAY_TERMINATEBY_TIME := 8
Global DSBPN_OFFSETSTOP := 4294967295
Global DSBSIZE_FX_MIN := 150
Global DSBSIZE_MAX := 268435455
Global DSBSIZE_MIN := 4
Global DSBSTATUS_BUFFERLOST := 2
Global DSBSTATUS_LOCHARDWARE := 8
Global DSBSTATUS_LOCSOFTWARE := 16
Global DSBSTATUS_LOOPING := 4
Global DSBSTATUS_PLAYING := 1
Global DSBSTATUS_TERMINATED := 32
Global DSCAPS_CERTIFIED := 64
Global DSCAPS_CONTINUOUSRATE := 16
Global DSCAPS_EMULDRIVER := 32
Global DSCAPS_PRIMARY16BIT := 8
Global DSCAPS_PRIMARY8BIT := 4
Global DSCAPS_PRIMARYMONO := 1
Global DSCAPS_PRIMARYSTEREO := 2
Global DSCAPS_SECONDARY16BIT := 2048
Global DSCAPS_SECONDARY8BIT := 1024
Global DSCAPS_SECONDARYMONO := 256
Global DSCAPS_SECONDARYSTEREO := 512
Global DSCBCAPS_CTRLFX := 512
Global DSCBCAPS_WAVEMAPPED := 2147483648
Global DSCBLOCK_ENTIREBUFFER := 1
Global DSCBSTART_LOOPING := 1
Global DSCBSTATUS_CAPTURING := 1
Global DSCBSTATUS_LOOPING := 2
Global DSCCAPS_MULTIPLECAPTURE := 1
Global DSCFX_AEC_MODE_FULL_DUPLEX := 2
Global DSCFX_AEC_MODE_HALF_DUPLEX := 1
Global DSCFX_AEC_STATUS_CURRENTLY_CONVERGED := 8
Global DSCFX_AEC_STATUS_HISTORY_CONTINUOUSLY_CONVERGED := 1
Global DSCFX_AEC_STATUS_HISTORY_PREVIOUSLY_DIVERGED := 2
Global DSFX_I3DL2REVERB_QUALITY_DEFAULT := 2
Global DSFX_I3DL2REVERB_QUALITY_MAX := 3
Global DSFX_I3DL2REVERB_REFLECTIONS_MAX := 1000
Global DSFX_I3DL2REVERB_REVERB_MAX := 2000
Global DSFXCHORUS_PHASE_180 := 4
Global DSFXCHORUS_PHASE_90 := 3
Global DSFXCHORUS_PHASE_MAX := 4
Global DSFXCHORUS_PHASE_NEG_90 := 1
Global DSFXCHORUS_PHASE_ZERO := 2
Global DSFXCHORUS_WAVE_SIN := 1
Global DSFXECHO_PANDELAY_MAX := 1
Global DSFXFLANGER_PHASE_180 := 4
Global DSFXFLANGER_PHASE_90 := 3
Global DSFXFLANGER_PHASE_MAX := 4
Global DSFXFLANGER_PHASE_NEG_90 := 1
Global DSFXFLANGER_PHASE_ZERO := 2
Global DSFXFLANGER_WAVE_SIN := 1
Global DSFXGARGLE_RATEHZ_MAX := 1000
Global DSFXGARGLE_RATEHZ_MIN := 1
Global DSFXGARGLE_WAVE_SQUARE := 1
Global DSSCL_EXCLUSIVE := 3
Global DSSCL_NORMAL := 1
Global DSSCL_PRIORITY := 2
Global DSSCL_WRITEPRIMARY := 4
Global DSSPEAKER_5POINT1 := 6
Global DSSPEAKER_7POINT1 := 7
Global DSSPEAKER_7POINT1_SURROUND := 8
Global DSSPEAKER_GEOMETRY_MAX := 180
Global DSSPEAKER_GEOMETRY_MIN := 5
Global DSSPEAKER_GEOMETRY_NARROW := 10
Global DSSPEAKER_GEOMETRY_WIDE := 20
Global DSSPEAKER_HEADPHONE := 1
Global DSSPEAKER_MONO := 2
Global DSSPEAKER_QUAD := 3
Global DSSPEAKER_STEREO := 4
Global DSSPEAKER_SURROUND := 5
Global KSPROPERTY_SUPPORT_GET := 1
Global KSPROPERTY_SUPPORT_SET := 2
dsound.err := {}
dsound.err[2289565706 . ""] := "DSERR_ALLOCATED"
dsound.err[2289565826 . ""] := "DSERR_ALREADYINITIALIZED"
dsound.err[2289565796 . ""] := "DSERR_BADFORMAT"
dsound.err[2289565906 . ""] := "DSERR_BADSENDBUFFERGUID"
dsound.err[2289565846 . ""] := "DSERR_BUFFERLOST"
dsound.err[2289565876 . ""] := "DSERR_BUFFERTOOSMALL"
dsound.err[2289565726 . ""] := "DSERR_CONTROLUNAVAIL"
dsound.err[2289565886 . ""] := "DSERR_DS8_REQUIRED"
dsound.err[2289565916 . ""] := "DSERR_FXUNAVAILABLE"
dsound.err[2289565746 . ""] := "DSERR_INVALIDCALL"
dsound.err[2289565816 . ""] := "DSERR_NODRIVER"
dsound.err[2289570145 . ""] := "DSERR_OBJECTNOTFOUND"
dsound.err[2289565856 . ""] := "DSERR_OTHERAPPHASPRIO"
dsound.err[2289565766 . ""] := "DSERR_PRIOLEVELNEEDED"
dsound.err[2289565896 . ""] := "DSERR_SENDLOOP"
dsound.err[2289565866 . ""] := "DSERR_UNINITIALIZED"
Global DSERR_ALLOCATED := 2289565706
Global DSERR_ALREADYINITIALIZED := 2289565826
Global DSERR_BADFORMAT := 2289565796
Global DSERR_BADSENDBUFFERGUID := 2289565906
Global DSERR_BUFFERLOST := 2289565846
Global DSERR_BUFFERTOOSMALL := 2289565876
Global DSERR_CONTROLUNAVAIL := 2289565726
Global DSERR_DS8_REQUIRED := 2289565886
Global DSERR_FXUNAVAILABLE := 2289565916
Global DSERR_INVALIDCALL := 2289565746
Global DSERR_NODRIVER := 2289565816
Global DSERR_OBJECTNOTFOUND := 2289570145
Global DSERR_OTHERAPPHASPRIO := 2289565856
Global DSERR_PRIOLEVELNEEDED := 2289565766
Global DSERR_SENDLOOP := 2289565896
Global DSERR_UNINITIALIZED := 2289565866
dsound.err[2147942487 . ""] := "DSERR_INVALIDPARAMS"
dsound.err[0 . ""] := "DSERR_OK"
global WAVE_FORMAT_ADPCM := 0x0002
global WAVE_FORMAT_PCM := 0x0001
global WAVEFORMATEX := Struct("WORD wFormatTag, WORD nChannels, DWORD nSamplesPerSec, DWORD nAvgBytesPerSec, WORD nBlockAlign,"
. "WORD wBitsPerSample, WORD cbSize")
global DSBUFFERDESC := Struct("DWORD dwSize; DWORD dwFlags; DWORD dwBufferBytes; DWORD dwReserved; ptr lpwfxFormat")
global DSBUFFERDESC8 := Struct("DWORD dwSize; DWORD dwFlags; DWORD dwBufferBytes; DWORD dwReserved; ptr lpwfxFormat; GUID guid3DAlgorithm")
global DSBCAPS := Struct("DWORD dwSize, DWORD dwFlags, DWORD dwBufferBytes, DWORD dwUnlockTransferRate, DWORD dwPlayCpuOverhead")
global WAV_FILE_HEADER :=
(
"
DWORD ChunkID;
DWORD ChunkSize;
DWORD Format;
DWORD Subchunk1ID;
DWORD Subchunk1Size;
WORD AudioFormat;
WORD NumChannels;
DWORD SampleRate;
DWORD ByteRate;
WORD BlockAlign;
WORD BitsPerSample;        
DWORD Subchunk2ID;
DWORD Subchunk2Size;
"
)
global WAV_FILE_HEADER := Struct(WAV_FILE_HEADER)
global IDirectSound:=0, IDirectSoundBuffer:=0, IDirectSound8:=0, IDirectSoundBuffer8:=0, IKsPropertySet:=0,IDirectSound3DBuffer:=0
global _DSBUFFERDESC := struct(DSBUFFERDESC)
LoadWAV(file_, formatcheck = True, fcs = False)
{
plock:=0, plocksize:=0
file := FileOpen(file_, "r")
VarSetCapacity(data, file.Length)
file.RawRead(data, file.Length)
file.close()
loop, % file.Length
{
if strget(&data + A_index, 3, "CP0") = "fmt"
{
index := A_index + 8
break
}
}
if not index
return "File format must be .wav (PCM)"
wav := struct(WAVEFORMATEX)
dllcall("RtlMoveMemory", ptr, wav[], ptr, &data + index, int, sizeof(WAVEFORMATEX))
if 	wav.wFormatTag = 1
wav.wFormatTag := WAVE_FORMAT_PCM
else
if formatcheck
return "WAV file must be on PCM format"
loop, % file.Length
{
if strget(&data + A_index, 4,"CP0") = "data"
{
index := A_index
break
}
}
data_size := numget(&data + index + 4, "int")
VarSetCapacity(wave_data, data_size)
dllcall("RtlMoveMemory", ptr, &wave_data, ptr, &data + index + 8, int, data_size)
(D := struct(DSBUFFERDESC8)).dwSize := sizeof(DSBUFFERDESC8)
D.dwFlags       := DSBCAPS_CTRLVOLUME | DSBCAPS_CTRLPOSITIONNOTIFY | DSBCAPS_LOCSOFTWARE
D.dwFlags       := DSBCAPS_CTRLFX
D.dwBufferBytes := data_size
D.lpwfxFormat   := wav[]
fcs ? D.dwFlags |= (DSBCAPS_STICKYFOCUS | DSBCAPS_GLOBALFOCUS )
buff := 0
r := dllcall(IDirectSound8.CreateSoundBuffer, uint, IDirectSound8.p, uint, D[], "uint*", buff, uint, 0, uint)
if r
return r  " CreateSoundBuffer " dsound.err[r . ""]
sndbuff := new ComInterfaceWrapper(dsound.IDirectSoundBuffer, buff, True)
r := dllcall(sndbuff.Lock, uint, sndbuff.p, uint, 0, uint, data_size, "uint*", plock
, "uint*", plocksize, uint, 0, uint, 0, uint, DSBLOCK_ENTIREBUFFER, uint)
if r
return r  " Lock " dsound.err[r . ""]
dllcall("RtlMoveMemory", ptr, plock, ptr, &wave_data, int, data_size)
r := dllcall(sndbuff.UnLock, uint, sndbuff.p, uint, plock, int, data_size, uint, 0, uint, 0, uint)
if r
return r  " Unlock " dsound.err[r . ""]
wav := ""
wave_data := ""
return sndbuff
}
LoadRAWSoundData(byref PMEM, file_)
{
file := FileOpen(file_, "r")
file.RawRead(WAV_FILE_HEADER[], WAV_FILE_HEADER.size())
PMEM := dllcall("VirtualAlloc", uint, 0, uint, WAV_FILE_HEADER.Subchunk2Size, Int, 0x00001000
, uint, 0x04 )
file.RawRead(PMEM+0, WAV_FILE_HEADER.Subchunk2Size)
file.close()
return WAV_FILE_HEADER.Subchunk2Size
}
DumpSndBuffer(pSndBuff, locksize, file)
{
plock:=0, plocksize:=0, size:=0, writen:=0
r := dllcall(IDirectSoundBuffer.GetFormat, uint, pSndBuff, uint, 0, uint, 0, "uint*", size, uint)
print("GetBufferSize " r "-" dsound.err[r . ""] "size: "  size "`n")
varsetcapacity(wave_format, size)
r := dllcall(IDirectSoundBuffer.GetFormat, uint, pSndBuff, uint, &wave_format, uint, size, "uint*", writen, uint)
print("GetBufferFormat " r "-" dsound.err[r . ""] "`n")
WAVEFORMATEX[] := &wave_format
r := dllcall(IDirectSoundBuffer.Lock, uint, pSndBuff, uint, 0, uint, locksize, "uint*", plock
, "uint*", plocksize, uint, 0, uint, 0, uint, DSBLOCK_ENTIREBUFFER, uint)
print("Lock " r "-" dsound.err[r . ""] "`n")
WAV_FILE_HEADER.ChunkID       := 1179011410
WAV_FILE_HEADER.ChunkSize     := plocksize + WAV_FILE_HEADER.size() - 8
WAV_FILE_HEADER.Format        := 1163280727
WAV_FILE_HEADER.Subchunk1ID   := 544501094
WAV_FILE_HEADER.Subchunk1Size := 16
WAV_FILE_HEADER.AudioFormat   := 1
WAV_FILE_HEADER.NumChannels   := WAVEFORMATEX.nChannels
WAV_FILE_HEADER.SampleRate    := WAVEFORMATEX.nSamplesPerSec
WAV_FILE_HEADER.ByteRate      := WAVEFORMATEX.nAvgBytesPerSec
WAV_FILE_HEADER.BlockAlign    := WAVEFORMATEX.nBlockAlign
WAV_FILE_HEADER.BitsPerSample := WAVEFORMATEX.wBitsPerSample
WAV_FILE_HEADER.Subchunk2ID   := 1635017060
WAV_FILE_HEADER.Subchunk2Size := plocksize
f := FileOpen(file, "w")
f.RawWrite(WAV_FILE_HEADER[], WAV_FILE_HEADER.size())
f.RawWrite(plock+0, plocksize)
f.close()
r := dllcall(IDirectSoundBuffer.UnLock, uint, pSndBuff, uint, plock, int, data_size, uint, 0, uint, 0, uint)
print("dump UnLock " r "-" dsound.err[r . ""] "`n")
}
GetDirectSound(hwin = "")
{
dllcall("Ole32.dll\CoInitialize", ptr, 0)
DS:=0, pPrim:=0, pSndbuff:=0
if ! (DSCreate := dllcall("GetProcAddress", "int", dllcall("LoadLibrary", "str", "dsound.dll"), "astr", "DirectSoundCreate"))
return "Failed to load or get the entrypoint(dsound.dll) " A_lasterror
r := dllcall(DSCreate, uint, 0, "uint*", DS, uint, 0, Uint)
if r
return "Failed to create the IDirectSound interface " r  " - " dsound.err[r . ""]
else IDirectSound := new ComInterfaceWrapper(dsound.IDirectSound, DS, True)
r :=  dllcall(IDirectSound.SetCooperativeLevel, uint, IDirectSound.p, uint, hwin ? hwin : A_scripthwnd, uint, DSSCL_NORMAL, uint)
if r
return "Failed to set the DirectSound cooperative level " r  " - " dsound.err[r . ""]
DSBUFFERDESC.dwSize        := sizeof(DSBUFFERDESC)
DSBUFFERDESC.dwFlags       := DSBCAPS_PRIMARYBUFFER
DSBUFFERDESC.dwBufferBytes := 0
DSBUFFERDESC.lpwfxFormat   := 0
r := dllcall(IDirectSound.CreateSoundBuffer, uint, IDirectSound.p, uint, DSBUFFERDESC[], "uint*", pPrim, uint, 0, uint)
if r
return "Failed to create the IDirectSoundBuffer interface " r  " - " dsound.err[r . ""]
DSBUFFERDESC.dwSize        := sizeof(DSBUFFERDESC)
DSBUFFERDESC.dwFlags       := DSBCAPS_CTRLVOLUME | DSBCAPS_CTRLPOSITIONNOTIFY | DSBCAPS_LOCSOFTWARE | DSBCAPS_CTRL3D
DSBUFFERDESC.dwBufferBytes := 33396048
DSBUFFERDESC.lpwfxFormat   := WAVEFORMATEX[]
WAVEFORMATEX.wFormatTag      := 1
WAVEFORMATEX.nChannels       := 2
WAVEFORMATEX.nSamplesPerSec  := 44100
WAVEFORMATEX.nAvgBytesPerSec := 176400
WAVEFORMATEX.nBlockAlign     := 4
WAVEFORMATEX.wBitsPerSample  := 16
WAVEFORMATEX.cbSize          := 0
r := dllcall(IDirectSound.CreateSoundBuffer, uint, IDirectSound.p, uint, DSBUFFERDESC[], "uint*", pSndbuff, uint, 0, uint)
if r
return "Failed to create the IDirectSoundBuffer interface " r  " - " dsound.err[r . ""]
IDirectSoundBuffer := new ComInterfaceWrapper(dsound.IDirectSoundBuffer, pSndbuff, True)
GUID_FromString(iid, dsound.IID_IKsPropertySet)
r := dllcall(IDirectSoundBuffer.QueryInterface, uint, IDirectSoundBuffer.p, uint, &iid, "uint*", pIKs:=0)
if r
return "Failed to create the IKsPropertySet interface " r  " - " dsound.IID_IKsPropertySet " " dsound.err[r . ""]
IKsPropertySet := new ComInterfaceWrapper(dsound.IKsPropertySet, pIKs, True)
GUID_FromString(iid, dsound.IID_IDirectSound3DBuffer)
r := dllcall(IDirectSoundBuffer.QueryInterface, uint, IDirectSoundBuffer.p, uint, &iid, "uint*", p3D:=0)
if r
return "Failed to create the IDirectSound3DBuffer interface " r  " - " dsound.IID_IKsPropertySet " " dsound.err[r . ""]
IDirectSound3DBuffer := new ComInterfaceWrapper(dsound.IDirectSound3DBuffer, p3D, True)
return "Succeeded to create the DirectSound interfaces"
}
GetDirectSound8(hwin = "")
{
dllcall("Ole32.dll\CoInitialize", ptr, 0)
DS:=0, pPrim:=0
if ! (DSCreate := dllcall("GetProcAddress", "int", dllcall("LoadLibrary", "str", "dsound.dll"), "astr", "DirectSoundCreate8"))
return "Failed to load or get the entrypoint(dsound.dll) " A_lasterror
r := dllcall(DSCreate, uint, 0, "uint*", DS, uint, 0, Uint)
if r
return "Failed to create the IDirectSound8 interface " r  " - " dsound.err[r . ""]
else IDirectSound8 := new ComInterfaceWrapper(dsound.IDirectSound8, DS, True)
r :=  dllcall(IDirectSound8.SetCooperativeLevel, uint, IDirectSound8.p, uint, hwin ? hwin : A_scripthwnd, uint, DSSCL_PRIORITY, uint)
if r
return "Failed to set the DirectSound cooperative level " r  " - " dsound.err[r . ""]
DSBUFFERDESC8.dwSize        := sizeof(DSBUFFERDESC8)
DSBUFFERDESC8.dwFlags       := DSBCAPS_PRIMARYBUFFER
DSBUFFERDESC8.dwBufferBytes := 0
DSBUFFERDESC8.lpwfxFormat   := 0
r := dllcall(IDirectSound8.CreateSoundBuffer, uint, IDirectSound8.p, uint, DSBUFFERDESC8[], "uint*", pPrim, uint, 0, uint)
if r
return "Failed to create the IDirectSoundBuffer8 interface " r  " - " dsound.err[r . ""]
else IDirectSoundBuffer8 := new ComInterfaceWrapper(dsound.IDirectSoundBuffer8, pPrim, True)
return "Succeeded to create the DirectSound8 interfaces"
}
global DSND_HOOKS := struct("LPVOID DsCrt; LPVOID CrtSndBffr; LPVOID Release; LPVOID play; LPVOID GtCps; LPVOID Query; LPVOID StPpr; LPVOID GTPrp; LPVOID Spprt; DWORD f;")
global g_dsnd
InitDSndHooks()
InitDSndHooks()
{
g_dsnd       := parsecfg(g_.cfg.dsnd)
g_dsnd.loger := new Loger(g_.cfg.injector_dir "\DSound.log")
if not g_dsnd.e
return
if (g_.cfg.console && GetKeyState("Q", "P"))
DSND_HOOKS.f := 0x1
dllcall("Peixoto.dll\InitDSoundHooks", uint, DSND_HOOKS[])
return
}

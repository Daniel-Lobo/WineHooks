global g_MainThreadID := 5980 ;<Tag> 
global g_cmdstring := "-Target^E:\Games\Soulbringer\Soulbringer.exe^-wiki^https://www.pcgamingwiki.com/wiki/Soulbringer^-D3D^1^-Path^SoulBringer^-script^scripts\soulbringer.ahk^/32bit^/HD^/WHKS^/DDRefcountfix^/4K^/HRT^/rnm^-SSAA^2^-ver^0.10.11^/layeroff^/wineoff^-<Textswap>^s=4;sz=256;path=Textures\VOKSI;n=PgUP;p=PgDn;d=Home;sw=End;c=Del;q=Ins;y=0;^-<Gpad>^A=1;B=2;X=3;Y=4;LEFT_SHOULDER=5;RIGHT_SHOULDER=6;bLeftTrigger=7;bRightTrigger=8;Start=9;Back=10;LEFT_THUMB=11;RIGHT_THUMB=12;deadzone=0.25;^-J2K^u=false;a=,,,,,,,,,,,,,,,,,,,;b=,,,,,,,,,,,,,,,,,,,;x=,,,,,,,,,,,,,,,,,,,;y=,,,,,,,,,,,,,,,,,,,;mds=0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;m=0;spd=0;dz=0.25;FF=False;rs=False;rs_alt=False;^-Textswap^e=true;path=Textures\VOKSI;sz=256;s=4;sw=End;n=[;p=];d=Home;q=Shift;dly=false;a=false;l=false;A8Fix=false;^-k2k^r0e=false;r1e=false;s0e=false;s1e=false;s2e=false;s3e=false;s4e=false;s5e=false;t0e=false;t1e=false;^-WNMM^MCI=false;^-DSnd^e=false;    {nfo} ==[Suported version]==;    {nfo} ==[Suported version]==;^-script_hwnd^0x80378^-error_log^C:\Users\Peixoto\Documents\CODE\WineHooks\Ahk\error.log^-Mydocs^C:\Users\Peixoto\Documents^-injector_dir^C:\Users\Peixoto\Documents\CODE\WineHooks\Ahk^-rlst^640x480 720x480 720x576 800x600 1024x768 1152x864 1176x664 1280x720 1280x768 1280x800 1280x960 1280x1024 1360x768 1366x768 1440x1080 1600x900 1600x1024 1680x1050 1920x1080 1440x900 ^-max_4x3_res^1440x1080^-dsk^1920x1080^-D3D_Driver^C:\WINDOWS\System32\DriverStore\FileRepository\nv_dispi.inf_amd64_9d15b9aa9e1c885b\nvldumd.dll^-os_version^10.000000^^-target_dir^E:\Games\Soulbringer^-target_name^Soulbringer.exe^-wine^10_0^-dxvkv^2_6^-common_path^1"
; <COMPILER: v1.1.15.03>
#NoEnv
#persistent
#notrayicon
#KeyHistory 0
#MaxThreads 1
critical, 0xFFFFFFFF
ListLines, Off
SetBatchLines, -1
InstallHook(hook_function_name, byref function2hook, dll = "", function2hook_name = ""
,callback_options = "F", event_info = "")
{
static hdtrs = "", sethooks = ""
if not hdtrs
{
hdtrs  := dllcall("GetModuleHandle", "str", A_Ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll", ptr)
sethooks := dllcall("GetProcAddress", "ptr", hdtrs, "astr", "sethook", ptr)
}
if not hdtrs  or not sethooks
return 1
if hook_function_name is Number
hook_function := hook_function_name
else hook_function := registercallback(hook_function_name, callback_options, "", event_info)
if not hook_function
return 2
if ! (dll = "")
{
hdll := dllcall("LoadLibrary", str, dll, ptr)
if not hdll
{
if (A_lasterror = 126)
return 3
else return 4
}
function2hook := dllcall("GetProcAddress", "ptr", hdll, "astr", function2hook_name, "ptr")
if not function2hook
return 5
}
return dllcall(sethooks, "Ptr*", function2hook, "Ptr", hook_function, int)
}
AltInstallHook(hook, byref original)
{
static hdtrs = "", sethooks = ""
if not hdtrs
{
hdtrs  := dllcall("GetModuleHandle", "str", A_Ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll", ptr)
sethooks := dllcall("GetProcAddress", "ptr", hdtrs, "astr", "sethook", ptr)
}
if not hdtrs or not sethooks
return 1
return dllcall(sethooks, "Ptr*", original, "Ptr", hook)
}
UnHook(Original, Trampoline)
{
static hdtrs = "", unhook = ""
if not hdtrs
{
hdtrs  := dllcall("GetModuleHandle", "str", "peixoto.dll")
unhook := dllcall("GetProcAddress", "int", hdtrs , "astr", "unhook")
}
if not hdtrs or not unhook
return 11
return dllcall(unhook, "Ptr*", Original, "Ptr", Trampoline)
}
InstallComHook(pInterface, byref pHooked, hook_name, offset, release = True)
{
static hdtrs = "", sethooks = ""
if not hdtrs
{
hdtrs  := dllcall("GetModuleHandle", "str", "peixoto.dll")
sethooks := dllcall("GetProcAddress", "int", hdtrs , "astr", "sethook")
}
if not hdtrs  or not sethooks
return 1
pInterface_Vtbl := numget(pInterface+0, "Ptr")
pHooked := numget(pInterface_Vtbl + offset, "Ptr")
pHook := registerCallback(hook_name)
if not pHook
return 2
if release
dllcall(numget(pInterface_Vtbl + 8), "Ptr", pInterface)
return dllcall(sethooks, "Ptr*", pHooked , "Ptr", pHook)
}
ReleaseHooks()
{
static hdll = "", release = ""
if not hdll
{
hdll  := dllcall("GetModuleHandle", "str", "peixoto.dll")
release := dllcall("GetProcAddress", "int", hdll, "astr", "ReleaseAllHooks")
}
if not hdll or not release
return [-2, 0]
varsetcapacity(err, 4, 0)
index := dllcall(release, "int*", &err)
return [index, numget(err, 0, "int")]
}
RedirectCall(_add, _func, options = "F")
{
callBack := RegisterCallback(_func, options)
VarSetCapacity(offset, 4)
numput(callBack - (_add + 5), &offset+0, "int")
old_protect := 0, dummy := 0
if not dllcall("VirtualProtect", uint, _add, uint, 4, uint, (PAGE_READWRITE := 0x04), "uint*", old_protect)
return
loop, 4
numput(numget(&offset + A_index - 1, "uchar"), _add + A_index, "uchar")
dllcall("VirtualProtect", uint, _add, uint, 4, uint, old_protect, "uint*", dummy)
return callBack
}
RedirectCallD(_add, _func, options = "F")
{
callBack := RegisterCallback(_func, options)
VarSetCapacity(offset, 4)
numput(callBack - (_add + 5), &offset+0, "int")
static hdtrs = "", sethooks = ""
if not hdtrs
{
hdtrs  := dllcall("GetModuleHandle", "str", "peixoto.dll")
sethooks := dllcall("GetProcAddress", "int", hdtrs , "astr", "sethook")
}
if not hdtrs  or not sethooks
return 1
return dllcall(sethooks, "Ptr*", _add, "Ptr", callBack)
}
GUID_FromString(ByRef GUID, String) {
VarSetCapacity(GUID, 16, 0)
StringReplace,String,String,-,,All
NumPut("0x" . SubStr(String, 2, 8), GUID, 0, "UInt")
NumPut("0x" . SubStr(String, 10, 4), GUID, 4, "UShort")
NumPut("0x" . SubStr(String, 14, 4), GUID, 6, "UShort")
Loop, 8
NumPut("0x" . SubStr(String, 16+(A_Index*2), 2), GUID, 7+A_Index, "UChar")
}
GUID_ToString(ByRef GUID) {
format := A_FormatInteger
SetFormat, Integer, H
str .= SubStr(NumGet(GUID, 0, "UInt"),3) . "-"
str .= SubStr(NumGet(GUID, 4, "UShort"),3) . "-"
str .= SubStr(NumGet(GUID, 6, "UShort"),3) . "-"
Loop, 8
str .= (A_Index = 2) ? SubStr(NumGet(GUID, 7+A_Index, "UChar"),3) . "-" : SubStr(NumGet(GUID, 7+A_Index, "UChar"),3)
SetFormat, Integer, %format%
return "{" . str . "}"
}
global DDS_PIXELFORMAT := "DWORD dwSize; DWORD dwFlags; DWORD dwFourCC; DWORD dwRGBBitCount; DWORD dwRBitMask; "
.  "DWORD dwGBitMask; DWORD dwBBitMask; DWORD dwABitMask;"
global DDS_HEADER := struct("DWORD dwSize; DWORD  dwFlags; DWORD dwHeight; DWORD dwWidth; DWORD dwPitchOrLinearSize; "
.  "DWORD dwDepth; DWORD dwMipMapCount; DWORD dwReserved1[11]; DDS_PIXELFORMAT ddspf; DWORD dwCaps; DWORD dwCaps2; "
.  "DWORD dwCaps3; DWORD dwCaps4; DWORD dwReserved2;")
DDS_PIXELFORMAT         := struct(DDS_PIXELFORMAT)
global DDPF_RGB         := 0x00000040
global DDPF_ALPHAPIXELS := 0x00000001
global DDPF_BUMPDUDV    := 0x00080000
global BITMAPINFOHEADER := "DWORD biSize, LONG biWidth, LONG biHeight, DWORD biPlanesAndbiBitCount, DWORD biCompression,"
. " DWORD biSizeImage, LONG biXPelsPerMeter, LONG biYPelsPerMeter, DWORD biClrUsed, DWORD biClrImportant"
BITMAPINFOHEADER := struct(BITMAPINFOHEADER)
global BITMAPFILEHEADER := struct("WORD bfType; DWORD bfSize; WORD bfReserved1; WORD bfReserved2; DWORD bfOffBits;")
SetFilePixelFormat(format = "RG6B")
{
if (format = "RG6B") 	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size()
DDS_PIXELFORMAT.dwRGBBitCount := 16
DDS_PIXELFORMAT.dwRBitMask := 0xF800
DDS_PIXELFORMAT.dwGBitMask := 0x07e0
DDS_PIXELFORMAT.dwBBitMask := 0x001F
DDS_PIXELFORMAT.dwABitMask := 0
}
else if (format = "RGB") 	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size()
DDS_PIXELFORMAT.dwRGBBitCount := 24
DDS_PIXELFORMAT.dwRBitMask := 0x00FF0000
DDS_PIXELFORMAT.dwGBitMask := 0x0000FF00
DDS_PIXELFORMAT.dwBBitMask := 0x000000FF
DDS_PIXELFORMAT.dwABitMask := 0
}
else if (format = "X1RGB") 	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size()
DDS_PIXELFORMAT.dwRGBBitCount := 16
DDS_PIXELFORMAT.dwRBitMask := 0x00007C00
DDS_PIXELFORMAT.dwGBitMask := 0x000003E0
DDS_PIXELFORMAT.dwBBitMask := 0x0000001F
DDS_PIXELFORMAT.dwABitMask := 0
}
else if (format = "A1RGB") 	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB | DDPF_ALPHAPIXELS
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size()
DDS_PIXELFORMAT.dwRGBBitCount := 16
DDS_PIXELFORMAT.dwRBitMask := 0x00007C00
DDS_PIXELFORMAT.dwGBitMask := 0x000003E0
DDS_PIXELFORMAT.dwBBitMask := 0x0000001F
DDS_PIXELFORMAT.dwABitMask := 0x00008000
}
else if (format = "A4RGB") 	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB | DDPF_ALPHAPIXELS
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size()
DDS_PIXELFORMAT.dwRGBBitCount := 16
DDS_PIXELFORMAT.dwRBitMask := 0xf00
DDS_PIXELFORMAT.dwGBitMask := 0xf0
DDS_PIXELFORMAT.dwBBitMask := 0xf
DDS_PIXELFORMAT.dwABitMask := 0xf000
}
else if (format = "A8RGB")	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB | DDPF_ALPHAPIXELS
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size("ddpfPixelFormat")
DDS_PIXELFORMAT.dwRGBBitCount := 32
DDS_PIXELFORMAT.dwRBitMask := 0x00FF0000
DDS_PIXELFORMAT.dwGBitMask := 0x0000FF00
DDS_PIXELFORMAT.dwBBitMask := 0x000000FF
DDS_PIXELFORMAT.dwABitMask := 0xFF000000
}
else if (format = "X8RGB")	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size("ddpfPixelFormat")
DDS_PIXELFORMAT.dwRGBBitCount := 32
DDS_PIXELFORMAT.dwRBitMask := 0x00FF0000
DDS_PIXELFORMAT.dwGBitMask := 0x0000FF00
DDS_PIXELFORMAT.dwBBitMask := 0x000000FF
DDS_PIXELFORMAT.dwABitMask := 0
}
else if (format = "A8BGR")	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB | DDPF_ALPHAPIXELS
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size("ddpfPixelFormat")
DDS_PIXELFORMAT.dwRGBBitCount := 32
DDS_PIXELFORMAT.dwRBitMask := 0x000000FF
DDS_PIXELFORMAT.dwGBitMask := 0x0000FF00
DDS_PIXELFORMAT.dwBBitMask := 0x00FF0000
DDS_PIXELFORMAT.dwABitMask := 0xFF000000
}
else if (format = "V8U8")	{
DDS_PIXELFORMAT.dwFlags := 0x80000
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size("ddpfPixelFormat")
DDS_PIXELFORMAT.dwFourCC := 16
DDS_PIXELFORMAT.dwRBitMask := 0xFF
DDS_PIXELFORMAT.dwGBitMask := 0xFF00
DDS_PIXELFORMAT.dwBBitMask := 0
DDS_PIXELFORMAT.dwABitMask := 0
}
else if instr(format, "D"){
DDS_PIXELFORMAT.dwFlags := 0x4
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size("ddpfPixelFormat")
DDS_PIXELFORMAT.dwFourCC := FourCC(format)
}
}
GetFilePixelFormat(byref fileHeader)
{
FMT := "_Unsupported format_"
dllcall(g_.p.GetDDSFilePxFmt, ptr, FileHeader[], astr, FMT)
return FMT
}
LoadDDS(file, byref pData)
{
hFile := dllcall("CreateFileW", str, file, uint, 0x80000000, uint, 0, uint, 0, uint, 3, uint, 0x80, uint, 0)
dllcall("GetFileSizeEx", uint, hFile, "int64*", size)
VarSetCapacity(pData, size)
dllcall("ReadFile", uint, hFile, uint, &pData, uint, size, "uint*", read_, uint, 0)
dllcall("RtlMoveMemory", ptr, DDS_HEADER[], ptr, &pData + 4, int, DDS_HEADER.size())
pixelformat := getFilePixelFormat(DDS_HEADER)
printl("Pixelformat: " pixelformat "  " DDS_HEADER.dwWidth "x" DDS_HEADER.dwHeight)
dllcall("CloseHandle", uint, hFile)
return pixelformat
}
OpenDDS(file, byref hFile)
{
size:=0, signature:=0,
hFile := dllcall("CreateFileW", str, file, uint, 0x80000000, uint, 0x00000001, uint, 0, uint, 3, uint, 0x80, uint, 0)
(hFile=-1)?	logerr("error " A_lasterror " opening file " file)
dllcall("GetFileSizeEx", uint, hFile, "int64*", size)
dllcall("ReadFile", uint, hFile, "uint*", signature, uint, 4, "uint*", (rd:=0), uint, 0)
dllcall("ReadFile", uint, hFile, uint, DDS_HEADER[], uint, DDS_HEADER.size(), "uint*", (rd:=0), uint, 0)
pixelformat := GetFilePixelFormat(DDS_HEADER)
printl("Pixelformat: " pixelformat "  " DDS_HEADER.dwWidth "x" DDS_HEADER.dwHeight)
return pixelformat
}
LoadDumpCollection(dir, byref lst)
{
FileGetAttrib, att, %dir%
if not instr(att, "D")
return
loop, %dir%\*.dds, 0, 0
{
LoadSingleDump(A_LoopFileFullPath, A_LoopFileName)
}
}
LoadSingleDump(path, name)
{
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
dllcall(dll "\AppendDump", astr, path)
}
LoadCompiledDumpCollection(file, byref lst)
{
SplitPath, file, , dir
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
dllcall(dll "\LoadDumps", astr, file, astr, dir)
}
IsDump(o, f)
{
return
return dllcall("peixoto.dll\IsDump", astr, f)
}
FourCC(code)
{
if code is not number
{
VarSetCapacity(format, 4)
strput(code, &format, 4, "CP0")
return numget(&format+0, "uint")
} else {
VarSetCapacity(format, 4)
numput(code, &format, "uint")
return strget(&format, 4, "CP0")
}
}
Class ComInterfaceWrapper
{
__New(byref definition, ppIface, D3D8 = False)
{
this.Adds    := {}
this.offsets := {}
n            := 0
def          := definition.def
loop, parse, def, `n
{
if instr(A_loopfield , "STDMETHOD")
{
method := trim(strsplit(A_loopfield, "(")[2])
method := strsplit(method, ")")[1]
if instr(method, ",")
{
stringsplit, method_, method,`,
method := trim(method_2)
}
this.offsets[method] := n * A_ptrsize
n += 1
}
}
pIface := D3D8 ? ppIface : numget(ppIface+0, "ptr")
if pIface
{
Vtbl := numget(pIface + 0, "Ptr")
for k, v in this.offsets
{
value        := numget(Vtbl + v, "Ptr")
this[k]      := value
this.Adds[k] := value
}
}
this.dwSize        := n*A_ptrsize
this.pVTbl         := Vtbl
this.p             := pIface
this.def           := def
this.name          := definition.name
this.released      := False
this.Hooks         := {}
this.Mthds         := {}
this.Hooked        := {}
}
Hook(Method, hook = "", options = "F", EventInfo="")
{
if this.Hooked[Method]
return this.name "::" Method " is already hooked"
if not this.pVTbl
return "Failed to hook " this.name "::" Method " - The interface pointer is not valid"
hook ?:	hook := isfunc("Alt_" Method) ? "Alt_" Method : isfunc("Alt" this.name "_" Method)
? "Alt" this.name "_" Method : this.name "_" Method
pHook := registerCallback(hook, options, ,EventInfo)
if not pHook
return "Failed to hook " this.name "::" Method " - could not create callback"
pInterface_Vtbl    := this.pVTbl
pHooked            := numget(pInterface_Vtbl + this.offsets[Method], "Ptr")
this.Mthds[Method] := pHooked
r                  := dllcall(ComInterfaceWrapper.sethooks, "Ptr*", pHooked, "Ptr", pHook)
this[Method]       := pHooked
if r
return "Failed to hook " this.name "::" Method " - detours error " r
else
{
this.Hooked[Method] := True
this.hooks[hook]    := pHook
}
return "Succeeded to hook " this.name "::" Method
}
dllHook(Method, hook, dll = "peixoto.dll")
{
if this.Hooked[Method]
return this.name "::" Method " is already hooked"
if not this.pVTbl
return "Failed to hook " this.name "::" Method " - The interface pointer is not valid"
pHook := dllcall("GetProcAddress", ptr, dllcall("GetModuleHandle", str, dll, ptr), astr, hook, ptr)
if not pHook
return "Failed to hook " this.name "::" Method " - could not create callback"
pInterface_Vtbl    := this.pVTbl
pHooked            := numget(pInterface_Vtbl + this.offsets[Method], "Ptr")
this.Mthds[Method] := pHooked
r                  := dllcall(ComInterfaceWrapper.sethooks, "Ptr*", pHooked, "Ptr", pHook)
this[Method]       := pHooked
if r
return "Failed to hook " this.name "::" Method " - detours error " r
else
{
this.Hooked[Method] := "dll"
this.hooks[hook]    := pHook
}
return "Succeeded to hook " this.name "::" Method
}
PatchVtable(method, EventInfo="", HookFunc="")
{
table       := this.pVTbl
target      := table+this.offsets[method]
if ! (hook := RegisterCallback(HookFunc ? HookFunc :Isfunc("Alt_" Method) ? "Alt_" Method : isfunc("Alt" this.name "_" Method)
? "Alt" this.name "_" Method : this.name "_" Method , "F",,EventInfo))
return "Failed to hook " this.name "::" Method " - could not create callback"
if ! isobject(p := new Prtct(target, A_ptrsize))
return "Failed to hook " this.name "::" Method " - VirtualProtect failed"
numput(hook, table+this.offsets[method], "ptr")
return "Succeeded to hook " this.name "::" Method
}
PatchVtableWithDll(method, hook, dll = "peixoto.dll")
{
table  := this.pVTbl
target := table+this.offsets[method]
p      := new Prtct(target, A_ptrsize)
if not (hook := dllcall("GetProcAddress", ptr, dllcall("GetModuleHandle", str, dll, ptr), astr, hook, ptr))
return "Failed to hook " this.name "::" Method " - could not create callback"
if ! isobject(p := new Prtct(target, A_ptrsize))
return "Failed to hook " this.name "::" Method " - VirtualProtect failed"
numput(hook, table+this.offsets[method], "ptr")
return "Succeeded to hook " this.name "::" Method
}
__delete()
{
if not this.released
dllcall(this.release, uint, this.p, uint)
}
__release()
{
this.released := True
r := dllcall(this.Release, uint, this.p, uint)
return r
}
UnHook(Method, hook = "")
{
logerr("unhook " ComInterfaceWrapper._unhook)
if not this.Hooked[Method]
return "Method " Method " is not hooked yet"
if not hook
hook := this.name "_" Method
r := dllcall(ComInterfaceWrapper._unhook, "Ptr*", this.Mthds[Method], "Ptr", this.hooks[hook])
if r
return "Failed to unhook " this.name "::" Method " - detours error " r
else
{
if not this.Hooked[Method] = "dll"
DllCall("GlobalFree", "Ptr", this.hooks[hook], "Ptr")
this.hooks.remove(hook)
this.Hooked.remove(Method)
}
return "Succeeded to unhook " this.name "::" Method
}
Compare(interfaces)
{
r=
for method, adress in this.adds
{
reimp=
for k, i in interfaces
{
if (i.adds[method] != adress)
reimp .= i.name "[" i.adds[method] "], "
}
if (reimp)
r .= Trim(this.name "::" method "[" adress "] reimplement in " reimp "`n", ",")
}
return Trim(r, "`n")
}
}
class Memory {
__new(sz) {
this.p := dllcall("VirtualAlloc", ptr, 0, ptr, sz, uint, 0x00001000, uint, 0x04)
}
__delete() {
dllcall("VirtualFree", ptr, this.p, ptr, 0x00008000, uint, 0x04)
}
}
Class Prtct{
__new(a, s)
{
if !dllcall("VirtualProtect", uint, a, uint, s, uint, 0x04, "uint*", o:=0)
return
this.a := a
this.s := s
this.o := o
}
__delete()
{
dllcall("VirtualProtect", uint, this.a, uint, this.s, uint, this.o, "uint*", o:=0)
}
}
Class Collection {
__new(ThreadSafe=False)
{
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
hdll := dllcall("GetModuleHandle", str, dll, ptr)
this.pc     := dllcall(dllcall("GetProcAddress", ptr, hdll, astr, "PointerCollectionCreate", ptr), ptr)
this.vtbl   := struct("LPVOID insert; LPVOID insert_disposable; LPVOID remove; LPVOID discard; LPVOID Value; LPVOID Key; LPVOID ValueAt; LPVOID KeyAt; LPVOID Count")
this.vtbl[] := numget(this.pc+0, "ptr")
this.size := 0
}
_add(key, data){
return (this.size := dllcall(this.vtbl.Insert_disposable, ptr, this.pc, ptr, key, ptr, data, uint))
}
_Insert(key, memsize)
{
pData := dllcall("VirtualAlloc", ptr, 0, ptr, memsize, uint, 0x00001000 | 0x00002000, uint, 0x04, ptr)
dllcall("RtlZeroMemory", ptr, pData, uint, memsize)
this.size := dllcall(this.vtbl.insert, ptr, this.pc, ptr, key, ptr, pData, uint)
return pData
}
PutStr(key, s){
Strput(s, this._insert(key, strlen(s)+1)+0, "CP0")
}
GetStr(key){
return Strget(this.value(key)+0, "CP0")
}
Value(key) {
return dllcall(this.vtbl.Value, ptr, this.pc, ptr, key, ptr)
}
Key(value) {
return dllcall(this.vtbl.Key, ptr, this.pc, ptr, value, ptr)
}
ValueAt(index) {
return dllcall(this.vtbl.ValueAt, ptr, this.pc, ptr, index, ptr)
}
KeyAt(index) {
return dllcall(this.vtbl.KeyAt, ptr, this.pc, ptr, index, ptr)
}
Remove(key) {
return (this.size := dllcall(this.vtbl.Remove, ptr, this.pc, ptr, key, uint))
}
Discard(key) {
return (this.size := dllcall(this.vtbl.Discard, ptr, this.pc, ptr, key, uint))
}
Count(){
return dllcall(this.vtbl.Count, ptr, this.pc)
}
}
keyevent(key, dummy="")
{
static state := {}
state[key] ?: state[key] := getkeystate(key, "p") ? 1 :-1
event := False
newstate := getkeystate(key, "p") ? 1 :-1
if ( (newstate = 1) and (state[key] = -1)  )
event := True
state[key] := newstate
return event
}
StringFromIID(pIID)
{
dllcall("Ole32.dll\StringFromIID", uint, pIID, "uint*", GUID)
rtn := StrGet(GUID)
dllcall("Ole32.dll\CoTaskMemFree", uint, GUID)
return rtn
}
zeromem(struct){
varsetcapacity(struct[], struct.size(), 0)
}
newmem(struct){
VarSetCapacity(st, struct.size(), 0)
struct[] := &st
}
class Loger
{
__new(logpath, maxlogs=1000)
{
this.f     := logpath
this.hnd   := DllCall("GetStdHandle", "int", -11, ptr)
this.count := 0
this.max   := maxlogs
FileDelete, % logpath
}
err(msg)
{
fileAppend, %msg%`n, % this.f
dllcall("WriteConsole", "ptr", this.hnd, "ptr", &msg, "int", strlen(msg), uint, 0, ptr, 0)
}
log(msg)
{
if (this.count > this.max)
return
this.count += 1
return this.err(msg)
}
}
logErr(msg){
static file="", call="", maxlogs = 10
call += 1
if not file
{
file    := strsplit(msg, "|")[1]
maxlogs := strsplit(msg, "|")[2]
filedelete, %file%
return
}
if (call < maxlogs + 2)
fileAppend, %msg%`n, %file%
printl(msg)
}
Ciclecolor(c)
{
static clrs := [0x00000000, 0x00FFFFFF, 0x00ff0000, 0x0000ff00, 0x000000ff, 0x00ffff00, 0x00ff00ff
,0x0000ffff, 0x00000000]
for k, v in clrs
{
if (c = v)
{
c := clrs[k+1]
break
}
}return c
}
print(msg = "")
{
static hnd=""
if ! hnd
{
VarSetCapacity(name, 260)
dllcall("GetModuleFileNameA", ptr, 0, "ptr", &name, int, 260)
name := strget(&name+0, "CP0")
splitpath, name, fname
if !isfunc("CreateProcessA_hook")
DllCall("AllocConsole")
else DllCall("AttachConsole", uint, (ATTACH_PARENT_PROCESS := -1))
hnd := DllCall("GetStdHandle", "int", -11, ptr)
}
return dllcall("WriteConsole", "ptr", hnd , "ptr", &msg, "int", strlen(msg), uint, 0, ptr, 0)
}
printl(msg = "") {
return msg ? print(msg . "`n") : (g_.cfg.console) ?: DllCall("FreeConsole")
}
Parsecfg(item = "")
{
if not item
{
cfg  := strsplit(g_cmdstring, "^")
globals := {}
globals.cfg := {}
for k, v in cfg
{
Key := SubStr(v, 1, 1)
_Key := SubStr(v, 2, strlen(v)-1)
if _Key is number
continue
if (Key = "-")
globals.cfg[SubStr(v, 2, strlen(v)-1)] := cfg[k + 1]
else if (Key = "/")
globals.cfg[SubStr(v, 2, strlen(v)-1)] := True
}
return globals
} else {
cfg := {}
for k, v in strsplit(item, ";")
{
split := strsplit(v, "=")
key := split[1]
val := split[2]
if not split[2]
{
continue
}
(val = "True") ? val := True
(val = "False") ? val := False
cfg[key] := val
}
return cfg
}
}
resume()
{
if (hThread := dllcall("OpenThread", uint, 0x0002, uint, 0, uint, g_MainThreadID, ptr))
{
dllcall("ResumeThread", "ptr", hThread, "uint")
dllcall("CloseHandle", ptr, hThread)
} else {
dllcall("ddraw.dll\ProxyResume")
}
dllcall("SendMessageW", uint, g_.cfg.script_hwnd, uint, dllcall("RegisterWindowMessageW", str, "Peixoto.Thread"), uint, 0, uint, 0)
}
GetDesktopResolution()
{
if g_.cfg.DSR
{
res := strsplit(g_.cfg.DSR, "x")
return  {"w" : res[1], "h" : res[2]}
}
r := {"w" : dllcall("GetSystemMetrics", uint, 0) , "h" : dllcall("GetSystemMetrics", uint, 1)}
res := r.w "x" r.h
if ( r.w/r.h < 1.33	)
{
res := strsplit(g_.cfg.max_4x3_res, "x")
r := {"w" : res[1], "h" : res[2]}
}
return r
}
Desk()
{
r := strsplit(g_.cfg.DSR ? g_.cfg.DSR : g_.cfg.dsk, "x")
return {"w" : r[1], "h" : r[2]}
}
CreateLinksCollection(links)
{
target_dir := g_.cfg.path
FileCreateDir, %target_dir%
for k, v in  links {
printl("Simbolic link : " v "-> " target_dir v " Succes= " dllcall("CreateSymbolicLinkW", str, A_workingdir "\" v
, str, target_dir v, uint, 0, uint) " code= " A_lasterror " "  )
}
}
FOV(oldfov, ratio)
{
ratio := strsplit(ratio, ":")
oldfov *= 0.01745329252 / 2
return 2 * (ATan(tan(oldfov) * ratio[1]/ratio[2]) * 57.29578)
}
Matrix2String(pMatrix)
{
D3DMATRIX[] := pMatrix
str := 	D3DMATRIX.m11 " " D3DMATRIX.m12 " " D3DMATRIX.m13 " " D3DMATRIX.m14 "`n"
str .= 	D3DMATRIX.m21 " " D3DMATRIX.m22 " " D3DMATRIX.m23 " " D3DMATRIX.m24 "`n"
str .= 	D3DMATRIX.m31 " " D3DMATRIX.m32 " " D3DMATRIX.m33 " " D3DMATRIX.m34 "`n"
str .= 	D3DMATRIX.m41 " " D3DMATRIX.m42 " " D3DMATRIX.m43 " " D3DMATRIX.m44 "`n"
return str
}
ProcessD3DShader(code, w=0, h=0, tw=1, th=1)
{
c := ""
w ? c .= "`n#define w " w "."
h ? c .= "`n#define h " h "."
c .= "`n#define tw 1./" tw "."
c .= "`n#define th 1./" th "."
return c . "`n" code
}
GetSystemDir(){
VarSetCapacity(SysDir, 261)
DllCall("GetSystemDirectoryW", Str, SysDir, UInt, 261)
return SysDir
}
class Comptr {
__new(ptr, obj=""){
this.p   := ptr
this.obj := obj
}
__delete(){
if (this.obj)
dllcall(this.obj.release, prt, this.p)
else dllcall(numget(numget(this.p+0, "ptr")+A_PtrSize*2, "ptr"), prt, this.p)
}
}
Release(o){
return dllcall(numget(numget(o+0, "ptr")+A_PtrSize*2, "ptr"), uint, o)
}
AddRef(o){
return dllcall(numget(numget(o+0, "ptr")+A_PtrSize*1, "ptr"), uint, o)
}
global GUID := "DWORD Data1; WORD  Data2;  WORD  Data3;  BYTE  Data4[8]"
global g_fhks := {}
global CSIDL_FLAG_CREATE    := 0x8000
global CSIDL_COMMON_APPDATA := 35
global CSIDL_LOCAL_APPDATA  := 28
global CSIDL_APPDATA        := 26
global CSIDL_PERSONAL       := 5
global CSIDL_WINDOWS     := 36
global CSIDL_SYSTEM	     := 37
global CSIDL_SYSTEMX86	 := 41
InitFileHooks(byref cfg)
{
flags       := 0
g_fhks.docs := g_.cfg.path
path        := g_fhks.docs
FileCreateDir, %path%\Saves
FileCreateDir, %path%\mods
FileCreateDir, %path%\cfg
g_fhks.files     := new Collection()
f := HasFiles(path "cfg")
if isfunc("AltCreateFileA")
{
if (g_.cfg.mods)
logerr("CreateFileA_Hook : " InstallHook("AltCreateFileA", pCreateFileA, "peixoto.dll", "CreateFileA_Hook") " <- 0 means no error")
else logerr("CreateFileA_Hook : " InstallHook("AltCreateFileA", pCreateFileA, "Kernel32.dll", "CreateFileA") " <- 0 means no error")
g_fhks.pCreateFileA := pCreateFileA
}
if isfunc("AltCreateFileW")
{
if (g_.cfg.mods or f)
logerr("CreateFileW_Hook : " InstallHook("AltCreateFileW", pCreateFileW, "peixoto.dll", "CreateFileW_Hook") " <- 0 means no error")
else logerr("CreateFileW_Hook : " InstallHook("AltCreateFileW", pCreateFileW, "Kernel32.dll", "CreateFileW") " <- 0 means no error")
g_fhks.pCreateFileW := pCreateFileW
}
f := HasFiles(path "cfg")
if (g_.cfg.mods or f)
{
flags        |= 0x10
g_fhks.paths := []
for k, v in strsplit(g_.cfg.mods, ";")
g_fhks.paths.insert(g_.cfg.path "mods\" v)
if (f)
g_fhks.paths.insert(g_.cfg.path "cfg")
Buildfileslist()
}
path := StrReplace(path "\Saves\", "\\", "\")
pex  := A_PtrSize=8 ? "peixoto64.dll\" : "peixoto.dll\"
dllcall(pex "InitFileHooks", str, path, astr, path, ptr, g_fhks.files.pc, ptr, 0, uint, flags)
return
for k, v in g_fhks.filesList
{
logerr(k " " v)
dllcall(pex "FileHooksInsertFile", wstr, k, wstr, v)
logerr(errorlevel)
}
}
HasFiles(dir)
{
logerr(dir "Files: " )
loop, %dir%\*.*, 0, 0
{
logerr(A_loopfilefullpath)
FileGetAttrib, att, %A_loopfilefullpath%
if not instr(att, "D"){
logerr("HasFiles 1")
return 1
}
}
logerr("HasFiles 0")
}
InitSteamFileHooks()
{
name    := "INIT_STEAM_FILE_HOOKS: "
hSteam  := dllcall("GetModuleHandleA", astr, A_PtrSize=4 ? "steamclient.dll" : "steamclient64.dll", ptr)
if (!hSteam)
return logerr(name "no handle " errorlevel)
pFunc   := dllcall("GetProcAddress", ptr, hSteam, astr, "CreateInterface", ptr)
if (!pFunc)
return logerr(name "no adress " errorlevel)
pIntrfc := DllCall(pFunc, astr, "SteamUser018", "int*", r:=0, ptr)
if (!pIntrfc)
return logerr(name "no pointer " errorlevel)
pTable  := numget(pIntrfc+0, "ptr")
pGtFldr := numget(pTable+A_ptrsize*6, "ptr")
VarSetCapacity(path, 260)
logerr(name dllcall(pGtFldr, ptr, pIntrfc, ptr, &path, int, 260) " " errorlevel)
logerr(name strget(&path+0, "CP0"))
h := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "ISteamUser_GetUserDataFolder_Hook", ptr)
logerr(name AltInstallHook(h, pGtFldr))
logerr(name "OK")
}
IsSteamCloudnabled(steam)
{
logerr("IsSteamCloudnabled ==========================================")
return 0
}
OpenFile(p1, p2, p3)
{
file := strget(p1, "CP0")
printl("open " file)
stringreplace, file, file, /, \, 1
Splitpath, file, filename, filedir, ext
g_fhks.filesList[filename] ? file := g_fhks.filesList[filename]
r := dllcall(g_fhks.pOpenFile , astr, file, uint, p2, uint, p3)
return r
}
BuildDirFlslst(dir, byref collec)
{
logerr("isobject " isobject(collec))
loop, %dir%\*.*, 1, 0
{
if (instr(FileExist(A_LoopFileFullPath), "D"))
{
name  := A_loopfilename
g_fhks.fldrs.lst[A_loopfilename] := new Collection()
pK := dllcall("VirtualAlloc", ptr, 0, ptr, (strlen(name)+1)*2, uint, 0x00003000, uint, 0x04, ptr)
strput(name, pK, "UTF-16")
g_fhks.fldrs._add(pK, g_fhks.fldrs.lst[A_loopfilename].pc)
BuildDirFlslst(A_LoopFileFullPath, g_fhks.fldrs.lst[A_loopfilename])
} else
{
name  := A_loopfilename
logerr("Found file" A_LoopFileFullPath)
pK := dllcall("VirtualAlloc", ptr, 0, ptr, (strlen(name)+1)*2, uint, 0x00003000, uint, 0x04, ptr)
strput(name, pK, "UTF-16")
strput(A_loopfilefullpath, collec._Insert(pK, (strlen(A_loopfilefullpath)+1)*2, "UTF-16"))
}
}
logerr("Collection size " collec.Count())
}
Buildfileslist()
{
folders          := g_fhks.paths
g_fhks.filesList := {}
for k, v in folders
{
loop, %v%\*.*, 0, 1
{
StringLower, name, A_loopfilename
if (name = "error.log")
continue
pK := dllcall("VirtualAlloc", ptr, 0, ptr, (strlen(name)+1)*2, uint, 0x00003000, uint, 0x04, ptr)
strput(name, pK, "UTF-16")
strput(A_loopfilefullpath, g_fhks.files._Insert(pK, (strlen(A_loopfilefullpath)+1)*2, "UTF-16"))
g_fhks.filesList[name] := A_loopfilefullpath
}
}
err := g_.cfg.error_log
splitpath, err, errofile
g_fhks.filesList.remove(errofile)
}
global g_                    := ParseCfg()
g_cmdstring                  := ""
g_.h_PeixotoDll              := dllcall("GetModuleHandleW", str, (A_ptrsize = 4) ? "peixoto.dll" : "peixoto64.dll", ptr)
g_.p                         := {}
g_.p.Scale                   := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "Scale", uint)
g_.p.Critical                := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "Critical")
g_.p.GetDDSFilePxFmt         := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "GetDDSFileFormat", ptr)
g_.p.LoadSurfData            := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "LoadData2Surface", uint)
g_.p.GetTicks                := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "TimeGetTimeF", uint)
ComInterfaceWrapper.sethooks := dllcall("GetProcAddress", "ptr", g_.h_PeixotoDll, "astr", "sethook", ptr)
ComInterfaceWrapper._unhook  := dllcall("GetProcAddress", "ptr", g_.h_PeixotoDll, "astr", "unhook", ptr)
g_.s := {}
InitGlobals()
InitGlobals()
{
if ! g_.cfg.path
{
path := g_.cfg.target
splitpath, path, , , ,name
g_.cfg.path := g_.cfg.MyDocs "\WineHooks\Games\" name "\"
} else 	g_.cfg.path :=  g_.cfg.MyDocs "\WineHooks\Games\" g_.cfg.path "\"
if !fileexist((mds := g_.cfg.path "mods"))
FileCreateDir, % mds
cfg := "Peixotos's patch remote settings:`nCommand Line: " dllcall("GetCommandLineA", astr) "`n"
for kk, vv in g_.cfg
cfg .= kk ": " vv "`n"
if g_.cfg.console
logErr(g_.cfg.error_log "|100")
else
logErr(g_.cfg.error_log "|100")
logerr(cfg)
logerr("Working directory: " A_workingdir)
InitFileHooks(g_.cfg)
if (g_.cfg.HRT)
{
logerr("TimeGetTime Hook " AltInstallHook(dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "TimeGetTimeHook")
, dllcall("GetProcAddress", ptr, dllcall("LoadLibrary", str, "Winmm.dll"), astr, "timeGetTime")))
logerr("GetTckCount Hook " AltInstallHook(dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "TimeGetTimeHook")
, dllcall("GetProcAddress", ptr, dllcall("LoadLibrary", str, "Kernel32.dll"), astr, "GetTickCount")))
g_.cfg.HRT := ""
}
if (g_.cfg.QPCFix)
dllcall("peixoto.dll\HookQueryPerformanceCounter")
g_.cfg.QPCFix := ""
if (g_.cfg.iso)
new VirtualDisk().Mount("E:\Users\dllob\Downloads\Game ISOS\" trim(g_.cfg.iso), "D")
}
sleephook(p1){
return
}
GlobalMemHook(p1)
{
dllcall(g_.p.GlobalMem, uint, p1)
m   := struct("DWORD Length; DWORD Load; SIZE_T TotalPhys; SIZE_T AvailPhys; SIZE_T TotalPage; SIZE_T AvailPage; SIZE_T TotalVirt; SIZE_T AvailVirt;")
m[] := p1
mg  := 1024*1024
logerr("&&&&&&&&&&&&&&&&&&&& " m.AvailPage)
if (m.AvailPage >= 0x7fffffff)
m.AvailPage := 256*mg
}
SdbGetMatchingExe()
{
return
}
DWMShimCallOut()
{
logerr("DWMShimCallOut " dllcall(g_.DWMShimCallOut))
return 0
}
wait()
{
static l = 0
n := dllcall(g_.p.GetTicks, double)
while ( n - l < g_.cfg.LMT )
n := dllcall(g_.p.GetTicks, double)
l := n
}
Class VirtualDisk
{
Mount(path, drv)
{
dllcall("Kernel32.dll\DeleteVolumeMountPointW", str, drv ":\")
vol := this.EnumVolumes()
dllcall("peixoto.dll\MountISO", str, path)
for k, v in this.EnumVolumes()
{
if ! vol[k]
{
FileAppend, % "Mounted " k "`n", *
if (dllcall("Kernel32.dll\SetVolumeMountPointW", str, drv ":\", str, k) = 0)
return A_Lasterror
}
}
}
EnumVolumes()
{
VarSetCapacity(VolName, 1024)
Volumes  := []
hFVol    := dllcall("Kernel32.dll\FindFirstVolumeW", str, VolName, uint, 1024)
if (hFVol = -1)
{
FileAppend, % "FindFirstVolumeW Failed`n", *
}
Volumes[VolName] := True
success := 1
while (success)
{
success          := dllcall("Kernel32.dll\FindNextVolumeW", ptr, hFVol, str, VolName, uint, 1024)
Volumes[VolName] := True
}
for k, v in Volumes
{
dllcall("GetVolumePathNameW", str, v, str, VolName, uint, 1024)
FileAppend, % v " " k " " VolName "`n", *
}
return Volumes
}
}

; <COMPILER: v1.1.15.03>
memlib_sound(sound) {
return (sound=1) ? A_windir "\media\Windows Foreground.wav"  : (sound=0) ? A_windir "\media\Windows Ding.wav"
:  A_windir "\media\Windows Critical Stop.wav"
}
get_process_list()
{
process_list := {}
snapshot_handle := dllcall("CreateToolhelp32Snapshot", "int", 0x00000002, int, 0)
varsetcapacity(lppe, 556 , 0),	numput(556, lppe, 0,Int)
success :=  dllcall("Process32First", "Ptr", snapshot_handle, "Ptr", &lppe)
process_list.insert({"name" : StrGet(&lppe + 36, 520, 0), "ID" : NumGet(lppe, 8, "Int")})
offset := (A_ptrsize=4) ? 36 : 44
while (success = 1)
{
varsetcapacity(lppe, 556 , 0),	numput(556, lppe, 0,Int)
success := dllcall("Process32Next", "Ptr", snapshot_handle, "Ptr", &lppe)
process_list.insert({"name" : StrGet(&lppe + offset, 520, 0), "ID" : NumGet(lppe, 8, "Int")})
}
return 	process_list
}
open_process(ProcessID, access = "", InheritHandle = 0)
{
if access =
access := 0x0008 | 0x0010 | 0x0020 |  0x0400
return DllCall("OpenProcess", "Int", access, "Char", InheritHandle, "UInt", ProcessID, "Uint")
}
get_process_handle(process_, access = "")
{
for k, v in get_process_list()
{
if v.name = process_
return open_process(v.ID, access)
}
}
close_process_handle(hProcess){
return dllcall("CloseHandle", "int", hProcess)
}
write_process_memory(hProcess, adress, type_, value)
{
size := {"char": 1, "uchar": 1, "short": 2, "int": 4, "array": value._MaxIndex()
, "float" : 4, "str" : (StrLen(value)+1) * 2}
if (type_ = "array")
{
varsetcapacity(buffer, size[type_], 0)
loop, % value._MaxIndex()
Numput(value[A_index], buffer, A_index - 1, "UChar")
}
else if  (type_ = "str")
{
varsetcapacity(buffer, size[type_], 0)
StrPut(value, &buffer, size[type_], "UTF-16")
}
else
{
varsetcapacity(buffer, size[type_], 0)
Numput(value, buffer, 0, type_)
}
r := dllcall("WriteProcessMemory"
,"Ptr", hProcess
,"Ptr", adress
,"Ptr", &buffer
,"Ptr", size[type_]
,"Ptr", 0
,"uint")
return r
}
read_process_memory(hProcess, adress, type_, arraysize = "")
{
size := {"char": 1, "UChar": 1, "short": 2, "int": 4, "Uint": 4, "Ptr": 4, "array": arraysize
, "float" : 4}
if (type_ = "array")
varsetcapacity(buffer, arraysize, 0)
else
varsetcapacity(buffer, size[type_], 0)
r := dllcall("ReadProcessMemory"
,"Int", hProcess
,"Ptr", adress
,"Ptr", &buffer
,"UInt", size[type_]
,"Int", 0
,"Uint")
if ! r
return
if (type_ = "array")
{
return_value := []
loop, % arraysize
return_value.insert(Numget(buffer,  A_index - 1, "UChar"))
}
else return_value := Numget(buffer,  0, type_)
return return_value
}
read_pointer_sequence(hprocess, baseadress, offsets)
{
pointer := read_process_memory(hprocess, baseadress, "Ptr")
for k, offset in offsets
{
adress := pointer + offset
pointer := read_process_memory(hprocess, adress, "Ptr")
}
return [adress, pointer]
}
class CodeInjection
{
__New(hprocess, addy, newcode)
{
format := A_FormatInteger
setformat, integer, H
this.process_ := hprocess
this.addy := addy
this.newcode := newcode
this.original_code := read_process_memory(hprocess, this.addy, "array", this.newcode._maxIndex())
setformat, integer, %format%
}
_enable()
{
return write_process_memory(this.process_, this.addy, "array", this.newcode)
}
_disable()
{
return write_process_memory(this.process_, this.addy, "array", this.original_code)
}
switch()
{
current_code := read_process_memory(this.process_, this.addy, "array", this.newcode._maxIndex())
for k, v in current_code
fileappend, % v ":" this.original_code[k] ":" this.newcode[k]"`n", *
if arrays_are_equal(current_code, this.original_code)
{
if this._enable()
return memlib_sound(1)
else return memlib_sound(-1)
}
else if arrays_are_equal(current_code, this.newcode)
{
if this._disable()
return memlib_sound(0)
else return memlib_sound(-1)
}
}
__Delete()	{
this._disable()
}
}
VirtualAllocEx(hProcess, mem_size)
{
adress := dllcall("VirtualAllocEx"
,"ptr", hProcess
,"ptr", 0
,"ptr", mem_size
,"uint", 0x00001000 | 0x00002000
,"uint", 0x04
,"ptr")
return adress
}
dllcallEx(h_process, Lib, function, argument)
{
if (Lib = "Kernel32.dll")
procedure := dllcall("Kernel32.dll\GetProcAddress", ptr, dllcall("LoadLibraryW", str, Lib, ptr), astr, function, ptr)
else
procedure := GetProcAddressEx(h_process, Lib, function)
if not procedure
return 1
adress := VirtualAllocEx(h_process, StrLen(argument) * 2)
if not adress
return 2
if not write_process_memory(h_process, adress, "str", argument) {
dllcall("VirtualFreeEx", ptr, h_process, ptr, adress, ptr, 0, uint, 0x8000)
return 3
}
VarSetCapacity(out, StrLen(argument) * 2)
r := dllcall("ReadProcessMemory"
,"Int", h_process
,"Ptr", adress
,"ptr", &out
,"UInt", StrLen(argument) * 2
,"Int", 0
,"Uint")
if ! (hThread := dllcall("CreateRemoteThread"
,ptr, h_process
,ptr, 0
,ptr, 0
,ptr, procedure
,ptr, adress
,uint, 0
,ptr, 0
,ptr) )
{
dllcall("VirtualFreeEx", ptr, h_process, ptr, adress, ptr, StrLen(argument) * 2, uint, 0x4000 | 0x8000)
return 4
} else {
dllcall("WaitForSingleObject", "ptr", hThread, "uint", 0xffffffff)
dllcall("VirtualFreeEx", ptr, h_process, ptr, adress, ptr, 0, uint, 0x8000)
dllcall("CloseHandle", ptr, hThread)
return 0
}
}
GetProcAddressEx(h_process, module, function)
{
this_fucntion_add := dllcall("Kernel32.dll\GetProcAddress", ptr, dllcall("LoadLibraryW", str, module, ptr), astr, function, ptr)
this_module_info  := find_module(module, DllCall("GetCurrentProcessId"))
offset            := this_fucntion_add - this_module_info.BaseAddr
module_info := find_module(module, dllcall("GetProcessId", uint, h_process, uint))
address     := module_info.BaseAddr + offset
return address
}
ReverseInt32bytes(int32)
{
format := A_FormatInteger
setformat, integer, H
stringreplace, int32, int32, 0x, ,
while (strlen(int32) < 8)
int32 := "0" int32
add_ := []
loop, 4
add_.insert("0x" substr(int32, 7 - (A_index - 1)*2, 2))
setformat, integer, %format%
return add_
}
Class CodeCave
{
__New(hprocess, from, code, nops = 0)
{
format := A_FormatInteger
setformat, integer, H
to := VirtualAllocEx(hprocess, code._MaxIndex() + 6 + nops)
if not to
return
this.orginal_code := read_process_memory(hProcess, from, "array", 6 + nops)
this.code := code
this.from := from
this.to := to
this.hprocess := hprocess
adress2go := ReverseInt32bytes(to)
adress2return := ReverseInt32bytes(from + 6 + nops)
this.jump_instruction := [0x68]
loop, 4
this.jump_instruction.insert(adress2go[A_index])
this.jump_instruction.insert(0xc3)
loop, % nops
this.jump_instruction.insert(0x90)
this.jumpback_instruction := [0x68]
loop, 4
this.jumpback_instruction.insert(adress2return[A_index])
this.jumpback_instruction.insert(0xc3)
setformat, integer, %format%
}
_enable()
{
if not write_process_memory(this.hprocess, this.from, "array", this.jump_instruction)
return
for k, v in this.jumpback_instruction
this.code.insert(v)
return write_process_memory(this.hprocess, this.to, "array", this.code)
}
_disable()	{
return write_process_memory(this.hprocess, this.from, "array", this.orginal_code)
}
switch()
{
if arrays_are_equal(read_process_memory(this.hprocess, this.from, "array"
,this.orginal_code._MaxIndex()), this.orginal_code)
{
if this._enable()
return memlib_sound(1)
else return memlib_sound(-1)
}
else if arrays_are_equal(read_process_memory(this.hprocess, this.from, "array"
,this.jump_instruction._MaxIndex()), this.jump_instruction)
{
if this._disable()
return memlib_sound(0)
else return memlib_sound(-1)
}
}
__Delete()	{
this._disable()
return dllcall("VirtualFreeEx", uint, this.hprocess, uint, this.to, uint, 0, uint, (MEM_RELEASE := 0x8000) )
}
}
GetSystemInfo()
{
varsetcapacity(lpSystemInfo, (A_ptrsize=4) ? 36 : 48)
dllcall("GetSystemInfo", "Int", &lpSystemInfo)
MinimumApplicationAddres := numget(lpSystemInfo, 8, "ptr")
MaximumApplicationAddress := numget(lpSystemInfo, 8+A_ptrsize, "ptr")
fileappend, % MinimumApplicationAddres	" " MaximumApplicationAddress "`n", *
return [MinimumApplicationAddres, MaximumApplicationAddress]
}
VirtualQueryEx(hprocess, base_adress)
{
varsetcapacity(MEMORY_BASIC_INFORMATION, (A_ptrsize=4)?28:48)
success := dllcall("VirtualQueryEx"
,"Int", hProcess
,"Int", base_adress
,"Ptr", &MEMORY_BASIC_INFORMATION
,"Int", (A_ptrsize=4)?28:48)
if not success
return False
return [numget(MEMORY_BASIC_INFORMATION, 0, "ptr"), numget(MEMORY_BASIC_INFORMATION, A_ptrsize*2, "int32")
,numget(MEMORY_BASIC_INFORMATION, A_ptrsize*3, "ptr"), numget(MEMORY_BASIC_INFORMATION, (A_ptrsize=4)?20:36, "int32")]
}
find_memory_pages(hprocess)
{
r := GetSystemInfo()
Min := r[1]
Max := r[2]
pages := []
result := True
while result
{
result :=  VirtualQueryEx(hprocess, Min)
if (result[4] && 0x10) and (result[2] && 0x10)
pages.insert({"base_" : result[1], "Alocation" : result[4], "Size" : result[3]})
Min := result[1] + result[3]
}
for k, v in pages
{
Execute := v.Alocation && 0x10
}
return pages
}
arrays_are_equal(a1, a2)
{
format := A_FormatInteger
setformat, integer, H
if not (isobject(a1) or not isobject(a2)) {
setformat, integer, %format%
return 0
}
for k, v in a1
{
if a2[k] is not number {
setformat, integer, %format%
return 0
}
if (v != a2[k]) {
setformat, integer, %format%
return 0
}
}
for k, v in a1
fileappend, % "arrays " v " " a2[k] "`n", *
setformat, integer, %format%
return 1
}
get_process_ID(_process)
{
for k, v in get_process_list() {
if (v.name = _process)
return v.ID
}
}
get_modules_list64(proccessID)
{
hProcess := open_process(proccessID)
dllcall("Psapi.dll\EnumProcessModules", ptr, hProcess, ptr, 0, uint, 0, "uint*", required)
VarSetCapacity(Modules, required)
dllcall("Psapi.dll\EnumProcessModules", ptr, hProcess, ptr, &Modules, uint, required, "uint*", required)
VarSetCapacity(name, 256 * 2)
VarSetCapacity(info, 24)
mods := []
loop, % required/A_ptrsize
{
hModule := numget(&Modules + (A_index - 1) * A_ptrsize, "ptr")
n := dllcall("Psapi.dll\GetModuleBaseNameW", ptr, hProcess, ptr, hModule, ptr, &name, uint, 256 * 2)
i := dllcall("Psapi.dll\GetModuleInformation", ptr, hProcess, ptr, hModule, ptr, &info, uint, 24)
mName := strget(&name+0, "UTF-16")
baseAdd := numget(&info+0, "ptr")
size := numget(&info+A_ptrsize, "uint")
mods.insert({"BaseAddr" : baseAdd, "BaseSize" : size, "Name" : mName})
}
close_process_handle(hProcess)
return mods
}
get_modules_list(proccessID)
{
if (A_ptrsize = 8)
return get_modules_list64(proccessID)
snapshot_handle := 24
while snapshot_handle = 24
snapshot_handle := dllcall("CreateToolhelp32Snapshot"
,"int", (TH32CS_SNAPMODULE := 0x00000008)
,"int", proccessID)
modules := []
varsetcapacity(module_info, 1061 , 0),	numput(1061, module_info, 0, "Int")
success := dllcall("Module32First", "Ptr", snapshot_handle, "Ptr", &module_info)
modules.insert({"BaseAddr"   : numget(module_info, 20, "UInt")
,"BaseSize"   : numget(module_info, 24, "UInt")
,"Name"       : strget(&module_info+32, 512, "UTF-8")})
while success
{
varsetcapacity(module_info, 2061 , 0),	numput(1061, module_info, 0, "Int")
success := dllcall("Module32Next", "Ptr", snapshot_handle, "Ptr", &module_info)
modules.insert({"BaseAddr"   : numget(module_info, 20, "UInt")
,"BaseSize"   : numget(module_info, 24, "UInt")
,"Name"       : strget(&module_info+32, 512, "UTF-8")})
}
return modules
}
find_pages_in_range(hprocess, start, end_)
{
pages := []
for k, v in find_memory_pages(hprocess)
{
if  ((v.base_ >= start) and (v.base_ + v.size <= end_))
{
pages.insert(v)
}
}
return pages
}
read_process_struct(hProcess, byref struct, size, adress)
{
varsetcapacity(bytes_read, A_ptrsize, 0)
r := dllcall("ReadProcessMemory"
,"Ptr", hProcess
,"Ptr", adress
,"Ptr", &struct
,"Ptr", size
,"Ptr", &bytes_read
,"Ptr")
return numget(bytes_read, 0, "int")
}
find_module(name, id_process)
{
for k, v in get_modules_list(id_process)
{
if (name = v.name)
return v
}
}
aobscan(hprocess, id_process, module_name, bytes, dllname = "peixoto.dll", range_ = 1)
{
static sigscan:=0
if not sigscan
{
if not DllCall("LoadLibrary", "Str", dllname, "Ptr")
return "L " . dllname
dllModule := DllCall("GetModuleHandle", "wstr", dllname, "ptr")
if not dllModule
return "G " . dllname
sigscan := dllCall("GetProcAddress", "int", dllModule, "astr", "sigscan", "ptr")
if not sigscan
return "S " . A_lasterror
}
module := find_module(module_name, id_process)
if not module
return "M " module_name
if (range_ = 1)
pages := find_pages_in_range(hprocess, module.BaseAddr, module.BaseAddr + module.BaseSize)
else if (range_ = 0)
pages := find_memory_pages(hprocess)
else if (range_ > 1)
pages := find_pages_in_range(hprocess, range_, 0xffffffff)
if not isobject(pages)
return "P " range_
varsetcapacity(buffer, bytes._maxindex(), 0)
loop, % bytes._MaxIndex()
Numput(bytes[A_index], buffer, A_index - 1, "UChar")
for k, v in pages
{
varsetcapacity(pagemem, v.size)
r := read_process_struct(hProcess, pagemem, v.size, v.base_)
s := dllcall(sigscan
,"ptr", &pagemem, "int", v.size
,"ptr", &buffer, "int", bytes._maxindex())
varsetcapacity(pagemem, 0)
if (s > 0)
return v.base_ + s
}
return
}
CreateIdleProcess(Target, workingdir = "", args = "", nowindow = "", rn="")
{
varsetcapacity(SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(THREAD_SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(PROCESS_INFORMATION, 8 + A_ptrsize * 2)
varsetcapacity(STARTUPINFO, 9*4 + 2*2 + 7*A_ptrsize)
numput(9*4 + 2*2 + 7*A_ptrsize, STARTUPINFO, 0 , "uint")
if not workingdir
{
SplitPath, Target, OutFileName, OutDir
if not OutDir
workingdir := A_WorkingDir
else workingdir := OutDir
}
flags := rn ? 0 : (CREATE_SUSPENDED := 0x00000004)
if nowindow
flags |= (CREATE_NO_WINDOW := 0x08000000)
r := dllcall("CreateProcess"
,"ptr", 0
,"str", """" Target """ " args
,"Ptr", &SECURITY_ATTRIBUTES
,"Ptr", &THREAD_SECURITY_ATTRIBUTES
,"uint", 1
,"int", flags
,"Ptr", 0
,"Str", workingdir
,"Ptr", &STARTUPINFO
,"Ptr", &PROCESS_INFORMATION)
if (r = 0)
{
return A_lasterror
}
else
{
pInfo            := {}
pInfo.hProcess   := numget(PROCESS_INFORMATION, 0, "ptr")
pInfo.hThread    := numget(PROCESS_INFORMATION, A_ptrsize, "ptr")
pInfo.Process_id := numget(PROCESS_INFORMATION, A_ptrsize*2, "UInt")
pInfo.Thread_id  := numget(PROCESS_INFORMATION, A_ptrsize*2 + 4, "UInt")
return pInfo
}
}
ResumeProcess(hThread){
return dllcall("ResumeThread", "ptr", hThread, "uint")
}
BlockNewProcess(parent_id, child_list)
{
if not isobject(child_list)
child_list := [child_list]
for k, v in child_list
{
h_app := ""
while not h_app
{
process, exist, %parent_id%
if not errorlevel
return
h_app := get_process_handle(v, (PROCESS_CREATE_THREAD := 0x0002)
| (PROCESS_QUERY_INFORMATION := 0x0400)
| (PROCESS_VM_OPERATION := 0x0008)
| (PROCESS_VM_READ := 0x0010)
| (PROCESS_VM_WRITE := 0x0020))
sleep, 100
}
dllcallEx(h_app, "Kernel32.dll", "ExitProcess", "0")
}
}
memlib_Number2String(num, typ, reverse = False)
{
format := A_FormatInteger
VarSetCapacity(var, 4)
numput(num, var, typ)
setformat, integer, h
string :=
if not reverse
{
loop, 4
string .= numget(var, A_index-1, "uchar") " "
}
else
{
loop, 4
string .= numget(var, 4-A_index, "uchar") " "
}
setformat, integer, %format%
return string
}
memlib_String2ByteArray(string)
{
ret := []
loop, parse, string, %A_space%
{
if instr(A_loopfield, "0x")
field := A_loopfield
else field := "0x" A_loopfield
ret.insert(field + 0)
}
return ret
}
if (A_ptrsize = 4)
{
g_.pCreateProcessA := dllcall("GetProcAddress", ptr, dllcall("GetModuleHandle", str, "Kernel32.dll", ptr), astr, "CreateProcessA")
g_.pCreateProcessW := dllcall("GetProcAddress", ptr, dllcall("GetModuleHandle", str, "Kernel32.dll", ptr), astr, "CreateProcessW")
logerr("CreateProcessA Hook: " AltInstallHook(dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "CreateProcessAHook"), pCA := g_.pCreateProcessA))
logerr("CreateProcessW Hook: " AltInstallHook(dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "CreateProcessWHook"), pCW := g_.pCreateProcessW))
g_.pCreateProcessA := pCA
g_.pCreateProcessW := pCW
dllcall("Peixoto.dll\InitCreateProcessHook", uint, RegisterCallback("CreateProcessA_hook", "F", ,0), uint, RegisterCallback("CreateProcessA_hook", "F", ,1))
logerr("ShellExecuteA Hook  :" InstallHook("ShellExecuteA", pSEA, "Shell32.dll", "ShellExecuteA"))
g_.p.ShellExecA := pSEA
logerr("ShellExecuteExW Hook  :" InstallHook("ShellExecuteExW", pSEW, "Shell32.dll", "ShellExecuteExW"))
g_.p.ShellExecExW := pSEW
} else {
logerr("CreateProcessA Hook: " InstallHook("CreateProcessA_hook", pCA:=0, "Kernel32.dll", "CreateProcessA", "F", 0))
logerr("CreateProcessW Hook: " InstallHook("CreateProcessA_hook", pCW:=0, "Kernel32.dll", "CreateProcessW", "F", 1))
g_.pCreateProcessA := pCA
g_.pCreateProcessW := pCW
}
ShellExecuteA(p1, p2, p3, p4, p5, p6)
{
if (instr(strget(p3+0, "CP0"), ".exe"))
{
varsetcapacity(SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(THREAD_SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(PROCESS_INFORMATION, 8 + A_ptrsize * 2)
varsetcapacity(STARTUPINFO, 9*4 + 2*2 + 7*A_ptrsize)
numput(9*4 + 2*2 + 7*A_ptrsize, STARTUPINFO, 0 , "uint")
r := dllcall("CreateProcessA", ptr, p3, ptr, p4, Ptr, &SECURITY_ATTRIBUTES, Ptr, &THREAD_SECURITY_ATTRIBUTES
, uint, 0, uint, 0, Ptr, 0, ptr, p5, Ptr, &STARTUPINFO, Ptr, &PROCESS_INFORMATION)
if (r)
return 33
}
return dllcall(g_.p.ShellExecA, ptr, p1, ptr, p2, ptr, p3, ptr, p4, ptr, p5, uint, p6)
}
ShellExecuteExW(p1)
{
info   := struct("DWORD Size; ULONG Mask; HWND hwnd; LPCWSTR Verb; LPCWSTR File; LPCWSTR Params; LPCSTR Dir;")
info[] := p1
logerr("ShellExecuteExW " info.File)
if (instr(info.File, ".exe") && info.Params = "")
{
varsetcapacity(SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(THREAD_SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(PROCESS_INFORMATION, 8 + A_ptrsize * 2)
varsetcapacity(STARTUPINFO, 9*4 + 2*2 + 7*A_ptrsize)
numput(9*4 + 2*2 + 7*A_ptrsize, STARTUPINFO, 0 , "uint")
r := dllcall("CreateProcessA", astr, info.File, ptr, 0, Ptr, &SECURITY_ATTRIBUTES, Ptr, &THREAD_SECURITY_ATTRIBUTES
, uint, 0, uint, 0, Ptr, 0, ptr, 0, Ptr, &STARTUPINFO, Ptr, &PROCESS_INFORMATION)
logerr("ShellExecuteExW " info.File " " info.Params " " info.Dir " " r " " A_lasterror)
if (r)
return 33
}
return dllcall(g_.p.ShellExecExW, ptr, p1, ptr, p2, ptr, p3, ptr, p4, ptr, p5, uint, p6)
}
CreateProcessA_hook(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
{
encode := A_eventinfo ? "UTF-16" : "CP0"
args  := strget(p2+0, encode)
if (p1)
trgt := strget(p1+0, encode)
else
{
trgt  := ""
quote := False
for k, v in strsplit(args)
{
if (v = """")
{
if quote
break
else quote := True
}
if ( (v = A_space) && (!quote) )
break
trgt .= v
}
}
p := g_.target_dir
StringReplace, trgt, trgt, .\ ,%p%
if ! instr(trgt, ":")
trgt := A_workingdir "\" trgt
t    := strget(p1+0, encode)
StringToSend := trgt
SizeInBytes  := (StrLen(StringToSend) + 1) * (A_IsUnicode ? 2 : 1)
VarSetCapacity(CopyDataStruct, 3*A_PtrSize, 0)
NumPut(SizeInBytes, CopyDataStruct, A_PtrSize)
NumPut(&StringToSend, CopyDataStruct, 2*A_PtrSize)
dllcall("SendMessageW", ptr, g_.cfg.script_hwnd, uint, 0x4a, uint, 0, ptr, &CopyDataStruct)
logerr("CreateProcess " " lpApplicationName:" strget(p1, encode) " lpCommandLine:" strget(p2,  encode) " trgt: " trgt " args: " args)
if (A_eventinfo)
{
if (p1)
r := dllcall(g_.pCreateProcessW, str, t, str, args, ptr, p3, ptr, p4, uint, 1, uint, p6|(CREATE_SUSPENDED := 0x00000004)
, ptr, p7, ptr, p8, ptr, p9, ptr, p10)
else
r := dllcall(g_.pCreateProcessW, ptr, 0, str, args, ptr, p3, ptr, p4, uint, 1, uint, p6|(CREATE_SUSPENDED := 0x00000004)
, ptr, p7, ptr, p8, ptr, p9, ptr, p10)
} else {
if (p1)
r := dllcall(g_.pCreateProcessA, astr, t, astr, args, ptr, p3, ptr, p4, uint, 1, uint, p6|(CREATE_SUSPENDED := 0x00000004)
, ptr, p7, ptr, p8, ptr, p9, ptr, p10)
else
r := dllcall(g_.pCreateProcessA, ptr, 0, astr, args, ptr, p3, ptr, p4, uint, 1, uint, p6|(CREATE_SUSPENDED := 0x00000004)
, ptr, p7, ptr, p8, ptr, p9, ptr, p10)
}
if !r
return r
g_.hChildProcess                 := numget(p10+0, 0, "ptr")
g_.hChildProcessId               := numget(p10+0, A_ptrsize*2, "ptr")
g_.hChildProcessThread           := numget(p10+0, A_ptrsize, "ptr")
g_.ChildProcessThreadID          := numget(p10+0, (A_ptrsize*2)+4, "ptr")
dllcall("SendMessageW", ptr, g_.cfg.script_hwnd, uint, dllcall("RegisterWindowMessageW", str, "Peixoto.Hwnd")
, uint, g_.ChildProcessThreadID, uint, g_.hChildProcessId)
return r
}
Is64Bit(trgt)
{
r := dllcall("GetBinaryType", astr, trgt, "uint*", btype)
if (btype = 6)
return true
}


; <COMPILER: v1.1.15.03>
global D3DHOOKS_DATA :=
(
"
// Config, used to change flags used to create surfaces
BOOL HD; BOOL 32Bit; BOOL NEFS; DWORD HD_W; DWORD HD_H; DWORD D; BOOL Safe;
// D3D hooks and data used to scale vertices
// DDraw hooks and data used to emulate blts
// and locks on Flip,RT and primary surfaces
DWORD zmsk;
DWORD D3D7Draw;
DWORD execute;
DWORD DrawPrimitive3;
DWORD DrawIPrimitive3;
DWORD p_DrawPrimitive;
DWORD p_DrawPrimitiveVB;
DWORD p_DrawIndexedPrimitive;
DWORD p_DrawIndexedPrimitiveVB;
DWORD p_GetVertexBufferDesc;
DWORD p_LockVertexBuffer;
DWORD p_UnLockVertexBuffer;
DWORD p_TransformVertices;
DWORD p_GetView;
DWORD p_SetView;
LPVOID QueryPrimary;
LPVOID QuerySurface;
LPVOID QueryTexture;
LPVOID QueryDevice;
LPVOID Flip;
LPVOID LockPrimary;
LPVOID UnLockPrimary;  
LPVOID UnLockPrimary4;
LPVOID LockSurface;
LPVOID UnLockSurface;
LPVOID UnLockSurface4;
LPVOID BltPrimary;
LPVOID BltSurface;
LPVOID BltFastPrimary;
LPVOID BltFastSurface;
LPVOID GetDCPrim;
LPVOID GetDCSrfc;
LPVOID RelDCPrim;
LPVOID RelDCSrfc;
LPVOID vertex_data;
DWORD  Delay;
LPVOID UpdateRT;
float scale;
BOOL  displace;
float HD_X;
BOOL  vert_displace;
float vert_displacement;
BOOL  callback;
uint  pCallback;
BOOL  fix_screencoords;
DWORD    w;
DWORD    h;
LPVOID   Rct;
LPVOID   _Rct;
LPVOID   VW2;
// NEFS
LPVOID GtAttSrfc;
LPVOID AHKGtAttSrfc;
LPVOID GtAttSrfc4;
LPVOID AHKGtAttSrfc4;
// Texture swap
LPVOID IDirect3DDevice2_SetRenderState;
LPVOID ID3DDevice2_SetRenderState_Callback;
LPVOID IDirect3DDevice3_SetTexture;
LPVOID ID3DDevice3_SetTexture_Callback;
LPVOID IDirect3DDevice7_SetTexture;
LPVOID ID3DDevice7_SetTexture_Callback;
LPVOID Lock;
LPVOID UnLock;
LPVOID UnLock4;
LPVOID Surface_Found;
LPVOID SwapBack;
LPVOID textures; 
LPVOID found;
LPVOID replacements;
LPVOID hTex;
BOOL   search_enabled;
DWORD  curent_texture;
BOOL   ignore_release;
DWORD  vid_check;
LPVOID IDirectDrawSurface_QueryInterface;
LPVOID IDirect3DTexture_QueryInterface;
LPVOID IDirect3DTexture2_QueryInterface;
LPVOID GetDDSCaps;
LPVOID SrfcGtDsc;
LPVOID TsExecute;
BOOL   Chck;
LPVOID DDGtCps;
LPVOID DmpAndAppend;
// Manage IDirectDrawSurface4 locks
LPVOID Manager_Lock, DLock; LPVOID Manager_UnLock, DUnLock; LPVOID Manager_Blt; LPVOID sysmem_surfaces;
LPVOID LooseSurface;
"
)
D3DHOOKS_DATA := struct(D3DHOOKS_DATA)
Global ddraw := {}
ddraw.CLSID_DirectDraw := "{D7B70EE0-4340-11CF-B063-0020AFC2CD35}"
ddraw.CLSID_DirectDraw7 := "{3c305196-50db-11d3-9cfe-00c04fd930c5}"
ddraw.CLSID_DirectDrawClipper := "{593817A0-7DB3-11CF-A2DE-00AA00b93356}"
ddraw.IID_IDirectDraw := "{6C14DB80-A733-11CE-A521-0020AF0BE560}"
ddraw.IID_IDirectDraw2 := "{B3A6F3E0-2B43-11CF-A2DE-00AA00B93356}"
ddraw.IID_IDirectDraw4 := "{9c59509a-39bd-11d1-8c4a-00c04fd930c5}"
ddraw.IID_IDirectDraw7 := "{15e65ec0-3b9c-11d2-b92f-00609797ea5b}"
ddraw.IID_IDirectDrawSurface := "{6C14DB81-A733-11CE-A521-0020AF0BE560}"
ddraw.IID_IDirectDrawSurface2 := "{57805885-6eec-11cf-9441-a82303c10e27}"
ddraw.IID_IDirectDrawSurface3 := "{DA044E00-69B2-11D0-A1D5-00AA00B8DFBB}"
ddraw.IID_IDirectDrawSurface4 := "{0B2B8630-AD35-11D0-8EA6-00609797EA5B}"
ddraw.IID_IDirectDrawSurface7 := "{06675a80-3b9b-11d2-b92f-00609797ea5b}"
ddraw.IID_IDirectDrawPalette := "{6C14DB84-A733-11CE-A521-0020AF0BE560}"
ddraw.IID_IDirectDrawClipper := "{6C14DB85-A733-11CE-A521-0020AF0BE560}"
ddraw.IID_IDirectDrawColorControl := "{4B9F0EE0-0D7E-11D0-9B06-00A0C903A3B8}"
ddraw.IID_IDirectDrawGammaControl := "{69C11C3E-B46B-11D1-AD7A-00C04FC29B4E}"
ddraw.IDirectDraw := {}
ddraw.IDirectDraw.name := "IDirectDraw"
ddraw.IDirectDraw.def :=
( 
"
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    STDMETHOD(Compact)(THIS) PURE;
    STDMETHOD(CreateClipper)(THIS_ DWORD, LPDIRECTDRAWCLIPPER FAR*, IUnknown FAR * ) PURE;
    STDMETHOD(CreatePalette)(THIS_ DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE FAR*, IUnknown FAR * ) PURE;
    STDMETHOD(CreateSurface)(THIS_  LPDDSURFACEDESC, LPDIRECTDRAWSURFACE FAR *, IUnknown FAR *) PURE;
    STDMETHOD(DuplicateSurface)( THIS_ LPDIRECTDRAWSURFACE, LPDIRECTDRAWSURFACE FAR * ) PURE;
    STDMETHOD(EnumDisplayModes)( THIS_ DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMMODESCALLBACK ) PURE;
    STDMETHOD(EnumSurfaces)(THIS_ DWORD, LPDDSURFACEDESC, LPVOID,LPDDENUMSURFACESCALLBACK ) PURE;
    STDMETHOD(FlipToGDISurface)(THIS) PURE;
    STDMETHOD(GetCaps)( THIS_ LPDDCAPS, LPDDCAPS) PURE;
    STDMETHOD(GetDisplayMode)( THIS_ LPDDSURFACEDESC) PURE;
    STDMETHOD(GetFourCCCodes)(THIS_  LPDWORD, LPDWORD ) PURE;
    STDMETHOD(GetGDISurface)(THIS_ LPDIRECTDRAWSURFACE FAR *) PURE;
    STDMETHOD(GetMonitorFrequency)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetScanLine)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetVerticalBlankStatus)(THIS_ LPBOOL ) PURE;
    STDMETHOD(Initialize)(THIS_ GUID FAR *) PURE;
    STDMETHOD(RestoreDisplayMode)(THIS) PURE;
    STDMETHOD(SetCooperativeLevel)(THIS_ HWND, DWORD) PURE;
    STDMETHOD(SetDisplayMode)(THIS_ DWORD, DWORD,DWORD) PURE;
    STDMETHOD(WaitForVerticalBlank)(THIS_ DWORD, HANDLE ) PURE;
"
)
ddraw.IDirectDraw2 := {}
ddraw.IDirectDraw2.name := "IDirectDraw2"
ddraw.IDirectDraw2.def :=
( 
"
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    STDMETHOD(Compact)(THIS) PURE;
    STDMETHOD(CreateClipper)(THIS_ DWORD, LPDIRECTDRAWCLIPPER FAR*, IUnknown FAR * ) PURE;
    STDMETHOD(CreatePalette)(THIS_ DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE FAR*, IUnknown FAR * ) PURE;
    STDMETHOD(CreateSurface)(THIS_  LPDDSURFACEDESC, LPDIRECTDRAWSURFACE FAR *, IUnknown FAR *) PURE;
    STDMETHOD(DuplicateSurface)( THIS_ LPDIRECTDRAWSURFACE, LPDIRECTDRAWSURFACE FAR * ) PURE;
    STDMETHOD(EnumDisplayModes)( THIS_ DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMMODESCALLBACK ) PURE;
    STDMETHOD(EnumSurfaces)(THIS_ DWORD, LPDDSURFACEDESC, LPVOID,LPDDENUMSURFACESCALLBACK ) PURE;
    STDMETHOD(FlipToGDISurface)(THIS) PURE;
    STDMETHOD(GetCaps)( THIS_ LPDDCAPS, LPDDCAPS) PURE;
    STDMETHOD(GetDisplayMode)( THIS_ LPDDSURFACEDESC) PURE;
    STDMETHOD(GetFourCCCodes)(THIS_  LPDWORD, LPDWORD ) PURE;
    STDMETHOD(GetGDISurface)(THIS_ LPDIRECTDRAWSURFACE FAR *) PURE;
    STDMETHOD(GetMonitorFrequency)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetScanLine)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetVerticalBlankStatus)(THIS_ LPBOOL ) PURE;
    STDMETHOD(Initialize)(THIS_ GUID FAR *) PURE;
    STDMETHOD(RestoreDisplayMode)(THIS) PURE;
    STDMETHOD(SetCooperativeLevel)(THIS_ HWND, DWORD) PURE;
    STDMETHOD(SetDisplayMode)(THIS_ DWORD, DWORD,DWORD, DWORD, DWORD) PURE;
    STDMETHOD(WaitForVerticalBlank)(THIS_ DWORD, HANDLE ) PURE;
    STDMETHOD(GetAvailableVidMem)(THIS_ LPDDSCAPS, LPDWORD, LPDWORD) PURE;
"
)
ddraw.IDirectDraw4 := {}
ddraw.IDirectDraw4.name := "IDirectDraw4"
ddraw.IDirectDraw4.def :=
( 
"
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    STDMETHOD(Compact)(THIS) PURE;
    STDMETHOD(CreateClipper)(THIS_ DWORD, LPDIRECTDRAWCLIPPER FAR*, IUnknown FAR * ) PURE;
    STDMETHOD(CreatePalette)(THIS_ DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE FAR*, IUnknown FAR * ) PURE;
    STDMETHOD(CreateSurface)(THIS_  LPDDSURFACEDESC2, LPDIRECTDRAWSURFACE4 FAR *, IUnknown FAR *) PURE;
    STDMETHOD(DuplicateSurface)( THIS_ LPDIRECTDRAWSURFACE4, LPDIRECTDRAWSURFACE4 FAR * ) PURE;
    STDMETHOD(EnumDisplayModes)( THIS_ DWORD, LPDDSURFACEDESC2, LPVOID, LPDDENUMMODESCALLBACK2 ) PURE;
    STDMETHOD(EnumSurfaces)(THIS_ DWORD, LPDDSURFACEDESC2, LPVOID,LPDDENUMSURFACESCALLBACK2 ) PURE;
    STDMETHOD(FlipToGDISurface)(THIS) PURE;
    STDMETHOD(GetCaps)( THIS_ LPDDCAPS, LPDDCAPS) PURE;
    STDMETHOD(GetDisplayMode)( THIS_ LPDDSURFACEDESC2) PURE;
    STDMETHOD(GetFourCCCodes)(THIS_  LPDWORD, LPDWORD ) PURE;
    STDMETHOD(GetGDISurface)(THIS_ LPDIRECTDRAWSURFACE4 FAR *) PURE;
    STDMETHOD(GetMonitorFrequency)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetScanLine)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetVerticalBlankStatus)(THIS_ LPBOOL ) PURE;
    STDMETHOD(Initialize)(THIS_ GUID FAR *) PURE;
    STDMETHOD(RestoreDisplayMode)(THIS) PURE;
    STDMETHOD(SetCooperativeLevel)(THIS_ HWND, DWORD) PURE;
    STDMETHOD(SetDisplayMode)(THIS_ DWORD, DWORD,DWORD, DWORD, DWORD) PURE;
    STDMETHOD(WaitForVerticalBlank)(THIS_ DWORD, HANDLE ) PURE;
    STDMETHOD(GetAvailableVidMem)(THIS_ LPDDSCAPS2, LPDWORD, LPDWORD) PURE;
    STDMETHOD(GetSurfaceFromDC) (THIS_ HDC, LPDIRECTDRAWSURFACE4 *) PURE;
    STDMETHOD(RestoreAllSurfaces)(THIS) PURE;
    STDMETHOD(TestCooperativeLevel)(THIS) PURE;
    STDMETHOD(GetDeviceIdentifier)(THIS_ LPDDDEVICEIDENTIFIER, DWORD ) PURE;
"
)
ddraw.IDirectDraw7 := {}
ddraw.IDirectDraw7.name := "IDirectDraw7"
ddraw.IDirectDraw7.def :=
( 
"
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    STDMETHOD(Compact)(THIS) PURE;
    STDMETHOD(CreateClipper)(THIS_ DWORD, LPDIRECTDRAWCLIPPER FAR*, IUnknown FAR * ) PURE;
    STDMETHOD(CreatePalette)(THIS_ DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE FAR*, IUnknown FAR * ) PURE;
    STDMETHOD(CreateSurface)(THIS_  LPDDSURFACEDESC2, LPDIRECTDRAWSURFACE7 FAR *, IUnknown FAR *) PURE;
    STDMETHOD(DuplicateSurface)( THIS_ LPDIRECTDRAWSURFACE7, LPDIRECTDRAWSURFACE7 FAR * ) PURE;
    STDMETHOD(EnumDisplayModes)( THIS_ DWORD, LPDDSURFACEDESC2, LPVOID, LPDDENUMMODESCALLBACK2 ) PURE;
    STDMETHOD(EnumSurfaces)(THIS_ DWORD, LPDDSURFACEDESC2, LPVOID,LPDDENUMSURFACESCALLBACK7 ) PURE;
    STDMETHOD(FlipToGDISurface)(THIS) PURE;
    STDMETHOD(GetCaps)( THIS_ LPDDCAPS, LPDDCAPS) PURE;
    STDMETHOD(GetDisplayMode)( THIS_ LPDDSURFACEDESC2) PURE;
    STDMETHOD(GetFourCCCodes)(THIS_  LPDWORD, LPDWORD ) PURE;
    STDMETHOD(GetGDISurface)(THIS_ LPDIRECTDRAWSURFACE7 FAR *) PURE;
    STDMETHOD(GetMonitorFrequency)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetScanLine)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetVerticalBlankStatus)(THIS_ LPBOOL ) PURE;
    STDMETHOD(Initialize)(THIS_ GUID FAR *) PURE;
    STDMETHOD(RestoreDisplayMode)(THIS) PURE;
    STDMETHOD(SetCooperativeLevel)(THIS_ HWND, DWORD) PURE;
    STDMETHOD(SetDisplayMode)(THIS_ DWORD, DWORD,DWORD, DWORD, DWORD) PURE;
    STDMETHOD(WaitForVerticalBlank)(THIS_ DWORD, HANDLE ) PURE;
    STDMETHOD(GetAvailableVidMem)(THIS_ LPDDSCAPS2, LPDWORD, LPDWORD) PURE;
    STDMETHOD(GetSurfaceFromDC) (THIS_ HDC, LPDIRECTDRAWSURFACE7 *) PURE;
    STDMETHOD(RestoreAllSurfaces)(THIS) PURE;
    STDMETHOD(TestCooperativeLevel)(THIS) PURE;
    STDMETHOD(GetDeviceIdentifier)(THIS_ LPDDDEVICEIDENTIFIER2, DWORD ) PURE;
    STDMETHOD(StartModeTest)(THIS_ LPSIZE, DWORD, DWORD ) PURE;
    STDMETHOD(EvaluateMode)(THIS_ DWORD, DWORD * ) PURE;
"
)
ddraw.IDirectDrawPalette := {}
ddraw.IDirectDrawPalette.name := "IDirectDrawPalette"
ddraw.IDirectDrawPalette.def :=
( 
"
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    STDMETHOD(GetCaps)(THIS_ LPDWORD) PURE;
    STDMETHOD(GetEntries)(THIS_ DWORD,DWORD,DWORD,LPPALETTEENTRY) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW, DWORD, LPPALETTEENTRY) PURE;
    STDMETHOD(SetEntries)(THIS_ DWORD,DWORD,DWORD,LPPALETTEENTRY) PURE;
"
)
ddraw.IDirectDrawClipper := {}
ddraw.IDirectDrawClipper.name := "IDirectDrawClipper"
ddraw.IDirectDrawClipper.def :=
( 
"
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    STDMETHOD(GetClipList)(THIS_ LPRECT, LPRGNDATA, LPDWORD) PURE;
    STDMETHOD(GetHWnd)(THIS_ HWND FAR *) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW, DWORD) PURE;
    STDMETHOD(IsClipListChanged)(THIS_ BOOL FAR *) PURE;
    STDMETHOD(SetClipList)(THIS_ LPRGNDATA,DWORD) PURE;
    STDMETHOD(SetHWnd)(THIS_ DWORD, HWND ) PURE;
"
)
ddraw.IDirectDrawSurface := {}
ddraw.IDirectDrawSurface.name := "IDirectDrawSurface"
ddraw.IDirectDrawSurface.def :=
( 
"
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    STDMETHOD(AddAttachedSurface)(THIS_ LPDIRECTDRAWSURFACE) PURE;
    STDMETHOD(AddOverlayDirtyRect)(THIS_ LPRECT) PURE;
    STDMETHOD(Blt)(THIS_ LPRECT,LPDIRECTDRAWSURFACE, LPRECT,DWORD, LPDDBLTFX) PURE;
    STDMETHOD(BltBatch)(THIS_ LPDDBLTBATCH, DWORD, DWORD ) PURE;
    STDMETHOD(BltFast)(THIS_ DWORD,DWORD,LPDIRECTDRAWSURFACE, LPRECT,DWORD) PURE;
    STDMETHOD(DeleteAttachedSurface)(THIS_ DWORD,LPDIRECTDRAWSURFACE) PURE;
    STDMETHOD(EnumAttachedSurfaces)(THIS_ LPVOID,LPDDENUMSURFACESCALLBACK) PURE;
    STDMETHOD(EnumOverlayZOrders)(THIS_ DWORD,LPVOID,LPDDENUMSURFACESCALLBACK) PURE;
    STDMETHOD(Flip)(THIS_ LPDIRECTDRAWSURFACE, DWORD) PURE;
    STDMETHOD(GetAttachedSurface)(THIS_ LPDDSCAPS, LPDIRECTDRAWSURFACE FAR *) PURE;
    STDMETHOD(GetBltStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetCaps)(THIS_ LPDDSCAPS) PURE;
    STDMETHOD(GetClipper)(THIS_ LPDIRECTDRAWCLIPPER FAR*) PURE;
    STDMETHOD(GetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(GetDC)(THIS_ HDC FAR *) PURE;
    STDMETHOD(GetFlipStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetOverlayPosition)(THIS_ LPLONG, LPLONG ) PURE;
    STDMETHOD(GetPalette)(THIS_ LPDIRECTDRAWPALETTE FAR*) PURE;
    STDMETHOD(GetPixelFormat)(THIS_ LPDDPIXELFORMAT) PURE;
    STDMETHOD(GetSurfaceDesc)(THIS_ LPDDSURFACEDESC) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW, LPDDSURFACEDESC) PURE;
    STDMETHOD(IsLost)(THIS) PURE;
    STDMETHOD(Lock)(THIS_ LPRECT,LPDDSURFACEDESC,DWORD,HANDLE) PURE;
    STDMETHOD(ReleaseDC)(THIS_ HDC) PURE;
    STDMETHOD(Restore)(THIS) PURE;
    STDMETHOD(SetClipper)(THIS_ LPDIRECTDRAWCLIPPER) PURE;
    STDMETHOD(SetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(SetOverlayPosition)(THIS_ LONG, LONG ) PURE;
    STDMETHOD(SetPalette)(THIS_ LPDIRECTDRAWPALETTE) PURE;
    STDMETHOD(Unlock)(THIS_ LPVOID) PURE;
    STDMETHOD(UpdateOverlay)(THIS_ LPRECT, LPDIRECTDRAWSURFACE,LPRECT,DWORD, LPDDOVERLAYFX) PURE;
    STDMETHOD(UpdateOverlayDisplay)(THIS_ DWORD) PURE;
    STDMETHOD(UpdateOverlayZOrder)(THIS_ DWORD, LPDIRECTDRAWSURFACE) PURE;
"
)
ddraw.IDirectDrawSurface2 := {}
ddraw.IDirectDrawSurface2.name := "IDirectDrawSurface2"
ddraw.IDirectDrawSurface2.def :=
( 
"
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    STDMETHOD(AddAttachedSurface)(THIS_ LPDIRECTDRAWSURFACE2) PURE;
    STDMETHOD(AddOverlayDirtyRect)(THIS_ LPRECT) PURE;
    STDMETHOD(Blt)(THIS_ LPRECT,LPDIRECTDRAWSURFACE2, LPRECT,DWORD, LPDDBLTFX) PURE;
    STDMETHOD(BltBatch)(THIS_ LPDDBLTBATCH, DWORD, DWORD ) PURE;
    STDMETHOD(BltFast)(THIS_ DWORD,DWORD,LPDIRECTDRAWSURFACE2, LPRECT,DWORD) PURE;
    STDMETHOD(DeleteAttachedSurface)(THIS_ DWORD,LPDIRECTDRAWSURFACE2) PURE;
    STDMETHOD(EnumAttachedSurfaces)(THIS_ LPVOID,LPDDENUMSURFACESCALLBACK) PURE;
    STDMETHOD(EnumOverlayZOrders)(THIS_ DWORD,LPVOID,LPDDENUMSURFACESCALLBACK) PURE;
    STDMETHOD(Flip)(THIS_ LPDIRECTDRAWSURFACE2, DWORD) PURE;
    STDMETHOD(GetAttachedSurface)(THIS_ LPDDSCAPS, LPDIRECTDRAWSURFACE2 FAR *) PURE;
    STDMETHOD(GetBltStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetCaps)(THIS_ LPDDSCAPS) PURE;
    STDMETHOD(GetClipper)(THIS_ LPDIRECTDRAWCLIPPER FAR*) PURE;
    STDMETHOD(GetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(GetDC)(THIS_ HDC FAR *) PURE;
    STDMETHOD(GetFlipStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetOverlayPosition)(THIS_ LPLONG, LPLONG ) PURE;
    STDMETHOD(GetPalette)(THIS_ LPDIRECTDRAWPALETTE FAR*) PURE;
    STDMETHOD(GetPixelFormat)(THIS_ LPDDPIXELFORMAT) PURE;
    STDMETHOD(GetSurfaceDesc)(THIS_ LPDDSURFACEDESC) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW, LPDDSURFACEDESC) PURE;
    STDMETHOD(IsLost)(THIS) PURE;
    STDMETHOD(Lock)(THIS_ LPRECT,LPDDSURFACEDESC,DWORD,HANDLE) PURE;
    STDMETHOD(ReleaseDC)(THIS_ HDC) PURE;
    STDMETHOD(Restore)(THIS) PURE;
    STDMETHOD(SetClipper)(THIS_ LPDIRECTDRAWCLIPPER) PURE;
    STDMETHOD(SetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(SetOverlayPosition)(THIS_ LONG, LONG ) PURE;
    STDMETHOD(SetPalette)(THIS_ LPDIRECTDRAWPALETTE) PURE;
    STDMETHOD(Unlock)(THIS_ LPVOID) PURE;
    STDMETHOD(UpdateOverlay)(THIS_ LPRECT, LPDIRECTDRAWSURFACE2,LPRECT,DWORD, LPDDOVERLAYFX) PURE;
    STDMETHOD(UpdateOverlayDisplay)(THIS_ DWORD) PURE;
    STDMETHOD(UpdateOverlayZOrder)(THIS_ DWORD, LPDIRECTDRAWSURFACE2) PURE;
    STDMETHOD(GetDDInterface)(THIS_ LPVOID FAR *) PURE;
    STDMETHOD(PageLock)(THIS_ DWORD) PURE;
    STDMETHOD(PageUnlock)(THIS_ DWORD) PURE;
"
)
ddraw.IDirectDrawSurface3 := {}
ddraw.IDirectDrawSurface3.name := "IDirectDrawSurface3"
ddraw.IDirectDrawSurface3.def :=
( 
"
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    STDMETHOD(AddAttachedSurface)(THIS_ LPDIRECTDRAWSURFACE3) PURE;
    STDMETHOD(AddOverlayDirtyRect)(THIS_ LPRECT) PURE;
    STDMETHOD(Blt)(THIS_ LPRECT,LPDIRECTDRAWSURFACE3, LPRECT,DWORD, LPDDBLTFX) PURE;
    STDMETHOD(BltBatch)(THIS_ LPDDBLTBATCH, DWORD, DWORD ) PURE;
    STDMETHOD(BltFast)(THIS_ DWORD,DWORD,LPDIRECTDRAWSURFACE3, LPRECT,DWORD) PURE;
    STDMETHOD(DeleteAttachedSurface)(THIS_ DWORD,LPDIRECTDRAWSURFACE3) PURE;
    STDMETHOD(EnumAttachedSurfaces)(THIS_ LPVOID,LPDDENUMSURFACESCALLBACK) PURE;
    STDMETHOD(EnumOverlayZOrders)(THIS_ DWORD,LPVOID,LPDDENUMSURFACESCALLBACK) PURE;
    STDMETHOD(Flip)(THIS_ LPDIRECTDRAWSURFACE3, DWORD) PURE;
    STDMETHOD(GetAttachedSurface)(THIS_ LPDDSCAPS, LPDIRECTDRAWSURFACE3 FAR *) PURE;
    STDMETHOD(GetBltStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetCaps)(THIS_ LPDDSCAPS) PURE;
    STDMETHOD(GetClipper)(THIS_ LPDIRECTDRAWCLIPPER FAR*) PURE;
    STDMETHOD(GetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(GetDC)(THIS_ HDC FAR *) PURE;
    STDMETHOD(GetFlipStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetOverlayPosition)(THIS_ LPLONG, LPLONG ) PURE;
    STDMETHOD(GetPalette)(THIS_ LPDIRECTDRAWPALETTE FAR*) PURE;
    STDMETHOD(GetPixelFormat)(THIS_ LPDDPIXELFORMAT) PURE;
    STDMETHOD(GetSurfaceDesc)(THIS_ LPDDSURFACEDESC) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW, LPDDSURFACEDESC) PURE;
    STDMETHOD(IsLost)(THIS) PURE;
    STDMETHOD(Lock)(THIS_ LPRECT,LPDDSURFACEDESC,DWORD,HANDLE) PURE;
    STDMETHOD(ReleaseDC)(THIS_ HDC) PURE;
    STDMETHOD(Restore)(THIS) PURE;
    STDMETHOD(SetClipper)(THIS_ LPDIRECTDRAWCLIPPER) PURE;
    STDMETHOD(SetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(SetOverlayPosition)(THIS_ LONG, LONG ) PURE;
    STDMETHOD(SetPalette)(THIS_ LPDIRECTDRAWPALETTE) PURE;
    STDMETHOD(Unlock)(THIS_ LPVOID) PURE;
    STDMETHOD(UpdateOverlay)(THIS_ LPRECT, LPDIRECTDRAWSURFACE3,LPRECT,DWORD, LPDDOVERLAYFX) PURE;
    STDMETHOD(UpdateOverlayDisplay)(THIS_ DWORD) PURE;
    STDMETHOD(UpdateOverlayZOrder)(THIS_ DWORD, LPDIRECTDRAWSURFACE3) PURE;
    STDMETHOD(GetDDInterface)(THIS_ LPVOID FAR *) PURE;
    STDMETHOD(PageLock)(THIS_ DWORD) PURE;
    STDMETHOD(PageUnlock)(THIS_ DWORD) PURE;
    STDMETHOD(SetSurfaceDesc)(THIS_ LPDDSURFACEDESC, DWORD) PURE;
"
)
ddraw.IDirectDrawSurface4 := {}
ddraw.IDirectDrawSurface4.name := "IDirectDrawSurface4"
ddraw.IDirectDrawSurface4.def :=
( 
"
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    STDMETHOD(AddAttachedSurface)(THIS_ LPDIRECTDRAWSURFACE4) PURE;
    STDMETHOD(AddOverlayDirtyRect)(THIS_ LPRECT) PURE;
    STDMETHOD(Blt)(THIS_ LPRECT,LPDIRECTDRAWSURFACE4, LPRECT,DWORD, LPDDBLTFX) PURE;
    STDMETHOD(BltBatch)(THIS_ LPDDBLTBATCH, DWORD, DWORD ) PURE;
    STDMETHOD(BltFast)(THIS_ DWORD,DWORD,LPDIRECTDRAWSURFACE4, LPRECT,DWORD) PURE;
    STDMETHOD(DeleteAttachedSurface)(THIS_ DWORD,LPDIRECTDRAWSURFACE4) PURE;
    STDMETHOD(EnumAttachedSurfaces)(THIS_ LPVOID,LPDDENUMSURFACESCALLBACK2) PURE;
    STDMETHOD(EnumOverlayZOrders)(THIS_ DWORD,LPVOID,LPDDENUMSURFACESCALLBACK2) PURE;
    STDMETHOD(Flip)(THIS_ LPDIRECTDRAWSURFACE4, DWORD) PURE;
    STDMETHOD(GetAttachedSurface)(THIS_ LPDDSCAPS2, LPDIRECTDRAWSURFACE4 FAR *) PURE;
    STDMETHOD(GetBltStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetCaps)(THIS_ LPDDSCAPS2) PURE;
    STDMETHOD(GetClipper)(THIS_ LPDIRECTDRAWCLIPPER FAR*) PURE;
    STDMETHOD(GetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(GetDC)(THIS_ HDC FAR *) PURE;
    STDMETHOD(GetFlipStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetOverlayPosition)(THIS_ LPLONG, LPLONG ) PURE;
    STDMETHOD(GetPalette)(THIS_ LPDIRECTDRAWPALETTE FAR*) PURE;
    STDMETHOD(GetPixelFormat)(THIS_ LPDDPIXELFORMAT) PURE;
    STDMETHOD(GetSurfaceDesc)(THIS_ LPDDSURFACEDESC2) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW, LPDDSURFACEDESC2) PURE;
    STDMETHOD(IsLost)(THIS) PURE;
    STDMETHOD(Lock)(THIS_ LPRECT,LPDDSURFACEDESC2,DWORD,HANDLE) PURE;
    STDMETHOD(ReleaseDC)(THIS_ HDC) PURE;
    STDMETHOD(Restore)(THIS) PURE;
    STDMETHOD(SetClipper)(THIS_ LPDIRECTDRAWCLIPPER) PURE;
    STDMETHOD(SetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(SetOverlayPosition)(THIS_ LONG, LONG ) PURE;
    STDMETHOD(SetPalette)(THIS_ LPDIRECTDRAWPALETTE) PURE;
    STDMETHOD(Unlock)(THIS_ LPRECT) PURE;
    STDMETHOD(UpdateOverlay)(THIS_ LPRECT, LPDIRECTDRAWSURFACE4,LPRECT,DWORD, LPDDOVERLAYFX) PURE;
    STDMETHOD(UpdateOverlayDisplay)(THIS_ DWORD) PURE;
    STDMETHOD(UpdateOverlayZOrder)(THIS_ DWORD, LPDIRECTDRAWSURFACE4) PURE;
    STDMETHOD(GetDDInterface)(THIS_ LPVOID FAR *) PURE;
    STDMETHOD(PageLock)(THIS_ DWORD) PURE;
    STDMETHOD(PageUnlock)(THIS_ DWORD) PURE;
    STDMETHOD(SetSurfaceDesc)(THIS_ LPDDSURFACEDESC2, DWORD) PURE;
    STDMETHOD(SetPrivateData)(THIS_ REFGUID, LPVOID, DWORD, DWORD) PURE;
    STDMETHOD(GetPrivateData)(THIS_ REFGUID, LPVOID, LPDWORD) PURE;
    STDMETHOD(FreePrivateData)(THIS_ REFGUID) PURE;
    STDMETHOD(GetUniquenessValue)(THIS_ LPDWORD) PURE;
    STDMETHOD(ChangeUniquenessValue)(THIS) PURE;
"
)
ddraw.IDirectDrawSurface7 := {}
ddraw.IDirectDrawSurface7.name := "IDirectDrawSurface7"
ddraw.IDirectDrawSurface7.def :=
( 
"
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    STDMETHOD(AddAttachedSurface)(THIS_ LPDIRECTDRAWSURFACE7) PURE;
    STDMETHOD(AddOverlayDirtyRect)(THIS_ LPRECT) PURE;
    STDMETHOD(Blt)(THIS_ LPRECT,LPDIRECTDRAWSURFACE7, LPRECT,DWORD, LPDDBLTFX) PURE;
    STDMETHOD(BltBatch)(THIS_ LPDDBLTBATCH, DWORD, DWORD ) PURE;
    STDMETHOD(BltFast)(THIS_ DWORD,DWORD,LPDIRECTDRAWSURFACE7, LPRECT,DWORD) PURE;
    STDMETHOD(DeleteAttachedSurface)(THIS_ DWORD,LPDIRECTDRAWSURFACE7) PURE;
    STDMETHOD(EnumAttachedSurfaces)(THIS_ LPVOID,LPDDENUMSURFACESCALLBACK7) PURE;
    STDMETHOD(EnumOverlayZOrders)(THIS_ DWORD,LPVOID,LPDDENUMSURFACESCALLBACK7) PURE;
    STDMETHOD(Flip)(THIS_ LPDIRECTDRAWSURFACE7, DWORD) PURE;
    STDMETHOD(GetAttachedSurface)(THIS_ LPDDSCAPS2, LPDIRECTDRAWSURFACE7 FAR *) PURE;
    STDMETHOD(GetBltStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetCaps)(THIS_ LPDDSCAPS2) PURE;
    STDMETHOD(GetClipper)(THIS_ LPDIRECTDRAWCLIPPER FAR*) PURE;
    STDMETHOD(GetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(GetDC)(THIS_ HDC FAR *) PURE;
    STDMETHOD(GetFlipStatus)(THIS_ DWORD) PURE;
    STDMETHOD(GetOverlayPosition)(THIS_ LPLONG, LPLONG ) PURE;
    STDMETHOD(GetPalette)(THIS_ LPDIRECTDRAWPALETTE FAR*) PURE;
    STDMETHOD(GetPixelFormat)(THIS_ LPDDPIXELFORMAT) PURE;
    STDMETHOD(GetSurfaceDesc)(THIS_ LPDDSURFACEDESC2) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW, LPDDSURFACEDESC2) PURE;
    STDMETHOD(IsLost)(THIS) PURE;
    STDMETHOD(Lock)(THIS_ LPRECT,LPDDSURFACEDESC2,DWORD,HANDLE) PURE;
    STDMETHOD(ReleaseDC)(THIS_ HDC) PURE;
    STDMETHOD(Restore)(THIS) PURE;
    STDMETHOD(SetClipper)(THIS_ LPDIRECTDRAWCLIPPER) PURE;
    STDMETHOD(SetColorKey)(THIS_ DWORD, LPDDCOLORKEY) PURE;
    STDMETHOD(SetOverlayPosition)(THIS_ LONG, LONG ) PURE;
    STDMETHOD(SetPalette)(THIS_ LPDIRECTDRAWPALETTE) PURE;
    STDMETHOD(Unlock)(THIS_ LPRECT) PURE;
    STDMETHOD(UpdateOverlay)(THIS_ LPRECT, LPDIRECTDRAWSURFACE7,LPRECT,DWORD, LPDDOVERLAYFX) PURE;
    STDMETHOD(UpdateOverlayDisplay)(THIS_ DWORD) PURE;
    STDMETHOD(UpdateOverlayZOrder)(THIS_ DWORD, LPDIRECTDRAWSURFACE7) PURE;
    STDMETHOD(GetDDInterface)(THIS_ LPVOID FAR *) PURE;
    STDMETHOD(PageLock)(THIS_ DWORD) PURE;
    STDMETHOD(PageUnlock)(THIS_ DWORD) PURE;
    STDMETHOD(SetSurfaceDesc)(THIS_ LPDDSURFACEDESC2, DWORD) PURE;
    STDMETHOD(SetPrivateData)(THIS_ REFGUID, LPVOID, DWORD, DWORD) PURE;
    STDMETHOD(GetPrivateData)(THIS_ REFGUID, LPVOID, LPDWORD) PURE;
    STDMETHOD(FreePrivateData)(THIS_ REFGUID) PURE;
    STDMETHOD(GetUniquenessValue)(THIS_ LPDWORD) PURE;
    STDMETHOD(ChangeUniquenessValue)(THIS) PURE;
    STDMETHOD(SetPriority)(THIS_ DWORD) PURE;
    STDMETHOD(GetPriority)(THIS_ LPDWORD) PURE;
    STDMETHOD(SetLOD)(THIS_ DWORD) PURE;
    STDMETHOD(GetLOD)(THIS_ LPDWORD) PURE;
"
)
ddraw.IDirectDrawColorControl := {}
ddraw.IDirectDrawColorControl.name := "IDirectDrawColorControl"
ddraw.IDirectDrawColorControl.def :=
( 
"
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    STDMETHOD(GetColorControls)(THIS_ LPDDCOLORCONTROL) PURE;
    STDMETHOD(SetColorControls)(THIS_ LPDDCOLORCONTROL) PURE;
"
)
ddraw.IDirectDrawGammaControl := {}
ddraw.IDirectDrawGammaControl.name := "IDirectDrawGammaControl"
ddraw.IDirectDrawGammaControl.def :=
( 
"
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    STDMETHOD(GetGammaRamp)(THIS_ DWORD, LPDDGAMMARAMP) PURE;
    STDMETHOD(SetGammaRamp)(THIS_ DWORD, LPDDGAMMARAMP) PURE;
"
)
Global _FACDD := 2166
Global DDBD_1 := 0x00004000
Global DDBD_16 := 0x00000400
Global DDBD_2 := 0x00002000
Global DDBD_24 := 0X00000200
Global DDBD_32 := 0x00000100
Global DDBD_4 := 0x00001000
Global DDBD_8 := 0x00000800
Global DDBLT_ALPHADEST := 0x00000001
Global DDBLT_ALPHADESTCONSTOVERRIDE := 0x00000002
Global DDBLT_ALPHADESTNEG := 0x00000004
Global DDBLT_ALPHADESTSURFACEOVERRIDE := 0x00000008
Global DDBLT_ALPHAEDGEBLEND := 0x00000010
Global DDBLT_ALPHASRC := 0x00000020
Global DDBLT_ALPHASRCCONSTOVERRIDE := 0x00000040
Global DDBLT_ALPHASRCNEG := 0x00000080
Global DDBLT_ALPHASRCSURFACEOVERRIDE := 0x00000100
Global DDBLT_ASYNC := 0x00000200
Global DDBLT_COLORFILL := 0x00000400
Global DDBLT_DDFX := 0x00000800
Global DDBLT_DDROPS := 0x00001000
Global DDBLT_DEPTHFILL := 0x02000000
Global DDBLT_DONOTWAIT := 0x08000000
Global DDBLT_EXTENDED_FLAGS := 0x40000000
Global DDBLT_EXTENDED_LINEAR_CONTENT := 0x00000004
Global DDBLT_KEYDEST := 0x00002000
Global DDBLT_KEYDESTOVERRIDE := 0x00004000
Global DDBLT_KEYSRC := 0x00008000
Global DDBLT_KEYSRCOVERRIDE := 0x00010000
Global DDBLT_LAST_PRESENTATION := 0x20000000
Global DDBLT_PRESENTATION := 0x10000000
Global DDBLT_ROP := 0x00020000
Global DDBLT_ROTATIONANGLE := 0x00040000
Global DDBLT_WAIT := 0x01000000
Global DDBLT_ZBUFFER := 0x00080000
Global DDBLT_ZBUFFERDESTCONSTOVERRIDE := 0x00100000
Global DDBLT_ZBUFFERDESTOVERRIDE := 0x00200000
Global DDBLT_ZBUFFERSRCCONSTOVERRIDE := 0x00400000
Global DDBLT_ZBUFFERSRCOVERRIDE := 0x00800000
Global DDBLTFAST_DESTCOLORKEY := 2
Global DDBLTFAST_DONOTWAIT := 32
Global DDBLTFAST_SRCCOLORKEY := 1
Global DDBLTFAST_WAIT := 16
Global DDBLTFX_ARITHSTRETCHY := 0x00000001
Global DDBLTFX_MIRRORLEFTRIGHT := 0x00000002
Global DDBLTFX_MIRRORUPDOWN := 0x00000004
Global DDBLTFX_NOTEARING := 0x00000008
Global DDBLTFX_ROTATE180 := 0x00000010
Global DDBLTFX_ROTATE270 := 0x00000020
Global DDBLTFX_ROTATE90 := 0x00000040
Global DDBLTFX_ZBUFFERBASEDEST := 0x00000100
Global DDBLTFX_ZBUFFERRANGE := 0x00000080
Global DDCAPS2_AUTOFLIPOVERLAY := 0x00000008
Global DDCAPS2_CANAUTOGENMIPMAP := 0x40000000
Global DDCAPS2_CANBOBHARDWARE := 0x00004000
Global DDCAPS2_CANBOBINTERLEAVED := 0x00000010
Global DDCAPS2_CANBOBNONINTERLEAVED := 0x00000020
Global DDCAPS2_CANCALIBRATEGAMMA := 0x00100000
Global DDCAPS2_CANDROPZ16BIT := 0x00000100
Global DDCAPS2_CANFLIPODDEVEN := 0x00002000
Global DDCAPS2_CANMANAGERESOURCE := 0x10000000
Global DDCAPS2_CANMANAGETEXTURE := 0x00800000
Global DDCAPS2_CANRENDERWINDOWED := 0x00080000
Global DDCAPS2_CANSHARERESOURCE := 0x80000000
Global DDCAPS2_CERTIFIED := 0x00000001
Global DDCAPS2_COLORCONTROLOVERLAY := 0x00000040
Global DDCAPS2_COLORCONTROLPRIMARY := 0x00000080
Global DDCAPS2_COPYFOURCC := 0x00008000
Global DDCAPS2_DYNAMICTEXTURES := 0x20000000
Global DDCAPS2_FLIPINTERVAL := 0x00200000
Global DDCAPS2_FLIPNOVSYNC := 0x00400000
Global DDCAPS2_NO2DDURING3DSCENE := 0x00000002
Global DDCAPS2_NONLOCALVIDMEM := 0x00000200
Global DDCAPS2_NONLOCALVIDMEMCAPS := 0x00000400
Global DDCAPS2_NOPAGELOCKREQUIRED := 0x00000800
Global DDCAPS2_PRIMARYGAMMA := 0x00020000
Global DDCAPS2_RESERVED1 := 0x08000000
Global DDCAPS2_STEREO := 0x02000000
Global DDCAPS2_SYSTONONLOCAL_AS_SYSTOLOCAL := 0x04000000
Global DDCAPS2_TEXMANINNONLOCALVIDMEM := 0x01000000
Global DDCAPS2_VIDEOPORT := 0x00000004
Global DDCAPS2_WIDESURFACES := 0x00001000
Global DDCAPS_3D := 0x00000001
Global DDCAPS_ALIGNBOUNDARYDEST := 0x00000002
Global DDCAPS_ALIGNBOUNDARYSRC := 0x00000008
Global DDCAPS_ALIGNSIZEDEST := 0x00000004
Global DDCAPS_ALIGNSIZESRC := 0x00000010
Global DDCAPS_ALIGNSTRIDE := 0x00000020
Global DDCAPS_ALPHA := 0x00800000
Global DDCAPS_BANKSWITCHED := 0x08000000
Global DDCAPS_BLT := 0x00000040
Global DDCAPS_BLTCOLORFILL := 0x04000000
Global DDCAPS_BLTDEPTHFILL := 0x10000000
Global DDCAPS_BLTFOURCC := 0x00000100
Global DDCAPS_BLTQUEUE := 0x00000080
Global DDCAPS_BLTSTRETCH := 0x00000200
Global DDCAPS_CANBLTSYSMEM := 0x80000000
Global DDCAPS_CANCLIP := 0x20000000
Global DDCAPS_CANCLIPSTRETCHED := 0x40000000
Global DDCAPS_COLORKEY := 0x00400000
Global DDCAPS_COLORKEYHWASSIST := 0x01000000
Global DDCAPS_GDI := 0x00000400
Global DDCAPS_NOHARDWARE := 0x02000000
Global DDCAPS_OVERLAY := 0x00000800
Global DDCAPS_OVERLAYCANTCLIP := 0x00001000
Global DDCAPS_OVERLAYFOURCC := 0x00002000
Global DDCAPS_OVERLAYSTRETCH := 0x00004000
Global DDCAPS_PALETTE := 0x00008000
Global DDCAPS_PALETTEVSYNC := 0x00010000
Global DDCAPS_READSCANLINE := 0x00020000
Global DDCAPS_RESERVED1 := 0x00040000
Global DDCAPS_VBI := 0x00080000
Global DDCAPS_ZBLTS := 0x00100000
Global DDCAPS_ZOVERLAYS := 0x00200000
Global DDCKEY_COLORSPACE := 0x00000001
Global DDCKEY_DESTBLT := 0x00000002
Global DDCKEY_DESTOVERLAY := 0x00000004
Global DDCKEY_SRCBLT := 0x00000008
Global DDCKEY_SRCOVERLAY := 0x00000010
Global DDCKEYCAPS_DESTBLT := 0x00000001
Global DDCKEYCAPS_DESTBLTCLRSPACE := 0x00000002
Global DDCKEYCAPS_DESTBLTCLRSPACEYUV := 0x00000004
Global DDCKEYCAPS_DESTBLTYUV := 0x00000008
Global DDCKEYCAPS_DESTOVERLAY := 0x00000010
Global DDCKEYCAPS_DESTOVERLAYCLRSPACE := 0x00000020
Global DDCKEYCAPS_DESTOVERLAYCLRSPACEYUV := 0x00000040
Global DDCKEYCAPS_DESTOVERLAYONEACTIVE := 0x00000080
Global DDCKEYCAPS_DESTOVERLAYYUV := 0x00000100
Global DDCKEYCAPS_NOCOSTOVERLAY := 0x00040000
Global DDCKEYCAPS_SRCBLT := 0x00000200
Global DDCKEYCAPS_SRCBLTCLRSPACE := 0x00000400
Global DDCKEYCAPS_SRCBLTCLRSPACEYUV := 0x00000800
Global DDCKEYCAPS_SRCBLTYUV := 0x00001000
Global DDCKEYCAPS_SRCOVERLAY := 0x00002000
Global DDCKEYCAPS_SRCOVERLAYCLRSPACE := 0x00004000
Global DDCKEYCAPS_SRCOVERLAYCLRSPACEYUV := 0x00008000
Global DDCKEYCAPS_SRCOVERLAYONEACTIVE := 0x00010000
Global DDCKEYCAPS_SRCOVERLAYYUV := 0x00020000
Global DDCOLOR_BRIGHTNESS := 0x00000001
Global DDCOLOR_COLORENABLE := 0x00000040
Global DDCOLOR_CONTRAST := 0x00000002
Global DDCOLOR_GAMMA := 0x00000020
Global DDCOLOR_HUE := 0x00000004
Global DDCOLOR_SATURATION := 0x00000008
Global DDCOLOR_SHARPNESS := 0x00000010
Global DDCREATE_EMULATIONONLY := 0x00000002
Global DDCREATE_HARDWAREONLY := 0x00000001
Global DDEDM_REFRESHRATES := 0x00000001
Global DDEDM_STANDARDVGAMODES := 0x00000002
Global DDEM_MODEFAILED := 0x00000002
Global DDEM_MODEPASSED := 0x00000001
Global DDENUM_ATTACHEDSECONDARYDEVICES := 0x00000001
Global DDENUM_DETACHEDSECONDARYDEVICES := 0x00000002
Global DDENUM_NONDISPLAYDEVICES := 0x00000004
Global DDENUMOVERLAYZ_BACKTOFRONT := 0x00000000
Global DDENUMOVERLAYZ_FRONTTOBACK := 0x00000001
Global DDENUMRET_OK := 1
Global DDENUMSURFACES_ALL := 0x00000001
Global DDENUMSURFACES_CANBECREATED := 0x00000008
Global DDENUMSURFACES_DOESEXIST := 0x00000010
Global DDENUMSURFACES_MATCH := 0x00000002
Global DDENUMSURFACES_NOMATCH := 0x00000004
Global DDFLIP_DONOTWAIT := 0x00000020
Global DDFLIP_EVEN := 0x00000002
Global DDFLIP_INTERVAL2 := 0x02000000
Global DDFLIP_INTERVAL3 := 0x03000000
Global DDFLIP_INTERVAL4 := 0x04000000
Global DDFLIP_NOVSYNC := 0x00000008
Global DDFLIP_ODD := 0x00000004
Global DDFLIP_STEREO := 0x00000010
Global DDFLIP_WAIT := 0x00000001
Global DDFXALPHACAPS_BLTALPHAEDGEBLEND := 0x00000001
Global DDFXALPHACAPS_BLTALPHAPIXELS := 0x00000002
Global DDFXALPHACAPS_BLTALPHAPIXELSNEG := 0x00000004
Global DDFXALPHACAPS_BLTALPHASURFACES := 0x00000008
Global DDFXALPHACAPS_BLTALPHASURFACESNEG := 0x00000010
Global DDFXALPHACAPS_OVERLAYALPHAEDGEBLEND := 0x00000020
Global DDFXALPHACAPS_OVERLAYALPHAPIXELS := 0x00000040
Global DDFXALPHACAPS_OVERLAYALPHAPIXELSNEG := 0x00000080
Global DDFXALPHACAPS_OVERLAYALPHASURFACES := 0x00000100
Global DDFXALPHACAPS_OVERLAYALPHASURFACESNEG := 0x00000200
Global DDFXCAPS_BLTALPHA := 0x00000001
Global DDFXCAPS_BLTARITHSTRETCHY := 0x00000020
Global DDFXCAPS_BLTARITHSTRETCHYN := 0x00000010
Global DDFXCAPS_BLTMIRRORLEFTRIGHT := 0x00000040
Global DDFXCAPS_BLTMIRRORUPDOWN := 0x00000080
Global DDFXCAPS_BLTROTATION := 0x00000100
Global DDFXCAPS_BLTROTATION90 := 0x00000200
Global DDFXCAPS_BLTSHRINKX := 0x00000400
Global DDFXCAPS_BLTSHRINKXN := 0x00000800
Global DDFXCAPS_BLTSHRINKY := 0x00001000
Global DDFXCAPS_BLTSHRINKYN := 0x00002000
Global DDFXCAPS_BLTSTRETCHX := 0x00004000
Global DDFXCAPS_BLTSTRETCHXN := 0x00008000
Global DDFXCAPS_BLTSTRETCHY := 0x00010000
Global DDFXCAPS_BLTSTRETCHYN := 0x00020000
Global DDFXCAPS_OVERLAYALPHA := 0x00000004
Global DDFXCAPS_OVERLAYARITHSTRETCHY := 0x00040000
Global DDFXCAPS_OVERLAYARITHSTRETCHYN := 0x00000008
Global DDFXCAPS_OVERLAYDEINTERLACE := 0x20000000
Global DDFXCAPS_OVERLAYMIRRORLEFTRIGHT := 0x08000000
Global DDFXCAPS_OVERLAYMIRRORUPDOWN := 0x10000000
Global DDFXCAPS_OVERLAYSHRINKX := 0x00080000
Global DDFXCAPS_OVERLAYSHRINKXN := 0x00100000
Global DDFXCAPS_OVERLAYSHRINKY := 0x00200000
Global DDFXCAPS_OVERLAYSHRINKYN := 0x00400000
Global DDFXCAPS_OVERLAYSTRETCHX := 0x00800000
Global DDFXCAPS_OVERLAYSTRETCHXN := 0x01000000
Global DDFXCAPS_OVERLAYSTRETCHY := 0x02000000
Global DDFXCAPS_OVERLAYSTRETCHYN := 0x04000000
Global DDGBS_CANBLT := 0x00000001
Global DDGBS_ISBLTDONE := 0x00000002
Global DDGDI_GETHOSTIDENTIFIER := 0x00000001
Global DDGFS_CANFLIP := 0x00000001
Global DDGFS_ISFLIPDONE := 0x00000002
Global DDLOCK_DISCARDCONTENTS := 0x00002000
Global DDLOCK_DONOTWAIT := 0x00004000
Global DDLOCK_EVENT := 0x00000002
Global DDLOCK_HASVOLUMETEXTUREBOXRECT := 0x00008000
Global DDLOCK_NODIRTYUPDATE := 0x00010000
Global DDLOCK_NOOVERWRITE := 0x00001000
Global DDLOCK_NOSYSLOCK := 0x00000800
Global DDLOCK_OKTOSWAP := 0x00002000
Global DDLOCK_READONLY := 0x00000010
Global DDLOCK_SURFACEMEMORYPTR := 0x00000000
Global DDLOCK_WAIT := 0x00000001
Global DDLOCK_WRITEONLY := 0x00000020
Global DDOSD_ALL := 0x0000000f
Global DDOSD_COMPRESSION_RATIO := 0x00000002
Global DDOSD_GUID := 0x00000001
Global DDOSD_OSCAPS := 0x00000008
Global DDOSD_SCAPS := 0x00000004
Global DDOSDCAPS_MONOLITHICMIPMAP := 0x00000004
Global DDOSDCAPS_OPTCOMPRESSED := 0x00000001
Global DDOSDCAPS_OPTREORDERED := 0x00000002
Global DDOSDCAPS_VALIDOSCAPS := 0x00000007
Global DDOSDCAPS_VALIDSCAPS := 0x30004800
Global DDOVER_ADDDIRTYRECT := 0x00008000
Global DDOVER_ALPHADEST := 0x00000001
Global DDOVER_ALPHADESTCONSTOVERRIDE := 0x00000002
Global DDOVER_ALPHADESTNEG := 0x00000004
Global DDOVER_ALPHADESTSURFACEOVERRIDE := 0x00000008
Global DDOVER_ALPHAEDGEBLEND := 0x00000010
Global DDOVER_ALPHASRC := 0x00000020
Global DDOVER_ALPHASRCCONSTOVERRIDE := 0x00000040
Global DDOVER_ALPHASRCNEG := 0x00000080
Global DDOVER_ALPHASRCSURFACEOVERRIDE := 0x00000100
Global DDOVER_ARGBSCALEFACTORS := 0x02000000
Global DDOVER_AUTOFLIP := 0x00100000
Global DDOVER_BOB := 0x00200000
Global DDOVER_BOBHARDWARE := 0x01000000
Global DDOVER_DDFX := 0x00080000
Global DDOVER_DEGRADEARGBSCALING := 0x04000000
Global DDOVER_HIDE := 0x00000200
Global DDOVER_INTERLEAVED := 0x00800000
Global DDOVER_KEYDEST := 0x00000400
Global DDOVER_KEYDESTOVERRIDE := 0x00000800
Global DDOVER_KEYSRC := 0x00001000
Global DDOVER_KEYSRCOVERRIDE := 0x00002000
Global DDOVER_OVERRIDEBOBWEAVE := 0x00400000
Global DDOVER_REFRESHALL := 0x00020000
Global DDOVER_REFRESHDIRTYRECTS := 0x00010000
Global DDOVER_SHOW := 0x00004000
Global DDOVERFX_ARITHSTRETCHY := 0x00000001
Global DDOVERFX_DEINTERLACE := 0x00000008
Global DDOVERFX_MIRRORLEFTRIGHT := 0x00000002
Global DDOVERFX_MIRRORUPDOWN := 0x00000004
Global DDOVERZ_INSERTINBACKOF := 0x00000005
Global DDOVERZ_INSERTINFRONTOF := 0x00000004
Global DDOVERZ_MOVEBACKWARD := 0x00000003
Global DDOVERZ_MOVEFORWARD := 0x00000002
Global DDOVERZ_SENDTOBACK := 0x00000001
Global DDOVERZ_SENDTOFRONT := 0x00000000
Global DDPCAPS_1BIT := 0x00000100
Global DDPCAPS_2BIT := 0x00000200
Global DDPCAPS_4BIT := 0x00000001
Global DDPCAPS_8BIT := 0x00000004
Global DDPCAPS_8BITENTRIES := 0x00000002
Global DDPCAPS_ALLOW256 := 0x00000040
Global DDPCAPS_ALPHA := 0x00000400
Global DDPCAPS_INITIALIZE := 0x00000000
Global DDPCAPS_PRIMARYSURFACE := 0x00000010
Global DDPCAPS_PRIMARYSURFACELEFT := 0x00000020
Global DDPCAPS_VSYNC := 0x00000080
Global DDPF_ALPHA := 0x00000002
Global DDPF_ALPHAPIXELS := 0x00000001
Global DDPF_ALPHAPREMULT := 0x00008000
Global DDPF_BUMPDUDV := 0x00080000
Global DDPF_BUMPLUMINANCE := 0x00040000
Global DDPF_COMPRESSED := 0x00000080
Global DDPF_FOURCC := 0x00000004
Global DDPF_LUMINANCE := 0x00020000
Global DDPF_PALETTEINDEXED1 := 0x00000800
Global DDPF_PALETTEINDEXED2 := 0x00001000
Global DDPF_PALETTEINDEXED4 := 0x00000008
Global DDPF_PALETTEINDEXED8 := 0x00000020
Global DDPF_PALETTEINDEXEDTO8 := 0x00000010
Global DDPF_RGB := 0x00000040
Global DDPF_RGBTOYUV := 0x00000100
Global DDPF_STENCILBUFFER := 0x00004000
Global DDPF_YUV := 0x00000200
Global DDPF_ZBUFFER := 0x00000400
Global DDPF_ZPIXELS := 0x00002000
Global DDSCAPS2_ADDITIONALPRIMARY := 0x80000000
Global DDSCAPS2_CUBEMAP := 0x00000200
Global DDSCAPS2_CUBEMAP_NEGATIVEX := 0x00000800
Global DDSCAPS2_CUBEMAP_NEGATIVEY := 0x00002000
Global DDSCAPS2_CUBEMAP_NEGATIVEZ := 0x00008000
Global DDSCAPS2_CUBEMAP_POSITIVEX := 0x00000400
Global DDSCAPS2_CUBEMAP_POSITIVEY := 0x00001000
Global DDSCAPS2_CUBEMAP_POSITIVEZ := 0x00004000
Global DDSCAPS2_D3DTEXTUREMANAGE := 0x00020000
Global DDSCAPS2_DISCARDBACKBUFFER := 0x10000000
Global DDSCAPS2_DONOTPERSIST := 0x00040000
Global DDSCAPS2_ENABLEALPHACHANNEL := 0x20000000
Global DDSCAPS2_EXTENDEDFORMATPRIMARY := 0x40000000
Global DDSCAPS2_HARDWAREDEINTERLACE := 0x00000000
Global DDSCAPS2_HINTANTIALIASING := 0x00000100
Global DDSCAPS2_HINTDYNAMIC := 0x00000004
Global DDSCAPS2_HINTSTATIC := 0x00000008
Global DDSCAPS2_MIPMAPSUBLEVEL := 0x00010000
Global DDSCAPS2_NOTUSERLOCKABLE := 0x00400000
Global DDSCAPS2_NPATCHES := 0x02000000
Global DDSCAPS2_OPAQUE := 0x00000080
Global DDSCAPS2_POINTS := 0x00800000
Global DDSCAPS2_RESERVED1 := 0x00000020
Global DDSCAPS2_RESERVED2 := 0x00000040
Global DDSCAPS2_RESERVED3 := 0x04000000
Global DDSCAPS2_RESERVED4 := 0x00000002
Global DDSCAPS2_RTPATCHES := 0x01000000
Global DDSCAPS2_STEREOSURFACELEFT := 0x00080000
Global DDSCAPS2_TEXTUREMANAGE := 0x00000010
Global DDSCAPS2_VOLUME := 0x00200000
Global DDSCAPS3_AUTOGENMIPMAP := 0x00000800
Global DDSCAPS3_CREATESHAREDRESOURCE := 0x00002000
Global DDSCAPS3_DMAP := 0x00001000
Global DDSCAPS3_LIGHTWEIGHTMIPMAP := 0x00000400
Global DDSCAPS3_MULTISAMPLE_MASK := 0x0000001F
Global DDSCAPS3_MULTISAMPLE_QUALITY_MASK := 0x000000E0
Global DDSCAPS3_MULTISAMPLE_QUALITY_SHIFT := 5
Global DDSCAPS3_OPENSHAREDRESOURCE := 0x00008000
Global DDSCAPS3_READONLYRESOURCE := 0x00004000
Global DDSCAPS3_RESERVED1 := 0x00000100
Global DDSCAPS3_RESERVED2 := 0x00000200
Global DDSCAPS_3DDEVICE := 0x00002000
Global DDSCAPS_ALLOCONLOAD := 0x04000000
Global DDSCAPS_ALPHA := 0x00000002
Global DDSCAPS_BACKBUFFER := 0x00000004
Global DDSCAPS_COMPLEX := 0x00000008
Global DDSCAPS_FLIP := 0x00000010
Global DDSCAPS_FRONTBUFFER := 0x00000020
Global DDSCAPS_HWCODEC := 0x00100000
Global DDSCAPS_LIVEVIDEO := 0x00080000
Global DDSCAPS_LOCALVIDMEM := 0x10000000
Global DDSCAPS_MIPMAP := 0x00400000
Global DDSCAPS_MODEX := 0x00200000
Global DDSCAPS_NONLOCALVIDMEM := 0x20000000
Global DDSCAPS_OFFSCREENPLAIN := 0x00000040
Global DDSCAPS_OPTIMIZED := 0x80000000
Global DDSCAPS_OVERLAY := 0x00000080
Global DDSCAPS_OWNDC := 0x00040000
Global DDSCAPS_PALETTE := 0x00000100
Global DDSCAPS_PRIMARYSURFACE := 0x00000200
Global DDSCAPS_PRIMARYSURFACELEFT := 0x00000000
Global DDSCAPS_RESERVED1 := 0x00000001
Global DDSCAPS_RESERVED2 := 0x00800000
Global DDSCAPS_RESERVED3 := 0x00000400
Global DDSCAPS_STANDARDVGAMODE := 0x40000000
Global DDSCAPS_SYSTEMMEMORY := 0x00000800
Global DDSCAPS_TEXTURE := 0x00001000
Global DDSCAPS_VIDEOMEMORY := 0x00004000
Global DDSCAPS_VIDEOPORT := 0x08000000
Global DDSCAPS_VISIBLE := 0x00008000
Global DDSCAPS_WRITEONLY := 0x00010000
Global DDSCAPS_ZBUFFER := 0x00020000
Global DDSCL_ALLOWMODEX := 0x00000040
Global DDSCL_ALLOWREBOOT := 0x00000002
Global DDSCL_CREATEDEVICEWINDOW := 0x00000200
Global DDSCL_EXCLUSIVE := 0x00000010
Global DDSCL_FPUPRESERVE := 0x00001000
Global DDSCL_FPUSETUP := 0x00000800
Global DDSCL_FULLSCREEN := 0x00000001
Global DDSCL_MULTITHREADED := 0x00000400
Global DDSCL_NORMAL := 0x00000008
Global DDSCL_NOWINDOWCHANGES := 0x00000004
Global DDSCL_SETDEVICEWINDOW := 0x00000100
Global DDSCL_SETFOCUSWINDOW := 0x00000080
Global DDSD_ALL := 0x00fff9ee
Global DDSD_ALPHABITDEPTH := 0x00000080
Global DDSD_BACKBUFFERCOUNT := 0x00000020
Global DDSD_CAPS := 0x00000001
Global DDSD_CKDESTBLT := 0x00004000
Global DDSD_CKDESTOVERLAY := 0x00002000
Global DDSD_CKSRCBLT := 0x00010000
Global DDSD_CKSRCOVERLAY := 0x00008000
Global DDSD_DEPTH := 0x00800000
Global DDSD_FVF := 0x00200000
Global DDSD_HEIGHT := 0x00000002
Global DDSD_LINEARSIZE := 0x00080000
Global DDSD_LPSURFACE := 0x00000800
Global DDSD_MIPMAPCOUNT := 0x00020000
Global DDSD_PITCH := 0x00000008
Global DDSD_PIXELFORMAT := 0x00001000
Global DDSD_REFRESHRATE := 0x00040000
Global DDSD_SRCVBHANDLE := 0x00400000
Global DDSD_TEXTURESTAGE := 0x00100000
Global DDSD_WIDTH := 0x00000004
Global DDSD_ZBUFFERBITDEPTH := 0x00000040
Global DDSDM_STANDARDVGAMODE := 0x00000001
Global DDSETSURFACEDESC_PRESERVEDC := 0x00000001
Global DDSETSURFACEDESC_RECREATEDC := 0x00000000
Global DDSGR_CALIBRATE := 0x00000001
Global DDSMT_ISTESTREQUIRED := 0x00000001
Global DDSPD_IUNKNOWNPOINTER := 0x00000001
Global DDSPD_VOLATILE := 0x00000002
Global DDSVCAPS_RESERVED1 := 0x00000001
Global DDSVCAPS_RESERVED2 := 0x00000002
Global DDSVCAPS_RESERVED3 := 0x00000004
Global DDSVCAPS_RESERVED4 := 0x00000008
Global DDSVCAPS_STEREOSEQUENTIAL := 0x00000010
Global DDWAITVB_BLOCKBEGIN := 0x00000001
Global DDWAITVB_BLOCKBEGINEVENT := 0x00000002
Global DDWAITVB_BLOCKEND := 0x00000004
Global DIRECTDRAW_VERSION := 1792
Global MAX_DDDEVICEID_STRING := 512
ddraw.err := {}
ddraw.err[2289434629 . ""] := "DDERR_ALREADYINITIALIZED"
ddraw.err[2289435198 . ""] := "DDERR_BLTFASTCANTCLIP"
ddraw.err[2289434634 . ""] := "DDERR_CANNOTATTACHSURFACE"
ddraw.err[2289434644 . ""] := "DDERR_CANNOTDETACHSURFACE"
ddraw.err[2289435209 . ""] := "DDERR_CANTCREATEDC"
ddraw.err[2289435207 . ""] := "DDERR_CANTDUPLICATE"
ddraw.err[2289435059 . ""] := "DDERR_CANTLOCKSURFACE"
ddraw.err[2289435264 . ""] := "DDERR_CANTPAGELOCK"
ddraw.err[2289435284 . ""] := "DDERR_CANTPAGEUNLOCK"
ddraw.err[2289435191 . ""] := "DDERR_CLIPPERISUSINGHWND"
ddraw.err[2289435024 . ""] := "DDERR_COLORKEYNOTSET"
ddraw.err[2289434664 . ""] := "DDERR_CURRENTLYNOTAVAIL"
ddraw.err[2289435318 . ""] := "DDERR_D3DNOTINITIALIZED"
ddraw.err[2289435244 . ""] := "DDERR_DCALREADYCREATED"
ddraw.err[2289435166 . ""] := "DDERR_DDSCAPSCOMPLEXREQUIRED"
ddraw.err[2289435323 . ""] := "DDERR_DEVICEDOESNTOWNSURFACE"
ddraw.err[2289435186 . ""] := "DDERR_DIRECTDRAWALREADYCREATED"
ddraw.err[2289434679 . ""] := "DDERR_EXCEPTION"
ddraw.err[2289435205 . ""] := "DDERR_EXCLUSIVEMODEALREADYSET"
ddraw.err[2289435315 . ""] := "DDERR_EXPIRED"
ddraw.err[2289434714 . ""] := "DDERR_HEIGHTALIGN"
ddraw.err[2289435195 . ""] := "DDERR_HWNDALREADYSET"
ddraw.err[2289435194 . ""] := "DDERR_HWNDSUBCLASSED"
ddraw.err[2289435212 . ""] := "DDERR_IMPLICITLYCREATED"
ddraw.err[2289434719 . ""] := "DDERR_INCOMPATIBLEPRIMARY"
ddraw.err[2289434724 . ""] := "DDERR_INVALIDCAPS"
ddraw.err[2289434734 . ""] := "DDERR_INVALIDCLIPLIST"
ddraw.err[2289435185 . ""] := "DDERR_INVALIDDIRECTDRAWGUID"
ddraw.err[2289434744 . ""] := "DDERR_INVALIDMODE"
ddraw.err[2289434754 . ""] := "DDERR_INVALIDOBJECT"
ddraw.err[2289434769 . ""] := "DDERR_INVALIDPIXELFORMAT"
ddraw.err[2289435203 . ""] := "DDERR_INVALIDPOSITION"
ddraw.err[2289434774 . ""] := "DDERR_INVALIDRECT"
ddraw.err[2289435145 . ""] := "DDERR_INVALIDSTREAM"
ddraw.err[2289435216 . ""] := "DDERR_INVALIDSURFACETYPE"
ddraw.err[2289434784 . ""] := "DDERR_LOCKEDSURFACES"
ddraw.err[2289435314 . ""] := "DDERR_MOREDATA"
ddraw.err[2289435317 . ""] := "DDERR_NEWMODE"
ddraw.err[2289434794 . ""] := "DDERR_NO3D"
ddraw.err[2289434804 . ""] := "DDERR_NOALPHAHW"
ddraw.err[2289435199 . ""] := "DDERR_NOBLTHW"
ddraw.err[2289434829 . ""] := "DDERR_NOCLIPLIST"
ddraw.err[2289435192 . ""] := "DDERR_NOCLIPPERATTACHED"
ddraw.err[2289434834 . ""] := "DDERR_NOCOLORCONVHW"
ddraw.err[2289434839 . ""] := "DDERR_NOCOLORKEY"
ddraw.err[2289434844 . ""] := "DDERR_NOCOLORKEYHW"
ddraw.err[2289434836 . ""] := "DDERR_NOCOOPERATIVELEVELSET"
ddraw.err[2289435210 . ""] := "DDERR_NODC"
ddraw.err[2289435200 . ""] := "DDERR_NODDROPSHW"
ddraw.err[2289435187 . ""] := "DDERR_NODIRECTDRAWHW"
ddraw.err[2289434846 . ""] := "DDERR_NODIRECTDRAWSUPPORT"
ddraw.err[2289435321 . ""] := "DDERR_NODRIVERSUPPORT"
ddraw.err[2289435189 . ""] := "DDERR_NOEMULATION"
ddraw.err[2289434849 . ""] := "DDERR_NOEXCLUSIVEMODE"
ddraw.err[2289434854 . ""] := "DDERR_NOFLIPHW"
ddraw.err[2289435226 . ""] := "DDERR_NOFOCUSWINDOW"
ddraw.err[2289434864 . ""] := "DDERR_NOGDI"
ddraw.err[2289435193 . ""] := "DDERR_NOHWND"
ddraw.err[2289435215 . ""] := "DDERR_NOMIPMAPHW"
ddraw.err[2289434874 . ""] := "DDERR_NOMIRRORHW"
ddraw.err[2289435320 . ""] := "DDERR_NOMONITORINFORMATION"
ddraw.err[2289435254 . ""] := "DDERR_NONONLOCALVIDMEM"
ddraw.err[2289435224 . ""] := "DDERR_NOOPTIMIZEHW"
ddraw.err[2289435202 . ""] := "DDERR_NOOVERLAYDEST"
ddraw.err[2289434884 . ""] := "DDERR_NOOVERLAYHW"
ddraw.err[2289435196 . ""] := "DDERR_NOPALETTEATTACHED"
ddraw.err[2289435197 . ""] := "DDERR_NOPALETTEHW"
ddraw.err[2289434904 . ""] := "DDERR_NORASTEROPHW"
ddraw.err[2289434914 . ""] := "DDERR_NOROTATIONHW"
ddraw.err[2289434805 . ""] := "DDERR_NOSTEREOHARDWARE"
ddraw.err[2289434934 . ""] := "DDERR_NOSTRETCHHW"
ddraw.err[2289434806 . ""] := "DDERR_NOSURFACELEFT"
ddraw.err[2289434940 . ""] := "DDERR_NOT4BITCOLOR"
ddraw.err[2289434941 . ""] := "DDERR_NOT4BITCOLORINDEX"
ddraw.err[2289434944 . ""] := "DDERR_NOT8BITCOLOR"
ddraw.err[2289435204 . ""] := "DDERR_NOTAOVERLAYSURFACE"
ddraw.err[2289434954 . ""] := "DDERR_NOTEXTUREHW"
ddraw.err[2289435206 . ""] := "DDERR_NOTFLIPPABLE"
ddraw.err[2289434879 . ""] := "DDERR_NOTFOUND"
ddraw.err[2289435225 . ""] := "DDERR_NOTLOADED"
ddraw.err[2289435208 . ""] := "DDERR_NOTLOCKED"
ddraw.err[2289435227 . ""] := "DDERR_NOTONMIPMAPSUBLEVEL"
ddraw.err[2289435304 . ""] := "DDERR_NOTPAGELOCKED"
ddraw.err[2289435213 . ""] := "DDERR_NOTPALETTIZED"
ddraw.err[2289434959 . ""] := "DDERR_NOVSYNCHW"
ddraw.err[2289434964 . ""] := "DDERR_NOZBUFFERHW"
ddraw.err[2289434974 . ""] := "DDERR_NOZOVERLAYHW"
ddraw.err[2289434984 . ""] := "DDERR_OUTOFCAPS"
ddraw.err[2289435004 . ""] := "DDERR_OUTOFVIDEOMEMORY"
ddraw.err[2289434894 . ""] := "DDERR_OVERLAPPINGRECTS"
ddraw.err[2289435006 . ""] := "DDERR_OVERLAYCANTCLIP"
ddraw.err[2289435008 . ""] := "DDERR_OVERLAYCOLORKEYONLYONEACTIVE"
ddraw.err[2289435201 . ""] := "DDERR_OVERLAYNOTVISIBLE"
ddraw.err[2289435011 . ""] := "DDERR_PALETTEBUSY"
ddraw.err[2289435188 . ""] := "DDERR_PRIMARYSURFACEALREADYEXISTS"
ddraw.err[2289435190 . ""] := "DDERR_REGIONTOOSMALL"
ddraw.err[2289435034 . ""] := "DDERR_SURFACEALREADYATTACHED"
ddraw.err[2289435044 . ""] := "DDERR_SURFACEALREADYDEPENDENT"
ddraw.err[2289435054 . ""] := "DDERR_SURFACEBUSY"
ddraw.err[2289435064 . ""] := "DDERR_SURFACEISOBSCURED"
ddraw.err[2289435074 . ""] := "DDERR_SURFACELOST"
ddraw.err[2289435084 . ""] := "DDERR_SURFACENOTATTACHED"
ddraw.err[2289435316 . ""] := "DDERR_TESTFINISHED"
ddraw.err[2289435094 . ""] := "DDERR_TOOBIGHEIGHT"
ddraw.err[2289435104 . ""] := "DDERR_TOOBIGSIZE"
ddraw.err[2289435114 . ""] := "DDERR_TOOBIGWIDTH"
ddraw.err[2289435134 . ""] := "DDERR_UNSUPPORTEDFORMAT"
ddraw.err[2289435144 . ""] := "DDERR_UNSUPPORTEDMASK"
ddraw.err[2289435214 . ""] := "DDERR_UNSUPPORTEDMODE"
ddraw.err[2289435161 . ""] := "DDERR_VERTICALBLANKINPROGRESS"
ddraw.err[2289435319 . ""] := "DDERR_VIDEONOTACTIVE"
ddraw.err[2289435164 . ""] := "DDERR_WASSTILLDRAWING"
ddraw.err[2289435211 . ""] := "DDERR_WRONGMODE"
ddraw.err[2289435184 . ""] := "DDERR_XALIGN"
Global DDERR_ALREADYINITIALIZED := 2289434629
Global DDERR_BLTFASTCANTCLIP := 2289435198
Global DDERR_CANNOTATTACHSURFACE := 2289434634
Global DDERR_CANNOTDETACHSURFACE := 2289434644
Global DDERR_CANTCREATEDC := 2289435209
Global DDERR_CANTDUPLICATE := 2289435207
Global DDERR_CANTLOCKSURFACE := 2289435059
Global DDERR_CANTPAGELOCK := 2289435264
Global DDERR_CANTPAGEUNLOCK := 2289435284
Global DDERR_CLIPPERISUSINGHWND := 2289435191
Global DDERR_COLORKEYNOTSET := 2289435024
Global DDERR_CURRENTLYNOTAVAIL := 2289434664
Global DDERR_D3DNOTINITIALIZED := 2289435318
Global DDERR_DCALREADYCREATED := 2289435244
Global DDERR_DDSCAPSCOMPLEXREQUIRED := 2289435166
Global DDERR_DEVICEDOESNTOWNSURFACE := 2289435323
Global DDERR_DIRECTDRAWALREADYCREATED := 2289435186
Global DDERR_EXCEPTION := 2289434679
Global DDERR_EXCLUSIVEMODEALREADYSET := 2289435205
Global DDERR_EXPIRED := 2289435315
Global DDERR_HEIGHTALIGN := 2289434714
Global DDERR_HWNDALREADYSET := 2289435195
Global DDERR_HWNDSUBCLASSED := 2289435194
Global DDERR_IMPLICITLYCREATED := 2289435212
Global DDERR_INCOMPATIBLEPRIMARY := 2289434719
Global DDERR_INVALIDCAPS := 2289434724
Global DDERR_INVALIDCLIPLIST := 2289434734
Global DDERR_INVALIDDIRECTDRAWGUID := 2289435185
Global DDERR_INVALIDMODE := 2289434744
Global DDERR_INVALIDOBJECT := 2289434754
Global DDERR_INVALIDPIXELFORMAT := 2289434769
Global DDERR_INVALIDPOSITION := 2289435203
Global DDERR_INVALIDRECT := 2289434774
Global DDERR_INVALIDSTREAM := 2289435145
Global DDERR_INVALIDSURFACETYPE := 2289435216
Global DDERR_LOCKEDSURFACES := 2289434784
Global DDERR_MOREDATA := 2289435314
Global DDERR_NEWMODE := 2289435317
Global DDERR_NO3D := 2289434794
Global DDERR_NOALPHAHW := 2289434804
Global DDERR_NOBLTHW := 2289435199
Global DDERR_NOCLIPLIST := 2289434829
Global DDERR_NOCLIPPERATTACHED := 2289435192
Global DDERR_NOCOLORCONVHW := 2289434834
Global DDERR_NOCOLORKEY := 2289434839
Global DDERR_NOCOLORKEYHW := 2289434844
Global DDERR_NOCOOPERATIVELEVELSET := 2289434836
Global DDERR_NODC := 2289435210
Global DDERR_NODDROPSHW := 2289435200
Global DDERR_NODIRECTDRAWHW := 2289435187
Global DDERR_NODIRECTDRAWSUPPORT := 2289434846
Global DDERR_NODRIVERSUPPORT := 2289435321
Global DDERR_NOEMULATION := 2289435189
Global DDERR_NOEXCLUSIVEMODE := 2289434849
Global DDERR_NOFLIPHW := 2289434854
Global DDERR_NOFOCUSWINDOW := 2289435226
Global DDERR_NOGDI := 2289434864
Global DDERR_NOHWND := 2289435193
Global DDERR_NOMIPMAPHW := 2289435215
Global DDERR_NOMIRRORHW := 2289434874
Global DDERR_NOMONITORINFORMATION := 2289435320
Global DDERR_NONONLOCALVIDMEM := 2289435254
Global DDERR_NOOPTIMIZEHW := 2289435224
Global DDERR_NOOVERLAYDEST := 2289435202
Global DDERR_NOOVERLAYHW := 2289434884
Global DDERR_NOPALETTEATTACHED := 2289435196
Global DDERR_NOPALETTEHW := 2289435197
Global DDERR_NORASTEROPHW := 2289434904
Global DDERR_NOROTATIONHW := 2289434914
Global DDERR_NOSTEREOHARDWARE := 2289434805
Global DDERR_NOSTRETCHHW := 2289434934
Global DDERR_NOSURFACELEFT := 2289434806
Global DDERR_NOT4BITCOLOR := 2289434940
Global DDERR_NOT4BITCOLORINDEX := 2289434941
Global DDERR_NOT8BITCOLOR := 2289434944
Global DDERR_NOTAOVERLAYSURFACE := 2289435204
Global DDERR_NOTEXTUREHW := 2289434954
Global DDERR_NOTFLIPPABLE := 2289435206
Global DDERR_NOTFOUND := 2289434879
Global DDERR_NOTLOADED := 2289435225
Global DDERR_NOTLOCKED := 2289435208
Global DDERR_NOTONMIPMAPSUBLEVEL := 2289435227
Global DDERR_NOTPAGELOCKED := 2289435304
Global DDERR_NOTPALETTIZED := 2289435213
Global DDERR_NOVSYNCHW := 2289434959
Global DDERR_NOZBUFFERHW := 2289434964
Global DDERR_NOZOVERLAYHW := 2289434974
Global DDERR_OUTOFCAPS := 2289434984
Global DDERR_OUTOFVIDEOMEMORY := 2289435004
Global DDERR_OVERLAPPINGRECTS := 2289434894
Global DDERR_OVERLAYCANTCLIP := 2289435006
Global DDERR_OVERLAYCOLORKEYONLYONEACTIVE := 2289435008
Global DDERR_OVERLAYNOTVISIBLE := 2289435201
Global DDERR_PALETTEBUSY := 2289435011
Global DDERR_PRIMARYSURFACEALREADYEXISTS := 2289435188
Global DDERR_REGIONTOOSMALL := 2289435190
Global DDERR_SURFACEALREADYATTACHED := 2289435034
Global DDERR_SURFACEALREADYDEPENDENT := 2289435044
Global DDERR_SURFACEBUSY := 2289435054
Global DDERR_SURFACEISOBSCURED := 2289435064
Global DDERR_SURFACELOST := 2289435074
Global DDERR_SURFACENOTATTACHED := 2289435084
Global DDERR_TESTFINISHED := 2289435316
Global DDERR_TOOBIGHEIGHT := 2289435094
Global DDERR_TOOBIGSIZE := 2289435104
Global DDERR_TOOBIGWIDTH := 2289435114
Global DDERR_UNSUPPORTEDFORMAT := 2289435134
Global DDERR_UNSUPPORTEDMASK := 2289435144
Global DDERR_UNSUPPORTEDMODE := 2289435214
Global DDERR_VERTICALBLANKINPROGRESS := 2289435161
Global DDERR_VIDEONOTACTIVE := 2289435319
Global DDERR_WASSTILLDRAWING := 2289435164
Global DDERR_WRONGMODE := 2289435211
Global DDERR_XALIGN := 2289435184
ddraw.err[2147942487 . ""] := "DDERR_INVALIDPARAMS"
ddraw.err[0 . ""] := "DDERR_OK"
ddraw.err[2147500034 . ""] := "E_NOINTERFACE"
global DDCOLORKEY := "DWORD dwColorSpaceLowValue, DWORD dwColorSpaceHighValue"
global DDPIXELFORMAT =
(
" 
    DWORD       dwSize;
    DWORD       dwFlags;
    DWORD       dwFourCC;
        {
        DWORD   dwRGBBitCount;
        DWORD   dwYUVBitCount;
        DWORD   dwZBufferBitDepth;
        DWORD   dwAlphaBitDepth;
        DWORD   dwLuminanceBitCount;
        DWORD   dwBumpBitCount;
        DWORD   dwPrivateFormatBitCount;
    };
        {
        DWORD   dwRBitMask;
        DWORD   dwYBitMask;
        DWORD   dwStencilBitDepth;
        DWORD   dwLuminanceBitMask;
        DWORD   dwBumpDuBitMask;
        DWORD   dwOperations;
    };
        {
        DWORD   dwGBitMask;
        DWORD   dwUBitMask;
        DWORD   dwZBitMask;
        DWORD   dwBumpDvBitMask;
        struct        {
            WORD    wFlipMSTypes;
            WORD    wBltMSTypes;
        };
    };
        {
        DWORD   dwBBitMask;
        DWORD   dwVBitMask;
        DWORD   dwStencilBitMask;
        DWORD   dwBumpLuminanceBitMask;
    };
        {
        DWORD   dwRGBAlphaBitMask;
        DWORD   dwYUVAlphaBitMask;
        DWORD   dwLuminanceAlphaBitMask;
        DWORD   dwRGBZBitMask;
        DWORD   dwYUVZBitMask;
    };
"
)
global DDSCAPS := "DWORD dwCaps;"
global DDSURFACEDESC :=
(
"
    DWORD               dwSize;                 
    DWORD               dwFlags;                
    DWORD               dwHeight;               
    DWORD               dwWidth;               
    {
        LONG            lPitch;                 
        DWORD           dwLinearSize;          
    };
    DWORD               dwBackBufferCount;      
    {
        DWORD           dwMipMapCount;          
        DWORD           dwZBufferBitDepth;      
        DWORD           dwRefreshRate;          
    };
    DWORD               dwAlphaBitDepth;       
    DWORD               dwReserved;             
    LPVOID              lpSurface;             
    DDCOLORKEY          ddckCKDestOverlay;      
    DDCOLORKEY          ddckCKDestBlt;          
    DDCOLORKEY          ddckCKSrcOverlay;       
    DDCOLORKEY          ddckCKSrcBlt;          
    DDPIXELFORMAT       ddpfPixelFormat;
    DDSCAPS             ddsCaps; 
"    
)
global DDSCAPS2 := "DWORD dwCaps, DWORD dwCaps2, DWORD dwCaps3, {DWORD dwCaps4, DWORD dwVolumeDepth}"
global DDSURFACEDESC2 :=
(
" 
    DWORD               dwSize;
    DWORD               dwFlags;
    DWORD               dwHeight;
    DWORD               dwWidth;
        {
        LONG            lPitch;
        DWORD           dwLinearSize;
    };
        {
        DWORD           dwBackBufferCount;
        DWORD           dwDepth;
    };
        {
        DWORD           dwMipMapCount;
        DWORD           dwRefreshRate;
        DWORD           dwSrcVBHandle;
    };
    DWORD               dwAlphaBitDepth;
    DWORD               dwReserved;
    LPDWORD              lpSurface;
        {
        DDCOLORKEY      ddckCKDestOverlay;
        DWORD           dwEmptyFaceColor;
    };
    DDCOLORKEY          ddckCKDestBlt;
    DDCOLORKEY          ddckCKSrcOverlay;
    DDCOLORKEY          ddckCKSrcBlt;
        {
        DDPIXELFORMAT   ddpfPixelFormat;
        DWORD           dwFVF;
    };
    DDSCAPS2            ddsCaps;
    DWORD               dwTextureStage;
"
)
DDSURFACEDESC := Struct(DDSURFACEDESC)
DDSCAPS := Struct(DDSCAPS)
DDSURFACEDESC2 := Struct(DDSURFACEDESC2)
DDPIXELFORMAT := Struct(DDPIXELFORMAT)
global DDBLTFX :=
(
"
  DWORD      dwSize;
  DWORD      dwDDFX;
  DWORD      dwROP;
  DWORD      dwDDROP;
  DWORD      dwRotationAngle;
  DWORD      dwZBufferOpCode;
  DWORD      dwZBufferLow;
  DWORD      dwZBufferHigh;
  DWORD      dwZBufferBaseDest;
  DWORD      dwZDestConstBitDepth;
  {
    DWORD               dwZDestConst;
    LPDWORD lpDDSZBufferDest;
  };
  DWORD      dwZSrcConstBitDepth;
  {
    DWORD               dwZSrcConst;
    LPDWORD  lpDDSZBufferSrc;
  }
  DWORD      dwAlphaEdgeBlendBitDepth;
  DWORD      dwAlphaEdgeBlend;
  DWORD      dwReserved;
  DWORD      dwAlphaDestConstBitDepth;
  {
    DWORD               dwAlphaDestConst;
    LPDWORD  lpDDSAlphaDest;
  };
  DWORD      dwAlphaSrcConstBitDepth;
  {
    DWORD               dwAlphaSrcConst;
    LPDWORD  lpDDSAlphaSrc;
  };
  {
    DWORD               dwFillColor;
    DWORD               dwFillDepth;
    DWORD               dwFillPixel;
    LPDWORD  lpDDSPattern;
  };
  DDCOLORKEY ddckDestColorkey;
  DDCOLORKEY ddckSrcColorkey;
"
)
DDBLTFX := Struct(DDBLTFX)
global RECT := Struct("LONG left; LONG top; LONG right; LONG bottom;")
global hRECT := Struct("LONG left; LONG top; LONG right; LONG bottom;")
global _RECT := Struct("LONG left; LONG top; LONG right; LONG bottom;")
global POINT := Struct("LONG x; LONG y;")
global DDBLTBATCH := Struct("ptr lprDest; ptr lpDDSSrc; ptr lprSrc; DWORD dwFlags; ptr lpDDBltFx;")
global DDRAWI_DIRECTDRAW_LCL :=
(
"
DWORD lpDDMore; 
ptr lpGbl; 
DWORD dwUnused0; 
DWORD dwLocalFlags; 
DWORD dwLocalRefCnt; 
DWORD dwProcessId; 
ptr pUnkOuter; 
DWORD dwObsolete1; 
ULONG_PTR hWnd; 
ULONG_PTR hDC; 
DWORD dwErrorMode; 
ptr lpPrimary; 
ptr lpCB; 
DWORD dwPreferredMode; 
HINSTANCE hD3DInstance; 
ptr pD3DIUnknown; 
ptr lpDDCB; 
DWORD hDDVxd; 
DWORD dwAppHackFlags; 
ptr hFocusWnd; 
DWORD dwHotTracking; 
DWORD dwIMEState; 
ptr hWndPopup; 
ptr hDD; 
ptr hGammaCalibrator; 
ptr lpGammaCalibrator; 
"
)
DDRAWI_DIRECTDRAW_LCL := struct(DDRAWI_DIRECTDRAW_LCL)
global DDRAWI_DIRECTDRAW_INT := struct("ptr lpVtbl; ptr lpLcl; ptr lpLink; DWORD dwIntRefCnt;")
Global d3d := {}
d3d.IID_IDirect3D := "{3BBA0080-2421-11CF-A31A-00AA00B93356}"
d3d.IID_IDirect3D2 := "{6aae1ec1-662a-11d0-889d-00aa00bbb76a}"
d3d.IID_IDirect3D3 := "{bb223240-e72b-11d0-a9b4-00aa00c0993e}"
d3d.IID_IDirect3D7 := "{f5049e77-4861-11d2-a407-00a0c90629a8}"
d3d.IID_IDirect3DRampDevice := "{F2086B20-259F-11CF-A31A-00AA00B93356}"
d3d.IID_IDirect3DRGBDevice := "{A4665C60-2673-11CF-A31A-00AA00B93356}"
d3d.IID_IDirect3DHALDevice := "{84E63dE0-46AA-11CF-816F-0000C020156E}"
d3d.IID_IDirect3DMMXDevice := "{881949a1-d6f3-11d0-89ab-00a0c9054129}"
d3d.IID_IDirect3DRefDevice := "{50936643-13e9-11d1-89aa-00a0c9054129}"
d3d.IID_IDirect3DNullDevice := "{8767df22-bacc-11d1-8969-00a0c90629a8}"
d3d.IID_IDirect3DTnLHalDevice := "{f5049e78-4861-11d2-a407-00a0c90629a8}"
d3d.IID_IDirect3DDevice := "{64108800-957d-0X11d0-89ab-00a0c9054129}"
d3d.IID_IDirect3DDevice2 := "{93281501-8cf8-11d0-89ab-00a0c9054129}"
d3d.IID_IDirect3DDevice3 := "{b0ab3b60-33d7-11d1-a981-00c04fd7b174}"
d3d.IID_IDirect3DDevice7 := "{f5049e79-4861-11d2-a407-00a0c90629a8}"
d3d.IID_IDirect3DTexture := "{2CDCD9E0-25A0-11CF-A31A-00AA00B93356}"
d3d.IID_IDirect3DTexture2 := "{93281502-8cf8-11d0-89ab-00a0c9054129}"
d3d.IID_IDirect3DLight := "{4417C142-33AD-11CF-816F-0000C020156E}"
d3d.IID_IDirect3DMaterial := "{4417C144-33AD-11CF-816F-0000C020156E}"
d3d.IID_IDirect3DMaterial2 := "{93281503-8cf8-11d0-89ab-00a0c9054129}"
d3d.IID_IDirect3DMaterial3 := "{ca9c46f4-d3c5-11d1-b75a-00600852b312}"
d3d.IID_IDirect3DExecuteBuffer := "{4417C145-33AD-11CF-816F-0000C020156E}"
d3d.IID_IDirect3DViewport := "{4417C146-33AD-11CF-816F-0000C020156E}"
d3d.IID_IDirect3DViewport2 := "{93281500-8cf8-11d0-89ab-00a0c9054129}"
d3d.IID_IDirect3DViewport3 := "{b0ab3b61-33d7-11d1-a981-00c04fd7b174}"
d3d.IID_IDirect3DVertexBuffer := "{7a503555-4a83-11d1-a5db-00a0c90367f8}"
d3d.IID_IDirect3DVertexBuffer7 := "{f5049e7d-4861-11d2-a407-00a0c90629a8}"
d3d.IDirect3D := {}
d3d.IDirect3D.name := "IDirect3D"
d3d.IDirect3D.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(Initialize)(THIS_ REFCLSID) PURE;
    STDMETHOD(EnumDevices)(THIS_ LPD3DENUMDEVICESCALLBACK,LPVOID) PURE;
    STDMETHOD(CreateLight)(THIS_ LPDIRECT3DLIGHT*,IUnknown*) PURE;
    STDMETHOD(CreateMaterial)(THIS_ LPDIRECT3DMATERIAL*,IUnknown*) PURE;
    STDMETHOD(CreateViewport)(THIS_ LPDIRECT3DVIEWPORT*,IUnknown*) PURE;
    STDMETHOD(FindDevice)(THIS_ LPD3DFINDDEVICESEARCH,LPD3DFINDDEVICERESULT) PURE;
"
)
d3d.IDirect3D2 := {}
d3d.IDirect3D2.name := "IDirect3D2"
d3d.IDirect3D2.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(EnumDevices)(THIS_ LPD3DENUMDEVICESCALLBACK,LPVOID) PURE;
    STDMETHOD(CreateLight)(THIS_ LPDIRECT3DLIGHT*,IUnknown*) PURE;
    STDMETHOD(CreateMaterial)(THIS_ LPDIRECT3DMATERIAL2*,IUnknown*) PURE;
    STDMETHOD(CreateViewport)(THIS_ LPDIRECT3DVIEWPORT2*,IUnknown*) PURE;
    STDMETHOD(FindDevice)(THIS_ LPD3DFINDDEVICESEARCH,LPD3DFINDDEVICERESULT) PURE;
    STDMETHOD(CreateDevice)(THIS_ REFCLSID,LPDIRECTDRAWSURFACE,LPDIRECT3DDEVICE2*) PURE;
"
)
d3d.IDirect3D3 := {}
d3d.IDirect3D3.name := "IDirect3D3"
d3d.IDirect3D3.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(EnumDevices)(THIS_ LPD3DENUMDEVICESCALLBACK,LPVOID) PURE;
    STDMETHOD(CreateLight)(THIS_ LPDIRECT3DLIGHT*,LPUNKNOWN) PURE;
    STDMETHOD(CreateMaterial)(THIS_ LPDIRECT3DMATERIAL3*,LPUNKNOWN) PURE;
    STDMETHOD(CreateViewport)(THIS_ LPDIRECT3DVIEWPORT3*,LPUNKNOWN) PURE;
    STDMETHOD(FindDevice)(THIS_ LPD3DFINDDEVICESEARCH,LPD3DFINDDEVICERESULT) PURE;
    STDMETHOD(CreateDevice)(THIS_ REFCLSID,LPDIRECTDRAWSURFACE4,LPDIRECT3DDEVICE3*,LPUNKNOWN) PURE;
    STDMETHOD(CreateVertexBuffer)(THIS_ LPD3DVERTEXBUFFERDESC,LPDIRECT3DVERTEXBUFFER*,DWORD,LPUNKNOWN) PURE;
    STDMETHOD(EnumZBufferFormats)(THIS_ REFCLSID,LPD3DENUMPIXELFORMATSCALLBACK,LPVOID) PURE;
    STDMETHOD(EvictManagedTextures)(THIS) PURE;
"
)
d3d.IDirect3D7 := {}
d3d.IDirect3D7.name := "IDirect3D7"
d3d.IDirect3D7.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(EnumDevices)(THIS_ LPD3DENUMDEVICESCALLBACK7,LPVOID) PURE;
    STDMETHOD(CreateDevice)(THIS_ REFCLSID,LPDIRECTDRAWSURFACE7,LPDIRECT3DDEVICE7*) PURE;
    STDMETHOD(CreateVertexBuffer)(THIS_ LPD3DVERTEXBUFFERDESC,LPDIRECT3DVERTEXBUFFER7*,DWORD) PURE;
    STDMETHOD(EnumZBufferFormats)(THIS_ REFCLSID,LPD3DENUMPIXELFORMATSCALLBACK,LPVOID) PURE;
    STDMETHOD(EvictManagedTextures)(THIS) PURE;
"
)
d3d.IDirect3DDevice := {}
d3d.IDirect3DDevice.name := "IDirect3DDevice"
d3d.IDirect3DDevice.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECT3D,LPGUID,LPD3DDEVICEDESC) PURE;
    STDMETHOD(GetCaps)(THIS_ LPD3DDEVICEDESC,LPD3DDEVICEDESC) PURE;
    STDMETHOD(SwapTextureHandles)(THIS_ LPDIRECT3DTEXTURE,LPDIRECT3DTEXTURE) PURE;
    STDMETHOD(CreateExecuteBuffer)(THIS_ LPD3DEXECUTEBUFFERDESC,LPDIRECT3DEXECUTEBUFFER*,IUnknown*) PURE;
    STDMETHOD(GetStats)(THIS_ LPD3DSTATS) PURE;
    STDMETHOD(Execute)(THIS_ LPDIRECT3DEXECUTEBUFFER,LPDIRECT3DVIEWPORT,DWORD) PURE;
    STDMETHOD(AddViewport)(THIS_ LPDIRECT3DVIEWPORT) PURE;
    STDMETHOD(DeleteViewport)(THIS_ LPDIRECT3DVIEWPORT) PURE;
    STDMETHOD(NextViewport)(THIS_ LPDIRECT3DVIEWPORT,LPDIRECT3DVIEWPORT*,DWORD) PURE;
    STDMETHOD(Pick)(THIS_ LPDIRECT3DEXECUTEBUFFER,LPDIRECT3DVIEWPORT,DWORD,LPD3DRECT) PURE;
    STDMETHOD(GetPickRecords)(THIS_ LPDWORD,LPD3DPICKRECORD) PURE;
    STDMETHOD(EnumTextureFormats)(THIS_ LPD3DENUMTEXTUREFORMATSCALLBACK,LPVOID) PURE;
    STDMETHOD(CreateMatrix)(THIS_ LPD3DMATRIXHANDLE) PURE;
    STDMETHOD(SetMatrix)(THIS_ D3DMATRIXHANDLE,const LPD3DMATRIX) PURE;
    STDMETHOD(GetMatrix)(THIS_ D3DMATRIXHANDLE,LPD3DMATRIX) PURE;
    STDMETHOD(DeleteMatrix)(THIS_ D3DMATRIXHANDLE) PURE;
    STDMETHOD(BeginScene)(THIS) PURE;
    STDMETHOD(EndScene)(THIS) PURE;
    STDMETHOD(GetDirect3D)(THIS_ LPDIRECT3D*) PURE;
"
)
d3d.IDirect3DDevice2 := {}
d3d.IDirect3DDevice2.name := "IDirect3DDevice2"
d3d.IDirect3DDevice2.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetCaps)(THIS_ LPD3DDEVICEDESC,LPD3DDEVICEDESC) PURE;
    STDMETHOD(SwapTextureHandles)(THIS_ LPDIRECT3DTEXTURE2,LPDIRECT3DTEXTURE2) PURE;
    STDMETHOD(GetStats)(THIS_ LPD3DSTATS) PURE;
    STDMETHOD(AddViewport)(THIS_ LPDIRECT3DVIEWPORT2) PURE;
    STDMETHOD(DeleteViewport)(THIS_ LPDIRECT3DVIEWPORT2) PURE;
    STDMETHOD(NextViewport)(THIS_ LPDIRECT3DVIEWPORT2,LPDIRECT3DVIEWPORT2*,DWORD) PURE;
    STDMETHOD(EnumTextureFormats)(THIS_ LPD3DENUMTEXTUREFORMATSCALLBACK,LPVOID) PURE;
    STDMETHOD(BeginScene)(THIS) PURE;
    STDMETHOD(EndScene)(THIS) PURE;
    STDMETHOD(GetDirect3D)(THIS_ LPDIRECT3D2*) PURE;
    STDMETHOD(SetCurrentViewport)(THIS_ LPDIRECT3DVIEWPORT2) PURE;
    STDMETHOD(GetCurrentViewport)(THIS_ LPDIRECT3DVIEWPORT2 *) PURE;
    STDMETHOD(SetRenderTarget)(THIS_ LPDIRECTDRAWSURFACE,DWORD) PURE;
    STDMETHOD(GetRenderTarget)(THIS_ LPDIRECTDRAWSURFACE *) PURE;
    STDMETHOD(Begin)(THIS_ D3DPRIMITIVETYPE,D3DVERTEXTYPE,DWORD) PURE;
    STDMETHOD(BeginIndexed)(THIS_ D3DPRIMITIVETYPE,D3DVERTEXTYPE,LPVOID,DWORD,DWORD) PURE;
    STDMETHOD(Vertex)(THIS_ LPVOID) PURE;
    STDMETHOD(Index)(THIS_ WORD) PURE;
    STDMETHOD(End)(THIS_ DWORD) PURE;
    STDMETHOD(GetRenderState)(THIS_ D3DRENDERSTATETYPE,LPDWORD) PURE;
    STDMETHOD(SetRenderState)(THIS_ D3DRENDERSTATETYPE,DWORD) PURE;
    STDMETHOD(GetLightState)(THIS_ D3DLIGHTSTATETYPE,LPDWORD) PURE;
    STDMETHOD(SetLightState)(THIS_ D3DLIGHTSTATETYPE,DWORD) PURE;
    STDMETHOD(SetTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(GetTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(MultiplyTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(DrawPrimitive)(THIS_ D3DPRIMITIVETYPE,D3DVERTEXTYPE,LPVOID,DWORD,DWORD) PURE;
    STDMETHOD(DrawIndexedPrimitive)(THIS_ D3DPRIMITIVETYPE,D3DVERTEXTYPE,LPVOID,DWORD,LPWORD,DWORD,DWORD) PURE;
    STDMETHOD(SetClipStatus)(THIS_ LPD3DCLIPSTATUS) PURE;
    STDMETHOD(GetClipStatus)(THIS_ LPD3DCLIPSTATUS) PURE;
"
)
d3d.IDirect3DDevice3 := {}
d3d.IDirect3DDevice3.name := "IDirect3DDevice3"
d3d.IDirect3DDevice3.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetCaps)(THIS_ LPD3DDEVICEDESC,LPD3DDEVICEDESC) PURE;
    STDMETHOD(GetStats)(THIS_ LPD3DSTATS) PURE;
    STDMETHOD(AddViewport)(THIS_ LPDIRECT3DVIEWPORT3) PURE;
    STDMETHOD(DeleteViewport)(THIS_ LPDIRECT3DVIEWPORT3) PURE;
    STDMETHOD(NextViewport)(THIS_ LPDIRECT3DVIEWPORT3,LPDIRECT3DVIEWPORT3*,DWORD) PURE;
    STDMETHOD(EnumTextureFormats)(THIS_ LPD3DENUMPIXELFORMATSCALLBACK,LPVOID) PURE;
    STDMETHOD(BeginScene)(THIS) PURE;
    STDMETHOD(EndScene)(THIS) PURE;
    STDMETHOD(GetDirect3D)(THIS_ LPDIRECT3D3*) PURE;
    STDMETHOD(SetCurrentViewport)(THIS_ LPDIRECT3DVIEWPORT3) PURE;
    STDMETHOD(GetCurrentViewport)(THIS_ LPDIRECT3DVIEWPORT3 *) PURE;
    STDMETHOD(SetRenderTarget)(THIS_ LPDIRECTDRAWSURFACE4,DWORD) PURE;
    STDMETHOD(GetRenderTarget)(THIS_ LPDIRECTDRAWSURFACE4 *) PURE;
    STDMETHOD(Begin)(THIS_ D3DPRIMITIVETYPE,DWORD,DWORD) PURE;
    STDMETHOD(BeginIndexed)(THIS_ D3DPRIMITIVETYPE,DWORD,LPVOID,DWORD,DWORD) PURE;
    STDMETHOD(Vertex)(THIS_ LPVOID) PURE;
    STDMETHOD(Index)(THIS_ WORD) PURE;
    STDMETHOD(End)(THIS_ DWORD) PURE;
    STDMETHOD(GetRenderState)(THIS_ D3DRENDERSTATETYPE,LPDWORD) PURE;
    STDMETHOD(SetRenderState)(THIS_ D3DRENDERSTATETYPE,DWORD) PURE;
    STDMETHOD(GetLightState)(THIS_ D3DLIGHTSTATETYPE,LPDWORD) PURE;
    STDMETHOD(SetLightState)(THIS_ D3DLIGHTSTATETYPE,DWORD) PURE;
    STDMETHOD(SetTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(GetTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(MultiplyTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(DrawPrimitive)(THIS_ D3DPRIMITIVETYPE,DWORD,LPVOID,DWORD,DWORD) PURE;
    STDMETHOD(DrawIndexedPrimitive)(THIS_ D3DPRIMITIVETYPE,DWORD,LPVOID,DWORD,LPWORD,DWORD,DWORD) PURE;
    STDMETHOD(SetClipStatus)(THIS_ LPD3DCLIPSTATUS) PURE;
    STDMETHOD(GetClipStatus)(THIS_ LPD3DCLIPSTATUS) PURE;
    STDMETHOD(DrawPrimitiveStrided)(THIS_ D3DPRIMITIVETYPE,DWORD,LPD3DDRAWPRIMITIVESTRIDEDDATA,DWORD,DWORD) PURE;
    STDMETHOD(DrawIndexedPrimitiveStrided)(THIS_ D3DPRIMITIVETYPE,DWORD,LPD3DDRAWPRIMITIVESTRIDEDDATA,DWORD,LPWORD,DWORD,DWORD) PURE;
    STDMETHOD(DrawPrimitiveVB)(THIS_ D3DPRIMITIVETYPE,LPDIRECT3DVERTEXBUFFER,DWORD,DWORD,DWORD) PURE;
    STDMETHOD(DrawIndexedPrimitiveVB)(THIS_ D3DPRIMITIVETYPE,LPDIRECT3DVERTEXBUFFER,LPWORD,DWORD,DWORD) PURE;
    STDMETHOD(ComputeSphereVisibility)(THIS_ LPD3DVECTOR,LPD3DVALUE,DWORD,DWORD,LPDWORD) PURE;
    STDMETHOD(GetTexture)(THIS_ DWORD,LPDIRECT3DTEXTURE2 *) PURE;
    STDMETHOD(SetTexture)(THIS_ DWORD,LPDIRECT3DTEXTURE2) PURE;
    STDMETHOD(GetTextureStageState)(THIS_ DWORD,D3DTEXTURESTAGESTATETYPE,LPDWORD) PURE;
    STDMETHOD(SetTextureStageState)(THIS_ DWORD,D3DTEXTURESTAGESTATETYPE,DWORD) PURE;
    STDMETHOD(ValidateDevice)(THIS_ LPDWORD) PURE;
"
)
d3d.IDirect3DDevice7 := {}
d3d.IDirect3DDevice7.name := "IDirect3DDevice7"
d3d.IDirect3DDevice7.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetCaps)(THIS_ LPD3DDEVICEDESC7) PURE;
    STDMETHOD(EnumTextureFormats)(THIS_ LPD3DENUMPIXELFORMATSCALLBACK,LPVOID) PURE;
    STDMETHOD(BeginScene)(THIS) PURE;
    STDMETHOD(EndScene)(THIS) PURE;
    STDMETHOD(GetDirect3D)(THIS_ LPDIRECT3D7*) PURE;
    STDMETHOD(SetRenderTarget)(THIS_ LPDIRECTDRAWSURFACE7,DWORD) PURE;
    STDMETHOD(GetRenderTarget)(THIS_ LPDIRECTDRAWSURFACE7 *) PURE;
    STDMETHOD(Clear)(THIS_ DWORD,LPD3DRECT,DWORD,D3DCOLOR,D3DVALUE,DWORD) PURE;
    STDMETHOD(SetTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(GetTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(SetViewport)(THIS_ LPD3DVIEWPORT7) PURE;
    STDMETHOD(MultiplyTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(GetViewport)(THIS_ LPD3DVIEWPORT7) PURE;
    STDMETHOD(SetMaterial)(THIS_ LPD3DMATERIAL7) PURE;
    STDMETHOD(GetMaterial)(THIS_ LPD3DMATERIAL7) PURE;
    STDMETHOD(SetLight)(THIS_ DWORD,LPD3DLIGHT7) PURE;
    STDMETHOD(GetLight)(THIS_ DWORD,LPD3DLIGHT7) PURE;
    STDMETHOD(SetRenderState)(THIS_ D3DRENDERSTATETYPE,DWORD) PURE;
    STDMETHOD(GetRenderState)(THIS_ D3DRENDERSTATETYPE,LPDWORD) PURE;
    STDMETHOD(BeginStateBlock)(THIS) PURE;
    STDMETHOD(EndStateBlock)(THIS_ LPDWORD) PURE;
    STDMETHOD(PreLoad)(THIS_ LPDIRECTDRAWSURFACE7) PURE;
    STDMETHOD(DrawPrimitive)(THIS_ D3DPRIMITIVETYPE,DWORD,LPVOID,DWORD,DWORD) PURE;
    STDMETHOD(DrawIndexedPrimitive)(THIS_ D3DPRIMITIVETYPE,DWORD,LPVOID,DWORD,LPWORD,DWORD,DWORD) PURE;
    STDMETHOD(SetClipStatus)(THIS_ LPD3DCLIPSTATUS) PURE;
    STDMETHOD(GetClipStatus)(THIS_ LPD3DCLIPSTATUS) PURE;
    STDMETHOD(DrawPrimitiveStrided)(THIS_ D3DPRIMITIVETYPE,DWORD,LPD3DDRAWPRIMITIVESTRIDEDDATA,DWORD,DWORD) PURE;
    STDMETHOD(DrawIndexedPrimitiveStrided)(THIS_ D3DPRIMITIVETYPE,DWORD,LPD3DDRAWPRIMITIVESTRIDEDDATA,DWORD,LPWORD,DWORD,DWORD) PURE;
    STDMETHOD(DrawPrimitiveVB)(THIS_ D3DPRIMITIVETYPE,LPDIRECT3DVERTEXBUFFER7,DWORD,DWORD,DWORD) PURE;
    STDMETHOD(DrawIndexedPrimitiveVB)(THIS_ D3DPRIMITIVETYPE,LPDIRECT3DVERTEXBUFFER7,DWORD,DWORD,LPWORD,DWORD,DWORD) PURE;
    STDMETHOD(ComputeSphereVisibility)(THIS_ LPD3DVECTOR,LPD3DVALUE,DWORD,DWORD,LPDWORD) PURE;
    STDMETHOD(GetTexture)(THIS_ DWORD,LPDIRECTDRAWSURFACE7 *) PURE;
    STDMETHOD(SetTexture)(THIS_ DWORD,LPDIRECTDRAWSURFACE7) PURE;
    STDMETHOD(GetTextureStageState)(THIS_ DWORD,D3DTEXTURESTAGESTATETYPE,LPDWORD) PURE;
    STDMETHOD(SetTextureStageState)(THIS_ DWORD,D3DTEXTURESTAGESTATETYPE,DWORD) PURE;
    STDMETHOD(ValidateDevice)(THIS_ LPDWORD) PURE;
    STDMETHOD(ApplyStateBlock)(THIS_ DWORD) PURE;
    STDMETHOD(CaptureStateBlock)(THIS_ DWORD) PURE;
    STDMETHOD(DeleteStateBlock)(THIS_ DWORD) PURE;
    STDMETHOD(CreateStateBlock)(THIS_ D3DSTATEBLOCKTYPE,LPDWORD) PURE;
    STDMETHOD(Load)(THIS_ LPDIRECTDRAWSURFACE7,LPPOINT,LPDIRECTDRAWSURFACE7,LPRECT,DWORD) PURE;
    STDMETHOD(LightEnable)(THIS_ DWORD,BOOL) PURE;
    STDMETHOD(GetLightEnable)(THIS_ DWORD,BOOL*) PURE;
    STDMETHOD(SetClipPlane)(THIS_ DWORD,D3DVALUE*) PURE;
    STDMETHOD(GetClipPlane)(THIS_ DWORD,D3DVALUE*) PURE;
    STDMETHOD(GetInfo)(THIS_ DWORD,LPVOID,DWORD) PURE;
"
)
d3d.IDirect3DExecuteBuffer := {}
d3d.IDirect3DExecuteBuffer.name := "IDirect3DExecuteBuffer"
d3d.IDirect3DExecuteBuffer.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECT3DDEVICE,LPD3DEXECUTEBUFFERDESC) PURE;
    STDMETHOD(Lock)(THIS_ LPD3DEXECUTEBUFFERDESC) PURE;
    STDMETHOD(Unlock)(THIS) PURE;
    STDMETHOD(SetExecuteData)(THIS_ LPD3DEXECUTEDATA) PURE;
    STDMETHOD(GetExecuteData)(THIS_ LPD3DEXECUTEDATA) PURE;
    STDMETHOD(Validate)(THIS_ LPDWORD,LPD3DVALIDATECALLBACK,LPVOID,DWORD) PURE;
    STDMETHOD(Optimize)(THIS_ DWORD) PURE;
"
)
d3d.IDirect3DLight := {}
d3d.IDirect3DLight.name := "IDirect3DLight"
d3d.IDirect3DLight.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECT3D) PURE;
    STDMETHOD(SetLight)(THIS_ LPD3DLIGHT) PURE;
    STDMETHOD(GetLight)(THIS_ LPD3DLIGHT) PURE;
"
)
d3d.IDirect3DMaterial := {}
d3d.IDirect3DMaterial.name := "IDirect3DMaterial"
d3d.IDirect3DMaterial.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECT3D) PURE;
    STDMETHOD(SetMaterial)(THIS_ LPD3DMATERIAL) PURE;
    STDMETHOD(GetMaterial)(THIS_ LPD3DMATERIAL) PURE;
    STDMETHOD(GetHandle)(THIS_ LPDIRECT3DDEVICE,LPD3DMATERIALHANDLE) PURE;
    STDMETHOD(Reserve)(THIS) PURE;
    STDMETHOD(Unreserve)(THIS) PURE;
"
)
d3d.IDirect3DMaterial2 := {}
d3d.IDirect3DMaterial2.name := "IDirect3DMaterial2"
d3d.IDirect3DMaterial2.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(SetMaterial)(THIS_ LPD3DMATERIAL) PURE;
    STDMETHOD(GetMaterial)(THIS_ LPD3DMATERIAL) PURE;
    STDMETHOD(GetHandle)(THIS_ LPDIRECT3DDEVICE2,LPD3DMATERIALHANDLE) PURE;
"
)
d3d.IDirect3DMaterial3 := {}
d3d.IDirect3DMaterial3.name := "IDirect3DMaterial3"
d3d.IDirect3DMaterial3.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(SetMaterial)(THIS_ LPD3DMATERIAL) PURE;
    STDMETHOD(GetMaterial)(THIS_ LPD3DMATERIAL) PURE;
    STDMETHOD(GetHandle)(THIS_ LPDIRECT3DDEVICE3,LPD3DMATERIALHANDLE) PURE;
"
)
d3d.IDirect3DTexture := {}
d3d.IDirect3DTexture.name := "IDirect3DTexture"
d3d.IDirect3DTexture.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECT3DDEVICE,LPDIRECTDRAWSURFACE) PURE;
    STDMETHOD(GetHandle)(THIS_ LPDIRECT3DDEVICE,LPD3DTEXTUREHANDLE) PURE;
    STDMETHOD(PaletteChanged)(THIS_ DWORD,DWORD) PURE;
    STDMETHOD(Load)(THIS_ LPDIRECT3DTEXTURE) PURE;
    STDMETHOD(Unload)(THIS) PURE;
"
)
d3d.IDirect3DTexture2 := {}
d3d.IDirect3DTexture2.name := "IDirect3DTexture2"
d3d.IDirect3DTexture2.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetHandle)(THIS_ LPDIRECT3DDEVICE2,LPD3DTEXTUREHANDLE) PURE;
    STDMETHOD(PaletteChanged)(THIS_ DWORD,DWORD) PURE;
    STDMETHOD(Load)(THIS_ LPDIRECT3DTEXTURE2) PURE;
"
)
d3d.IDirect3DViewport := {}
d3d.IDirect3DViewport.name := "IDirect3DViewport"
d3d.IDirect3DViewport.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECT3D) PURE;
    STDMETHOD(GetViewport)(THIS_ LPD3DVIEWPORT) PURE;
    STDMETHOD(SetViewport)(THIS_ LPD3DVIEWPORT) PURE;
    STDMETHOD(TransformVertices)(THIS_ DWORD,LPD3DTRANSFORMDATA,DWORD,LPDWORD) PURE;
    STDMETHOD(LightElements)(THIS_ DWORD,LPD3DLIGHTDATA) PURE;
    STDMETHOD(SetBackground)(THIS_ D3DMATERIALHANDLE) PURE;
    STDMETHOD(GetBackground)(THIS_ LPD3DMATERIALHANDLE,LPBOOL) PURE;
    STDMETHOD(SetBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE) PURE;
    STDMETHOD(GetBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE*,LPBOOL) PURE;
    STDMETHOD(Clear)(THIS_ DWORD,LPD3DRECT,DWORD) PURE;
    STDMETHOD(AddLight)(THIS_ LPDIRECT3DLIGHT) PURE;
    STDMETHOD(DeleteLight)(THIS_ LPDIRECT3DLIGHT) PURE;
    STDMETHOD(NextLight)(THIS_ LPDIRECT3DLIGHT,LPDIRECT3DLIGHT*,DWORD) PURE;
"
)
d3d.IDirect3DViewport2 := {}
d3d.IDirect3DViewport2.name := "IDirect3DViewport2"
d3d.IDirect3DViewport2.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECT3D) PURE;
    STDMETHOD(GetViewport)(THIS_ LPD3DVIEWPORT) PURE;
    STDMETHOD(SetViewport)(THIS_ LPD3DVIEWPORT) PURE;
    STDMETHOD(TransformVertices)(THIS_ DWORD,LPD3DTRANSFORMDATA,DWORD,LPDWORD) PURE;
    STDMETHOD(LightElements)(THIS_ DWORD,LPD3DLIGHTDATA) PURE;
    STDMETHOD(SetBackground)(THIS_ D3DMATERIALHANDLE) PURE;
    STDMETHOD(GetBackground)(THIS_ LPD3DMATERIALHANDLE,LPBOOL) PURE;
    STDMETHOD(SetBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE) PURE;
    STDMETHOD(GetBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE*,LPBOOL) PURE;
    STDMETHOD(Clear)(THIS_ DWORD,LPD3DRECT,DWORD) PURE;
    STDMETHOD(AddLight)(THIS_ LPDIRECT3DLIGHT) PURE;
    STDMETHOD(DeleteLight)(THIS_ LPDIRECT3DLIGHT) PURE;
    STDMETHOD(NextLight)(THIS_ LPDIRECT3DLIGHT,LPDIRECT3DLIGHT*,DWORD) PURE;
    STDMETHOD(GetViewport2)(THIS_ LPD3DVIEWPORT2) PURE;
    STDMETHOD(SetViewport2)(THIS_ LPD3DVIEWPORT2) PURE;
"
)
d3d.IDirect3DViewport3 := {}
d3d.IDirect3DViewport3.name := "IDirect3DViewport3"
d3d.IDirect3DViewport3.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(Initialize)(THIS_ LPDIRECT3D) PURE;
    STDMETHOD(GetViewport)(THIS_ LPD3DVIEWPORT) PURE;
    STDMETHOD(SetViewport)(THIS_ LPD3DVIEWPORT) PURE;
    STDMETHOD(TransformVertices)(THIS_ DWORD,LPD3DTRANSFORMDATA,DWORD,LPDWORD) PURE;
    STDMETHOD(LightElements)(THIS_ DWORD,LPD3DLIGHTDATA) PURE;
    STDMETHOD(SetBackground)(THIS_ D3DMATERIALHANDLE) PURE;
    STDMETHOD(GetBackground)(THIS_ LPD3DMATERIALHANDLE,LPBOOL) PURE;
    STDMETHOD(SetBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE) PURE;
    STDMETHOD(GetBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE*,LPBOOL) PURE;
    STDMETHOD(Clear)(THIS_ DWORD,LPD3DRECT,DWORD) PURE;
    STDMETHOD(AddLight)(THIS_ LPDIRECT3DLIGHT) PURE;
    STDMETHOD(DeleteLight)(THIS_ LPDIRECT3DLIGHT) PURE;
    STDMETHOD(NextLight)(THIS_ LPDIRECT3DLIGHT,LPDIRECT3DLIGHT*,DWORD) PURE;
    STDMETHOD(GetViewport2)(THIS_ LPD3DVIEWPORT2) PURE;
    STDMETHOD(SetViewport2)(THIS_ LPD3DVIEWPORT2) PURE;
    STDMETHOD(SetBackgroundDepth2)(THIS_ LPDIRECTDRAWSURFACE4) PURE;
    STDMETHOD(GetBackgroundDepth2)(THIS_ LPDIRECTDRAWSURFACE4*,LPBOOL) PURE;
    STDMETHOD(Clear2)(THIS_ DWORD,LPD3DRECT,DWORD,D3DCOLOR,D3DVALUE,DWORD) PURE;
"
)
d3d.IDirect3DVertexBuffer := {}
d3d.IDirect3DVertexBuffer.name := "IDirect3DVertexBuffer"
d3d.IDirect3DVertexBuffer.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(Lock)(THIS_ DWORD,LPVOID*,LPDWORD) PURE;
    STDMETHOD(Unlock)(THIS) PURE;
    STDMETHOD(ProcessVertices)(THIS_ DWORD,DWORD,DWORD,LPDIRECT3DVERTEXBUFFER,DWORD,LPDIRECT3DDEVICE3,DWORD) PURE;
    STDMETHOD(GetVertexBufferDesc)(THIS_ LPD3DVERTEXBUFFERDESC) PURE;
    STDMETHOD(Optimize)(THIS_ LPDIRECT3DDEVICE3,DWORD) PURE;
"
)
d3d.IDirect3DVertexBuffer7 := {}
d3d.IDirect3DVertexBuffer7.name := "IDirect3DVertexBuffer7"
d3d.IDirect3DVertexBuffer7.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(Lock)(THIS_ DWORD,LPVOID*,LPDWORD) PURE;
    STDMETHOD(Unlock)(THIS) PURE;
    STDMETHOD(ProcessVertices)(THIS_ DWORD,DWORD,DWORD,LPDIRECT3DVERTEXBUFFER7,DWORD,LPDIRECT3DDEVICE7,DWORD) PURE;
    STDMETHOD(GetVertexBufferDesc)(THIS_ LPD3DVERTEXBUFFERDESC) PURE;
    STDMETHOD(Optimize)(THIS_ LPDIRECT3DDEVICE7,DWORD) PURE;
    STDMETHOD(ProcessVerticesStrided)(THIS_ DWORD,DWORD,DWORD,LPD3DDRAWPRIMITIVESTRIDEDDATA,DWORD,LPDIRECT3DDEVICE7,DWORD) PURE;
"
)
Global D3DDP_DONOTCLIP := 0x00000004
Global D3DDP_DONOTLIGHT := 0x00000010
Global D3DDP_DONOTUPDATEEXTENTS := 0x00000008
Global D3DDP_OUTOFORDER := 0x00000002
Global D3DDP_WAIT := 0x00000001
Global D3DNEXT_HEAD := 0x00000002
Global D3DNEXT_NEXT := 0x00000001
Global D3DNEXT_TAIL := 0x00000004
Global DIRECT3D_VERSION := 1792
d3d.err := {}
d3d.err[2289435324 . ""] := "D3DERR_BADMAJORVERSION"
d3d.err[2289435325 . ""] := "D3DERR_BADMINORVERSION"
d3d.err[2289436674 . ""] := "D3DERR_COLORKEYATTACHED"
d3d.err[2289436705 . ""] := "D3DERR_CONFLICTINGRENDERSTATE"
d3d.err[2289436702 . ""] := "D3DERR_CONFLICTINGTEXTUREFILTER"
d3d.err[2289436710 . ""] := "D3DERR_CONFLICTINGTEXTUREPALETTE"
d3d.err[2289435331 . ""] := "D3DERR_DEVICEAGGREGATED"
d3d.err[2289435341 . ""] := "D3DERR_EXECUTE_CLIPPED_FAILED"
d3d.err[2289435334 . ""] := "D3DERR_EXECUTE_CREATE_FAILED"
d3d.err[2289435335 . ""] := "D3DERR_EXECUTE_DESTROY_FAILED"
d3d.err[2289435340 . ""] := "D3DERR_EXECUTE_FAILED"
d3d.err[2289435336 . ""] := "D3DERR_EXECUTE_LOCK_FAILED"
d3d.err[2289435338 . ""] := "D3DERR_EXECUTE_LOCKED"
d3d.err[2289435339 . ""] := "D3DERR_EXECUTE_NOT_LOCKED"
d3d.err[2289435337 . ""] := "D3DERR_EXECUTE_UNLOCK_FAILED"
d3d.err[2289435394 . ""] := "D3DERR_INBEGIN"
d3d.err[2289436725 . ""] := "D3DERR_INBEGINSTATEBLOCK"
d3d.err[2289435330 . ""] := "D3DERR_INITFAILED"
d3d.err[2289435329 . ""] := "D3DERR_INVALID_DEVICE"
d3d.err[2289435359 . ""] := "D3DERR_INVALIDCURRENTVIEWPORT"
d3d.err[2289436708 . ""] := "D3DERR_INVALIDMATRIX"
d3d.err[2289435368 . ""] := "D3DERR_INVALIDPALETTE"
d3d.err[2289435360 . ""] := "D3DERR_INVALIDPRIMITIVETYPE"
d3d.err[2289435363 . ""] := "D3DERR_INVALIDRAMPTEXTURE"
d3d.err[2289436724 . ""] := "D3DERR_INVALIDSTATEBLOCK"
d3d.err[2289436672 . ""] := "D3DERR_INVALIDVERTEXFORMAT"
d3d.err[2289435361 . ""] := "D3DERR_INVALIDVERTEXTYPE"
d3d.err[2289435374 . ""] := "D3DERR_LIGHT_SET_FAILED"
d3d.err[2289435375 . ""] := "D3DERR_LIGHTHASVIEWPORT"
d3d.err[2289435376 . ""] := "D3DERR_LIGHTNOTINTHISVIEWPORT"
d3d.err[2289435364 . ""] := "D3DERR_MATERIAL_CREATE_FAILED"
d3d.err[2289435365 . ""] := "D3DERR_MATERIAL_DESTROY_FAILED"
d3d.err[2289435367 . ""] := "D3DERR_MATERIAL_GETDATA_FAILED"
d3d.err[2289435366 . ""] := "D3DERR_MATERIAL_SETDATA_FAILED"
d3d.err[2289435354 . ""] := "D3DERR_MATRIX_CREATE_FAILED"
d3d.err[2289435355 . ""] := "D3DERR_MATRIX_DESTROY_FAILED"
d3d.err[2289435357 . ""] := "D3DERR_MATRIX_GETDATA_FAILED"
d3d.err[2289435356 . ""] := "D3DERR_MATRIX_SETDATA_FAILED"
d3d.err[2289435399 . ""] := "D3DERR_NOCURRENTVIEWPORT"
d3d.err[2289435395 . ""] := "D3DERR_NOTINBEGIN"
d3d.err[2289436726 . ""] := "D3DERR_NOTINBEGINSTATEBLOCK"
d3d.err[2289435396 . ""] := "D3DERR_NOVIEWPORTS"
d3d.err[2289435386 . ""] := "D3DERR_SCENE_BEGIN_FAILED"
d3d.err[2289435387 . ""] := "D3DERR_SCENE_END_FAILED"
d3d.err[2289435384 . ""] := "D3DERR_SCENE_IN_SCENE"
d3d.err[2289435385 . ""] := "D3DERR_SCENE_NOT_IN_SCENE"
d3d.err[2289435358 . ""] := "D3DERR_SETVIEWPORTDATA_FAILED"
d3d.err[2289436695 . ""] := "D3DERR_STENCILBUFFER_NOTPRESENT"
d3d.err[2289435371 . ""] := "D3DERR_SURFACENOTINVIDMEM"
d3d.err[2289435362 . ""] := "D3DERR_TEXTURE_BADSIZE"
d3d.err[2289435345 . ""] := "D3DERR_TEXTURE_CREATE_FAILED"
d3d.err[2289435346 . ""] := "D3DERR_TEXTURE_DESTROY_FAILED"
d3d.err[2289435353 . ""] := "D3DERR_TEXTURE_GETSURF_FAILED"
d3d.err[2289435349 . ""] := "D3DERR_TEXTURE_LOAD_FAILED"
d3d.err[2289435347 . ""] := "D3DERR_TEXTURE_LOCK_FAILED"
d3d.err[2289435351 . ""] := "D3DERR_TEXTURE_LOCKED"
d3d.err[2289435344 . ""] := "D3DERR_TEXTURE_NO_SUPPORT"
d3d.err[2289435352 . ""] := "D3DERR_TEXTURE_NOT_LOCKED"
d3d.err[2289435350 . ""] := "D3DERR_TEXTURE_SWAP_FAILED"
d3d.err[2289435348 . ""] := "D3DERR_TEXTURE_UNLOCK_FAILED"
d3d.err[2289436701 . ""] := "D3DERR_TOOMANYOPERATIONS"
d3d.err[2289436707 . ""] := "D3DERR_TOOMANYPRIMITIVES"
d3d.err[2289436709 . ""] := "D3DERR_TOOMANYVERTICES"
d3d.err[2289436700 . ""] := "D3DERR_UNSUPPORTEDALPHAARG"
d3d.err[2289436699 . ""] := "D3DERR_UNSUPPORTEDALPHAOPERATION"
d3d.err[2289436698 . ""] := "D3DERR_UNSUPPORTEDCOLORARG"
d3d.err[2289436697 . ""] := "D3DERR_UNSUPPORTEDCOLOROPERATION"
d3d.err[2289436703 . ""] := "D3DERR_UNSUPPORTEDFACTORVALUE"
d3d.err[2289436706 . ""] := "D3DERR_UNSUPPORTEDTEXTUREFILTER"
d3d.err[2289436685 . ""] := "D3DERR_VBUF_CREATE_FAILED"
d3d.err[2289436686 . ""] := "D3DERR_VERTEXBUFFERLOCKED"
d3d.err[2289436684 . ""] := "D3DERR_VERTEXBUFFEROPTIMIZED"
d3d.err[2289436687 . ""] := "D3DERR_VERTEXBUFFERUNLOCKFAILED"
d3d.err[2289435397 . ""] := "D3DERR_VIEWPORTDATANOTSET"
d3d.err[2289435398 . ""] := "D3DERR_VIEWPORTHASNODEVICE"
d3d.err[2289436696 . ""] := "D3DERR_WRONGTEXTUREFORMAT"
d3d.err[2289435369 . ""] := "D3DERR_ZBUFF_NEEDS_SYSTEMMEMORY"
d3d.err[2289435370 . ""] := "D3DERR_ZBUFF_NEEDS_VIDEOMEMORY"
d3d.err[2289436694 . ""] := "D3DERR_ZBUFFER_NOTPRESENT"
Global D3DERR_BADMAJORVERSION := 2289435324
Global D3DERR_BADMINORVERSION := 2289435325
Global D3DERR_COLORKEYATTACHED := 2289436674
Global D3DERR_CONFLICTINGRENDERSTATE := 2289436705
Global D3DERR_CONFLICTINGTEXTUREFILTER := 2289436702
Global D3DERR_CONFLICTINGTEXTUREPALETTE := 2289436710
Global D3DERR_DEVICEAGGREGATED := 2289435331
Global D3DERR_EXECUTE_CLIPPED_FAILED := 2289435341
Global D3DERR_EXECUTE_CREATE_FAILED := 2289435334
Global D3DERR_EXECUTE_DESTROY_FAILED := 2289435335
Global D3DERR_EXECUTE_FAILED := 2289435340
Global D3DERR_EXECUTE_LOCK_FAILED := 2289435336
Global D3DERR_EXECUTE_LOCKED := 2289435338
Global D3DERR_EXECUTE_NOT_LOCKED := 2289435339
Global D3DERR_EXECUTE_UNLOCK_FAILED := 2289435337
Global D3DERR_INBEGIN := 2289435394
Global D3DERR_INBEGINSTATEBLOCK := 2289436725
Global D3DERR_INITFAILED := 2289435330
Global D3DERR_INVALID_DEVICE := 2289435329
Global D3DERR_INVALIDCURRENTVIEWPORT := 2289435359
Global D3DERR_INVALIDMATRIX := 2289436708
Global D3DERR_INVALIDPALETTE := 2289435368
Global D3DERR_INVALIDPRIMITIVETYPE := 2289435360
Global D3DERR_INVALIDRAMPTEXTURE := 2289435363
Global D3DERR_INVALIDSTATEBLOCK := 2289436724
Global D3DERR_INVALIDVERTEXFORMAT := 2289436672
Global D3DERR_INVALIDVERTEXTYPE := 2289435361
Global D3DERR_LIGHT_SET_FAILED := 2289435374
Global D3DERR_LIGHTHASVIEWPORT := 2289435375
Global D3DERR_LIGHTNOTINTHISVIEWPORT := 2289435376
Global D3DERR_MATERIAL_CREATE_FAILED := 2289435364
Global D3DERR_MATERIAL_DESTROY_FAILED := 2289435365
Global D3DERR_MATERIAL_GETDATA_FAILED := 2289435367
Global D3DERR_MATERIAL_SETDATA_FAILED := 2289435366
Global D3DERR_MATRIX_CREATE_FAILED := 2289435354
Global D3DERR_MATRIX_DESTROY_FAILED := 2289435355
Global D3DERR_MATRIX_GETDATA_FAILED := 2289435357
Global D3DERR_MATRIX_SETDATA_FAILED := 2289435356
Global D3DERR_NOCURRENTVIEWPORT := 2289435399
Global D3DERR_NOTINBEGIN := 2289435395
Global D3DERR_NOTINBEGINSTATEBLOCK := 2289436726
Global D3DERR_NOVIEWPORTS := 2289435396
Global D3DERR_SCENE_BEGIN_FAILED := 2289435386
Global D3DERR_SCENE_END_FAILED := 2289435387
Global D3DERR_SCENE_IN_SCENE := 2289435384
Global D3DERR_SCENE_NOT_IN_SCENE := 2289435385
Global D3DERR_SETVIEWPORTDATA_FAILED := 2289435358
Global D3DERR_STENCILBUFFER_NOTPRESENT := 2289436695
Global D3DERR_SURFACENOTINVIDMEM := 2289435371
Global D3DERR_TEXTURE_BADSIZE := 2289435362
Global D3DERR_TEXTURE_CREATE_FAILED := 2289435345
Global D3DERR_TEXTURE_DESTROY_FAILED := 2289435346
Global D3DERR_TEXTURE_GETSURF_FAILED := 2289435353
Global D3DERR_TEXTURE_LOAD_FAILED := 2289435349
Global D3DERR_TEXTURE_LOCK_FAILED := 2289435347
Global D3DERR_TEXTURE_LOCKED := 2289435351
Global D3DERR_TEXTURE_NO_SUPPORT := 2289435344
Global D3DERR_TEXTURE_NOT_LOCKED := 2289435352
Global D3DERR_TEXTURE_SWAP_FAILED := 2289435350
Global D3DERR_TEXTURE_UNLOCK_FAILED := 2289435348
Global D3DERR_TOOMANYOPERATIONS := 2289436701
Global D3DERR_TOOMANYPRIMITIVES := 2289436707
Global D3DERR_TOOMANYVERTICES := 2289436709
Global D3DERR_UNSUPPORTEDALPHAARG := 2289436700
Global D3DERR_UNSUPPORTEDALPHAOPERATION := 2289436699
Global D3DERR_UNSUPPORTEDCOLORARG := 2289436698
Global D3DERR_UNSUPPORTEDCOLOROPERATION := 2289436697
Global D3DERR_UNSUPPORTEDFACTORVALUE := 2289436703
Global D3DERR_UNSUPPORTEDTEXTUREFILTER := 2289436706
Global D3DERR_VBUF_CREATE_FAILED := 2289436685
Global D3DERR_VERTEXBUFFERLOCKED := 2289436686
Global D3DERR_VERTEXBUFFEROPTIMIZED := 2289436684
Global D3DERR_VERTEXBUFFERUNLOCKFAILED := 2289436687
Global D3DERR_VIEWPORTDATANOTSET := 2289435397
Global D3DERR_VIEWPORTHASNODEVICE := 2289435398
Global D3DERR_WRONGTEXTUREFORMAT := 2289436696
Global D3DERR_ZBUFF_NEEDS_SYSTEMMEMORY := 2289435369
Global D3DERR_ZBUFF_NEEDS_VIDEOMEMORY := 2289435370
Global D3DERR_ZBUFFER_NOTPRESENT := 2289436694
Global d3dtypes := {}
Global D3DCLIP_BACK := 0x00000020
Global D3DCLIP_BOTTOM := 0x00000008
Global D3DCLIP_FRONT := 0x00000010
Global D3DCLIP_GEN0 := 0x00000040
Global D3DCLIP_GEN1 := 0x00000080
Global D3DCLIP_GEN2 := 0x00000100
Global D3DCLIP_GEN3 := 0x00000200
Global D3DCLIP_GEN4 := 0x00000400
Global D3DCLIP_GEN5 := 0x00000800
Global D3DCLIP_LEFT := 0x00000001
Global D3DCLIP_RIGHT := 0x00000002
Global D3DCLIP_TOP := 0x00000004
Global D3DCLIPSTATUS_EXTENTS2 := 0x00000002
Global D3DCLIPSTATUS_EXTENTS3 := 0x00000004
Global D3DCLIPSTATUS_STATUS := 0x00000001
Global D3DCOLOR_MONO := 1
Global D3DCOLOR_RGB := 2
Global D3DDEVINFOID_D3DTEXTUREMANAGER := 2
Global D3DDEVINFOID_TEXTUREMANAGER := 1
Global D3DDEVINFOID_TEXTURING := 3
Global D3DDP_MAXTEXCOORD := 8
Global D3DEXECUTE_CLIPPED := 0x00000001
Global D3DEXECUTE_UNCLIPPED := 0x00000002
Global D3DFVF_DIFFUSE := 64
Global D3DFVF_NORMAL := 16
Global D3DFVF_POSITION_MASK := 14
Global D3DFVF_RESERVED0 := 1
Global D3DFVF_RESERVED1 := 32
Global D3DFVF_RESERVED2 := 61440
Global D3DFVF_SPECULAR := 128
Global D3DFVF_TEX1 := 256
Global D3DFVF_TEX2 := 512
Global D3DFVF_TEX3 := 768
Global D3DFVF_TEX4 := 1024
Global D3DFVF_TEX5 := 1280
Global D3DFVF_TEX6 := 1536
Global D3DFVF_TEX7 := 1792
Global D3DFVF_TEX8 := 2048
Global D3DFVF_TEXCOUNT_MASK := 3840
Global D3DFVF_TEXCOUNT_SHIFT := 8
Global D3DFVF_TEXTUREFORMAT1 := 3
Global D3DFVF_TEXTUREFORMAT3 := 1
Global D3DFVF_TEXTUREFORMAT4 := 2
Global D3DFVF_XYZ := 2
Global D3DFVF_XYZB1 := 6
Global D3DFVF_XYZB2 := 8
Global D3DFVF_XYZB3 := 10
Global D3DFVF_XYZB4 := 12
Global D3DFVF_XYZB5 := 14
Global D3DFVF_XYZRHW := 4
Global D3DLIGHT_ACTIVE := 1
Global D3DLIGHT_NO_SPECULAR := 2
Global D3DMAXUSERCLIPPLANES := 32
Global D3DPROCESSVERTICES_COPY := 0x00000002
Global D3DPROCESSVERTICES_NOCOLOR := 0x00000010
Global D3DPROCESSVERTICES_OPMASK := 0x00000007
Global D3DPROCESSVERTICES_TRANSFORM := 0x00000001
Global D3DPROCESSVERTICES_TRANSFORMLIGHT := 0x00000000
Global D3DPROCESSVERTICES_UPDATEEXTENTS := 0x00000008
Global D3DSETSTATUS_EXTENTS := 0x00000002
Global D3DSETSTATUS_STATUS := 0x00000001
Global D3DSTATE_OVERRIDE_BIAS := 256
Global D3DSTATUS_CLIPINTERSECTIONBACK := 0x00020000
Global D3DSTATUS_CLIPINTERSECTIONBOTTOM := 0x00008000
Global D3DSTATUS_CLIPINTERSECTIONFRONT := 0x00010000
Global D3DSTATUS_CLIPINTERSECTIONGEN0 := 0x00040000
Global D3DSTATUS_CLIPINTERSECTIONGEN1 := 0x00080000
Global D3DSTATUS_CLIPINTERSECTIONGEN2 := 0x00100000
Global D3DSTATUS_CLIPINTERSECTIONGEN3 := 0x00200000
Global D3DSTATUS_CLIPINTERSECTIONGEN4 := 0x00400000
Global D3DSTATUS_CLIPINTERSECTIONGEN5 := 0x00800000
Global D3DSTATUS_CLIPINTERSECTIONLEFT := 0x00001000
Global D3DSTATUS_CLIPINTERSECTIONRIGHT := 0x00002000
Global D3DSTATUS_CLIPINTERSECTIONTOP := 0x00004000
Global D3DSTATUS_ZNOTVISIBLE := 0x01000000
Global D3DTA_ALPHAREPLICATE := 32
Global D3DTA_COMPLEMENT := 16
Global D3DTA_CURRENT := 1
Global D3DTA_SELECTMASK := 15
Global D3DTA_SPECULAR := 4
Global D3DTA_TEXTURE := 2
Global D3DTA_TFACTOR := 3
Global D3DTRANSFORM_CLIPPED := 0x00000001
Global D3DTRANSFORM_UNCLIPPED := 0x00000002
Global D3DTRIFLAG_EVEN := 0x0000001f
Global D3DTRIFLAG_ODD := 0x0000001e
Global D3DTRIFLAG_START := 0x00000000
Global D3DTSS_TCI_CAMERASPACENORMAL := 65536
Global D3DTSS_TCI_CAMERASPACEPOSITION := 131072
Global D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR := 196608
Global D3DVBCAPS_DONOTCLIP := 0x00000001
Global D3DVBCAPS_OPTIMIZED := 0x80000000
Global D3DVBCAPS_SYSTEMMEMORY := 0x00000800
Global D3DVBCAPS_WRITEONLY := 0x00010000
Global D3DVIS_INTERSECT_FRUSTUM := 1
Global D3DVIS_OUTSIDE_FRUSTUM := 2
Global D3DWRAP_U := 0x00000001
Global D3DWRAP_V := 0x00000002
Global D3DWRAPCOORD_0 := 0x00000001
Global D3DWRAPCOORD_1 := 0x00000002
Global D3DWRAPCOORD_2 := 0x00000004
Global D3DWRAPCOORD_3 := 0x00000008
Global DIRECT3D_VERSION := 1792
Global D3DLIGHT_POINT := 1
Global D3DLIGHT_SPOT := 2
Global D3DLIGHT_DIRECTIONAL := 3
Global D3DLIGHT_PARALLELPOINT := 4
Global D3DLIGHT_GLSPOT := 5
Global D3DOP_POINT := 1
Global D3DOP_LINE := 2
Global D3DOP_TRIANGLE := 3
Global D3DOP_MATRIXLOAD := 4
Global D3DOP_MATRIXMULTIPLY := 5
Global D3DOP_STATETRANSFORM := 6
Global D3DOP_STATELIGHT := 7
Global D3DOP_STATERENDER := 8
Global D3DOP_PROCESSVERTICES := 9
Global D3DOP_TEXTURELOAD := 10
Global D3DOP_EXIT := 11
Global D3DOP_BRANCHFORWARD := 12
Global D3DOP_SPAN := 13
Global D3DOP_SETSTATUS := 14
Global D3DSHADE_FLAT := 1
Global D3DSHADE_GOURAUD := 2
Global D3DSHADE_PHONG := 3
Global D3DFILL_POINT := 1
Global D3DFILL_WIREFRAME := 2
Global D3DFILL_SOLID := 3
Global D3DFILTER_NEAREST := 1
Global D3DFILTER_LINEAR := 2
Global D3DFILTER_MIPNEAREST := 3
Global D3DFILTER_MIPLINEAR := 4
Global D3DFILTER_LINEARMIPNEAREST := 5
Global D3DFILTER_LINEARMIPLINEAR := 6
Global D3DBLEND_ZERO := 1
Global D3DBLEND_ONE := 2
Global D3DBLEND_SRCCOLOR := 3
Global D3DBLEND_INVSRCCOLOR := 4
Global D3DBLEND_SRCALPHA := 5
Global D3DBLEND_INVSRCALPHA := 6
Global D3DBLEND_DESTALPHA := 7
Global D3DBLEND_INVDESTALPHA := 8
Global D3DBLEND_DESTCOLOR := 9
Global D3DBLEND_INVDESTCOLOR := 10
Global D3DBLEND_SRCALPHASAT := 11
Global D3DBLEND_BOTHSRCALPHA := 12
Global D3DBLEND_BOTHINVSRCALPHA := 13
Global D3DTBLEND_DECAL := 1
Global D3DTBLEND_MODULATE := 2
Global D3DTBLEND_DECALALPHA := 3
Global D3DTBLEND_MODULATEALPHA := 4
Global D3DTBLEND_DECALMASK := 5
Global D3DTBLEND_MODULATEMASK := 6
Global D3DTBLEND_COPY := 7
Global D3DTBLEND_ADD := 8
Global D3DTADDRESS_WRAP := 1
Global D3DTADDRESS_MIRROR := 2
Global D3DTADDRESS_CLAMP := 3
Global D3DTADDRESS_BORDER := 4
Global D3DCULL_NONE := 1
Global D3DCULL_CW := 2
Global D3DCULL_CCW := 3
Global D3DCMP_NEVER := 1
Global D3DCMP_LESS := 2
Global D3DCMP_EQUAL := 3
Global D3DCMP_LESSEQUAL := 4
Global D3DCMP_GREATER := 5
Global D3DCMP_NOTEQUAL := 6
Global D3DCMP_GREATEREQUAL := 7
Global D3DCMP_ALWAYS := 8
Global D3DSTENCILOP_KEEP := 1
Global D3DSTENCILOP_ZERO := 2
Global D3DSTENCILOP_REPLACE := 3
Global D3DSTENCILOP_INCRSAT := 4
Global D3DSTENCILOP_DECRSAT := 5
Global D3DSTENCILOP_INVERT := 6
Global D3DSTENCILOP_INCR := 7
Global D3DSTENCILOP_DECR := 8
Global D3DFOG_EXP := 1
Global D3DFOG_EXP2 := 2
Global D3DFOG_LINEAR := 3
Global D3DZB_TRUE := 1
Global D3DANTIALIAS_SORTDEPENDENT := 1
Global D3DANTIALIAS_SORTINDEPENDENT := 2
Global D3DVT_VERTEX := 1
Global D3DVT_LVERTEX := 2
Global D3DVT_TLVERTEX := 3
Global D3DPT_POINTLIST := 1
Global D3DPT_LINELIST := 2
Global D3DPT_LINESTRIP := 3
Global D3DPT_TRIANGLELIST := 4
Global D3DPT_TRIANGLESTRIP := 5
Global D3DPT_TRIANGLEFAN := 6
Global D3DTRANSFORMSTATE_WORLD := 1
Global D3DTRANSFORMSTATE_VIEW := 2
Global D3DTRANSFORMSTATE_PROJECTION := 3
Global D3DTRANSFORMSTATE_WORLD1 := 4
Global D3DTRANSFORMSTATE_TEXTURE1 := 17
Global D3DTRANSFORMSTATE_TEXTURE2 := 18
Global D3DTRANSFORMSTATE_TEXTURE3 := 19
Global D3DTRANSFORMSTATE_TEXTURE4 := 20
Global D3DTRANSFORMSTATE_TEXTURE5 := 21
Global D3DTRANSFORMSTATE_TEXTURE6 := 22
Global D3DTRANSFORMSTATE_TEXTURE7 := 23
Global D3DLIGHTSTATE_MATERIAL := 1
Global D3DLIGHTSTATE_AMBIENT := 2
Global D3DLIGHTSTATE_COLORMODEL := 3
Global D3DLIGHTSTATE_FOGMODE := 4
Global D3DLIGHTSTATE_FOGSTART := 5
Global D3DLIGHTSTATE_FOGEND := 6
Global D3DLIGHTSTATE_FOGDENSITY := 7
Global D3DLIGHTSTATE_COLORVERTEX := 8
Global D3DRENDERSTATE_CLIPPING := 136
Global D3DRENDERSTATE_LIGHTING := 137
Global D3DRENDERSTATE_EXTENTS := 138
Global D3DRENDERSTATE_AMBIENT := 139
Global D3DRENDERSTATE_FOGVERTEXMODE := 140
Global D3DRENDERSTATE_COLORVERTEX := 141
Global D3DRENDERSTATE_LOCALVIEWER := 142
Global D3DRENDERSTATE_NORMALIZENORMALS := 143
Global D3DRENDERSTATE_COLORKEYBLENDENABLE := 144
Global D3DRENDERSTATE_DIFFUSEMATERIALSOURCE := 145
Global D3DRENDERSTATE_SPECULARMATERIALSOURCE := 146
Global D3DRENDERSTATE_AMBIENTMATERIALSOURCE := 147
Global D3DRENDERSTATE_EMISSIVEMATERIALSOURCE := 148
Global D3DRENDERSTATE_VERTEXBLEND := 151
Global D3DRENDERSTATE_CLIPPLANEENABLE := 152
Global D3DRENDERSTATE_STIPPLEPATTERN01 := 65
Global D3DRENDERSTATE_STIPPLEPATTERN02 := 66
Global D3DRENDERSTATE_STIPPLEPATTERN03 := 67
Global D3DRENDERSTATE_STIPPLEPATTERN04 := 68
Global D3DRENDERSTATE_STIPPLEPATTERN05 := 69
Global D3DRENDERSTATE_STIPPLEPATTERN06 := 70
Global D3DRENDERSTATE_STIPPLEPATTERN07 := 71
Global D3DRENDERSTATE_STIPPLEPATTERN08 := 72
Global D3DRENDERSTATE_STIPPLEPATTERN09 := 73
Global D3DRENDERSTATE_STIPPLEPATTERN10 := 74
Global D3DRENDERSTATE_STIPPLEPATTERN11 := 75
Global D3DRENDERSTATE_STIPPLEPATTERN12 := 76
Global D3DRENDERSTATE_STIPPLEPATTERN13 := 77
Global D3DRENDERSTATE_STIPPLEPATTERN14 := 78
Global D3DRENDERSTATE_STIPPLEPATTERN15 := 79
Global D3DRENDERSTATE_STIPPLEPATTERN16 := 80
Global D3DRENDERSTATE_STIPPLEPATTERN17 := 81
Global D3DRENDERSTATE_STIPPLEPATTERN18 := 82
Global D3DRENDERSTATE_STIPPLEPATTERN19 := 83
Global D3DRENDERSTATE_STIPPLEPATTERN20 := 84
Global D3DRENDERSTATE_STIPPLEPATTERN21 := 85
Global D3DRENDERSTATE_STIPPLEPATTERN22 := 86
Global D3DRENDERSTATE_STIPPLEPATTERN23 := 87
Global D3DRENDERSTATE_STIPPLEPATTERN24 := 88
Global D3DRENDERSTATE_STIPPLEPATTERN25 := 89
Global D3DRENDERSTATE_STIPPLEPATTERN26 := 90
Global D3DRENDERSTATE_STIPPLEPATTERN27 := 91
Global D3DRENDERSTATE_STIPPLEPATTERN28 := 92
Global D3DRENDERSTATE_STIPPLEPATTERN29 := 93
Global D3DRENDERSTATE_STIPPLEPATTERN30 := 94
Global D3DRENDERSTATE_STIPPLEPATTERN31 := 95
Global D3DTOP_DISABLE := 1
Global D3DTOP_MODULATE := 4
Global D3DTOP_FORCE_DWORD := 0x7fffffff
Global D3DTFG_POINT := 1
Global D3DTFN_POINT := 1
Global D3DTFP_NONE := 1
Global D3DSBT_ALL := 1
d3dtypes.err := {}
global D3DRENDERSTATE_TEXTUREHANDLE := 1
d3d.err[2147942487 . ""] := "D3DERR_INVALIDPARAMS"
d3d.err[0 . ""] := "D3DERR_OK"
d3d.err[2147500034 . ""] := "E_NOINTERFACE"
global D3D_D3DMATRIX := "float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24,"
. " float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44"
global D3DMATRIX := "float m11; float m12; float m13; float m14; float m21; float m22; float m23; float m24;"
. " float m31; float m32; float m33, float m34; float m41, float m42; float m43; float m44"
D3DMATRIX := Struct(D3DMATRIX)
global D3DVERTEXBUFFERDESC := Struct("DWORD dwSize; DWORD dwCaps; DWORD dwFVF; DWORD dwNumVertices;")
global D3DLVERTEX := Struct("float x, float y, float z, int color, int specular, float u, float v")
global D3DVIEWPORT :=
(
"
    DWORD       dwSize;
    DWORD       dwX;
    DWORD       dwY;            
    DWORD       dwWidth;
    DWORD       dwHeight;       
    Float    dvScaleX;       
    Float    dvScaleY;       
    Float    dvMaxX;         
    Float    dvMaxY;         
    Float    dvMinZ;
    Float    dvMaxZ; 
"
)
global D3DVIEWPORT2 :=
(
"
    DWORD       dwSize;
    DWORD       dwX;
    DWORD       dwY;
    DWORD       dwWidth;
    DWORD       dwHeight;
    Float    dvClipX;
    Float    dvClipY;
    Float    dvClipWidth;
    Float    dvClipHeight;
    Float    dvMinZ;
    Float    dvMaxZ; 
"
)
global D3DVIEWPORT7 :=
(
"
    DWORD       dwX;
    DWORD       dwY;
    DWORD       dwWidth;
    DWORD       dwHeight;
    float       dvMinZ;
    float       dvMaxZ;
"
)
global D3DVIEWPORT7 := Struct(D3DVIEWPORT7)
global D3DVIEWPORT2 := Struct(D3DVIEWPORT2)
global D3DVIEWPORT := Struct(D3DVIEWPORT)
global D3DEXECUTEBUFFERDESC := Struct("DWORD dwSize, DWORD dwFlags, DWORD dwCaps, DWORD dwBufferSize, ptr lpData")
global D3DEXECUTEDATA :=
(
"
    DWORD     dwSize;
    DWORD     dwVertexOffset;
    DWORD     dwVertexCount;
    DWORD     dwInstructionOffset;
    DWORD     dwInstructionLength;
    DWORD     dwHVertexOffset;
    DWORD     dsStatus[6];
"
)
D3DEXECUTEDATA := struct(D3DEXECUTEDATA)
global IDirectDrawSurface3="", IDirectDrawClipper="", IDirectDrawPalette=""
, IDirectDraw="", IDirectDrawSurface="", IDirectDrawGammaControl=""
, IDirectDraw2="", IDirectDrawSurface2=""
, IDirectDraw4="", IDirectDrawSurface4=""
, IDirect3D="", IDirect3DDevice="", IDirect3DExecuteBuffer="", IDirect3DViewPort="", IDirect3DTexture=""
, IDirect3D2="", IDirect3DDevice2="", IDirect3DViewPort2="", IDirect3DTexture2=""
, IDirect3D3="", IDirect3DDevice3="", IDirect3DViewPort3="", IDirect3DVertexBuffer=""
, IDirectDraw7="", IDirectDrawSurface7=""
, IDirect3D7="", IDirect3dDevice7="", IDirect3DVertexBuffer7=""
SetPixelFormat(byref desc, format = "")
{
(format = "") ? format := (D3DHOOKS_DATA.D=16) ? "RG6B" : (D3DHOOKS_DATA.D=8) ? "PAL8" : "X8RGB"
desc.ddpfPixelFormat.dwSize := DDPIXELFORMAT.size()
return dllcall(g_.p.SetDDSPxFmt, uint, desc[]+desc.Offset("ddpfPixelFormat"), astr, format)
}
GetPixelFormat(byref desc)
{
if (desc.ddpfPixelFormat.dwRGBBitCount = 32)
{
if desc.ddpfPixelFormat.dwRBitMask = 0x00FF0000
return (desc.ddpfPixelFormat.dwFlags & DDPF_ALPHAPIXELS) ? "A8RGB" : "X8RGB"
else if desc.ddpfPixelFormat.dwRBitMask = 0x000000FF
return (desc.ddpfPixelFormat.dwFlags & DDPF_ALPHAPIXELS) ? "A8BGR" : "X8BGR"
}
else if (desc.ddpfPixelFormat.dwRGBBitCount = 16)
{
if (desc.ddpfPixelFormat.dwFlags & DDPF_RGB)
{
if (desc.ddpfPixelFormat.dwRBitMask = 0xF800)
return "RG6B"
else if (desc.ddpfPixelFormat.dwRBitMask = 0x00007C00)
return (desc.ddpfPixelFormat.dwFlags & DDPF_ALPHAPIXELS) ? "A1RGB" : "X1RGB"
else if (desc.ddpfPixelFormat.dwRBitMask = 0xf00)
return "A4RGB"
} else if (desc.ddpfPixelFormat.dwFlags & DDPF_BUMPDUDV)
return (desc.ddpfPixelFormat.dwFlags & DDPF_BUMPLUMINANCE) ? "L6V5U5 - Unsupported" : "V8U8"
}
else if (desc.ddpfPixelFormat.dwRGBBitCount = 8)
return "PAL8"
else if (desc.ddpfPixelFormat.dwFlags & DDPF_FOURCC)
{
VarSetCapacity(fmt, 4, 0)
Numput(desc.ddpfPixelFormat.dwFourCC, &fmt, "uint")
return strget(&fmt, "Cp0", 4)
}
return "Unknown"
}
LoadTexture(pInterface, pDevice, file_, mip="")
{
pTexture  := 0, hText := 0
pTexture2 := LoadTexture2(pInterface, "", file_, mip)
GUID_FromString(idd_texture, d3d.IID_IDirect3DTexture)
r := dllcall(IDirect3DTexture2.QueryInterface, uint, pTexture2, ptr, &idd_texture, "ptr*", pTexture, uint)
printl("Texture Load Texture: " r " " ddraw.err[r . ""])
dllcall(IDirect3DTexture2.release, uint, pTexture2)
s := dllcall(IDirect3DTexture.GetHandle, uint, pTexture, uint, pDevice, "uint*", hText, uint)
printl("Texture hwnd: "	s " " ddraw.err[s . ""] errorlevel " " pTexture " " g_tswap.device " " hText)
return pTexture
}
LoadTexture2(pInterface, pDevice, file_, mip="")
{
pSurface:=0, pSysMem:=0, hFile:=0, pTexture:=0, hText:=0
(desc:= struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC.size()
pixelformat         := OpenDDS(file_, hFile)
desc.dwSize         := DDSURFACEDESC.size()
desc.dwFlags        := DDSD_CAPS | DDSD_WIDTH | DDSD_HEIGHT | DDSD_PIXELFORMAT
desc.dwWidth        := DDS_HEADER.dwWidth
desc.dwHeight       := DDS_HEADER.dwHeight
desc.ddsCaps.dwCaps := DDSCAPS_VIDEOMEMORY | DDSCAPS_TEXTURE
SetPixelFormat(desc, pixelformat)
if mip
{
k := dllcall(g_.p.c2c, astr, mip.f, astr, pixelformat, uint, numget(mip.k+0, "uint"), uint)
logerr("colorkey " k " : " mip.f)
desc.dwFlags |= DDSD_CKSRCBLT
desc.ddckCKSrcBlt.dwColorSpaceLowValue  := k
desc.ddckCKSrcBlt.dwColorSpaceHighValue := k
}
(DDS_HEADER.dwFlags & 0x20000) ? desc.ddsCaps.dwCaps |= DDSCAPS_MIPMAP | DDSCAPS_COMPLEX
if (r := dllcall(IDirectDraw.CreateSurface, uint, pInterface, uint, desc[], "ptr*", pSurface, uint, 0, uint))
{
if ddraw.err[r . ""] = "DDERR_OUTOFVIDEOMEMORY"
{
logerr("Failed to load texture : " r " " ddraw.err[r . ""])
return
}
desc.ddsCaps.dwCaps      := DDSCAPS_VIDEOMEMORY | DDSCAPS_TEXTURE
DDS_HEADER.dwMipMapCount := 0
r := dllcall(IDirectDraw.CreateSurface, uint, pInterface, uint, desc[], "ptr*", pSurface, uint, 0, uint)
}
printl("Texture Load Surface: "	r " " ddraw.err[r . ""])
desc.dwFlags        := DDSD_CAPS | DDSD_WIDTH | DDSD_HEIGHT | DDSD_PIXELFORMAT
desc.ddsCaps.dwCaps := DDSCAPS_SYSTEMMEMORY | DDSCAPS_TEXTURE
(DDS_HEADER.dwMipMapCount > 0) ? desc.ddsCaps.dwCaps |= DDSCAPS_MIPMAP | DDSCAPS_COMPLEX
SetPixelFormat(desc, pixelformat)
r := dllcall(IDirectDraw.CreateSurface, uint, pInterface, uint, desc[], "ptr*", pSysMem, uint, 0, uint)
printl("Texture Load SMSurface: " A_index " " desc.dwWidth "x" desc.dwHeight " " r " " ddraw.err[r . ""])
dllcall(IDirectDrawSurface.AddRef, uint, slevel := pSysMem)
dllcall(IDirectDrawSurface.AddRef, uint, level := pSurface)
loop
{
r := dllcall(IDirectDrawSurface.Lock, uint, slevel, uint, 0, uint, desc[], uint, DDLOCK_WRITEONLY, uint, 0, uint)
printl("Texture Load Lock: " A_index " " r " " ddraw.err[r . ""])
if instr(pixelformat, "DXT")
dllcall("ReadFile", uint, hFile, uint, desc.lpSurface, uint, desc.lpitch, "uint*", (rd:=0), uint, 0)
else
{
pitch     := desc.lpitch
pSurfdata := desc.lpSurface
hLines    := desc.dwHeight
if (r:= dllcall(g_.p.LoadSurfData, uint, pSurfdata, uint, hFile, uint, pitch, uint, desc.dwWidth
, uint, hLines, uint, DDS_HEADER.ddspf.dwRGBBitCount/8))
{
logerr("Texture Load - Copy " r)
size := desc.dwWidth*DDS_HEADER.ddspf.dwRGBBitCount/8
loop, % hLines
dllcall("ReadFile", uint, hFile, uint, pSurfdata + pitch * (A_index-1), uint, size, "uint*", (rd:=0), uint, 0)
}
}
r := dllcall(IDirectDrawSurface.UnLock, uint, slevel, uint, desc.lpSurface, uint)
printl("Texture Load UnLock: " r " " ddraw.err[r . ""])
r := dllcall(IDirectDrawSurface.Blt, uint, level, uint, 0, uint, slevel, uint, 0, uint, 0, uint, 0, uint)
cps  := DDSCAPS_TEXTURE | DDSCAPS_MIPMAP
next := 0
sbrk := dllcall(IDirectDrawSurface.GetAttachedSurface, uint, slevel, "uint*", cps, "uint*", snext := 0)
brk  := dllcall(IDirectDrawSurface.GetAttachedSurface, uint, level, "uint*", cps, "uint*", next := 0)
slevel ? dllcall(IDirectDrawSurface.Release, uint, slevel)
level  ? dllcall(IDirectDrawSurface.Release, uint, level)
if brk or sbrk
break
level  := next
slevel := snext
desc.dwWidth  /= 2
desc.dwHeight /= 2
}
dllcall("CloseHandle", uint, hFile)
pSysMem ? dllcall(IDirectDrawSurface.Release, uint, pSysMem)
GUID_FromString(idd_texture, d3d.IID_IDirect3DTexture2)
r := dllcall(IDirectDrawSurface.QueryInterface, uint, pSurface, ptr, &idd_texture, "ptr*", pTexture, uint)
printl("Texture Load Texture: " r " " ddraw.err[r . ""] " " pTexture)
if pDevice
{
s := dllcall(IDirect3DTexture2.GetHandle, uint, pTexture, uint, pDevice, "uint*", hText, uint)
printl("Texture hwnd: "	s " " ddraw.err[s . ""] errorlevel " " pTexture " " g_tswap.device " " hText)
}
dllcall(IDirectDrawSurface.release, uint, pSurface)
return pTexture
}
LoadSurface7(f, s, ck="")
{
p                 := OpenDDS(f, hF)
d                 := struct(DDSURFACEDESC2)
d.dwSize          := DDSURFACEDESC2.size()
d.dwFlags         := DDSD_CAPS | DDSD_WIDTH | DDSD_HEIGHT | DDSD_PIXELFORMAT
d.dwWidth         := DDS_HEADER.dwWidth
d.dwHeight        := DDS_HEADER.dwHeight
d.ddsCaps.dwCaps  := DDSCAPS_TEXTURE
d.ddsCaps.dwCaps2 := DDSCAPS2_TEXTUREMANAGE
SetPixelFormat(d, p)
(DDS_HEADER.dwFlags & 0x20000) ? d.ddsCaps.dwCaps |= DDSCAPS_MIPMAP | DDSCAPS_COMPLEX
dllcall(IDirectDrawSurface7.GetDDInterface, uint, s, "Uint*", dd7:=0)
dd7 ? dllcall(IDirectDraw7.release, uint, dd7)
if ck
{
k := dllcall(g_.p.c2c, astr, ck.f, astr, p, uint, numget(ck.k+0, "uint"), uint)
logerr("colorkey " k " : " ck.f)
d.dwFlags |= DDSD_CKSRCBLT
d.ddckCKSrcBlt.dwColorSpaceLowValue  := k
d.ddckCKSrcBlt.dwColorSpaceHighValue := k
}
if (r := dllcall(IDirectDraw7.CreateSurface, uint, dd7, uint, d[], "ptr*", S7:=0, uint, 0, uint))
{
d.ddsCaps.dwCaps := DDSCAPS_TEXTURE
r := dllcall(IDirectDraw7.CreateSurface, uint, dd7, uint, d[], "ptr*", S7, uint, 0, uint)
}
printl("Texture Load Surface: "	r " " ddraw.err[r . ""])
dllcall(IDirectDrawSurface7.AddRef, uint, lvl := S7)
loop
{
r := dllcall(IDirectDrawSurface7.Lock, uint, lvl, uint, 0, uint, d[], uint, DDLOCK_WRITEONLY, uint, 0, uint)
printl("Texture Load Lock: " A_index " " r " " ddraw.err[r . ""])
if instr(p, "DXT")
dllcall("ReadFile", uint, hF, uint, d.lpSurface, uint, d.lpitch, "uint*", (rd:=0), uint, 0)
else
{
pitch     := d.lpitch
pSurfdata := d.lpSurface
hLines    := d.dwHeight
if (r:= dllcall(g_.p.LoadSurfData, uint, pSurfdata, uint, hf, uint, pitch, uint, d.dwWidth
, uint, hLines, uint, DDS_HEADER.ddspf.dwRGBBitCount/8))
{
logerr("Texture Load - Copy " r)
size := d.dwWidth*DDS_HEADER.ddspf.dwRGBBitCount/8
loop, % hLines
dllcall("ReadFile", uint, hf, uint, pSurfdata + pitch * (A_index-1), uint, size, "uint*", (rd:=0), uint, 0)
}
}
r := dllcall(IDirectDrawSurface7.UnLock, uint, lvl, uint, d.lpSurface, uint)
printl("Texture Load UnLock: " r " " ddraw.err[r . ""])
VarSetCapacity(cps, 16)
numput(DDSCAPS_TEXTURE|DDSCAPS_MIPMAP, &cps, "uint")
brk := dllcall(IDirectDrawSurface7.GetAttachedSurface, uint, lvl, uint, &cps, "uint*", nxt := 0)
dllcall(IDirectDrawSurface7.Release, uint, lvl)
if brk
break
lvl := nxt
}
dllcall("CloseHandle", uint, hF)
return S7
}
DumpSurface(pSurface, dest)
{
(D:= struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC.size()
r := dllcall(IDirectDrawSurface.Lock, uint, pSurface, uint, 0, uint, D[], uint, DDLOCK_READONLY|DDLOCK_WAIT, uint, 0, uint)
print("Dump Lock " r  ddraw.err[r . ""] "`n")
fmt   := GetPixelFormat(D)
if (fmt="DXT1")
pitch := d.dwWidth*2
else if instr(fmt, "D")
pitch := d.dwWidth*4
else
pitch :=  d.lPitch
dllcall("peixoto.dll\DumpDDS", str, dest, astr, fmt, uint, d.dwWidth, uint, d.dwHeight
, ptr, d.lpSurface, uint, pitch)
dllcall(IDirectDrawSurface.UnLock, ptr, pSurface)
print("Dump UnLock " r  ddraw.err[r . ""] "`n")
}
WriteOnSurface(pSuf, txt, clr = 0xffffffff, x = 0, y = 0)
{
h_DC := 0
c    := g_.cfg.D3D + 0
i    := c = 7 ? IDirectDrawSurface7 : c = 3 ? IDirectDrawSurface4 : IDirectDrawSurface
dllcall(i.GetDC, uint, pSuf, "uint*", h_DC, uint)
HORZRES := 8, VERTRES := 10
w := dllcall("GetDeviceCaps", uint, h_DC, uint, HORZRES, int)
h := dllcall("GetDeviceCaps", uint, h_DC, uint, VERTRES, int)
crds   := struct("DWORD x, y, w, h;")
crds.x := x
crds.y := y
crds.w := w
crds.h := h
dllcall("Gdi32.dll\SetBkMode", uint, h_DC, uint, 1)
dllcall("Gdi32.dll\SetTextColor", uint, h_DC, uint, clr)
dllcall("DPtoLP", uint, h_DC, uint, crds[], uint, 2)
r :=  dllcall("DrawTextW", uint, h_DC, str, txt, int, -1, uint, crds[], uint, 0)
dllcall(i.ReleaseDC, uint, pSuf, uint, h_DC, uint)
return r
}
DirectDrawCreate(software = False)
{
if !(p := g_.p.DirectDrawCreate)
{
if !(p := dllcall("GetProcAddress", int, dllcall("LoadLibraryW", str, "ddraw.dll"), astr, "DirectDrawCreate"))
return -1
}
if ( (r := dllcall(p, uint, 0, "ptr*", DD := "", int, 0, uint)) = 0)
{
if (g_.cfg.layer)
{
logerr("DDraw: " DD)
DD := dllcall("Peixoto\WrappDDrawObject", ptr, DD, ptr)
logerr("Wrapped: " DD)
}
IDirectDraw := new ComInterfaceWrapper(ddraw.IDirectDraw, DD, True)
}
return r
}
GetDirectDraw(h_win = "")
{
if not h_win
h_win := A_scripthwnd
r := DirectDrawCreate(0)
if (r != 0)
return "Failed to create the IDirectDraw interface " r " - " ddraw.err[r . ""]
pDDraw2:="", pDDraw4:="", pSurf:="", pSurface:="", pSurface2:="", pSurface3:="", pClipper="", pGamma:="", pPal:=""
GUID_FromString(idd_ddraw2, ddraw.IID_IDirectDraw2)
r := dllcall(IDirectDraw.QueryInterface, uint, IDirectDraw.p, uint, &idd_ddraw2, "uint*", pDDraw2, uint)
Print("IDirectDraw2: " r  ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirectDraw2 Interface " r " - " ddraw.err[r . ""]
else IDirectDraw2 := new ComInterfaceWrapper(ddraw.IDirectDraw2, pDDraw2, True)
GUID_FromString(idd_ddraw4, ddraw.IID_IDirectDraw4)
r := dllcall(IDirectDraw.QueryInterface, uint, IDirectDraw.p, uint, &idd_ddraw4, "uint*", pDDraw4, uint)
Print("IDirectDraw4: " r  ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirectDraw4 Interface " r " - " ddraw.err[r . ""]
else IDirectDraw4 := new ComInterfaceWrapper(ddraw.IDirectDraw4, pddraw4, True)
(g_.cfg.DisableMaxWindowedMode) ?  logerr("CompatData " dllcall("ddraw.dll\SetAppCompatData", uint, 12, uint, 0) " " errorlevel)
r := dllcall(IDirectDraw4.SetCooperativeLevel, ptr, IDirectDraw4.p, uint, h_win, uint, DDSCL_NORMAL, uint)
Print("CoopLevel: " r  ":" ddraw.err[r . ""] "`n")
if r
return "Failed to set the Cooperatve Level " r " - " ddraw.err[r . ""]
DDSURFACEDESC.dwsize                 := DDSURFACEDESC.size()
DDSURFACEDESC2.dwSize                := DDSURFACEDESC2.size()
(D:= struct(DDSURFACEDESC2)).dwSize  := DDSURFACEDESC2.size()
D.dwFlags        := DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH
D.ddsCaps.dwCaps := DDSCAPS_3DDEVICE | DDSCAPS_VIDEOMEMORY
D.dwWidth        := 640
D.dwHeight       := 480
SetPixelFormat(D, "X8RGB")
r := dllcall(IDirectDraw4.CreateSurface, uint, IDirectDraw4.p, uint, D[]
, "uint*", pSurf, uint, 0, uint)
if (r = DDERR_NODIRECTDRAWHW)
{
D.ddsCaps.dwCaps := 0
r := dllcall(IDirectDraw4.CreateSurface, uint, IDirectDraw4.p, uint, D[]
, "uint*", pSurf, uint, 0, uint)
}
Print("Surface4: " r  ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirectDrawSurface4 Interface " r " - " ddraw.err[r . ""]
else IDirectDrawSurface4 := new ComInterfaceWrapper(ddraw.IDirectDrawSurface4, pSurf, True)
GUID_FromString(idd_surface, ddraw.IID_IDirectDrawSurface3)
r := dllcall(IDirectDrawSurface4.QueryInterface, uint, IDirectDrawSurface4.p, uint, &idd_surface, "uint*", pSurface3, uint)
Print("Surface3: " r  ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirectDrawSurface3 Interface " r " - " ddraw.err[r . ""]
IDirectDrawSurface3 := new ComInterfaceWrapper(ddraw.IDirectDrawSurface3, pSurface3, True)
GUID_FromString(idd_surface2, ddraw.IID_IDirectDrawSurface2)
r := dllcall(IDirectDrawSurface4.QueryInterface, uint, IDirectDrawSurface4.p, uint, &idd_surface2, "uint*", pSurface2, uint)
Print("Surface2: " r  ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirectDrawSurface2 Interface " r " - " ddraw.err[r . ""]
IDirectDrawSurface2 := new ComInterfaceWrapper(ddraw.IDirectDrawSurface2, pSurface2, True)
GUID_FromString(idd_surface, ddraw.IID_IDirectDrawSurface)
r := dllcall(IDirectDrawSurface4.QueryInterface, uint, IDirectDrawSurface4.p, uint, &idd_surface, "uint*", pSurface, uint)
Print("Surface: " r  ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirectDrawSurface Interface " r " - " ddraw.err[r . ""]
IDirectDrawSurface := new ComInterfaceWrapper(ddraw.IDirectDrawSurface, pSurface, True)
GUID_FromString(idd_gamma, ddraw.IID_IDirectDrawGammaControl)
r := dllcall(IDirectDrawSurface.QueryInterface, uint, IDirectDrawSurface.p, uint, &idd_gamma, "uint*", pGamma, uint)
if r
return "Failed to create the IDirectDrawGammaControl Interface " r " - " ddraw.err[r . ""]
IDirectDrawGammaControl := new ComInterfaceWrapper(ddraw.IDirectDrawGammaControl, pGamma, True)
r := dllcall(IDirectDraw.CreateClipper, uint, IDirectDraw.p, uint, 0, "uint*", pClipper, uint, 0, uint)
if r
return "Failed to create the IDirectDrawCliper Interface " r " - " ddraw.err[r . ""]
IDirectDrawClipper := new ComInterfaceWrapper(ddraw.IDirectDrawClipper, pClipper, True)
VarSetCapacity(pal, 256*4)
r := dllcall(IDirectDraw.CreatePalette, uint, IDirectDraw.p, uint, DDPCAPS_8BIT, ptr, &pal, "uint*", pPal, uint, 0, uint)
if r
return "Failed to create the IDirectDrawPalette Interface " r " - " ddraw.err[r . ""]
IDirectDrawPalette := new ComInterfaceWrapper(ddraw.IDirectDrawPalette, pPal, True)
return "Succeeded to create DirectDraw"
}
GetDirect3D()
{
wine := dllcall("GetModuleHandle", "str",  "libwine.dll")
pD3D:="", pViewPort:="", pTexture:="", pD3D2:="", pViewPort2:="", pTexture2:="", pD3D3:="", pViewPort3="", pVerTexBuffer:=""
pDevice3:="", pDevice2:="", pDevice:="", pExecBuffer:=""
device := d3d.IID_IDirect3DHALDevice
GUID_FromString(idd_d3d, d3d.IID_IDirect3D)
r := dllcall(IDirectDraw.QueryInterface, uint, IDirectDraw.p, uint, &idd_d3d, "uint*", pD3D, uint)
print("Direct3D: " r ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirect3D Interface " r " - " ddraw.err[r . ""]
else IDirect3D := new ComInterfaceWrapper(d3d.IDirect3d, pD3D, True)
GUID_FromString(idd_ViewPort, d3d.IID_IDirect3DViewport)
r := dllcall(IDirect3D.CreateViewport, uint, IDirect3D.p, "uint*", pViewPort, uint, 0, uint)
Print("ViewPort: " r  ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirect3DViewPort Interface " r " - " d3D.err[r . ""]
else IDirect3DViewPort := new ComInterfaceWrapper(d3d.IDirect3DViewPort, pViewPort, True)
GUID_FromString(idd_texture, d3d.IID_IDirect3DTexture)
r := dllcall(IDirectDrawSurface.QueryInterface, uint, IDirectDrawSurface2.p
, ptr, &idd_texture, "uint*", pTexture, uint)
Print("Texture: " 	r  ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirect3DTexture Interface " r " - " d3D.err[r . ""]
else IDirect3DTexture := new ComInterfaceWrapper(d3d.IDirect3DTexture, pTexture, True)
GUID_FromString(idd_d3d, d3d.IID_IDirect3D2)
r := dllcall(IDirectDraw.QueryInterface, uint, IDirectDraw.p, uint, &idd_d3d, "uint*", pD3D2, uint)
print("Direct3D2: " r ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirect3D2 Interface " r " - " ddraw.err[r . ""]
else IDirect3D2 := new ComInterfaceWrapper(d3d.IDirect3d2, pD3D2, True)
GUID_FromString(idd_ViewPort, d3d.IID_IDirect3DViewport2)
r := dllcall(IDirect3D2.CreateViewport, uint, IDirect3D2.p, "uint*", pViewPort2, uint, 0, uint)
Print("ViewPort2: " r  ":" d3D.err[r . ""] "`n")
if r
return "Failed to create the IDirect3DViewPor2 Interface " r " - " d3D.err[r . ""]
else IDirect3DViewPort2 := new ComInterfaceWrapper(d3d.IDirect3DViewPort2, pViewPort2, True)
GUID_FromString(idd_texture, d3d.IID_IDirect3DTexture2)
r := dllcall(IDirectDrawSurface.QueryInterface, uint, IDirectDrawSurface.p
, ptr, &idd_texture, "uint*", pTexture2, uint)
Print("Texture2: " 	r  ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirect3DTexture2 Interface " r " - " d3D.err[r . ""]
else IDirect3DTexture2 := new ComInterfaceWrapper(d3d.IDirect3DTexture2, pTexture2, True)
GUID_FromString(idd_d3d, d3d.IID_IDirect3D3)
r := dllcall(IDirectDraw.QueryInterface, uint, IDirectDraw.p, uint, &idd_d3d, "uint*", pD3D3, uint)
print("Direct3D3: " r ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirect3D3 Interface " r " - " ddraw.err[r . ""]
else IDirect3D3 := new ComInterfaceWrapper(d3d.IDirect3d3, pD3D3, True)
r := dllcall(IDirect3D3.CreateViewport, uint, IDirect3D3.p, "uint*", pViewPort3, uint, 0, uint)
Print("ViewPort3: " r  ":" d3D.err[r . ""] "`n")
if r
return "Failed to create the IDirect3DViewPor2 Interface " r " - " d3D.err[r . ""]
else IDirect3DViewPort3 := new ComInterfaceWrapper(d3d.IDirect3DViewPort3, pViewPort3, True)
D3DVERTEXBUFFERDESC.dwSize := D3DVERTEXBUFFERDESC.size()
D3DVERTEXBUFFERDESC.dwFVF := D3DFVF_XYZRHW | D3DFVF_DIFFUSE
D3DVERTEXBUFFERDESC.dwNumVertices := 4
r := dllcall(IDirect3D3.CreateVertexBuffer, uint, IDirect3D3.p, uint, D3DVERTEXBUFFERDESC[], "uint*", pVerTexBuffer
, uint, 0, uint, 0, uint)
Print("VertexBuffer: " r  ":" d3D.err[r . ""] "`n")
if r
return "Failed to create the IDirect3DVertexBuffer Interface " r " - " d3D.err[r . ""]
else IDirect3DVertexBuffer := new ComInterfaceWrapper(d3d.IDirect3DVertexBuffer, pVerTexBuffer, True)
GUID_FromString(idd_d3DDevice, device)
r := dllcall(IDirect3D3.CreateDevice, uint, IDirect3D3.p, ptr, &idd_d3DDevice, uint, IDirectDrawSurface4.p, "uint*", pDevice3, uint, 0, uint)
Print("Device3: " r  ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirect3DDevice3 Interface " r " - " d3D.err[r . ""] IDirectDrawSurface4.p
else IDirect3DDevice3 := new ComInterfaceWrapper(d3d.IDirect3DDevice3, pDevice3, True)
GUID_FromString(idd_d3DDevice2, d3d.IID_IDirect3DDevice2)
r := dllcall(IDirect3DDevice3.QueryInterface, uint, IDirect3DDevice3.p, uint, &idd_d3DDevice2, "uint*", pDevice2, uint)
if r
return "Failed to create the IDirect3DDevice2 Interface " r " - " d3D.err[r . ""]
else IDirect3DDevice2 := new ComInterfaceWrapper(d3d.IDirect3DDevice2, pDevice2, True)
GUID_FromString(idd_d3DDevice, "{64108800-957d-11d0-89ab-00a0c9054129}")
r := dllcall(IDirect3DDevice3.QueryInterface, uint, IDirect3DDevice3.p, uint, &idd_d3DDevice, "uint*", pDevice, uint)
if r
return "Failed to create the IDirect3DDevice Interface " r " - " D3D.err[r . ""]
else IDirect3DDevice := new ComInterfaceWrapper(d3d.IDirect3DDevice, pDevice, True)
D3DEXECUTEBUFFERDESC.dwSize       := D3DEXECUTEBUFFERDESC.size()
D3DEXECUTEBUFFERDESC.dwFlags      := 0x00000001
D3DEXECUTEBUFFERDESC.dwBufferSize := 16
r := dllcall(IDirect3DDevice.CreateExecuteBuffer, uint, IDirect3DDevice.p, uint, D3DEXECUTEBUFFERDESC[], "uint*", pExecBuffer, uint, 0, uint)
Print("Exec Buffer: " r  ":" d3D.err[r . ""] "`n")
if r
return "Failed to create the IDirect3DExecuteBuffer Interface " r " - " D3D.err[r . ""]
else IDirect3DExecuteBuffer :=	new ComInterfaceWrapper(d3d.IDirect3DExecuteBuffer, pExecBuffer, True)
return "Succeeded to create Direct3D"
}
class D3DWin9xFlag{
__New(){
if (g_.cfg.layer and instr(g_.cfg.compatLayer, "WIN9"))
msgbox % dllcall("peixoto.dll/SetWin9xFlag", uint, 1) errorlevel
}
__Delete(){
if (g_.cfg.layer and instr(g_.cfg.compatLayer, "WIN9"))
dllcall("peixoto.dll/SetWin9xFlag", uint, 0)
}
}
ReleaseDirectDraw()
{
if (g_.cfg.layer and instr(g_.cfg.compatLayer, "WIN9"))
return
for k, v in [IDirect3DDevice7, IDirect3DVertexBuffer7, IDirect3D7, IDirectDrawSurface7, IDirectDraw7
,IDirect3DDevice3, IDirect3DViewPort3, IDirect3DVertexBuffer,
,IDirect3DDevice2, IDirect3DViewPort2, IDirect3DTexture2, IDirect3DExecuteBuffer
,IDirect3DDevice, IDirect3DViewPort, IDirect3DTexture
,IDirect3D3, IDirect3D2, IDirect3D
,IDirectDrawClipper, IDirectDrawPalette, IDirectDrawGammaControl, IDirectDrawSurface
,IDirectDrawSurface2, IDirectDrawSurface3, IDirectDrawSurface4
,IDirectDraw4, IDirectDraw2, "FIX ME: Not Releasing DirectDraw"]
isobject(v) ? logerr("Releasing " v.name " " v.p " " v.__release())
}
GetDirect3D7()
{
if !(pdirectdrawcreateEx := g_.p.DDCreateEx)
{
h_ddrawdll          := dllcall("LoadLibrary", str, "ddraw.dll")
pdirectdrawcreateEx := dllcall("GetProcAddress", int, h_ddrawdll, astr, "DirectDrawCreateEx")
if not h_ddrawdll or not pdirectdrawcreateEx
return "Failed to load ddraw.dll"
}
GUID_FromString(idd_ddraw7, ddraw.IID_IDirectDraw7)
r := dllcall(pdirectdrawcreateEx, uint, 0, "uint*", pddraw7:=0, uint, &idd_ddraw7, int, 0, uint)
printl("Directdraw7 " r ddraw.err[r . ""])
if (g_.cfg.layer)
{
pddraw7 := dllcall("Peixoto\WrappDDraw7Object", ptr, pddraw7, ptr)
}
if not r
IDirectDraw7 := new ComInterfaceWrapper(ddraw.IDirectDraw7, pddraw7, True)
else return "Failed to create the IDirectDraw7 interface " r " - " ddraw.err[r . ""]
r := dllcall(IDirectDraw7.SetCooperativeLevel, ptr, IDirectDraw7.p, uint, 0, int, DDSCL_NORMAL, uint)
Print("CoopLevel: " r  ":" ddraw.err[r . ""] "`n")
if r
return "Failed to set the Cooperatve Level " r " - " ddraw.err[r . ""]
DDSURFACEDESC.dwsize                 := DDSURFACEDESC.size()
DDSURFACEDESC2.dwSize                := DDSURFACEDESC2.size()
(D:= struct(DDSURFACEDESC2)).dwSize  := DDSURFACEDESC2.size()
D.dwFlags        := DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH
D.ddsCaps.dwCaps := DDSCAPS_3DDEVICE | DDSCAPS_VIDEOMEMORY
D.dwWidth        := 640
D.dwHeight       := 480
SetPixelFormat(D, "X8RGB")
r := dllcall(IDirectDraw7.CreateSurface, uint, IDirectDraw7.p, uint, D[], "ptr*", pPrimary:=0, uint, 0, uint)
print("Surface7: " r  ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirectDrawSurface7 Interface " r " - " ddraw.err[r . ""]
else IDirectDrawSurface7 := new ComInterfaceWrapper(ddraw.IDirectDrawSurface7, pPrimary, True)
GUID_FromString(idd_surf, ddraw.IID_IDirectDrawSurface)
r := dllcall(IDirectDrawSurface7.QueryInterface, uint, IDirectDrawSurface7.p, uint, &idd_surf, "uint*", pSurface:=0)
print("Surface: " r  ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirectDrawSurface Interface " r " - " ddraw.err[r . ""]
else IDirectDrawSurface := new ComInterfaceWrapper(ddraw.IDirectDrawSurface, pSurface, True)
GUID_FromString(idd_4, ddraw.IID_IDirectDrawSurface4)
r := dllcall(IDirectDrawSurface7.QueryInterface, uint, IDirectDrawSurface7.p, uint, &idd_4, "uint*", pS4:=0)
print("Surface4: " r  ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirectDrawSurface4 Interface " r " - " ddraw.err[r . ""]
else IDirectDrawSurface4 := new ComInterfaceWrapper(ddraw.IDirectDrawSurface4, pS4, True)
GUID_FromString(idd_gamma, ddraw.IID_IDirectDrawGammaControl)
r := dllcall(IDirectDrawSurface.QueryInterface, uint, IDirectDrawSurface.p, uint, &idd_gamma, "uint*", pGamma:=0, uint)
if r
return "Failed to create the IDirectDrawGammaControl Interface " r " - " ddraw.err[r . ""]
IDirectDrawGammaControl := new ComInterfaceWrapper(ddraw.IDirectDrawGammaControl, pGamma, True)
r := dllcall(IDirectDraw.CreateClipper, uint, IDirectDraw.p, uint, 0, "uint*", pClipper:=0, uint, 0, uint)
if r
return "Failed to create the IDirectDrawCliper Interface " r " - " ddraw.err[r . ""]
IDirectDrawClipper := new ComInterfaceWrapper(ddraw.IDirectDrawClipper, pClipper, True)
GUID_FromString(idd_d3D7, d3d.IID_IDirect3D7)
r := dllcall(IDirectDraw7.QueryInterface, uint, IDirectDraw7.p, uint, &idd_d3D7, "uint*", pd3D7:=0, uint)
print("d3D7: " r  ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirect3D7 Interface " r " - " ddraw.err[r . ""]
else IDirect3D7 := new ComInterfaceWrapper(d3D.IDirect3D7, pd3D7, True)
D3DVERTEXBUFFERDESC.dwSize := D3DVERTEXBUFFERDESC.size()
D3DVERTEXBUFFERDESC.dwFVF := D3DFVF_XYZRHW | D3DFVF_DIFFUSE
D3DVERTEXBUFFERDESC.dwNumVertices := 4
r := dllcall(IDirect3D7.CreateVertexBuffer, uint, IDirect3D7.p, uint, D3DVERTEXBUFFERDESC[], "uint*", pVerTexBuffer:=0, uint, 0, uint)
Print("VertexBuffer7: " r  ":" d3D.err[r . ""] "`n")
if r
return "Failed to create the IDirect3DVertexBuffer7 Interface " r " - " d3D.err[r . ""]
else IDirect3DVertexBuffer7 := new ComInterfaceWrapper(d3d.IDirect3DVertexBuffer7, pVerTexBuffer, True)
devices := 	{"RGB Emulation" : d3d.IID_IDirect3DRGBDevice, "Direct3D HAL" :  d3d.IID_IDirect3DHALDevice
, "Direct3D T&L HAL" : d3d.IID_IDirect3DTnLHalDevice }
GUID_FromString(idd_device7, devices["Direct3D HAL"])
r := dllcall(IDirect3D7.CreateDevice, uint, IDirect3D7.p,  uint, &idd_device7, uint, pPrimary, "uint*", pd3Ddevice7:=0, uint)
print("D3DDevice7: " r  ":" ddraw.err[r . ""] "`n")
if r
return "Failed to create the IDirect3DDevice7 Interface " r " - " ddraw.err[r . ""]
else IDirect3DDevice7 := new ComInterfaceWrapper(d3d.IDirect3DDevice7, pd3Ddevice7, True)
return "Succeeded to create the DirectDraw7 and Direct3D7 Interfaces"
}
class Surface {
__new(DD, px="", res="", sys=False, m=False)
{
(D      := struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC.size()
(Display:= struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC.size()
px ?: px := (D3DHOOKS_DATA.D=16) ? "RG6B" : (D3DHOOKS_DATA.D=8) ? "PAL8" : "X8RGB"
if res {
resw := (res>>16) & 0xffff
resh :=  res & 0xffff
}else  if (g_.cfg.HD)  {
resw := D3DHOOKS_DATA.w
resh := D3DHOOKS_DATA.h
}else  {
dllcall(IDirectDraw.GetDisplayMode, uint, DD, uint, Display[])
resw :=  Display.dwWidth
resh :=  Display.dwHeight
}
pSurface         := 0
D.ddckCKSrcBlt.dwColorSpaceLowValue  := (D3DHOOKS_DATA.D=16) ? 0xF81f : 0xFFFF00FF
D.ddckCKSrcBlt.dwColorSpaceHighValue := (D3DHOOKS_DATA.D=16) ? 0xF81f : 0xFFFF00FF
D.dwFlags        := DDSD_CAPS | DDSD_WIDTH | DDSD_HEIGHT | DDSD_PIXELFORMAT | DDSD_CKSRCBLT
D.dwWidth        := resw
D.dwHeight       := resh
cps := (px = "PAL8") ? DDSCAPS_OFFSCREENPLAIN : (px = "A4RGB") ? DDSCAPS_TEXTURE : DDSCAPS_TEXTURE | DDSCAPS_3DDEVICE
mem := sys ? DDSCAPS_SYSTEMMEMORY : DDSCAPS_VIDEOMEMORY
D.ddsCaps.dwCaps := cps | mem
m ? D.ddsCaps.dwCaps |= (DDSCAPS_MIPMAP | DDSCAPS_COMPLEX)
SetPixelFormat(D, px)
r := dllcall(IDirectDraw.CreateSurface, uint, DD, uint, D[], "ptr*", pSurface, uint, 0, uint)
if (r = DDERR_NODIRECTDRAWHW)
{
D.ddsCaps.dwCaps := 0
r := dllcall(IDirectDraw.CreateSurface, uint,DD, uint, D[], "ptr*", pSurface, uint, 0, uint)
}
printl("Create Surrogate - Surface1 " r " " ddraw.err[r . ""] " format " px " "
. D.dwWidth "x" D.dwHeight)
if r
return
this.Surface := pSurface
this.flip    := 0
pSurface4 := 0, pTexture2 := 0
GUID_FromString(idd_surface4, ddraw.IID_IDirectDrawSurface4)
r := dllcall(IDirectDrawSurface.QueryInterface, uint, this.Surface, ptr, &idd_surface4, "ptr*", pSurface4, uint)
Printl("Create Surrogate - Surface4 " r " " ddraw.err[r . ""])
if r
return
this.Surface4 := pSurface4
GUID_FromString(idd_texture2, d3d.IID_IDirect3DTexture2)
r := dllcall(IDirectDrawSurface.QueryInterface, uint, this.Surface, ptr, &idd_texture2, "ptr*", pTexture2, uint)
printl("Create Surrogate - Texture2 " r " " ddraw.err[r . ""])
if r
return
this.Texture := pTexture2
}
GetHandle(pDevice) {
if not this.Texture
return
handle := 0
r := dllcall(IDirect3DTexture2.GetHandle, uint, this.Texture, uint, pDevice, "uint*", handle)
printl("Create Surrogate - Handle " r " " d3D.err[r . ""])
this.handle := handle
}
Attach(s)
{
if ( (r := dllcall(IDirectDrawSurface.AddAttachedSurface, uint, this.surface, uint, s, uint)) = 0)
{
dllcall(IDirectDrawSurface.addref, uint, this.flip := s	)
GUID_FromString(iid, ddraw.IID_IDirectDrawSurface4)
if (dllcall(IDirectDrawSurface.QueryInterface, uint, this.flip, ptr, &iid, "ptr*", p4:=0, uint) = 0)
dllcall(IDirectDrawSurface4.release, uint, p4)
this.flip4 := p4
} else {
logerr("Surface::Attach : AddAttachedSurface FAILED " r " " ddraw.err[r . ""])
}
}
Mip4()
{
dllcall(IDirectDrawSurface.addref, uint, this.surface4)
s := this.surface4
c := DDSCAPS_TEXTURE | DDSCAPS_MIPMAP
Loop
{
d := 0
if dllcall(IDirectDrawSurface4.GetAttachedSurface, uint, s, "uint*", c, "uint*", d)
{
dllcall(IDirectDrawSurface4.release, uint, s)
break
}
if dllcall(IDirectDrawSurface4.blt, uint, d, uint, 0, uint, s, uint, 0, uint, 0, uint, 0)
logerr("mip blt failed")
dllcall(IDirectDrawSurface4.release, uint, s)
s := d
}
}
Check()
{
if ! dllcall(IDirectDrawSurface.isLost, uint, this.surface)
return
dllcall(IDirectDrawSurface.restore, uint, this.surface)
(this.flip) ? dllcall(IDirectDrawSurface.restore, uint, this.flip)
}
IsThatYou(s){
_this := dllcall(g_.p.GetSurfaceID, ptr, this.surface)
_that := dllcall(g_.p.GetSurfaceID, ptr, s)
if (_this and _this = _that)
return True
return False
}
__Delete()
{
(this.Texture) ? printl("Releasing Surrogate Texture2 " dllcall(IDirect3DTexture2.release, uint, this.Texture, uint))
(this.Surface4) ? printl("Releasing Surrogate Surface4 " dllcall(IDirectDrawSurface4.release, uint, this.Surface4))
(this.flip)  ? printl("Deleting  Attachment " ddraw.err["" . dllcall(IDirectDrawSurface.release, uint, this.flip, uint, 0, uint, 0, uint)])
(this.Surface) ? printl("Releasing Surrogate Surface1 " dllcall(IDirectDrawSurface.release, uint, this.Surface))
}
}
class TxlSz
{
__new(w=0, h=0)
{
this.w := D3DHOOKS_DATA.w
this.h := D3DHOOKS_DATA.h
D3DHOOKS_DATA.w := w
D3DHOOKS_DATA.h := h
g_.proxies.prms[1] := 1/D3DHOOKS_DATA.w
g_.proxies.prms[2] := 1/D3DHOOKS_DATA.h
}
__delete()
{
D3DHOOKS_DATA.w := this.w
D3DHOOKS_DATA.h := this.h
g_.proxies.prms[1] := 1/D3DHOOKS_DATA.w
g_.proxies.prms[2] := 1/D3DHOOKS_DATA.h
}
}
class D3DDevice {
__new(DD, res="", px="", fgs="")
{
(D       := struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC.size()
(Display := struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC.size()
D.dwFlags := DDSD_CAPS | DDSD_WIDTH | DDSD_HEIGHT | DDSD_PIXELFORMAT
dllcall(IDirectDraw.GetDisplayMode, uint, DD, uint, Display[])
if res {
D.dwWidth  := (res>>16) & 0xffff
D.dwHeight :=  res & 0xffff
}else  {
D.dwWidth := Display.dwWidth, D.dwHeight := Display.dwHeight
}
pS               := 0
D.ddsCaps.dwCaps := DDSCAPS_3DDEVICE | DDSCAPS_VIDEOMEMORY | DDSCAPS_TEXTURE
SetPixelFormat(D, px?px:GetPixelFormat(Display))
r := dllcall(IDirectDraw.CreateSurface, uint, DD, uint, D[], "ptr*", pS, uint, 0, uint)
if (r = DDERR_INVALIDPIXELFORMAT)
{
D.dwFlags := DDSD_CAPS | DDSD_WIDTH | DDSD_HEIGHT
r := dllcall(IDirectDraw.CreateSurface, uint, DD, uint, D[], "ptr*", pS, uint, 0, uint)
}
printl("Create device - Surface1 "  r " " ddraw.err[r . ""] D.dwWidth " x " D.dwHeight)
if r
return
this.ww      := D.dwWidth
this.hh      := D.dwHeight
this.Surface := pS
pS4:=0, pD3D:=0, pT2:=0, pD3:=0, pVW:=0
GUID_FromString(iid4, ddraw.IID_IDirectDrawSurface4)
GUID_FromString(iid2, d3d.IID_IDirect3DTexture2)
r := dllcall(IDirectDrawSurface.QueryInterface, uint, this.Surface, ptr, &iid4, "ptr*", pS4, uint)
printl("Create device - Surface4 " r " " ddraw.err[r . ""])
if r
return
this.Surface4 := pS4
if (fgs & 1)
{
D.ddsCaps.dwCaps := DDSCAPS_ZBUFFER
D.ddpfPixelFormat.dwRGBBitCount := 16
D.ddpfPixelFormat.dwGBitMask    := 0xffff
r := dllcall(IDirectDraw.CreateSurface, uint, DD, uint, D[], "ptr*", pZ:=0, uint, 0, uint)
printl("Create device - Zbuffer " r " " ddraw.err[r . ""])
this.z4 := pZ
r := dllcall(IDirectDrawSurface.AddAttachedSurface, uint, this.surface, uint, pZ)
printl("Create device - Attatch Z " r " " ddraw.err[r . ""])
}
r := dllcall(IDirectDrawSurface.QueryInterface, uint, this.Surface, ptr, &iid2, "ptr*", pT2, uint)
printl("Create device - Texture2 " r " " d3d.err[r . ""])
if r
return
this.Texture := pT2
GUID_FromString(iid3D, d3d.IID_IDirect3D3)
GUID_FromString(iidDv, d3d.IID_IDirect3DHALDevice)
r := dllcall(IDirectDraw.QueryInterface, uint, DD, ptr, &iid3D, "ptr*", pD3D, uint)
printl("Create device - Direct3D " r " " ddraw.err[r . ""])
if r
return
r := dllcall(IDirect3D3.CreateDevice, uint, pD3D, ptr, &iidDv, uint, this.surface4, "uint*", pD3, uint, 0, uint)
Printl("Create device - Device3  " r  " " ddraw.err[r . ""])
if this.reset(r, DD)
{
r := dllcall(IDirect3D3.CreateDevice, uint, pD3D, ptr, &iidDv, uint, this.surface4, "uint*", pD3, uint, 0, uint)
Printl("Create device - Device3  " r  " " ddraw.err[r . ""])
if r
return
}
this.Device3 := pD3
GUID_FromString(Dev2, d3d.IID_IDirect3DDevice2)
r := dllcall(IDirect3DDevice3.QueryInterface, uint, pD3, ptr, &Dev2, "uint*", pD2:=0, uint, 0, uint)
Printl("Create device - Device2  " r  " " ddraw.err[r . ""])
if r
return
this.Device2 := pD2
r := dllcall(IDirect3D3.CreateViewport, uint, pD3D, "uint*", pVW, uint, 0, uint)
Printl("Create device - ViewPort: " r  ":" d3D.err[r . ""])
if r
return
this.viewport := pVW
printl("Add viewport " dllcall(IDirect3DDevice3.AddViewport, uint, pD3, uint, pVW))
printl("Set viewport " dllcall(IDirect3DDevice3.SetCurrentViewport, uint, pD3, uint, pVW))
v := this.VW(this.ww, this.hh)
dllcall(IDirect3DViewPort3.SetViewPort2, uint, pVW, uint, v[], uint)
dllcall(IDirect3DViewport3.release, uint, pVW)
dllcall(IDirect3DDevice3.SetTextureStageState, uint, pD3, uint, 0, uint, 12, uint, 3)
dllcall(IDirect3DDevice3.SetTextureStageState, uint, pD3, uint, 1, uint, 12, uint, 3)
dllcall(IDirect3DDevice3.SetTextureStageState, uint, pD3, uint, 0, uint, 16, uint, 1)
dllcall(IDirect3DDevice3.SetTextureStageState, uint, pD3, uint, 1, uint, 16, uint, 2)
dllcall(IDirect3D3.release, uint, pD3D)
}
Trgt(t="")
{
t := t ? t.surface4 : this.Surface4
r := dllcall(IDirect3DDevice3.SetRenderTarget, uint, this.Device3, uint, t)
(D := struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC2.size()
dllcall(IDirectDrawSurface4.GetSurfaceDesc, uint, t, uint, D[])
dllcall(IDirect3DViewPort3.SetViewPort2, uint, this.viewport, uint, this.VW(d.dwWidth, d.dwHeight)[], uint)
return r
}
Reset(r, DD)
{
if ddraw.err[r . ""] = "DDERR_INVALIDPIXELFORMAT"
{
dllcall(IDirectDraw.SetDisplayMode, uint, DD, uint, D3DHOOKS_DATA.HD_W, uint, D3DHOOKS_DATA.HD_H, uint, 32)
dllcall(IDirectDrawSurface.restore, uint, g_.primary)
dllcall(IDirectDrawSurface4.restore, uint, this.Surface4)
return True
}
}
VW(w, h){
static v
(v := struct(D3DVIEWPORT2)).dwSize := D3DVIEWPORT2.size()
v.dwX         := 0,  v.dwY          := 0
v.dwWidth     := w,  v.dwHeight     := h
v.dvClipX     := 0,  v.dvClipY      := 0
v.dvClipWidth := w,  v.dvClipHeight := h
v.dvMinZ      := 0., v.dvMaxZ       := 1.
return v
}
SetTexture(s, t)
{
return dllcall(IDirect3DDevice3.SetTexture, uint, this.Device3, uint, s, uint, t)
}
draw(d=0, t=0, s=0, p=0, o=0)
{
DEVICE3_RECT.Texture := t
DEVICE3_RECT.Device3 := this.Device3
if (p)
{
D3DDDI_SetShaderOverride(p)
dllcall(G_D3DDDI.SetPixelShaderConst, uint, 0, "uint64*", 223 | 1<<32, uint, g_.proxies.prms[]+o)
}
dllcall(g_.p.Dev3_DrawRect, uint, DEVICE3_RECT[], uint, d, uint, s, uint)
D3DDDI_RestoreShader()
}
draw2(d=0, t=0, s=0, p=0, o=0)
{
DEVICE2_RECT.Text    := t
DEVICE2_RECT.Device2 := this.Device2
if (p)
{
D3DDDI_SetShaderOverride(p)
dllcall(G_D3DDDI.SetPixelShaderConst, uint, 0, "uint64*", 223 | 1<<32, uint, g_.proxies.prms[]+o)
}
dllcall(g_.p.Dev2_DrawRect, uint, DEVICE2_RECT[], uint, d, uint, s, uint)
D3DDDI_RestoreShader()
}
Blt(d, dr, s=0, sr=0, p=0)
{
this.Trgt(d)
this.draw(dr, s, sr, p)
this.Trgt()
}
DrawRect(target, target_rect, src, src_rect, flags)
{
this.Trgt(target)
DEVICE3_RECT.Texture := src.texture
DEVICE3_RECT.Device3 := this.Device3
dllcall(g_.p.Dev3_DrawRctWithFlags, uint, DEVICE3_RECT[], uint, target_rect, uint, 0, uint, flags)
dllcall(IDirect3DDevice3.SetRenderTarget, uint, this.Device3, uint, g_.rtrgt)
}
Mip()
{
dllcall(IDirectDrawSurface.addref, uint, this.surface)
s := this.surface
c := DDSCAPS_TEXTURE | DDSCAPS_MIPMAP
Loop
{
d := 0
if dllcall(IDirectDrawSurface.GetAttachedSurface, uint, s, "uint*", c, "uint*", d)
{
dllcall(IDirectDrawSurface.release, uint, s)
break
}
if dllcall(IDirectDrawSurface.blt, uint, d, uint, 0, uint, s, uint, 0, uint, 0, uint, 0)
logerr("mip blt failed")
dllcall(IDirectDrawSurface.release, uint, s)
s := d
}
}
Check()
{
if dllcall(IDirectDrawSurface.isLost, uint, this.surface)
dllcall(IDirectDrawSurface.restore, uint, this.surface)
}
__delete() {
(this.viewport && this.Device3) ? printl("Delete Vieport " dllcall(IDirect3DDevice3.DeleteViewport, uint, this.Device3, uint, this.viewport))
(this.Device2)  ? printl("Releasing DSurrogate Device2 " dllcall(IDirect3DDevice2.release, uint, this.Device2))
(this.Device3)  ? printl("Releasing DSurrogate Device  " dllcall(IDirect3DDevice3.release, uint, this.Device3))
(this.Surface) ? printl("Releasing DSurrogate Surface4 " dllcall(IDirectDrawSurface.release, uint, this.Surface))
(this.Surface4) ? printl("Releasing DSurrogate Surface4 " dllcall(IDirectDrawSurface4.release, uint, this.Surface4))
(this.Texture) ? printl("Releasing DSurrogate Texture2 " dllcall(IDirect3DTexture2.release, uint, this.Texture))
(this.Surface) ? printl("Releasing DSurrogate Surface1 " dllcall(IDirectDrawSurface.release, uint, this.Surface))
(this.z4) ? printl("Releasing DSurrogate Surface4 " dllcall(IDirectDrawSurface4.release, uint, this.z4))
}
}
class zprx {
__new(rt, s)
{
dd := dllcall(g_.p.DDFrmSrfc, uint, s)
GUID_FromString(iid, ddraw.IID_IDirectDraw4)
r := dllcall(IDirectDraw.QueryInterface, uint, dd, uint, &iid, "uint*", dd4:=0)
Printl("Create z surface - ddraw     " r  " " ddraw.err[r . ""])
D         := struct(DDSURFACEDESC2)
D.dwSize  := DDSURFACEDESC2.size()
r         := dllcall(IDirectDrawSurface4.GetSurfaceDesc, uint, s, uint, D[])
Printl("Create z surface - z  desc      " r  " " ddraw.err[r . ""])
D_        := struct(DDSURFACEDESC2)
D_.dwSize := DDSURFACEDESC2.size()
r         := dllcall(IDirectDrawSurface4.GetSurfaceDesc, uint, rt, uint, D_[])
Printl("Create z surface - rt desc      " r  " " ddraw.err[r . ""])
if (g_.cfg.z24 && D.ddpfPixelFormat.dwZBufferBitDepth = 16)
{
c                := D.ddsCaps.dwCaps
D.ddsCaps.dwCaps := DDSCAPS_ZBUFFER | DDSCAPS_SYSTEMMEMORY
r := dllcall(IDirectDraw4.CreateSurface, uint, dd4, uint, d[], "uint*", z16:=0, uint, 0)
Printl("Create z16 surface - surf4   " r  " " ddraw.err[r . ""])
this.SD16 := z16
D.ddpfPixelFormat.dwRGBBitCount := 24
D.ddpfPixelFormat.dwGBitMask    := 0xffffff00
D.ddsCaps.dwCaps                := c
r := dllcall(IDirectDraw4.CreateSurface, uint, dd4, uint, d[], "uint*", z24:=0, uint, 0)
Printl("Create z24 surface - surf4   " r  " " ddraw.err[r . ""])
this.SD24 := z24
}
D.dwWidth  := D_.dwWidth
D.dwHeight := D_.dwHeight
r := dllcall(IDirectDraw4.CreateSurface, uint, dd4, uint, d[], "uint*", z4:=0, uint, 0)
Printl("Create z surface - surf4     " r  " " ddraw.err[r . ""])
GUID_FromString(iid, ddraw.IID_IDirectDrawSurface)
r := dllcall(IDirectDrawSurface4.QueryInterface, uint, z4, ptr, &iid, "ptr*", z1:=0, uint)
printl("Create z surface - surf1     " r " " ddraw.err[r . ""])
r := dllcall(IDirectDraw4.release, uint, dd4)
printl("Create z surface - release4  " r " ")
this.Surface  := z1
this.Surface4 := z4
this.ID       := dllcall(g_.p.GetSurfaceID, uint, s)
dllcall(IDirectDrawSurface.addRef, ptr, s)
logerr("z id " this.ID)
}
__delete()
{
(this.Surface4) ? printl("Releasing z Surface4 " dllcall(IDirectDrawSurface4.release, uint, this.Surface4))
(this.Surface)  ? printl("Releasing z Surface1 " dllcall(IDirectDrawSurface.release, uint, this.Surface))
(this.SD24)     ? printl("Releasing z Surface24 " dllcall(IDirectDrawSurface4.release, uint, this.SD24))
(this.SD16)     ? printl("Releasing z Surface16 " dllcall(IDirectDrawSurface4.release, uint, this.SD16))
dllcall(IDirectDrawSurface4.release, uint, this.ID)
}
}
class Surface7 {
__new(dd7, px="", res="", sys=False)
{
(D      := struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC2.size()
(Display:= struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC2.size()
px ?: px := (D3DHOOKS_DATA.D=16) ? "RG6B" : (D3DHOOKS_DATA.D=8) ? "PAL8" : "X8RGB"
if res {
resw := (res>>16) & 0xffff
resh :=  res & 0xffff
}else if (g_.cfg.HD)  {
resw := D3DHOOKS_DATA.w
resh := D3DHOOKS_DATA.h
}else  {
dllcall(IDirectDraw7.GetDisplayMode, uint, dd7, uint, Display[])
resw :=  Display.dwWidth
resh :=  Display.dwHeight
}
pSurface         := 0
D.ddckCKSrcBlt.dwColorSpaceLowValue  := (D3DHOOKS_DATA.D=16) ? 0xF81f : 0xFFFF00FF
D.ddckCKSrcBlt.dwColorSpaceHighValue := (D3DHOOKS_DATA.D=16) ? 0xF81f : 0xFFFF00FF
D.dwFlags        := DDSD_CAPS | DDSD_WIDTH | DDSD_HEIGHT | DDSD_PIXELFORMAT | DDSD_CKSRCBLT
D.dwWidth        := resw
D.dwHeight       := resh
cps := (px = "PAL8" || sys) ? DDSCAPS_OFFSCREENPLAIN : DDSCAPS_TEXTURE | DDSCAPS_3DDEVICE
mem := sys ? DDSCAPS_SYSTEMMEMORY : DDSCAPS_VIDEOMEMORY
D.ddsCaps.dwCaps := cps | mem
SetPixelFormat(D, px)
r := dllcall(IDirectDraw7.CreateSurface, uint, dd7, uint, D[], "ptr*", pSurface, uint, 0, uint)
logerr("Create Surrogate - Surface7 " r " " ddraw.err[r . ""] " format " px " " . D.dwWidth "x" D.dwHeight)
if r
return
this.Surface7 := pSurface
this.Texture  := pSurface
GUID_FromString(iids, ddraw.IID_IDirectDrawSurface)
r := dllcall(IDirectDrawSurface7.QueryInterface, uint, this.Surface7, uint, &iids, "uint*", pS:=0)
logerr("Create Surrogate - Surface1 " r " " ddraw.err[r . ""])
if r
return
this.Surface := pS
GUID_FromString(iids4, ddraw.IID_IDirectDrawSurface4)
r := dllcall(IDirectDrawSurface7.QueryInterface, uint, this.Surface7, uint, &iids4, "uint*", pS4:=0)
logerr("Create Surrogate - Surface1 " r " " ddraw.err[r . ""])
if r
return
this.Surface4 := pS4
}
Attach(pSurf) {
if ! dllcall(IDirectDrawSurface.AddAttachedSurface, uint, this.Surface, uint, pSurf)
this.flip := pSurf
}
Check()
{
return
if ! dllcall(IDirectDrawSurface.isLost, uint, this.surface)
return
dllcall(IDirectDrawSurface.restore, uint, this.surface)
(this.flip) ? dllcall(IDirectDrawSurface.restore, uint, this.flip)
}
IsThatYou(s){
if (s = this.surface7 || s = this.surface4 || s = this.surface)
return True
GUID_FromString(idd_srfc7, ddraw.IID_IDirectDrawSurface7)
q := dllcall(IDirectDrawSurface.QueryInterface, ptr, s, ptr, &idd_srfc7, "uint*", that:=0)
if (q = 0)
{
dllcall(IDirectDrawSurface.release, uint, that)
}
if (that and that = this.surface7)
return True
return False
}
__Delete()
{
(this.Surface7) ? printl("Releasing Surrogate Surface7 " dllcall(IDirectDrawSurface7.release, uint, this.Surface7))
(this.Surface4) ? printl("Releasing Surrogate Surface4 " dllcall(IDirectDrawSurface4.release, uint, this.Surface4))
(this.Surface)  ? printl("Releasing Surrogate Surface1 " dllcall(IDirectDrawSurface.release, uint, this.Surface))
(this.flip)     ? printl("Deleting  Attachment " ddraw.err["" . dllcall(IDirectDrawSurface.release, uint, this.flip, uint, 0, uint, 0, uint)])
}
}
class D3DDevice7 {
__new(dd7, res="")
{
(D       := struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC2.size()
(Display := struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC2.size()
D.dwFlags := DDSD_CAPS | DDSD_WIDTH | DDSD_HEIGHT | DDSD_PIXELFORMAT
dllcall(IDirectDraw7.GetDisplayMode, uint, dd7, uint, Display[])
if res {
D.dwWidth  := (res>>16) & 0xffff
D.dwHeight :=  res & 0xffff
}else  {
D.dwWidth := Display.dwWidth, D.dwHeight := Display.dwHeight
}
pSurface         := 0
D.ddsCaps.dwCaps := DDSCAPS_3DDEVICE | DDSCAPS_VIDEOMEMORY | DDSCAPS_TEXTURE
SetPixelFormat(D, GetPixelFormat(Display))
r := dllcall(IDirectDraw7.CreateSurface, uint, dd7, uint, D[], "ptr*", pSurface, uint, 0, uint)
logerr("Create device - Surface7 "  r " " ddraw.err[r . ""] )
if r
return
this.ww       := D.dwWidth
this.hh       := D.dwHeight
this.Surface7 := pSurface
this.Texture  := pSurface
GUID_FromString(iids, ddraw.IID_IDirectDrawSurface)
r := dllcall(IDirectDrawSurface7.QueryInterface, uint, this.Surface7, uint, &iids, "uint*", pS:=0)
logerr("Create Surrogate - Surface1 " r " " ddraw.err[r . ""])
if r
return
this.Surface := pS
GUID_FromString(iids4, ddraw.IID_IDirectDrawSurface4)
r := dllcall(IDirectDrawSurface7.QueryInterface, uint, this.Surface7, uint, &iids4, "uint*", pS4:=0)
logerr("Create Surrogate - Surface4 " r " " ddraw.err[r . ""])
if r
return
this.Surface4 := pS4
GUID_FromString(iid, d3d.IID_IDirect3D7)
GUID_FromString(iid_dev, d3d.IID_IDirect3DHALDevice)
r := dllcall(IDirectDraw7.QueryInterface, uint, dd7, ptr, &iid, "ptr*", pD3D7:=0, uint)
logerr("Create device - Direct3D7 " r " " ddraw.err[r . ""])
if r
return r
r := dllcall(IDirect3D7.CreateDevice, uint, pD3D7, ptr, &iid_dev, uint, pSurface, "uint*", pDev7:=0, uint)
logerr("Create device - Device7  " r  " " d3d.err[r . ""] errorlevel)
if r
return r
this.D3D7 := pDev7
dllcall(IDirect3D7.release, uint, pD3D7)
dllcall(IDirect3DDevice7.SetTextureStageState, uint, pDev7, uint, 0, uint, 12, uint, 3)
dllcall(IDirect3DDevice7.SetTextureStageState, uint, pDev7, uint, 1, uint, 12, uint, 3)
dllcall(IDirect3DDevice7.SetTextureStageState, uint, pDev7, uint, 0, uint, 16, uint, 1)
dllcall(IDirect3DDevice7.SetTextureStageState, uint, pDev7, uint, 1, uint, 16, uint, 2)
}
Reset(r)
{
return
}
Trgt(t="")
{
t := t ? t.surface7 : this.Surface7
return dllcall(IDirect3DDevice7.SetRenderTarget, uint, this.D3D7, uint, t)
}
VW(w, h){
return
}
Check()
{
return
}
SetTexture(s, t)
{
return dllcall(IDirect3DDevice7.SetTexture, uint, this.D3D7, uint, s, uint, t)
}
draw(d=0, t=0, s=0, p=0, o=0, w=0, h=0)
{
DEVICE3_RECT.Texture := t
DEVICE3_RECT.Device3 := this.D3D7
if (p)
{
D3DDDI_SetShaderOverride(p)
dllcall(G_D3DDDI.SetPixelShaderConst, uint, 0, "uint64*", 223 | 1<<32, uint, g_.proxies.prms[]+o)
}
dllcall(g_.Dev7_DrawRect, uint, DEVICE3_RECT[], uint, d, uint, s, uint)
D3DDDI_RestoreShader()
}
Blt(d, dr, s=0, sr=0, p=0)
{
this.Trgt(d)
this.draw(dr, s, sr, p)
}
DrawRect(target, target_rect, src, src_rect, flags)
{
this.Trgt(target)
DEVICE3_RECT.Texture := src.Texture
DEVICE3_RECT.Device3 := this.D3D7
dllcall(g_.Dev7_DrawRctWithFlags, ptr, DEVICE3_RECT[], ptr, target_rect, ptr, src_rect, uint, flags)
}
__delete() {
(this.Surface7)  ? printl("Releasing DSurrogate Surface7 " dllcall(IDirectDrawSurface7.release, uint, this.Surface7))
(this.Surface4)  ? printl("Releasing Surrogate Surface4 " dllcall(IDirectDrawSurface4.release, uint, this.Surface4))
(this.Surface1)  ? printl("Releasing Surrogate Surface1 " dllcall(IDirectDrawSurface.release, uint, this.Surface))
(this.D3D7)      ? printl("Releasing DSurrogate Device7 " dllcall(IDirect3DDevice7.release, uint, this.D3D7))
}
}
class zprx7 {
__new(rt, s)
{
r := dllcall(IDirectDrawSurface7.GetDDInterface, uint, s, "Uint*", dd7:=0)
printl("Create z surface - ddraw7     " r  " " ddraw.err[r . ""])
D         := struct(DDSURFACEDESC2)
D.dwSize  := DDSURFACEDESC2.size()
r         := dllcall(IDirectDrawSurface7.GetSurfaceDesc, uint, s, uint, D[])
printl("Create z surface - z  desc      " r  " " ddraw.err[r . ""])
D_        := struct(DDSURFACEDESC2)
D_.dwSize := DDSURFACEDESC2.size()
r         := dllcall(IDirectDrawSurface7.GetSurfaceDesc, uint, rt, uint, D_[])
printl("Create z surface - rt desc      " r  " " ddraw.err[r . ""])
D.dwWidth  := D_.dwWidth
D.dwHeight := D_.dwHeight
if (g_.cfg.z24 && D.ddpfPixelFormat.dwZBufferBitDepth = 16)
{
D.ddpfPixelFormat.dwRGBBitCount := 24
D.ddpfPixelFormat.dwGBitMask    := 0xffffff00
}
r := dllcall(IDirectDraw7.CreateSurface, uint, dd7, uint, d[], "uint*", z7:=0, uint, 0)
printl("Create z surface - surf7     " r  " " ddraw.err[r . ""])
GUID_FromString(iid, ddraw.IID_IDirectDrawSurface)
r := dllcall(IDirectDrawSurface7.QueryInterface, uint, z7, ptr, &iid, "ptr*", z1:=0, uint)
printl("Create z surface - surf1     " r " " ddraw.err[r . ""])
r := dllcall(IDirectDraw7.release, uint, dd7)
printl("Create z surface - release7  " r " ")
this.Surface  := z1
this.Surface7 := z7
}
__delete()
{
(this.Surface7) ? printl("Releasing z Surface7 " dllcall(IDirectDrawSurface7.release, uint, this.Surface7))
(this.Surface)  ? printl("Releasing z Surface1 " dllcall(IDirectDrawSurface.release, uint, this.Surface))
}
}
GetSurfaceCaps(surf){
caps:=0
dllcall(IDirectDrawSurface.GetCaps, uint, surf, "uint*", caps)
return caps
}
GetSurfaceCaps4(surf){
VarSetCapacity(caps, 16, 0)
dllcall(IDirectDrawSurface4.GetCaps, uint, surf, "ptr", &caps)
return numget(&caps+0, "uint")
}
GetSurfaceCaps7(surf, i=0){
VarSetCapacity(caps, 16, 0)
dllcall(IDirectDrawSurface7.GetCaps, uint, surf, "ptr", &caps)
return numget(&caps+i, "uint")
}
S7Mem(s)
{
if ( (c := GetSurfaceCaps7(s, 4)) & DDSCAPS2_TEXTUREMANAGE || c & DDSCAPS2_D3DTEXTUREMANAGE )
return 1
if (GetSurfaceCaps7(s) & DDSCAPS_VIDEOMEMORY)
return 2
return 0
}
GetSfc4MemType(s)
{
if ( (c := GetSurfaceCaps4(s)) & DDSCAPS2_TEXTUREMANAGE || c & DDSCAPS2_D3DTEXTUREMANAGE )
return "Managed"
if (GetSurfaceCaps4(s) & DDSCAPS_VIDEOMEMORY)
return "Video"
return "System"
}
GetSrfcPxFmt(s)
{
(D:= struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC.size()
dllcall(IDirectDrawSurface.GetSurfaceDesc, ptr, s, ptr, D[])
return GetPixelFormat(D)
}
GetSrfcPxFmt7(s7)
{
(D:= struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC2.size()
dllcall(IDirectDrawSurface7.GetSurfaceDesc, ptr, s7, ptr, D[])
return GetPixelFormat(D)
}
SetupPrxs7(dd7, prim="")
{
if ! prim
{
if !(g_.cfg.NEFS)
{
logerr(IDirectDrawSurface7.Hook("flip"))
logerr(IDirectDrawSurface7.Hook("EnumAttachedSurfaces"))
}
logerr(IDirectDrawSurface7.Hook("GetPixelFormat"))
logerr(IDirectDrawSurface7.PatchVtable("GetSurfaceDesc"))
logerr(IDirectDraw7.Hook("GetDisplayMode"))
logerr(IDirectDrawSurface7.Hook("AddAttachedSurface"))
D3DHOOKS_DATA.GetDDSCaps := IDirectDrawSurface7.GetCaps
logerr(IDirectDraw.Hook("CreatePalette"))
logerr(IDirectDrawSurface.Hook("GetPalette"))
logerr(IDirectDrawSurface.Hook("SetPalette"))
logerr(IDirectDrawPalette.Hook("SetEntries"))
logerr(IDirectDrawPalette.Hook("GetEntries"))
logerr(IDirectDrawSurface.dllHook("GetDC","SurfaceGetDCHook"))
logerr(IDirectDrawSurface.dllHook("ReleaseDC","SurfaceReleaseDCHook"))
D3DHOOKS_DATA.GetDCPrim := RegisterCallback("Surface1GetDC", "F")
D3DHOOKS_DATA.RelDCPrim := RegisterCallback("Surface1ReleaseDC", "F")
D3DHOOKS_DATA.GetDCSrfc := IDirectDrawSurface.GetDC
D3DHOOKS_DATA.RelDCSrfc := IDirectDrawSurface.ReleaseDC
logerr(IDirectDrawSurface7.dllHook("Lock", "LockSurfaceHook"))
logerr(IDirectDrawSurface7.dllHook("UnLock", "UnLockSurface4Hook"))
D3DHOOKS_DATA.LockSurface    := IDirectDrawSurface7.Lock
D3DHOOKS_DATA.UnLockSurface4 := IDirectDrawSurface7.UnLock
D3DHOOKS_DATA.LockPrimary    := RegisterCallback("Surface7lock", "F")
D3DHOOKS_DATA.UnLockPrimary4 := RegisterCallback("Surface7Unlock", "F")
IDirectDrawSurface.lock      := IDirectDrawSurface7.lock
IDirectDrawSurface4.Unlock   := IDirectDrawSurface7.Unlock
if (g_.cfg.layer) {
logerr(IDirectDrawSurface.dllHook("UnLock", "UnLockSurfaceHook"))
D3DHOOKS_DATA.UnLockPrimary := RegisterCallback("Surface7Unlock", "F")
D3DHOOKS_DATA.UnLockSurface := IDirectDrawSurface.UnLock
}
logerr(IDirectDrawSurface7.dllHook("Blt", "SurfaceBltHook"))
D3DHOOKS_DATA.BltPrimary := RegisterCallback("Surface1Blt", "F")
D3DHOOKS_DATA.BltSurface := IDirectDrawSurface7.blt
IDirectDrawSurface.blt	 := IDirectDrawSurface7.blt
IDirectDrawSurface4.blt	 := IDirectDrawSurface7.blt
if (!g_.cfg.TextSwap)
{
logerr(IDirectDrawSurface.dllHook("QueryInterface", "SrfcQueryHook"))
D3DHOOKS_DATA.QueryPrimary         := IDirectDrawSurface.QueryInterface
D3DHOOKS_DATA.QueryDevice          := RegisterCallback("Dvc1Query", "F")
IDirectDrawSurface4.QueryInterface := IDirectDrawSurface.QueryInterface
}
D3DHOOKS_DATA.QuerySurface := IDirectDrawSurface.QueryInterface
if (g_.cfg.dly)
logerr(IDirect3DDevice7.Hook("BeginScene"))
}
else
{
for k, v in strsplit("prim dev 32bit s32bit vid cmp cpy D3D D3DZ primcpy", " ")
g_.proxies[v] := ""
SetUpD3D(dd7)
if (g_.cfg.32bit and D3DHOOKS_DATA.D = 8)
{
g_.proxies.prim    := new Surface7(dd7, "PAL8",,1)
g_.proxies.dev     := new Surface7(dd7, "PAL8",,1)
g_.proxies.32bit   := new Surface7(dd7,"X8RGB")
g_.proxies.s32bit  := new Surface7(dd7,"X8RGB",,1)
} else
{
g_.proxies.prim := new Surface7(dd7)
g_.proxies.dev  := new Surface7(dd7,,,g_.cfg.sys)
}
if (g_.cfg.sys)
g_.proxies.vid := new Surface7(dd7)
if (g_.cfg.cpy)
{
g_.proxies.cpy := new Surface7(dd7)
g_.proxies.cmp := new Surface7(dd7)
}
SetupCkey()
if (! g_.cfg.layer) {
(prim := new ComInterfaceWrapper(ddraw.IDirectDrawSurface7, g_.primary7, True)).released := True
logerr(prim.PatchVtableWithDll("lock", "LockSurfaceHook"))
logerr(prim.PatchVtableWithDll("Unlock", "UnLockSurface4Hook"))
logerr(prim.PatchVtableWithDll("GetDC", "SurfaceGetDCHook"))
logerr(prim.PatchVtableWithDll("ReleaseDC", "SurfaceReleaseDCHook"))
}
}
}
SetupPrxs4(DD="")
{
if not DD
{
logerr("SetupPrxs4(...)")
if !(g_.cfg.NEFS || g_.cfg.SSAA)
{
logerr(IDirectDrawSurface.Hook("flip"))
logerr(IDirectDrawSurface4.PatchVtable("EnumAttachedSurfaces"))
logerr(IDirectDrawSurface.PatchVtable("EnumAttachedSurfaces"))
}
logerr(IDirectDrawSurface4.Hook("GetSurfaceDesc"))
D3DHOOKS_DATA.GetDDSCaps  := IDirectDrawSurface.GetCaps
logerr(IDirectDraw.Hook("CreatePalette"))
logerr(IDirectDraw.Hook("GetDisplayMode"))
logerr(IDirectDraw4.Hook("GetDisplayMode"))
logerr(IDirectDrawSurface.Hook("GetPixelFormat"))
logerr(IDirectDrawSurface.Hook("GetSurfaceDesc"))
logerr(IDirectDrawSurface.Hook("AddAttachedSurface"))
if g_.cfg.32bit
{
logerr(IDirectDrawSurface.Hook("GetPalette"))
logerr(IDirectDrawSurface.Hook("SetPalette"))
logerr(IDirectDrawPalette.Hook("SetEntries"))
logerr(IDirectDrawPalette.Hook("GetEntries"))
}
logerr(IDirectDrawSurface.dllHook("QueryInterface", "SrfcQueryHook"))
D3DHOOKS_DATA.QueryPrimary := IDirectDrawSurface.QueryInterface
D3DHOOKS_DATA.QuerySurface := IDirectDrawSurface.QueryInterface
D3DHOOKS_DATA.QueryTexture := IDirectDrawSurface.QueryInterface
D3DHOOKS_DATA.QueryDevice  := RegisterCallback("Dvc1Query", "F")
IDirectDrawSurface4.QueryInterface := IDirectDrawSurface.QueryInterface
D3DHOOKS_DATA.IDirectDrawSurface_QueryInterface  := IDirectDrawSurface.QueryInterface
logerr(IDirectDrawSurface4.dllHook("Lock", "LockSurfaceHook"))
logerr(IDirectDrawSurface4.dllHook("UnLock", "UnLockSurface4Hook"))
D3DHOOKS_DATA.LockPrimary     := RegisterCallback("Surface1lock", "F")
D3DHOOKS_DATA.UnLockPrimary4  := RegisterCallback("Surface4Unlock", "F")
D3DHOOKS_DATA.LockSurface     := IDirectDrawSurface4.Lock
D3DHOOKS_DATA.UnLockSurface4  := IDirectDrawSurface4.UnLock
IDirectDrawSurface.Lock       := IDirectDrawSurface4.Lock
logerr(IDirectDrawSurface.dllHook("UnLock", "UnLockSurfaceHook"))
D3DHOOKS_DATA.UnLockPrimary := RegisterCallback("Surface1Unlock", "F")
D3DHOOKS_DATA.UnLockSurface := IDirectDrawSurface.UnLock
logerr(IDirectDrawSurface4.dllHook("Blt", "SurfaceBltHook"))
D3DHOOKS_DATA.BltPrimary             := RegisterCallback(isfunc("Alt_Blt") ? "Alt_Blt" : "Surface1Blt", "F")
D3DHOOKS_DATA.BltSurface             := IDirectDrawSurface4.blt
IDirectDrawSurface.blt               := IDirectDrawSurface4.blt
logerr(IDirectDrawSurface4.dllHook("Bltfast", "SurfaceBltFastHook"))
D3DHOOKS_DATA.BltFastPrimary         := RegisterCallback("Surface1bltfast", "F")
D3DHOOKS_DATA.BltFastSurface         := IDirectDrawSurface4.bltFast
IDirectDrawSurface.bltFast           := IDirectDrawSurface4.bltFast
logerr(IDirectDrawSurface4.dllHook("GetDC","SurfaceGetDCHook"))
logerr(IDirectDrawSurface4.dllHook("ReleaseDC","SurfaceReleaseDCHook"))
D3DHOOKS_DATA.GetDCPrim := RegisterCallback("Surface1GetDC", "F")
D3DHOOKS_DATA.RelDCPrim := RegisterCallback("Surface1ReleaseDC", "F")
D3DHOOKS_DATA.GetDCSrfc := IDirectDrawSurface4.GetDC
D3DHOOKS_DATA.RelDCSrfc := IDirectDrawSurface4.ReleaseDC
IDirectDrawSurface.GetDC     := IDirectDrawSurface4.GetDC
IDirectDrawSurface.ReleaseDC := IDirectDrawSurface4.ReleaseDC
if (g_.cfg.dly)
{
logerr(IDirect3DDevice2.Hook("BeginScene"))
logerr(IDirect3DDevice3.Hook("BeginScene"))
}
logerr(IDirect3DDevice2.Hook("SetRenderTarget"))
}
else
{
if (! g_.cfg.layer) {
logerr("SetupPrxs4(dd)")
g_.proxies.rct := struct(RECT)
logerr(IDirectDrawSurface4.PatchVtableWithDll("blt", "SurfaceBltHook"))
logerr(IDirectDrawSurface2.PatchVtableWithDll("blt", "SurfaceBltHook"))
logerr(IDirectDrawSurface.PatchVtableWithDll("blt", "SurfaceBltHook"))
logerr(IDirectDrawSurface4.PatchVtableWithDll("lock", "LockSurfaceHook"))
logerr(IDirectDrawSurface4.PatchVtableWithDll("Unlock", "UnLockSurface4Hook"))
logerr(IDirectDrawSurface.PatchVtableWithDll("Unlock", "UnLockSurfaceHook"))
logerr(IDirectDrawSurface.PatchVtableWithDll("Unlock", "UnLockSurfaceHook"))
logerr(IDirectDrawSurface2.PatchVtableWithDll("lock", "LockSurfaceHook"))
logerr(IDirectDrawSurface2.PatchVtableWithDll("Unlock", "UnLockSurfaceHook"))
}
SetupPrxs(DD)
SetupCkey()
}
}
SetupPrxs(DD)
{
for k, v in strsplit("prim dev 32bit s32bit vid cmp cpy D3D D3DZ primcpy", " ")
g_.proxies[v] := ""
SetUpD3D(DD)
if (g_.cfg.32bit and D3DHOOKS_DATA.D = 8)
{
g_.proxies.prim    := new Surface(DD, "PAL8",,1)
g_.proxies.dev     := new Surface(DD, "PAL8",,1)
g_.proxies.32bit   := new Surface(DD,"X8RGB")
g_.proxies.s32bit  := new Surface(DD,"X8RGB",,1)
} else {
g_.proxies.32bit  := ""
g_.proxies.s32bit := ""
g_.proxies.prim   := new Surface(DD)
g_.proxies.dev    := new Surface(DD,,,g_.cfg.sys)
if (g_.cfg.sys)
g_.proxies.vid  := new Surface(DD)
if (g_.cfg.cpy)
{
g_.proxies.cpy := new Surface(DD)
g_.proxies.cmp := new Surface(DD)
}
}
}
SetUpD3D(DD)
{
sz := (_RECT.right - _RECT.left) << 16 | (_RECT.bottom - _RECT.top)
g_.proxies.primcpy := (g_.cfg.D3D = 7) ? new Surface7(DD, "X8RGB", sz) : new Surface(DD, "X8RGB", sz)
if (g_.cfg.winedd)
return
g_.proxies.D3DZ    := (g_.cfg.D3D = 7) ? new D3DDevice7(DD,0x00010001,,0) : new D3DDevice(DD,0x00010001,,0)
}
SetUPShaders()
{
return
}
SetupCkey()
{
g_.proxies.fmvr    := Struct("UINT64 xy; DWORD w, h:")
g_.proxies.fmvr.xy := 0
g_.proxies.fmvr.w  := D3DHOOKS_DATA.w
g_.proxies.fmvr.h  := D3DHOOKS_DATA.h
g_.proxies.prms    := Struct("Float[12]")
g_.proxies.prms[1] := 1/D3DHOOKS_DATA.w
g_.proxies.prms[2] := 1/D3DHOOKS_DATA.h
g_.proxies.prms[3] := D3DHOOKS_DATA.HD_W
g_.proxies.prms[4] := D3DHOOKS_DATA.HD_H
g_HD.DDBLTFX.dwFillColor                           := (D3DHOOKS_DATA.D=16) ? 0xF81f : 0xFFFF00FF
g_HD.DDBLTFX.ddckSrcColorkey.dwColorSpaceLowValue  := (g_.cfg.32bit) ? 0xFFFF00FF : g_HD.DDBLTFX.dwFillColor
g_HD.DDBLTFX.ddckSrcColorkey.dwColorSpaceHighValue := g_HD.DDBLTFX.ddckSrcColorkey.dwColorSpaceLowValue
}
QueryPrimary(p1, p2, p3)
{
r := dllcall(IDirectDrawSurface.QueryInterface, ptr, p1, ptr, p2, ptr, p3)
p          := new ComInterfaceWrapper(ddraw.IDirectDrawSurface, p1, True)
p.released := True
logerr(p.PatchVtableWithDll("lock", "LockSurfaceHook"))
logerr(p.PatchVtableWithDll("Unlock", "UnLockSurfaceHook"))
return r
}
IDirectDraw_CreatePalette(p1, p2, p3, p4, p5)
{
if (!g_.cfg.layer)
logerr(IDirectDrawSurface.PatchVtable("Setpalette"))
return dllcall(IDirectDraw.CreatePalette, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5)
}
SetZ(z)
{
if (g_.proxies.z.ID != dllcall(g_.p.GetSurfaceID, uint, z))
return z
if (g_.proxies.z.SD16)
{
dllcall(IDirectDrawSurface4.blt, uint, g_.proxies.z.SD24, uint, 0, uint, g_.proxies.z.SD16, uint, 0
, uint, DDBLT_WAIT, uint, g_HD.DDBLTFX[], uint)
dllcall(IDirectDrawSurface4.blt, uint, g_.proxies.z.surface, uint, RECT[], uint, g_.proxies.z.SD24, uint, 0
, uint, DDBLT_WAIT, uint, g_HD.DDBLTFX[], uint)
return g_.proxies.z.SD16
}
b := dllcall(IDirectDrawSurface.blt, uint, g_.proxies.z.surface, uint, RECT[], uint, z, uint, 0, uint, 0, uint, 0, uint, 0)
return z
}
GetZ(z)
{
if (g_.proxies.z.ID != dllcall(g_.p.GetSurfaceID, uint, z))
return z
if (g_.proxies.z.SD16)
{
dllcall(IDirectDrawSurface4.blt, uint, g_.proxies.z.SD24, uint, 0, uint, g_.proxies.z.surface, uint, RECT[]
, uint, DDBLT_WAIT, uint, g_HD.DDBLTFX[], uint)
dllcall(IDirectDrawSurface4.blt, uint, g_.proxies.z.SD16, uint, 0, uint, g_.proxies.z.SD24, uint, 0
, uint, DDBLT_WAIT, uint, g_HD.DDBLTFX[], uint)
return g_.proxies.z.SD16
}
dllcall(IDirectDrawSurface.blt, uint, z, uint, 0, uint, g_.proxies.z.surface, uint, RECT[], uint, 0, uint, 0, uint, 0)
return z
}
Surface7lock(p1, p2, p3, p4, p5)
{
if ((caps := GetSurfaceCaps7(p1)) & DDSCAPS_PRIMARYSURFACE)
{
p          := new ComInterfaceWrapper(ddraw.IDirectDrawSurface7, p1, True)
p.released := True
p.PatchVtableWithDll("Unlock", "UnLockSurface4Hook")
}
return Surface1lock(p1, p2, p3, p4, p5)
}
Surface7Unlock(p1, p2)
{
r := dllcall(IDirectDrawSurface7.Unlock, uint, (p := GetProxy7(p1, z)).surface7, uint, p2)
UpdateSrfc(p.surface, p1, z, D3DHOOKS_DATA._rct, D3DHOOKS_DATA.rct, g_.cfg.cpy)
return r
}
Surface4Unlock(p1, p2)
{
r := dllcall(IDirectDrawSurface4.Unlock, uint, (p := GetProxy4(p1, z)).surface4, uint, p2)
UpdateSrfc(p.surface, p1, z, D3DHOOKS_DATA._rct, D3DHOOKS_DATA.rct, g_.cfg.cpy)
return r
}
Surface1GetDC(p1, p2)
{
UpdateProxy(p:=GetSrcProxy(p1).surface, p1)
r := dllcall(IDirectDrawSurface.GetDC, uint, p, uint, p2, uint)
return r
}
Surface1ReleaseDC(p1, p2)
{
r := dllcall(IDirectDrawSurface.ReleaseDC, uint, p:=GetProxy(p1, z).surface, uint, p2)
UpdateSrfc(p, p1, z, 0, g_.proxies.FMVr[])
return r
}
Surface1lock(p1, p2, p3, p4, p5)
{
UpdateProxy(p := GetSrcProxy(p1).surface, p1, p2, g_.cfg.READ, g_.cfg.cpy)
r := dllcall(IDirectDrawSurface.lock, uint, p, uint, p2, uint, p3, uint, p4, uint, P5, uint)
return r
}
Surface1Unlock(p1, p2)
{
r := dllcall(IDirectDrawSurface.Unlock, uint, (p := GetProxy(p1, z)).surface, uint, p2)
UpdateSrfc(p.surface, p1, z, D3DHOOKS_DATA._rct, D3DHOOKS_DATA.rct, g_.cfg.cpy)
return r
}
zclear(fx)
{
fx ? g_HD.ZBLTFX[] := fx
vw1 := 0
vw3 := 0
if (g_.device)
dllcall(IDirect3DDevice.NextViewport, uint, g_.device, uint, 0, "uint*", vw1:=0, uint, D3DNEXT_HEAD)
else if (g_.device2)
dllcall(IDirect3DDevice2.NextViewport, uint, g_.device2, uint, 0, "uint*", vw1:=0, uint, D3DNEXT_HEAD)
else if (g_.device3)
dllcall(IDirect3DDevice3.GetCurrentViewport, uint, g_.Device3, "uint*", vw3:=0)
if (vw1 && !vw3)
{
GUID_FromString(iid, d3d.IID_IDirect3DViewport3)
z := dllcall(IDirect3DViewport.QueryInterface, uint, vw1, ptr, &iid, "ptr*", vw3:=0, uint)
dllcall(IDirect3DViewport.Release, uint, vw1)
}
d := fx ? g_HD.ZBLTFX.dwFillDepth/D3DHOOKS_DATA.zmsk : 1
r := dllcall(IDirect3DViewport3.Clear2, uint, vw3, uint, 1, uint, RECT[], uint, 2, uint, 0, float, d, float, 0.)
dllcall(IDirect3DViewport3.Release, uint, vw3)
return
}
Surface1Blt(p1, p2, p3, p4, p5, p6)
{
UpdateProxy(src:=GetSrcProxy(p3).surface, p3, p4, True)
r := dllcall(IDirectDrawSurface.blt, uint, dst:=GetProxy(p1, z).surface, uint, p2, uint, src, uint, p4, uint, p5, uint, p6, uint)
UpdateSrfc(dst, p1, z, p2, p2)
return r
}
Surface1Bltfast(p1, p2, p3, p4, p5, p6)
{
g_.proxies.rct.left   := p2
g_.proxies.rct.top    := p3
g_.proxies.rct.right  := p2 + numget(p5+8) - numget(p5+0, "uint")
g_.proxies.rct.bottom := p3 + numget(p5+12)- numget(p5+4, "uint")
UpdateProxy(src:=GetSrcProxy(p4).surface, p4, g_.proxies.rct[], True)
r := dllcall(IDirectDrawSurface.Bltfast, uint, dst:=GetProxy(p1, z).surface, uint, p2, uint, p3, uint, src, uint, p5, uint, p6, uint)
UpdateSrfc(dst, p1, z, g_.proxies.rct[], g_.proxies.rct[])
return r
}
_GetZ(z)
{
if (g_.proxies.z.SD16)
return {"surface4" : g_.proxies.z.SD16, "surface" : g_.proxies.z.SD16}
return {"surface4" : z, "surface" : z}
}
GetSrcProxy(s)
{
p := GetProxy(s, z)
if (z)
{
GetZ(s)
return _GetZ(s)
}
return p
}
GetProxy7(s, byref z)
{
return _GetProxy(s, GetSurfaceCaps7(s), z)
}
GetProxy4(s, byref z)
{
return _GetProxy(s, GetSurfaceCaps4(s), z)
}
FindProxy(cps, s)
{
p := cps & DDSCAPS_PRIMARYSURFACE ? g_.proxies.prim
: cps & DDSCAPS_FLIP or (g_.cfg.winedd and g_.proxies.flp.IsThatYou(s)) ? g_.proxies.dev
: {"surface4" : s, "surface" : s}
return p
}
_GetProxy(s, cps, byref z)
{
p := FindProxy(cps, s)
if (z := cps & DDSCAPS_ZBUFFER)
return _GetZ(s)
return p
}
GetProxy(s, byref z)
{
p := FindProxy(cps := GetSurfaceCaps(s), s)
if (z := cps & DDSCAPS_ZBUFFER)
return _GetZ(s)
return p
}
GetrfcStr(s)
{
cps := GetSurfaceCaps(s)
if      (cps & DDSCAPS_PRIMARYSURFACE)
return "primary"
else if (cps & DDSCAPS_FLIP)
return "flip"
else if (cps & DDSCAPS_ZBUFFER)
return "zbuffer"
else if (cps & DDSCAPS_SYSTEMMEMORY)
return "system memory"
return "surface"
}
SrfcDbug(f, d, r, s=0)
{
str := f . " "
if (s)
str .= GetrfcStr(s) . " to "
str .= GetrfcStr(d) . " " r " " ddraw.err[r . ""]
logerr(str)
}
UpdateProxy(prx, s, rct=0, r=False, cpy=False)
{
if (!g_.rtrgt)
return
if (prx = g_.proxies.prim.Surface)
Getprmr(s)
else if ( (prx = g_.proxies.dev.Surface) and r )
{
if (D3DHOOKS_DATA.Delay = 2)
{
return
Surface1UpDateRT(0, cpy)
D3DHOOKS_DATA.Delay := 1
}
GetRT(rct, cpy)
}
}
UpdateSrfc(p, s, z, PrmrRct=0, RTRct=0, cpy=False)
{
if (p = g_.proxies.prim.surface)
return (g_.rtrgt) ? Surface1UpDatePrimB(s, PrmrRct) : Surface1UpDatePrim(s, PrmrRct)
else if (p = g_.proxies.dev.Surface) and g_.rtrgt
{
if (g_.cfg.dly)
return D3DHOOKS_DATA.Delay := 2
return Surface1UpDateRT(RTRct, cpy)
}
else if (z)
SetZ(s)
}
DumpRT(s)
{
return
str := g_.dbg.frm " - " g_.dbg.op " " s " "
DumpSurface(g_.rtrgt, str " Render Target.dds")
DumpSurface(g_.proxies.dev.surface, str " Proxy.dds")
}
DDBlt(d, dr, s, sr, f, bfx)
{
if (f=3){
dllcall(g_.p_SetFilterBlits, "uint")
fgs := DDBLT_WAIT
} else if (f=0){
fgs := DDBLT_WAIT
} else fgs := [(g_.cfg.winedd)?DDBLT_KEYSRC:DDBLT_KEYSRCOVERRIDE, DDBLT_COLORFILL][f] | DDBLT_WAIT
return dllcall(Idirectdrawsurface.blt, uint, d, uint, dr, uint, s, uint, sr, uint, fgs, uint, bfx, uint)
}
D3DBlt(dst, dst_rct, src, src_rect, f, bfx, dvc="")
{
if (!g_.cfg.Blt3D and !dvc or g_.cfg.winedd)
return DDBlt(dst.surface, dst_rct, src.surface, src_rect, f, bfx)
if (dvc)
return dvc.DrawRect(dst, dst_rct, src, src_rect, f)
if (g_.cfg.d3d = "7")
return g_.proxies.d3dz.DrawRect(dst, dst_rct, src, src_rect, f)
new D3DDevice(dllcall(g_.p.DDFrmSrfc, ptr, dst.surface)).DrawRect(dst, dst_rct, src, src_rect, f)
}
GetRT(rct=0, cpy=0)
{
src := RECT[]
dst := 0
rct	:= 0
if (g_.cfg.sys)
{
DDBlt(g_.proxies.vid.surface, dst, g_.cfg.SSAA ? g_.proxies.flp.surface : g_.rtrgt, src, 0, g_HD.DDBLTFX[])
DDBlt(g_.proxies.dev.Surface, dst, g_.proxies.vid.Surface, dst, 0, g_HD.DDBLTFX[])
} else
DDBlt(g_.proxies.dev.surface, dst, g_.cfg.SSAA ? g_.proxies.flp.surface : g_.rtrgt, src, 0, g_HD.DDBLTFX[])
}
Surface1UpDateRTC()
{
return Surface1UpDateRT(0, g_.cfg.cpy)
}
Surface1UpDateRT(pRECT="", cpy=False)
{
dst   := RECT[]
pRECT := g_.proxies.FMVr[]
src   := g_.proxies.FMVr[]
s := g_.proxies.dev
if (g_.cfg.sys)
{
DDBlt(g_.proxies.vid.Surface, 0, g_.proxies.dev.Surface, 0, 0, g_HD.DDBLTFX[])
s := g_.proxies.vid
}
if (cpy)
{
DDBlt(g_.proxies.cpy.Surface, 0, g_.cfg.SSAA ? g_.proxies.flp.surface : g_.rtrgt, RECT[], 0, g_HD.DDBLTFX[])
logerr(dllcall("peixoto.dll\DDMaskSurface", ptr, s.Surface, ptr, g_.proxies.cpy.Surface, str))
}
trgt := IsObject(g_.proxies.flp) ? g_.proxies.flp : {"surface" : g_.rtrgt, "surface7" : g_.rtrgt}
D3DBlt(trgt, dst, s, 0, 1, g_HD.DDBLTFX[])
DDBlt(s.Surface, 0, 0, 0, 2, g_HD.DDBLTFX[])
g_.dbg.op  += 1
if (g_.cfg.sys)
DDBlt(g_.proxies.dev.Surface, 0, 0, 0, 2, g_HD.DDBLTFX[])
}
Getprmr(p)
{
dllcall(IDirectDrawSurface.blt, uint, g_.proxies.prim.surface, uint, 0, uint, p, uint, _RECT[], uint, 0, uint, 0, uint)
}
Surface1UpDatePrimB(p, pRECT)
{
g_.dbg.frm += 1
g_.dbg.op  := 0
dllcall(IDirectDrawSurface.blt, uint, g_.proxies.primcpy.surface, uint, 0, uint, p, uint, _RECT[], uint, DDBLT_WAIT, uint, 0, uint)
dllcall(IDirectDrawSurface.blt, uint, g_.proxies.primcpy.surface, uint, 0, uint, g_.proxies.prim.Surface, uint, 0
, uint, (g_.cfg.winedd)?DDBLT_KEYSRC:DDBLT_KEYSRCOVERRIDE, uint, g_HD.DDBLTFX[], uint)
dllcall(IDirectDrawSurface.blt, uint, p, uint, _RECT[], uint, g_.proxies.primcpy.surface, uint, 0, uint, DDBLT_WAIT, uint, 0, uint)
dllcall(IDirectdrawSurface.blt, uint, g_.proxies.prim.Surface, uint, 0, uint, 0, uint, 0, uint, DDBLT_COLORFILL, uint, g_HD.DDBLTFX[], uint)
return
}
Surface1UpDatePrim(p, pRECT)
{
(g_.cfg.xBRh) ? keyevent(g_.cfg.xBRh) ?	g_.cfg.xBR := (g_.cfg.xBR) ? 0 : 1
(g_.cfg.xBR or g_.cfg.SCLR) ? dllcall(g_.p.Scale, uint, pRECT, uint, g_HD._Sclr[])
if (g_.proxies.32bit)
{
Pal2RGB(g_.proxies.prim.surface, (g_.cfg.xBR or g_.cfg.SCLR) ? g_HD._Sclr.src : pRECT)
src := g_.proxies.32bit
} else
src := g_.proxies.prim
if (g_.proxies.fmv)
{
x8 := new Surface(dllcall(g_.p.DDFrmSrfc, uint, p), "X8RGB",, sys=False, m=False)
dllcall(IDirectDrawSurface.blt, uint, x8.surface, uint, 0, uint, src.surface, uint, 0, uint, 0, uint, 0, uint)
dllcall("peixoto.dll\DDCPUDeinterlace", ptr, x8.surface)
dllcall(IDirectDrawSurface.blt, uint, p, uint, _RECT[], uint, x8.surface, uint, g_.proxies.fmvr[], uint, 0, uint, 0, uint)
return
} else if (g_.cfg.xBR)
{
system := new Surface(dllcall(g_.p.DDFrmSrfc, uint, p),"X8RGB",, sys=True, m=False)
DDBlt(system.Surface, 0, src.Surface, 0, 0, g_HD.DDBLTFX[])
DDWait(p)
dllcall("peixoto.dll\DDxBRzScale", ptr, system.surface, ptr, p, ptr,  _RECT[], str)
return
}
else if (g_.cfg.SCLR)
{
DDWait(p)
dllcall(IDirectDrawSurface.blt, uint, p, uint, g_HD._Sclr.dst, uint, src, uint, g_HD._Sclr.src, uint, 0, uint, 0, uint)
return
}
DDWait(p)
dllcall(IDirectDrawSurface.blt, uint, p, uint, _RECT[], uint, src.surface, uint, 0
, uint, 0, uint, 0, uint)
return
}
Pal2RGB(src, rect_=0)
{
f := g_.cfg.injector_dir "\error.log"
(D := struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC.size()
(D2:= struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC.size()
l1 := dllcall(IDirectDrawSurface.lock, uint, src, uint, rect_, uint, D[], uint, 0, uint, 0, uint)
l2 := dllcall(IDirectDrawSurface.lock, uint, g_.proxies.s32bit.surface, uint, rect_, uint, D2[], uint, DDLOCK_WRITEONLY, uint, 0, uint)
dllcall(g_.p.Pal2RGB, uint, D.lpSurface, uint, D.lPitch, uint, g_.palette, uint, D2.lpSurface, uint, D2.lPitch, uint, D.dwWidth, uint, D.dwHeight, uint, rect_)
dllcall(IDirectDrawSurface.Unlock, uint, src, uint, 0)
dllcall(IDirectDrawSurface.Unlock, uint, g_.proxies.s32bit.surface, uint, 0)
dllcall(IDirectDrawSurface.blt, uint, g_.proxies.32bit.surface, uint, rect_, uint, g_.proxies.s32bit.surface, uint, rect_, uint, 0, uint, 0)
}
global g_HD   := {}
g_HD.Sclr     := struct("LPVOID ww, hh, DWORD step[4]; DWORD xOffset; DWORD x, y, w, h; DWORD dx, dy, dw, dh; LPVOID src, dst;")
g_HD._Sclr    := struct("LPVOID ww, hh, DWORD step[4]; DWORD xOffset; DWORD x, y, w, h; DWORD dx, dy, dw, dh; LPVOID src, dst;")
g_HD.Sclr.ww  := 0
g_HD.Sclr.hh  := 0
g_HD._Sclr.ww := 0
g_HD._Sclr.hh := 0
g_HD.rect     := struct(_RECT)
g_HD.ZBLTFX   := struct(DDBLTFX)
g_HD.DDBLTFX  := struct(DDBLTFX)
g_HD.DDBLTFX.dwSize                           := DDBLTFX.size()
DDBLTFX.dwSize                                := DDBLTFX.size()
DDBLTFX.dwDDFX                                := 0x00000008
DDBLTFX.ddckSrcColorkey.dwColorSpaceLowValue  := 0
DDBLTFX.ddckSrcColorkey.dwColorSpaceHighValue := 0
DDBLTFX.dwFillColor                           := 0
D3DVIEWPORT.dwSize                            := D3DVIEWPORT.size()
global _D3DVIEWPORT2                          := struct(D3DVIEWPORT2)
_D3DVIEWPORT2.dwSize                          := D3DVIEWPORT2.size()
g_HD.vw                                       := struct(D3DVIEWPORT2)
g_HD.vw2                                      := struct(D3DVIEWPORT2)
D3DHOOKS_DATA.VW2                             := g_HD.vw2[]
D3DHOOKS_DATA.scale            := 1
D3DHOOKS_DATA.displace         := False
D3DHOOKS_DATA.vert_displace    := False
D3DHOOKS_DATA.callback         := False
D3DHOOKS_DATA.fix_screencoords := (g_.cfg.HLFPX) ? True : False
D3DHOOKS_DATA.rct         := dllcall("VirtualAlloc", uint, 0, uint, 32, Int, 0x00001000, uint, 0x04)
D3DHOOKS_DATA._rct        := dllcall("VirtualAlloc", uint, 0, uint, 32, Int, 0x00001000, uint, 0x04)
D3DHOOKS_DATA.vertex_data := dllcall("VirtualAlloc", uint, 0, uint, 16777216, Int, 0x00001000
, uint, 0x04)
g_.desktop := Desk()
logerr("Desktop " g_.desktop.w "x" g_.desktop.h)
SetupHD(p2, p3)
{
g_.res                 := g_.desktop
D3DHOOKS_DATA.HD_H     := g_.desktop.h
D3DHOOKS_DATA.HD_W     := g_.desktop.W
D3DHOOKS_DATA.w        := p2
D3DHOOKS_DATA.h        := p3
D3DHOOKS_DATA.scale    := D3DHOOKS_DATA.HD_H/D3DHOOKS_DATA.h
D3DHOOKS_DATA.HD_X     := (D3DHOOKS_DATA.HD_W - p2*D3DHOOKS_DATA.scale)/2
D3DHOOKS_DATA.displace := True
logerr("`nResolution\Viewport:")
logerr("Requested                 : " D3DHOOKS_DATA.w " x " D3DHOOKS_DATA.h)
logerr("Real                      : " D3DHOOKS_DATA.HD_W " x " D3DHOOKS_DATA.HD_H)
logerr("Correction                : " D3DHOOKS_DATA.scale)
logerr("Viewport width correction : " D3DHOOKS_DATA.HD_X)
logerr("Depth                     : " D3DHOOKS_DATA.D " bbp")
_rect_setscale()
if g_.cfg.MCLP
ClipCursor(0)
dllcall("Peixoto.dll\DDrawDisplayModeChanged", uint, p2, uint, p3)
dllcall("Peixoto.dll\SetMouseHooksParams", float, D3DHOOKS_DATA.HD_W/D3DHOOKS_DATA.w, float, D3DHOOKS_DATA.scale
, uint, D3DHOOKS_DATA.HD_X, uint, D3DHOOKS_DATA.w, uint, D3DHOOKS_DATA.h)
dllcall("peixoto.dll\Scaler", uint, D3DHOOKS_DATA.w, uint, D3DHOOKS_DATA.h, uint, D3DHOOKS_DATA.HD_W-D3DHOOKS_DATA.HD_X*2
, uint, D3DHOOKS_DATA.HD_H, uint, D3DHOOKS_DATA.HD_X, uint, g_HD.Sclr[])
dllcall("peixoto.dll\Scaler", uint, D3DHOOKS_DATA.w, uint, D3DHOOKS_DATA.h, uint, D3DHOOKS_DATA.HD_W-D3DHOOKS_DATA.HD_X*2
, uint, D3DHOOKS_DATA.HD_H, uint, D3DHOOKS_DATA.HD_X, uint, g_HD._Sclr[])
}
CheckMode(pDD, w, h, dpt, lvl)
{
(D := struct(DDSURFACEDESC2)).dwSize := (lvl < 3) ? DDSURFACEDESC.size() : DDSURFACEDESC2.size()
dllcall([IDirectDraw, IDirectDraw2, IDirectDraw4, IDirectDraw7][lvl].GetDisplayMode, uint, pDD, uint, D[])
if (w != D.dwWidth) || (h != D.dwHeight) || (dpt != D.ddpfPixelFormat.dwRGBBitCount)
return 1
}
SetDisplayMode(byref p2, byref p3, byref p4)
{
D3DHOOKS_DATA.D     := p4
(g_.cfg.32bit) ? p4 := 32
if g_.cfg.HD
{
SetupHD(p2, p3)
p2 := g_.desktop.w
p3 := g_.desktop.h
} else	{
g_.res := {"w" : p2, "h" : p3}
D3DHOOKS_DATA.w := p2
D3DHOOKS_DATA.h := p3
_rect.left := 0, _rect.top := 0, _rect.right := p2, _rect.bottom := p3
rect.left  := 0,  rect.top := 0,  rect.right := p2,  rect.bottom := p3
}
D3DHOOKS_DATA.HD_W := p2
D3DHOOKS_DATA.HD_H := p3
}
_rect_setscale(scale="")
{
if ! g_.cfg.HD
g_.desktop := {"w" : D3DHOOKS_DATA.HD_W, "h" : D3DHOOKS_DATA.HD_H}
if scale {
_rect.left   := (g_.desktop.w - D3DHOOKS_DATA.w*scale)/2
_rect.top    := (g_.desktop.h - D3DHOOKS_DATA.h*scale)/2
_rect.right  := _rect.left + D3DHOOKS_DATA.w*scale
_rect.bottom := _rect.top + D3DHOOKS_DATA.h*scale
rect.left   := (D3DHOOKS_DATA.HD_W - D3DHOOKS_DATA.w*scale)/2
rect.top    := (D3DHOOKS_DATA.HD_H - D3DHOOKS_DATA.h*scale)/2
rect.right  := rect.left + D3DHOOKS_DATA.w*scale
rect.bottom := rect.top + D3DHOOKS_DATA.h*scale
} else {
res_correct  :=  g_.desktop.h/D3DHOOKS_DATA.h
_RECT.left   := (g_.desktop.w - D3DHOOKS_DATA.w*res_correct)/2
_RECT.right  := g_.desktop.w - _RECT.left
_RECT.bottom := g_.desktop.h
_RECT.top    := 0
rect.left   := (D3DHOOKS_DATA.HD_W - D3DHOOKS_DATA.w*D3DHOOKS_DATA.HD_H/D3DHOOKS_DATA.h)/2
rect.right  := D3DHOOKS_DATA.HD_W - rect.left
rect.bottom := D3DHOOKS_DATA.HD_H
rect.top    := 0
}
}
ResList()
{
d := g_.desktop
w := d.w/d.h * 540
d := d.w "x" d.h
r := "512x384 640x480 "
r .= "720x540 " w "x540 "
r .= "800x600 1024x768 "
for k, v in ["1280x720", "1920x1080"]
{
if instr(g_.cfg.rlst, v)
r .= v " "
}
r .= d
l := []
for k, v in strsplit(r, " ")
l.Push(strsplit(v, "x"))
return l
}
IDirectDraw7_EnumDisplayModes(p1, p2, p3, p4, p5)
{
desc         := struct(DDSURFACEDESC2)
desc.dwSize  := DDSURFACEDESC2.size()
list         := ResList()
sys          := [1, 0, 0]
for k, v in list
{
for kk, vv in ["PAL8", "RG6B", "X8RGB"]
{
if ! isobject( s := new Surface7(p1, vv, v[1]<<16 | v[2], sys[kk]) )
{
dllcall(IDirectDraw7.SetCooperativeLevel, uint, p1, uint, 0, uint, DDSCL_NORMAL)
s := new Surface7(vv, v[1]<<16 | v[2], sys[kk])
}
dllcall(IDirectDrawSurface7.GetSurfaceDesc, uint, s.surface7, uint, desc[])
desc.dwFlags       |= 0x00040000
desc.dwRefreshRate := 60
logerr(kk " DD7 " desc.dwWidth "x" desc.dwHeight "-" desc.lPitch)
if ! dllcall(p5, uint, desc[], uint, p4)
break
}
}
}
IDirectDraw4_EnumDisplayModes(p1, p2, p3, p4, p5)
{
GUID_FromString(iid, ddraw.IID_IDirectDraw)
if ! dllcall(IDirectDraw.QueryInterface, uint, p1, uint, &iid, "uint*", DD:=0)
dllcall(IDirectDraw.Release, uint, DD)
else return dllcall(IDirectDraw4.EnumDisplayModes, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5)
desc         := struct(DDSURFACEDESC2)
desc.dwSize  := DDSURFACEDESC2.size()
list         := ResList()
sys          := [0, 0, 1]
for kk, vv in ["X8RGB", "RG6B", "PAL8"]
{
for k, v in list
{
if ! isobject( s := new Surface(DD, vv, v[1]<<16 | v[2], sys[kk]) )
{
dllcall(IDirectDraw.SetCooperativeLevel, uint, DD, uint, 0, uint, DDSCL_NORMAL)
s := new Surface(DD, vv, v[1]<<16 | v[2], sys[kk])
}
dllcall(IDirectDrawSurface4.GetSurfaceDesc, uint, s.Surface4, uint, desc[])
if ! dllcall(p5, uint, desc[], uint, p4)
break
}
}
return 0
}
IDirectDraw_SetDisplayMode(p1, p2, p3, p4)
{
r:=0
SetDisplayMode(p2, p3, p4)
logErr(IDirectDraw2.Unhook("SetDisplayMode"))
logErr(IDirectDraw4.Unhook("SetDisplayMode"))
if CheckMode(p1, p2, p3, p4, 1)
r := dllcall(IDirectDraw.SetDisplayMode, uint, p1, int, p2, int, p3, int, p4, uint)
logErr(IDirectDraw2.hook("SetDisplayMode"))
logErr(IDirectDraw4.hook("SetDisplayMode"))
printl("IDirectDraw_SetDisplayMode " D3DHOOKS_DATA.HD_W "x" D3DHOOKS_DATA.HD_H r ddraw.result[r . ""])
return r
}
IDirectDraw2_SetDisplayMode(p1, p2, p3, p4, p5, p6)
{
r:=0
if (g_.cfg.SXTY)
p5 := 60
SetDisplayMode(p2, p3, p4)
if CheckMode(p1, p2, p3, p4, 2)
r := dllcall(IDirectDraw2.SetDisplayMode, uint, p1, int, p2, int, p3, int, p4, int, p5, int, p6, uint)
printl("IDirectDraw2_SetDisplayMode " r ddraw.result[r . ""])
return r
}
IDirectDraw4_SetDisplayMode(p1, p2, p3, p4, p5, p6)
{
r:=0
if (g_.cfg.SXTY)
p5 := 60
printl("IDirectDraw4_SetDisplayMode " p4)
SetDisplayMode(p2, p3, p4)
if CheckMode(p1, p2, p3, p4, 3)
r := dllcall(IDirectDraw4.SetDisplayMode, uint, p1, int, p2, int, p3, int, p4, int, p5, int, p6)
return r
}
IDirect3DDevice_CreateExecuteBuffer(p1, p2, p3, p4)
{
D3DEXECUTEBUFFERDESC[] := p2
D3DEXECUTEBUFFERDESC.dwCaps := D3DDEBCAPS_SYSTEMMEMORY
return dllcall(IDirect3DDevice.CreateExecuteBuffer, uint, p1, uint, p2, uint, p3, uint, p4)
}
IDirect3DViewPort_GetViewPort(p1, p2)
{
if ! (r := dllcall(IDirect3DViewPort.GetViewPort, uint, p1, uint, p2))
dllcall("RtlMoveMemory", ptr, p2, ptr, g_HD.vw[], int, D3DVIEWPORT.size())
return r
}
IDirect3DViewPort_SetViewPort(p1, p2)
{
VarSetCapacity(v, D3DVIEWPORT.size())
dllcall("RtlMoveMemory", ptr, &v, ptr, p2, int, D3DVIEWPORT.size())
dllcall("RtlMoveMemory", ptr, g_HD.vw[], ptr, p2, int, D3DVIEWPORT.size())
D3DVIEWPORT[]        := p2
D3DVIEWPORT[]        := &v
r := dllcall(IDirect3DViewPort.SetViewPort, uint, p1, uint, D3DVIEWPORT[])
return r
}
IDirect3DViewPort2_SetViewPort2(p1, p2)
{
D3DVIEWPORT2[]        := p2
D3DVIEWPORT2.dwY      *= D3DHOOKS_DATA.scale
D3DVIEWPORT2.dwX      *= D3DHOOKS_DATA.scale
D3DVIEWPORT2.dwX      += D3DHOOKS_DATA.HD_X
D3DVIEWPORT2.dwWidth  *= D3DHOOKS_DATA.scale
D3DVIEWPORT2.dwHeight *= D3DHOOKS_DATA.scale
r := dllcall(IDirect3DViewPort2.SetViewPort2, uint, p1, uint, D3DVIEWPORT2[])
return r
}
IDirect3DViewPort3_GetViewPort2(p1, p2)
{
if ! (r := dllcall(IDirect3DViewPort3.GetViewPort2, uint, p1, uint, p2))
dllcall("RtlMoveMemory", ptr, p2, ptr, g_HD.vw2[], int, D3DVIEWPORT2.size())
return r
}
IDirect3DViewPort3_SetViewPort2(p1, p2)
{
VarSetCapacity(v, D3DVIEWPORT2.size())
dllcall("RtlMoveMemory", ptr, &v, ptr, p2, int, D3DVIEWPORT2.size())
dllcall("RtlMoveMemory", ptr, g_HD.vw2[], ptr, p2, int, D3DVIEWPORT2.size())
D3DVIEWPORT2[]        := p2
D3DVIEWPORT2[]        := &v
D3DVIEWPORT2.dwY      *= D3DHOOKS_DATA.scale
D3DVIEWPORT2.dwX      *= D3DHOOKS_DATA.scale
D3DVIEWPORT2.dwX      += D3DHOOKS_DATA.HD_X
D3DVIEWPORT2.dwWidth  *= D3DHOOKS_DATA.scale
D3DVIEWPORT2.dwHeight *= D3DHOOKS_DATA.scale
if (floor(D3DVIEWPORT2.dvClipX) > -1.0)
{
D3DVIEWPORT2.dvClipX      *= D3DHOOKS_DATA.scale
D3DVIEWPORT2.dvClipX      += D3DHOOKS_DATA.HD_X
D3DVIEWPORT2.dvClipWidth  *= D3DHOOKS_DATA.scale
D3DVIEWPORT2.dvClipHeight *= D3DHOOKS_DATA.scale
}
r := dllcall(IDirect3DViewPort3.SetViewPort2, uint, p1, uint, D3DVIEWPORT2[])
return r
}
IDirect3DViewPort3_SetViewPort(p1, p2)
{
printl("Setviewport 1")
return 0
}
IDirect3DViewPort_Clear(p1, p2, p3, p4)
{
sz:=VarSetCapacity(v, g_HD.rect.size()*p2)
dllcall("RtlMoveMemory", ptr, &v, ptr, p3, int, sz)
g_HD.rect[] := &v
loop, % p2
{
g_HD.rect.bottom *= D3DHOOKS_DATA.scale
g_HD.rect.right  *= D3DHOOKS_DATA.scale
g_HD.rect.right  += D3DHOOKS_DATA.HD_X
g_HD.rect[]      += rect.size()
}
r := dllcall(IDirect3DViewPort.Clear, uint, p1, uint, p2, uint, &v, uint, p4)
return r
}
IDirect3DViewPort2_Clear(p1, p2, p3, p4)
{
sz:=VarSetCapacity(v, g_HD.rect.size()*p2)
dllcall("RtlMoveMemory", ptr, &v, ptr, p3, int, sz)
g_HD.rect[] := &v
loop, % p2
{
g_HD.rect.bottom *= D3DHOOKS_DATA.scale
g_HD.rect.right  *= D3DHOOKS_DATA.scale
g_HD.rect.right  += D3DHOOKS_DATA.HD_X
g_HD.rect[]      += g_HD.rect.size()
}
r := dllcall(IDirect3DViewPort2.Clear, uint, p1, uint, p2, uint, &v, uint, p4)
return r
}
IDirect3DViewPort3_Clear(p1, p2, p3, p4)
{
sz := VarSetCapacity(v, g_HD.rect.size()*p2)
dllcall("RtlMoveMemory", ptr, &v, ptr, p3, int, sz)
g_HD.rect[] := &v
loop, % p2
{
g_HD.rect.bottom *= D3DHOOKS_DATA.scale
g_HD.rect.right  *= D3DHOOKS_DATA.scale
g_HD.rect.right  += D3DHOOKS_DATA.HD_X
g_HD.rect[]      += g_HD.rect.size()
}
r := dllcall(IDirect3DViewPort3.Clear, uint, p1, uint, p2, uint, &v, uint, p4)
return r
}
IDirect3DViewPort3_Clear2(p1, p2, p3, p4, p5, p6, p7)
{
sz := VarSetCapacity(v, g_HD.rect.size()*p2)
dllcall("RtlMoveMemory", ptr, &v, ptr, p3, int, sz)
g_HD.rect[] := &v
loop, % p2
{
g_HD.rect.bottom *= D3DHOOKS_DATA.scale
g_HD.rect.right  *= D3DHOOKS_DATA.scale
g_HD.rect.right  += D3DHOOKS_DATA.HD_X
g_HD.rect[]      += g_HD.rect.size()
}
r := dllcall(IDirect3DViewPort3.Clear2, uint, p1, uint, p2, uint, &v, uint, p4, uint, p5, uint, p6, uint, p7)
return r
}
InitHDHooks3()
{
logErr(IDirectDraw.hook("SetDisplayMode"))
logErr(IDirectDraw2.hook("SetDisplayMode"))
logErr(IDirectDraw4.hook("SetDisplayMode"))
logErr(IDirectDraw4.hook("EnumDisplayModes"))
logerr(IDirect3DViewPort3.Hook("SetViewPort2"))
logerr(IDirect3DViewPort3.Hook("GetViewPort2"))
logerr(IDirect3DViewport3.Hook("Clear"))
logerr(IDirect3DViewport3.Hook("Clear2"))
logerr(IDirect3DViewPort.Hook("SetViewPort"))
logerr(IDirect3DViewPort.Hook("GetViewPort"))
SetupPrxs4()
logErr(IDirect3DViewport3.dllHook("TransformVertices", "TransformVertices3Hook"))
logErr(IDirect3DDevice3.dllHook("DrawPrimitive", "DrawPrimitive3Hook"))
logErr(IDirect3DDevice3.dllHook("DrawIndexedPrimitive", "DrawIndexedPrimitive3Hook"))
logErr(IDirect3DDevice3.dllHook("DrawPrimitiveVB", "DrawPrimitive3VBHook"))
logErr(IDirect3DDevice3.dllHook("DrawIndexedPrimitiveVB", "DrawIndexedPrimitive3VBHook"))
D3DHOOKS_DATA.p_DrawPrimitive          := IDirect3DDevice3.DrawPrimitive
D3DHOOKS_DATA.p_DrawIndexedPrimitive   := IDirect3DDevice3.DrawIndexedPrimitive
D3DHOOKS_DATA.DrawPrimitive3           := IDirect3DDevice3.DrawPrimitive
D3DHOOKS_DATA.DrawIPrimitive3          := IDirect3DDevice3.DrawIndexedPrimitive
D3DHOOKS_DATA.p_DrawPrimitiveVB        := IDirect3DDevice3.DrawPrimitiveVB
D3DHOOKS_DATA.p_DrawIndexedPrimitiveVB := IDirect3DDevice3.DrawIndexedPrimitiveVB
D3DHOOKS_DATA.p_TransformVertices      := IDirect3DViewport3.TransformVertices
D3DHOOKS_DATA.p_GetView                := IDirect3DViewPort3.GetViewPort2
D3DHOOKS_DATA.p_SetView                := IDirect3DViewPort3.SetViewPort2
D3DHOOKS_DATA.fix_screencoords         := (g_.cfg.HLFPX) ? True : False
D3DHOOKS_DATA.p_GetVertexBufferDesc    := IDirect3DVertexBuffer.GetVertexBufferDesc
D3DHOOKS_DATA.p_LockVertexBuffer       := IDirect3DVertexBuffer.Lock
D3DHOOKS_DATA.p_UnLockVertexBuffer     := IDirect3DVertexBuffer.UnLock
logErr(IDirect3DDevice2.dllHook("DrawPrimitive", "DrawPrimitive2Hook"))
logErr(IDirect3DDevice2.dllHook("DrawIndexedPrimitive", "DrawIndexedPrimitive2Hook"))
D3DHOOKS_DATA.p_DrawIndexedPrimitive := IDirect3DDevice2.DrawIndexedPrimitive
D3DHOOKS_DATA.p_DrawPrimitive        := IDirect3DDevice2.DrawPrimitive
logerr(IDirect3DDevice.DllHook("Execute", "IDirect3DDevice_ExecuteHook"))
D3DHOOKS_DATA.execute := IDirect3DDevice.Execute
}
IDirect3DDevice_Execute(p1, p2, p3, p4)
{
logerr("buff " p2)
return dllcall(IDirect3DDevice.Execute, uint, p1, int, p2, int, p3, int, p4)
}
InitHDHooks7()
{
logErr(IDirectDraw7.hook("SetDisplayMode"))
logerr(IDirect3DDevice7.Hook("SetViewPort"))
logerr(IDirect3DDevice7.Hook("Clear"))
logErr(IDirectDraw7.hook("EnumDisplayModes"))
if (g_.cfg.layer)
logErr(IDirect3DDevice7.dllHook("DrawPrimitive", "DrawPrimitive7Hook"))
else
logErr(IDirect3DDevice7.Hook("DrawPrimitive"))
logErr(IDirect3D7.Hook("CreateVertexBuffer"))
logErr(IDirect3DDevice7.dllHook("DrawPrimitiveVB", "DrawPrimitive7VBHook"))
D3DHOOKS_DATA.D3D7Draw := IDirect3DDevice7.DrawPrimitive
logerr(IDirect3DDevice7.dllHook("DrawIndexedPrimitiveVB", "DrawIndexedPrimitive7VBHook"))
D3DHOOKS_DATA.p_DrawIndexedPrimitiveVB := IDirect3DDevice7.DrawIndexedPrimitiveVB
D3DHOOKS_DATA.p_GetVertexBufferDesc    := IDirect3DVertexBuffer7.GetVertexBufferDesc
D3DHOOKS_DATA.p_LockVertexBuffer       := IDirect3DVertexBuffer7.Lock
D3DHOOKS_DATA.p_UnLockVertexBuffer     := IDirect3DVertexBuffer7.UnLock
D3DHOOKS_DATA.displace              := True
D3DHOOKS_DATA.p_DrawPrimitiveVB     := IDirect3DDevice7.DrawPrimitiveVB
D3DHOOKS_DATA.p_DrawPrimitive       := IDirect3DDevice7.DrawPrimitive
D3DHOOKS_DATA.p_GetVertexBufferDesc := IDirect3DVertexBuffer7.GetVertexBufferDesc
D3DHOOKS_DATA.p_LockVertexBuffer    := IDirect3DVertexBuffer7.Lock
D3DHOOKS_DATA.p_UnLockVertexBuffer  := IDirect3DVertexBuffer7.Unlock
SetupPrxs7(0)
logerr(IDirect3DDevice7.dllHook("DrawIndexedPrimitive", "DrawIndexedPrimitive3Hook"))
D3DHOOKS_DATA.DrawIPrimitive3   := IDirect3DDevice7.DrawIndexedPrimitive
D3DHOOKS_DATA.DrawPrimitive3    := IDirect3DDevice7.DrawPrimitive
if (g_.cfg.layer) {
D3DHOOKS_DATA.DrawPrimitive3    := IDirect3DDevice7.DrawPrimitive
DEVICE3_RECT.DrawPrimitive      := IDirect3DDevice7.DrawPrimitive
}
return
}
IDirectDraw7_SetDisplayMode(p1, p2, p3, p4, p5, p6)
{
r:=0
printl("IDirectDraw7_SetDisplayMode")
SetDisplayMode(p2, p3, p4)
if CheckMode(p1, p2, p3, p4, 4)
r := dllcall(IDirectDraw7.SetDisplayMode, uint, p1, int, p2, int, p3, int, p4, int, p5, int, p6)
return r
}
IDirect3D7_CreateVertexBuffer(p1, p2, p3, p4)
{
if (!p2)
return D3DERR_INVALIDPARAMS
RW := numget(p2+4, "Uint") & 0x4
if ( (g_.cfg.FHAL) || (g_.cfg.HD && RW) )
numput(0x00000800, p2+4, "uint")
return dllcall(IDirect3D7.CreateVertexBuffer, uint, p1, uint, p2, uint, p3, uint, p4)
}
IDirect3DDevice7_SetViewPort(p1, p2)
{
VW7 := struct(D3DVIEWPORT7)
VarSetCapacity(v, D3DVIEWPORT7.size())
dllcall("RtlMoveMemory", ptr, &v, ptr, p2, int, VW7.size())
VW7[]        := &v
VW7.dwY      *= D3DHOOKS_DATA.scale
VW7.dwX      *= D3DHOOKS_DATA.scale
VW7.dwX      += D3DHOOKS_DATA.HD_X
VW7.dwWidth  *= D3DHOOKS_DATA.scale
VW7.dwHeight *= D3DHOOKS_DATA.scale
if dllcall(IDirect3DDevice7.SetViewPort, uint, p1, uint, VW7[])
return dllcall(IDirect3DDevice7.SetViewPort, uint, p1, uint, p2)
return 0
}
IDirect3DDevice7_DrawPrimitive(p1, p2, p3, p4, p5, p6)
{
r := dllcall("peixoto.dll\DrawPrimitive7Hook", uint, p1, uint, p2, uint, p3, uint, p4, uint, p5, uint, p6)
d := new ComInterfaceWrapper(d3d.IDirect3DDevice7, p1, True)
d.released := 1
logerr("IDirect3DDevice7_DrawPrimitive hook" IsObject(IDirect3DDevice7))
logErr(IDirect3DDevice7.UnHook("DrawPrimitive"))
logErr(IDirect3DDevice7.dllHook("DrawPrimitive", "DrawPrimitive7Hook"))
logErr(d.dllHook("DrawPrimitive", "DrawPrimitive7Hook"))
D3DHOOKS_DATA.DrawPrimitive3    := IDirect3DDevice7.DrawPrimitive
DEVICE3_RECT.DrawPrimitive      := IDirect3DDevice7.DrawPrimitive
return r
}
IDirect3DDevice7_DrawPrimitiveVB(p1, p2, p3, p4, p5, p6)
{
g_.call += 1
static vertice := struct("float x; float y; float z; float w")
dllcall(IDirect3DVertexBuffer7.GetVertexBufferDesc, uint, p3, uint, D3DVERTEXBUFFERDESC[])
dllcall(IDirect3DVertexBuffer7.lock, uint, p3, uint, DDLOCK_READONLY, "uint*", src, uint, 0)
dwVertexTypeDesc := D3DVERTEXBUFFERDESC.dwFVF
dwVertexCount := D3DVERTEXBUFFERDESC.dwNumVertices
size := 4*4
(dwVertexTypeDesc & D3DFVF_DIFFUSE) ? size += 4
(dwVertexTypeDesc & D3DFVF_SPECULAR) ? size += 4
size += ((dwVertexTypeDesc & D3DFVF_TEXCOUNT_MASK)>>D3DFVF_TEXCOUNT_SHIFT) * 8
dllcall("peixoto.dll\ScaleVertices", ptr, src+p4*size, int, dwVertexTypeDesc, int, p5, float, D3DHOOKS_DATA.scale, float, D3DHOOKS_DATA.HD_X)
r := dllcall(IDirect3DDevice7.DrawPrimitive, uint, p1, uint, p2, uint, D3DVERTEXBUFFERDESC.dwFVF, uint, src+p4*size, uint, p5, uint, 0)
dllcall(IDirect3DVertexBuffer7.unlock, uint, p3)
return 0
}
IDirect3DDevice7_Clear(p1, p2, p3, p4, p5, p6, p7)
{
if ! p2
return dllcall(IDirect3DDevice7.Clear, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5, uint, p6, uint, p7)
sz := VarSetCapacity(v, g_HD.rect.size()*p2)
dllcall("RtlMoveMemory", ptr, &v, ptr, p3, int, sz)
g_HD.rect[] := &v
loop, % p2
{
g_HD.rect.bottom *= D3DHOOKS_DATA.scale
g_HD.rect.right  *= D3DHOOKS_DATA.scale
g_HD.rect.right  += D3DHOOKS_DATA.HD_X
g_HD.rect[]      += g_HD.rect.size()
}
r := dllcall(IDirect3DDevice7.Clear, uint, p1, uint, p2, uint, &v, uint, p4, uint, p5, uint, p6, uint, p7)
return r
}
global g_tswap := {}
TSwapInit(byref cfg)
{
InitTextSwapcfg(cfg)
logErr(IDirect3DTexture2.hook("Release"))
logErr(IDirect3DTexture2.hook("Load"))
logErr(IDirect3DDevice3.dllhook("SetTexture", "SetTexture3Hook"))
logErr(IDirectDrawSurface4.hook("Release"))
D3DHOOKS_DATA.IDirect3DDevice3_SetTexture := IDirect3DDevice3.SetTexture
g_tswap.TQueryIface                       := IDirect3DTexture2.QueryInterface
g_tswap.A8Fix                             := ""
if ! (g_.cfg.HD or g_.cfg.32bit)
{
logerr(IDirectDrawSurface4.dllHook("Lock", "LockSurfaceHook"))
logerr(IDirectDrawSurface.dllHook("UnLock", "UnLockHook"))
logerr(IDirectDrawSurface4.dllHook("UnLock", "UnLockSurface4Hook"))
D3DHOOKS_DATA.LockPrimary     := IDirectDrawSurface4.Lock
D3DHOOKS_DATA.UnLockPrimary   := IDirectDrawSurface.UnLock
D3DHOOKS_DATA.UnLockPrimary4  := IDirectDrawSurface4.UnLock
IDirectDrawSurface.Lock       := IDirectDrawSurface4.Lock
logerr(IDirectDrawSurface4.dllHook("Blt", "SurfaceBltHook"))
D3DHOOKS_DATA.BltPrimary      := IDirectDrawSurface4.Blt
IDirectDrawSurface.blt        := IDirectDrawSurface4.blt
logerr(IDirectDrawSurface.dllHook("QueryInterface", "SrfcQueryHook"))
D3DHOOKS_DATA.QueryPrimary := IDirectDrawSurface.QueryInterface
D3DHOOKS_DATA.QuerySurface := IDirectDrawSurface.QueryInterface
D3DHOOKS_DATA.QueryDevice  := RegisterCallback("Dvc1Query", "F")
IDirectDrawSurface4.QueryInterface := IDirectDrawSurface.QueryInterface
}
D3DHOOKS_DATA.LockSurface                  := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "Lock4Hook")
D3DHOOKS_DATA.UnLockSurface4               := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "UnLock4Hook")
D3DHOOKS_DATA.UnLockSurface                    := IDirectDrawSurface.Unlock
D3DHOOKS_DATA.BltSurface                       := RegisterCallback("TexSwapBlt", "F")
D3DHOOKS_DATA.QueryTexture                     := RegisterCallback("IDirectDrawSurface4_QueryInterface")
D3DHOOKS_DATA.SwapBack                         := RegisterCallback("SwapBack", "F")
D3DHOOKS_DATA.Surface_Found                    := RegisterCallback("SurfaceFound", "F")
D3DHOOKS_DATA.IDirect3DTexture2_QueryInterface := IDirect3DTexture2.QueryInterface
D3DHOOKS_DATA.Samples                          := g_tswap.s
D3DHOOKS_DATA.Lock                             := IDirectDrawSurface4.Lock
D3DHOOKS_DATA.UnLock                           := IDirectDrawSurface4.UnLock
D3DHOOKS_DATA.GetDDSCaps                       := IDirectDrawSurface.GetCaps
logErr(IDirect3DTexture2.hook("GetHandle"))
logErr(IDirect3DDevice2.dllhook("SetRenderState", "SetRenderState2Hook"))
g_tswap.swap := IDirect3DDevice2.SwapTextureHandles
g_tswap.load := func("LoadTexture2")
g_tswap.TQueryIface := IDirect3DTexture2.QueryInterface
D3DHOOKS_DATA.IDirect3DDevice2_SetRenderState    := IDirect3DDevice2.SetRenderState
D3DHOOKS_DATA.IDirectDrawSurface_QueryInterface  := IDirectDrawSurface.QueryInterface
D3DHOOKS_DATA.IDirect3DTexture2_QueryInterface   := IDirect3DTexture2.QueryInterface
D3DHOOKS_DATA.IDirect3DTexture_QueryInterface    := IDirect3DTexture.QueryInterface
logErr(IDirect3DTexture.hook("Load"))
logErr(IDirect3DTexture.hook("GetHandle"))
logErr(IDirect3DTexture.hook("Release"))
if g_.cfg.HD
{
f := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "IDirect3DDevice_ExecuteHook")
h := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "TsExecute")
AltInstallHook(h, (t := f))
D3DHOOKS_DATA.TsExecute := t
} else {
logerr(IDirect3DDevice.DllHook("Execute", "TsExecute"))
D3DHOOKS_DATA.TsExecute := IDirect3DDevice.Execute
}
}
InitTextSwapHooks7(byref cfg)
{
InitTextSwapcfg(cfg)
logErr(IDirectDrawSurface7.hook("Release"))
logerr(IDirect3DDevice7.Hook("Load"))
logErr(IDirect3DDevice7.dllhook("SetTexture", (g_tswap.A8Fix) ? "AltSetTexture7Hook" : "SetTexture7Hook"))
g_tswap.A8Fix := ""
if ! (g_.cfg.HD or g_.cfg.32bit)
{
logErr(IDirectDrawSurface7.dllhook("Lock", "Lock4Hook"))
logErr(IDirectDrawSurface7.dllhook("Unlock", "UnLock4Hook"))
logerr(IDirectDrawSurface7.Hook("Blt", "TxSwapBlt7"))
} else {
D3DHOOKS_DATA.LockSurface    := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "Lock4Hook")
D3DHOOKS_DATA.UnLockSurface4 := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "UnLock4Hook")
D3DHOOKS_DATA.BltSurface     := RegisterCallback("TxSwapBlt7", "F")
}
D3DHOOKS_DATA.IDirect3DDevice7_SetTexture        := IDirect3DDevice7.SetTexture
D3DHOOKS_DATA.Surface_Found                      := RegisterCallback("Surface7Found", "F")
D3DHOOKS_DATA.IDirectDrawSurface_QueryInterface  := IDirectDrawSurface7.QueryInterface
D3DHOOKS_DATA.Samples                            := g_tswap.s
D3DHOOKS_DATA.GetDDSCaps                         := IDirectDrawSurface7.GetCaps
D3DHOOKS_DATA.Lock                               := IDirectDrawSurface7.Lock
D3DHOOKS_DATA.UnLock                             := IDirectDrawSurface7.UnLock
}
InitTextSwapcfg(byref cfg)
{
static iid, iid7, iidu
g_tswap        := parsecfg(cfg)
if not g_tswap.path
return
g_tswap.path := g_.cfg.path g_tswap.path
if (g_.cfg.common_path)
g_tswap.path := g_.cfg.Mydocs "\Games\Peixoto\Textures"
for k, v in ["Dumps", "Replacements"]
{
if not fileexist(g_tswap.path "\" v)
{
path := g_tswap.path
FileCreateDir, %path%\%v%
}
}
(g_tswap.a)    ? D3DHOOKS_DATA.DmpAndAppend := RegisterCallback(g_.cfg.d3d=7 ? "DumpAndAppend7" : "DumpAndAppend", "F")
(g_tswap.dly)  ? g_tswap.dly                := []
(g_tswap.v)    ? D3DHOOKS_DATA.vid_check    := 1
GUID_FromString(iid, ddraw.IID_IDirectDrawSurface)
GUID_FromString(iid7, ddraw.IID_IDirectDrawSurface7)
GUID_FromString(iidu, "{00000000-0000-0000-C000-000000000046}")
g_tswap.idd_surface   := &iid
g_tswap.iid_u         := &iidu
g_tswap.iid7          := &iid7
g_tswap.FindTexture   := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "FindTextureInCollection")
g_tswap.dsc           := struct(ddSurfaceDesc2)
g_tswap.RECT          := struct(RECT)
g_tswap.RECT.top      := 0
g_tswap.RECT.bottom   := g_tswap.sz
g_tswap.GetTextureID  := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "GetTextureID")
g_tswap.GetTexture2ID := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "GetTexture2ID")
g_tswap.GetSurface4ID := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "GetSurface4ID")
g_tswap.GetSurfaceID  := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "GetSurfaceID")
g_tswap.Unlock        := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "UnLockHook")
g_tswap.Unlock4       := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "UnLock4Hook")
g_tswap.lock          := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "Lock_Hook")
g_tswap.lock4         := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "Lock4_Hook")
g_tswap.f             := struct("Float[4]")
g_tswap.xBRr          := struct("UINT x, y, w, h;")
g_tswap.master       := new Collection()
g_tswap.textures     := new Collection()
g_tswap.found        := new Collection()
g_tswap.replacements := new Collection()
g_tswap.hTex         := new Collection()
D3DHOOKS_DATA.textures     := g_tswap.textures.pc
D3DHOOKS_DATA.found        := g_tswap.found.pc
D3DHOOKS_DATA.replacements := g_tswap.replacements.pc
D3DHOOKS_DATA.hTex         := g_tswap.hTex.pc
dllcall("peixoto.dll\SetSampleCount", uint, g_tswap.s)
if fileexist((comp := g_tswap.path "\Dumps\dump._dds"))
LoadCompiledDumpCollection(comp, lst := [])
else LoadDumpCollection(g_tswap.path "\Dumps", lst := [])
g_tswap.dumps := []
}
TextSwapCheck(byref i, byref s)
{
static index        := 0
g_tswap.RECT.left   := D3DHOOKS_DATA.HD_X
g_tswap.RECT.right  := g_tswap.sz+D3DHOOKS_DATA.HD_X
_func := getkeystate(g_tswap.q) ? "getkeystate" : "keyevent"
%_func%(g_tswap.n) ? index += 1 : %_func%(g_tswap.p) ? index -= 1
(index >= g_tswap.textures.Count()) ? index := 0
: (index < 0 ) ? index := g_tswap.textures.Count()-1
i := index
s .= " Texture " index+1 "/"  g_tswap.textures.size " master: " g_tswap.master.size "`n"
s .= "ID : " dllcall(g_tswap.GetTexture2ID, uint, g_tswap.textures.ValueAt(index)) "`n"
s .= g_tswap.hTex.size " handles`n"
s .= g_tswap.replacements.size " replacements`n"
s .= g_tswap.found.count() " matches`n"
if keyevent(g_tswap.d)
return 1
}
DscrdTx(t, i)
{
g_tswap.replacements.Discard(t)
g_tswap.textures.discard(i)
g_tswap.found.remove(i)
g_tswap.hTex.discard(t)
}
TxtCk(t)
{
if dllcall(g_tswap.TQueryIface, uint, t, uint, g_tswap.idd_surface, "uint*", surf:=0)
return
VarSetCapacity(ck, 8, 0)
if dllcall(IDirectDrawSurface.GetColorKey, uint, surf, uint, DDCKEY_SRCBLT, "uint", &ck)
return
(Dsc := struct(DDSURFACEDESC)).dwSize  :=  DDSURFACEDESC.size()
dllcall(IDirectDrawSurface.GetSurfaceDesc, uint, surf, uint, Dsc[])
_ck := {"k" : &ck, "f" : GetPixelFormat(Dsc)}
dllcall(IDirectDrawSurface.Release, uint, surf)
return _ck
}
TSwapDvc1_2Created()
{
D3DHOOKS_DATA.Lock            := IDirectDrawSurface.Lock
D3DHOOKS_DATA.UnLock          := IDirectDrawSurface.UnLock
D3DHOOKS_DATA.UnLockSurface4  := IDirectDrawSurface4.Unlock
if (g_tswap.v)
{
D3DHOOKS_DATA.LockSurface     := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "LockHook")
D3DHOOKS_DATA.UnLockSurface   := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "UnLockHook")
}
if (g_.Device2)
{
g_tswap.swap := IDirect3DDevice2.SwapTextureHandles
g_tswap.load := func("LoadTexture2")
g_tswap.TQueryIface := IDirect3DTexture2.QueryInterface
} else {
g_tswap.swap                  := IDirect3DDevice.SwapTextureHandles
g_tswap.load                  := func("LoadTexture")
g_tswap.TQueryIface           := IDirect3DTexture.QueryInterface
}
}
IsMip(cps)
{
return dllcall("peixoto.dll\GetDDSurfaceLevel", ptr, tx)
}
DumpAndAppend(SS, tx)
{
if dllcall("peixoto.dll\GetDDSurfaceLevel", ptr, tx)
return
D        := struct(DDSURFACEDESC2)
D.dwSize := DDSURFACEDESC.size()
r        := dllcall(IDirectDrawSurface.GetSurfaceDesc, uint, SS, ptr, D[])
fmt      := GetPixelFormat(D)
n := 0
file := "dump" n ".dds"
while (fileexist(g_tswap.path "\dumps\" file) or IsDump(g_tswap.dumps, file))
{
n += 1
file := "dump" n ".dds"
}
dumpSurface(SS, g_tswap.path "\dumps\" file)
dllcall("peixoto.dll\AppendDump", astr, g_tswap.path "\dumps\" file)
}
Swap(pTex, index)
{
d    := (g_.Device) ? g_.Device : g_.Device2
surf := 0
_ck  := TxtCk(pTex)
if fileexist(index)
{
if (rep := g_tswap.load.(dllcall(g_.p.DDFrmTx, uint, pTex), d, index, _ck))
{
d ? logerr("Swapedd " dllcall(g_tswap.swap, uint, d, uint, rep, uint, pTex, uint))
g_tswap.replacements._add(pTex, rep)
}
} else if fileexist(f:=g_.cfg.MyDocs "\Games\checkerboard.dds")
{
if (rep := g_tswap.load.(dllcall(g_.p.DDFrmTx, uint, pTex), d, f, _ck))
{
d ? logerr("Swapedd " dllcall(g_tswap.swap, uint, d, uint, rep, uint, pTex, uint))
g_tswap.replacements._add(pTex, rep)
}
}
}
SwapBack(_id)
{
g_tswap.found.remove(_id)
tex     := g_tswap.textures.value(_id)
if (rep := g_tswap.replacements.value(tex))
{
g_tswap.replacements.Discard(tex)
d := (g_.Device) ? g_.Device : g_.Device2
d ? logerr("Swaped back " dllcall(g_tswap.swap, uint, d, uint, rep, uint, Tex))
(g_.Device) ? dllcall(IDirect3DTexture.Release, uint, rep) : dllcall(IDirect3DTexture2.Release, uint, rep)
}
}
SurfaceFound(p1, p2)
{
if (tex := g_tswap.textures.value(p1))
{
logerr("Surf found and text known")
Swap(tex, strget(p2+0, "CP0"))
} else logerr("Surf found")
g_tswap.found.putstr(p1, strget(p2+0, "CP0"))
}
TexSwapCheck(sS, sID="", dID="", ck="")
{
Swapback(dID)
if (sys := GetSurfaceCaps(SS) & DDSCAPS_SYSTEMMEMORY)
{
g_tswap.ck         := ck
g_tswap.dsc.dwSize := DDSURFACEDESC.size()
dllcall(g_tswap.lock, uint, SS, uint, 0, uint, g_tswap.dsc[], uint, 0, uint, 0)
dllcall(g_tswap.Unlock, uint, SS, uint, 0)
}
if (dump := g_tswap.found.getstr(sID))
{
if (t := g_tswap.textures.value(dID))
{
Swap(t, dump)
Logerr("Swapped " ck " ID: " dID)
}
else
{
logerr("found " ck " ID: " dID)
}
g_tswap.found.putstr(dID, dump)
} else if (g_tswap.a)
DumpAndAppend(SS, dID)
g_tswap.found.remove(sID)
g_tswap.ck := ""
return sys
}
AltTexSwapCheck4(SS, sID="", dID="", ck="")
{
cps := GetSurfaceCaps4(SS)
if (sys := cps & DDSCAPS_SYSTEMMEMORY)
{
g_tswap.ck         := ck
g_tswap.dsc.dwSize := DDSURFACEDESC2.size()
dllcall(g_tswap.lock4, uint, SS, uint, 0, uint, g_tswap.dsc[], uint, 0, uint, 0)
dllcall(g_tswap.Unlock4, uint, SS, uint, 0)
}
if (dump :=  g_tswap.found.getstr(sID))
{
if (t := g_tswap.textures.value(dID))
{
Logerr("Swapped " ck " ID: " dID)
Swap(t, dump)
}
else
{
logerr("found " ck " ID: " dID)
}
g_tswap.found.putstr(dID, dump)
} else if (g_tswap.a)
DumpAndAppend(SS, dID)
g_tswap.found.remove(sID)
g_tswap.ck := ""
return sys
}
IDirect3DTexture_GetHandle(p1, p2, p3)
{
if ! (r := dllcall(IDirect3DTexture.GetHandle, uint, p1, uint, p2, uint, p3, uint))
{
if (_id := dllcall(g_tswap.GetTextureID, uint, p1))
{
if (dump := g_tswap.found.getstr(_id))
{
Swap(p1, dump)
}
g_tswap.textures._add(_id, p1)
g_tswap.hTex._add(p1, numget(p3+0, "prt"))
}
} return r
}
IDirect3DTexture2_GetHandle(p1, p2, p3)
{
if ! (r := dllcall(IDirect3DTexture2.GetHandle, uint, p1, uint, p2, uint, p3, uint))
{
if (_id := dllcall(g_tswap.GetTexture2ID, uint, p1))
{
if (dump := g_tswap.found.getstr(_id))
{
Logerr("GetHandle swap, id:	" _id)
Swap(p1, dump)
}
g_tswap.textures._add(_id, p1)
g_tswap.hTex._add(p1, numget(p3+0, "ptr"))
}
} return r
}
IDirectDrawSurface4_QueryInterface(p1, p2, p3)
{
if (r := dllcall(IDirectDrawSurface4.QueryInterface, uint, p1, uint, p2, uint, p3))
return r
if (g_.Device2 && (GetSurfaceCaps4(p1) & DDSCAPS_SYSTEMMEMORY))
return r
if (StringFromIID(p2) = d3d.IID_IDirect3DTexture2)
{
if (_id := dllcall(g_tswap.GetTexture2ID, uint, (tex:=numget(p3+0, "ptr"))))
{
if (dump := g_tswap.found.getstr(_id))
{
Swap(tex, dump)
}
g_tswap.textures._add(_id, tex)
g_tswap.master._add(tex, _id)
g_tswap.master._add(_id, _id)
}
}
return r
}
IDirect3DTexture_Load(p1, p2)
{
if ! (r := dllcall(IDirect3DTexture.Load, uint, p1, uint, p2))
{
dllcall(IDirect3DTexture.QueryInterface, uint, p2, uint, g_tswap.idd_surface, "uint*", surf := 0)
? : dllcall(IDirectDrawSurface.release, uint, Surf)
sID := dllcall(g_tswap.GetTextureID, uint, p2)
dID := dllcall(g_tswap.GetTextureID, uint, p1)
SwapBack(dID)
TexSwapCheck(surf, sID, dID, "Load")
}
}
IDirect3DTexture2_Load(p1, p2)
{
if ! (r := dllcall(IDirect3DTexture2.Load, uint, p1, uint, p2))
{
dllcall(IDirect3DTexture2.QueryInterface, uint, p2, uint, g_tswap.idd_surface, "uint*", surf := 0)
? : dllcall(IDirectDrawSurface.release, uint, Surf)
sID := dllcall(g_tswap.GetTexture2ID, uint, p2)
dID := dllcall(g_tswap.GetTexture2ID, uint, p1)
SwapBack(dID)
TexSwapCheck(surf, sID, dID, "Load")
}
}
TexSwapBlt(p1, p2, p3, p4, p5, p6)
{
if (r := dllcall(IDirectDrawSurface.blt, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5, uint, p6, uint))
return r
SwapBack(dstID := dllcall(g_tswap.GetSurfaceID, uint, p1))
if !p2 and !p4
TexSwapCheck(p3, dllcall(g_tswap.GetSurfaceID, uint, p3), dstID, "Blit")
return r
}
LooseTexture(_id)
{
if (g_tswap.master.key(_id))
return
t := g_tswap.textures.value(_id)
r := g_tswap.replacements.value(t)
r ? logerr("Release rep " dllcall(numget(numget(r+0, "ptr")+8, "ptr"), uint, r))
g_tswap.replacements.Discard(t)
g_tswap.textures.discard(_id)
g_tswap.found.remove(_id)
g_tswap.hTex.discard(t)
}
IDirect3DTexture_Release(p1)
{
if (isobject(g_tswap.dly))
{
dllcall(IDirect3DTexture.addref, uint, p1)
g_tswap.dly.push(p1)
}
dllcall(IDirect3DTexture.QueryInterface, uint, p1, uint, g_tswap.idd_surface, "uint*", s := 0)
? : dllcall(IDirectDrawSurface4.release, uint, s)
if (GetSurfaceCaps4(s) & DDSCAPS_PRIMARYSURFACE)
return dllcall(IDirect3DTexture.release, uint, p1)
dllcall(IDirectDrawSurface4.QueryInterface, uint, s, uint, g_tswap.iid_u, "uint*", i := 0)
? : dllcall(IDirectDrawSurface4.release, uint, i)
r := dllcall(IDirect3DTexture.release, uint, p1)
g_tswap.master.discard(p1)
LooseTexture(i)
return r
}
IDirect3DTexture2_Release(p1)
{
dllcall(IDirect3DTexture2.QueryInterface, uint, p1, uint, g_tswap.idd_surface, "uint*", s := 0)
? : dllcall(IDirectDrawSurface4.release, uint, s)
if (GetSurfaceCaps4(s) & DDSCAPS_PRIMARYSURFACE)
return dllcall(IDirect3DTexture2.release, uint, p1)
dllcall(IDirectDrawSurface4.QueryInterface, uint, s, uint, g_tswap.iid_u, "uint*", i := 0)
? : dllcall(IDirectDrawSurface4.release, uint, i)
r := dllcall(IDirect3DTexture2.release, uint, p1)
g_tswap.master.discard(p1)
LooseTexture(i)
return r
}
IDirectDrawSurface4_Release(s)
{
if (GetSurfaceCaps4(s) & DDSCAPS_PRIMARYSURFACE)
return dllcall(IDirectDrawSurface4.release, uint, s)
dllcall(IDirectDrawSurface4.QueryInterface, uint, s, uint, g_tswap.iid_u, "uint*", i := 0)
? : dllcall(IDirectDrawSurface4.release, uint, i)
r := dllcall(IDirectDrawSurface4.release, uint, s)
if (r = 0)
{
g_tswap.master.discard(i)
LooseTexture(i)
}
return r
}
BrowseTextures(pBackbuffer, clr = 0x00000000)
{
pSurface := 0
str      := "Direct3D1 "
if TextSwapCheck(index, str)
{
n    := 0
file := "dump" n ".dds"
while (fileexist(g_tswap.path "\dumps\" file) or IsDump(g_tswap.dumps, file))
{
n    += 1
file := "dump" n ".dds"
}
dllcall(IDirect3DTexture.QueryInterface, uint, g_tswap.textures.ValueAt(index), uint, g_tswap.idd_surface, "uint*", pSurface, uint)
dumpSurface(pSurface, g_tswap.path "\dumps\" file)
soundplay, *64
}
D3DHOOKS_DATA.curent_texture := g_tswap.hTex.Value(g_tswap.textures.ValueAt(index))
pSurface ?: dllcall(IDirect3DTexture.QueryInterface, uint, g_tswap.textures.ValueAt(index), uint, g_tswap.idd_surface, "uint*", pSurface, uint)
blt := dllcall(IDirectDrawSurface.Blt, uint, pBackbuffer, uint, g_tswap.RECT[]
, uint, pSurface, uint, 0, uint, 0, uint, 0, uint)
pSurface ? dllcall(IDirectDrawSurface.release, uint, pSurface)
writeOnSurface(pBackbuffer, str, clr, D3DHOOKS_DATA.HD_X, g_tswap.sz)
}
BrowseTextures2(pBackbuffer, clr = 0x00000000)
{
pSurface := 0
str      := "Direct3D2 "
if TextSwapCheck(index, str)
{
n    := 0
file := "dump" n ".dds"
while (fileexist(g_tswap.path "\dumps\" file) or IsDump(g_tswap.dumps, file))
{
n    += 1
file := "dump" n ".dds"
}
dllcall(IDirect3DTexture2.QueryInterface, uint, g_tswap.textures.ValueAt(index), uint, g_tswap.idd_surface, "uint*", pSurface, uint)
dumpSurface(pSurface, g_tswap.path "\dumps\" file)
soundplay, *64
}
D3DHOOKS_DATA.curent_texture := g_tswap.hTex.Value(g_tswap.textures.ValueAt(index))
pSurface ?: dllcall(IDirect3DTexture2.QueryInterface, uint, g_tswap.textures.ValueAt(index), uint, g_tswap.idd_surface, "uint*", pSurface, uint)
blt := dllcall(IDirectDrawSurface.Blt, uint, pBackbuffer, uint, g_tswap.RECT[]
, uint, pSurface, uint, 0, uint, 0, uint, 0, uint)
pSurface ? dllcall(IDirectDrawSurface.release, uint, pSurface)
writeOnSurface(pBackbuffer, str, clr, D3DHOOKS_DATA.HD_X, g_tswap.sz)
}
BrowseDevice3Textures2(pBackbuffer, clr = 0x00FFFFFF)
{
pSurface := 0
str      := "Direct3D3: "
if TextSwapCheck(index, str)
{
n    := 0
file := "dump" n ".dds"
while (fileexist(g_tswap.path "\dumps\" file) or IsDump(g_tswap.dumps, file))
{
n    += 1
file := "dump" n ".dds"
}
dllcall(IDirect3DTexture2.QueryInterface, uint, g_tswap.textures.ValueAt(index), uint, g_tswap.idd_surface, "uint*", pSurface, uint)
dumpSurface(pSurface, g_tswap.path "\dumps\" file)
dllcall(IDirectDrawSurface.release, uint, pSurface)
soundplay, *64
}
D3DHOOKS_DATA.curent_texture := g_tswap.textures.ValueAt(index)
str                          .= GetSfc4MemType(D3DHOOKS_DATA.curent_texture)
DEVICE3_RECT.Texture         := D3DHOOKS_DATA.curent_texture
DEVICE3_RECT.Device3         := g_.Device3
D3DHOOKS_DATA.ignore_release := True
dllcall(g_.Dev3_DrawRect, uint, DEVICE3_RECT[], uint, g_tswap.RECT[], float, 0, uint)
D3DHOOKS_DATA.ignore_release := False
writeOnSurface(pBackbuffer, str, clr, D3DHOOKS_DATA.HD_X, g_tswap.sz)
return
}
BrowseTextures7(pBB, clr = 0x00000000)
{
if TextSwapCheck(index, str := "Direct3D7: ")
{
n := 0
file := "dump" n ".dds"
while (fileexist(g_tswap.path "\dumps\" file)or IsDump(g_tswap.dumps, file))
{
n += 1
file := "dump" n ".dds"
}
dllcall(IDirectDrawSurface7.QueryInterface, uint, g_tswap.textures.KeyAt(index), uint, g_tswap.idd_surface, "uint*", pS, uint)
dumpSurface(pS, g_tswap.path "\dumps\" file)
dllcall(IDirectDrawSurface.release, uint, pS)
soundplay, *64
}
s                            := g_tswap.textures.KeyAt(index)
D3DHOOKS_DATA.curent_texture := s
m   := S7Mem(s)
str .= strsplit("`nSystem memory-`nManaged-`nVideo Memory", "-")[m+1] " " GetSrfcPxFmt7(s)
WriteOnSurface(pBB, str m, clr, 0, g_tswap.sz)
if (m=1)
{
DEVICE3_RECT.Texture         := s
DEVICE3_RECT.Device3         := g_.Dev7
D3DHOOKS_DATA.ignore_release := True
dllcall(g_.Dev7_DrawRect, uint, DEVICE3_RECT[], uint, g_tswap.RECT[], float, 0, uint)
D3DHOOKS_DATA.ignore_release := False
}
else dllcall(IDirectDrawSurface7.blt, uint, pBB, uint, g_tswap.RECT[], uint, s, uint, 0, uint, 0, uint, 0)
}
SwapBack7(s)
{
g_tswap.found.remove(s)
if (r := g_tswap.replacements.Value(s))
{
g_tswap.replacements.discard(s)
logerr("Release : " dllcall(IDirectDrawSurface7.Release, uint, r))
}
}
Swap7(s, i)
{
logerr("add " s)
g_tswap.found.putstr(s, i)
if ! S7Mem(s)
return
if ! (f := g_tswap.found.getstr(s))
return
if ! fileexist(f)
f := g_.cfg.MyDocs "\Games\checkerboard.dds"
if ! (r := LoadSurface7(f, s))
return
g_tswap.replacements._add(s, r)
g_tswap.textures.discard(r)
}
DumpAndAppend7(s7, dummy)
{
if !g_tswap.textures.value(s7)
return
D        := struct(DDSURFACEDESC2)
D.dwSize := DDSURFACEDESC2.size()
r        := dllcall(IDirectDrawSurface7.GetSurfaceDesc, uint, s7, ptr, D[])
fmt      := GetPixelFormat(D)
n := 0
file := "dump" n ".dds"
while (fileexist(g_tswap.path "\dumps\" file) or IsDump(g_tswap.dumps, file))
{
n += 1
file := "dump" n ".dds"
}
dllcall(IDirectDrawSurface7.QueryInterface, uint, s7, uint, g_tswap.idd_surface, "uint*", pS:=0, uint)
dumpSurface(pS, g_tswap.path "\dumps\" file)
dllcall("peixoto.dll\AppendDump", astr, g_tswap.path "\dumps\" file)
dllcall(IDirectDrawSurface.release, uint, pS)
}
Ts7Check(dst, src)
{
if S7Mem(src)
return
if (!g_tswap.textures.value(dst))
return
g_tswap.dsc.dwSize := DDSURFACEDESC2.size()
dllcall(g_tswap.lock4, uint, src, uint, 0, uint, g_tswap.dsc[], uint, 0, uint, 0)
dllcall(g_tswap.Unlock4, uint, src, uint, 0)
if (dump := g_tswap.found.getstr(src))
{
logerr("Swap")
Swap7(dst, dump)
} else if (g_tswap.a)
DumpAndAppend7(src, false)
}
TxSwapBlt7(p1, p2, p3, p4, p5, p6)
{
if (r := dllcall(IDirectDrawSurface7.blt, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5, uint, p6, uint))
return r
SwapBack7(p1)
if ! (p2 || p4) && p3
Ts7Check(p1, p3)
}
IDirect3DDevice7_load(p1, p2, p3, p4, p5, p6)
{
if (r := dllcall(IDirect3DDevice7.load, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5, uint, p6))
return r
SwapBack7(p2)
if ! (p3 || p5) && p4
Ts7Check(p2, p4)
}
IDirectDrawSurface7_Release(s)
{
if (r := dllcall(IDirectDrawSurface7.Release, uint, s))
return r
g_tswap.textures.discard(s)
SwapBack7(s)
return r
}
Surface7Found(_id, index)
{
if dllcall(IDirectDrawSurface7.QueryInterface, uint, _id, uint, g_tswap.iid7, "uint*", s7 := 0)
return
dllcall(IDirectDrawSurface7.release, uint, s7)
Swap7(s7, strget(index+0, "CP0"))
}
global g_manager := {}
global g_mngr    := {}
InitMngr()
{
g_mngr.SysMem               := new Collection()
g_mngr.D                    := struct(ddSurfaceDesc2)
g_mngr.D.dwSize             := ddSurfaceDesc2.size()
g_mngr.SysD                 := struct(ddSurfaceDesc2)
g_mngr.SysD.dwSize          := ddSurfaceDesc2.size()
g_mngr.SysD.dwFlags         := DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT
g_mngr.SysD.ddsCaps.dwCaps  := DDSCAPS_TEXTURE | DDSCAPS_SYSTEMMEMORY
D3DHOOKS_DATA.sysmem_surfaces           := g_mngr.SysMem.pc
if (g_.cfg.TextSwap)
{
if (g_tswap.v)
{
l   := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "ManagerLock4")
u   := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "ManagerUnLock4")
ll  := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "Lock4Hook")
uu  := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "UnLock4Hook")
logerr("ManagerLock4   : " AltInstallHook(l, (lt := ll)) )
logerr("ManagerUnLock4 : " AltInstallHook(u, (ut := uu)) )
D3DHOOKS_DATA.Manager_Lock   := lt
D3DHOOKS_DATA.Manager_UnLock := ut
} else
{
if (g_.cfg.HD)
{
D3DHOOKS_DATA.LockSurface     := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "ManagerLock4")
D3DHOOKS_DATA.UnLockSurface4  := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "ManagerUnLock4")
D3DHOOKS_DATA.Manager_Lock    := IDirectDrawSurface4.Lock
D3DHOOKS_DATA.Manager_UnLock  := IDirectDrawSurface4.UnLock
} else {
logerr(IDirectDrawSurface4.dllhook("Lock", "ManagerLock4"))
logerr(IDirectDrawSurface4.dllhook("Unlock", "ManagerUnLock4"))
D3DHOOKS_DATA.Manager_Lock   := IDirectDrawSurface4.Lock
D3DHOOKS_DATA.Manager_UnLock := IDirectDrawSurface4.UnLock
}
}
g_mngr.query                 := IDirectDrawSurface.QueryInterface
D3DHOOKS_DATA.QueryTexture   := RegisterCallback("MngrQuery")
IDirect3DTexture2.UnHook("Release")
logerr(IDirect3DTexture2.hook("Release", "MngrRelease"))
g_mngr.release := RegisterCallback("IDirect3DTex2_Release", "F")
g_mngr.release := RegisterCallback("IDirect3DTexture2_Release", "F")
} else {
logerr(IDirect3DTexture2.hook("Release", "MngrRelease"))
g_mngr.release := IDirect3DTexture2.Release
if (g_.cfg.HD)
{
D3DHOOKS_DATA.LockSurface     := IDirectDrawSurface4.Lock
D3DHOOKS_DATA.UnLockSurface4  := IDirectDrawSurface4.UnLock
D3DHOOKS_DATA.LockSurface     := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "ManagerLock4")
D3DHOOKS_DATA.UnLockSurface4  := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "ManagerUnLock4")
D3DHOOKS_DATA.Manager_Lock    := IDirectDrawSurface4.Lock
D3DHOOKS_DATA.Manager_UnLock  := IDirectDrawSurface4.UnLock
D3DHOOKS_DATA.QueryTexture    := RegisterCallback("MngrQuery")
D3DHOOKS_DATA.QueryDevice     := RegisterCallback("Dvc1Query", "F")
} else {
logerr(IDirectDrawSurface4.dllhook("Lock", "ManagerLock4"))
logerr(IDirectDrawSurface4.dllhook("Unlock", "ManagerUnLock4"))
D3DHOOKS_DATA.Manager_Lock   := IDirectDrawSurface4.Lock
D3DHOOKS_DATA.Manager_UnLock := IDirectDrawSurface4.UnLock
logerr(IDirectDrawSurface.dllHook("QueryInterface", "SrfcQueryHook"))
D3DHOOKS_DATA.QueryPrimary := IDirectDrawSurface.QueryInterface
D3DHOOKS_DATA.QuerySurface := IDirectDrawSurface.QueryInterface
D3DHOOKS_DATA.QueryDevice  := RegisterCallback("Dvc1Query", "F")
IDirectDrawSurface4.QueryInterface := IDirectDrawSurface.QueryInterface
}
g_mngr.query := IDirectDrawSurface.QueryInterface
}
D3DHOOKS_DATA.DLock        := IDirectDrawSurface4.Lock
D3DHOOKS_DATA.DUnLock      := IDirectDrawSurface4.UnLock
D3DHOOKS_DATA.Manager_Blt  := IDirectDrawSurface4.blt
g_tswap.ids4 := struct("DWORD[4]")
dllcall("Ole32.dll\CLSIDFromString", str, ddraw.IID_IDirectDrawSurface4, uint, g_tswap.ids4[])
}
MngrQuery(p1, p2, p3)
{
if !(p1|p2|p3)
return DDERR_INVALIDPARAMS
if (StringFromIID(p2) = d3d.IID_IDirect3DTexture2)
{
if dllcall(IDirectDrawSurface4.GetSurfacedesc, uint, p1, uint, g_mngr.D[])
or (g_mngr.D.ddsCaps.dwCaps2 & DDSCAPS2_TEXTUREMANAGE) or (g_mngr.D.ddsCaps.dwCaps & DDSCAPS_MIPMAP)
or (g_mngr.D.ddsCaps.dwCaps & DDSCAPS_SYSTEMMEMORY)
return (g_.cfg.TextSwap) ? IDirectDrawSurface4_QueryInterface(p1, p2, p3)
: dllcall(g_mngr.query, uint, p1, uint, p2, uint, p3)
SetPixelFormat(g_mngr.SysD, GetPixelFormat(g_mngr.D))
if g_mngr.D.dwFlags & DDSD_CKSRCBLT {
g_mngr.SysD.dwFlags |= DDSD_CKSRCBLT
g_mngr.SysD.ddckCKSrcBlt.dwColorSpaceLowValue  := g_mngr.D.ddckCKSrcBlt.dwColorSpaceLowValue
g_mngr.SysD.ddckCKSrcBlt.dwColorSpaceHighValue := g_mngr.D.ddckCKSrcBlt.dwColorSpaceLowValue
} else  g_mngr.SysD.dwFlags &= ~ DDSD_CKSRCBLT
g_mngr.SysD.dwWidth  :=  g_mngr.D.dwWidth
g_mngr.SysD.dwHeight :=  g_mngr.D.dwHeight
pMemSurface          := 0
m := dllcall(IDirectDraw4.CreateSurface, uint, g_.pIDirectDraw4, uint, g_mngr.SysD[], "uint*", pMemSurface, uint, 0, uint)
m ? logerr("Failed " ddraw.err[m . ""] " " GetPixelFormat(g_mngr.SysD)) : g_mngr.SysMem._add(p1, pMemSurface)
}
return (g_.cfg.TextSwap) ? IDirectDrawSurface4_QueryInterface(p1, p2, p3)
: dllcall(g_mngr.query, uint, p1, uint, p2, uint, p3)
}
MngrRelease(p1)
{
s4 := 0
if ! dllcall(IDirect3DTexture2.QueryInterface, uint, p1, uint, g_tswap.ids4[], "uint*", s4, uint)
{
g_mngr.SysMem.discard(s4)
dllcall(IDirectDrawSurface4.Release, uint, s4)
}
return dllcall(g_mngr.release, uint, p1)
}
global g_tswap_l = {}
LayerInitTextSwap(byref cfg, byref mnger_cfg)
{
D3DHOOKS_DATA.LooseSurface := RegisterCallback("LooseSurface", "F")
g_tswap_l                  := parsecfg(cfg)
g_tswap_l.e                := (cfg) ? True : False
if not g_tswap_l.path
return
g_tswap_l.path := g_.cfg.path g_tswap_l.path
if (g_.cfg.common_path)
g_tswap_l.path := g_.cfg.Mydocs "\WineHooks\Games\Textures"
for k, v in ["Dumps", "Replacements"]
{
if not fileexist(g_tswap_l.path "\" v)
{
path := g_tswap_l.path
FileCreateDir, %path%\%v%
}
}
(g_tswap_l.dly)   ? dllcall("peixoto.dll\D3D12Config", astr, "DELAYRELEASE", uint, 1)
(g_.cfg.TextSwap) ? dllcall("peixoto.dll\D3D12Config", astr, "TEXTSWAP", uint, 1)
(g_.cfg.mngr)     ? dllcall("peixoto.dll\D3D12Config", astr, "TEXTSWAP.MANAGE", uint, 1)
dllcall("peixoto.dll\D3D12Config", astr, "TEXT-SWAP.TOGGLE-SEARCH", uint, GetKeyVK(g_tswap_l.sw))
dllcall("peixoto.dll\D3D12Config", astr, "TEXT-SWAP.NEXT",  uint, GetKeyVK(g_tswap_l.n))
dllcall("peixoto.dll\D3D12Config", astr, "TEXT-SWAP.PREV",  uint, GetKeyVK(g_tswap_l.p))
dllcall("peixoto.dll\D3D12Config", astr, "TEXT-SWAP.QUICK", uint, GetKeyVK(g_tswap_l.q))
dllcall("peixoto.dll\D3D12Config", astr, "TEXT-SWAP.DUMP",  uint, GetKeyVK(g_tswap_l.d))
dllcall("peixoto.dll\D3D12Config", astr, "TEXT-SWAP.A8FIX",  uint, GetKeyVK(g_tswap_l.A8Fix))
dllcall("peixoto.dll\D3D12Config", astr, "TEXT-SWAP.AUTO",  uint, GetKeyVK(g_tswap_l.a))
dllcall("peixoto.dll\SetSampleCount", uint, g_tswap_l.s)
dllcall("peixoto.dll\SetTexturePaths", str, g_tswap_l.path "/dumps/", astr, g_.cfg.MyDocs "\WineHooks\checkerboard.dds")
if fileexist((comp := g_tswap_l.path "\Dumps\dump._dds"))
LoadCompiledDumpCollection(comp, lst := [])
else LoadDumpCollection(g_tswap_l.path "\Dumps", lst := [])
cfg             := ""
mnger_cfg       := ""
g_.cfg.TextSwap := ""
g_.cfg.mngr     := ""
}
TSwapBrowseSurfaces()
{
if (!g_tswap_l.e){
return
}
return dllcall("peixoto.dll\DDrawBrowseTextures", ptr, g_.rtrgt, wstr)
}
global DEVICE3_RECT :=
(
"
DWORD Device3;
DWORD RenderTarget;
DWORD BeginScene;
DWORD EndScene;
DWORD GetCurrentViewport;
DWORD ReleaseViewport;
DWORD GetView;
DWORD SetView;
DWORD ClearView;
DWORD DrawPrimitive;
DWORD SetRenderState;
DWORD GetRenderState;
DWORD SetTexture;
DWORD GetTexture;
DWORD SetTextureStageState;
DWORD GetTextureStageState;
DWORD ReleaseTexture;
LPVOID Texture;
"
)
global DEVICE2_RECT := struct("LPVOID Device2; LPVOID BeginScene; LPVOID EndScene; LPVOID DrawPrimitive; LPVOID SetRenderState; LPVOID GetRenderState; DWORD Text")
DirectDrawCreate_hook(p1, p2, p3)
{
static dd=
if (g_.cfg.D3D = "3")
g_.proxies := {}
if (dd)
{
dllcall(IDirectDraw.release, uint, dd)
dd := 0
}
if (r := dllcall(g_.p.DirectDrawCreate, uint, p1, uint, p2, uint, p3))
return r
if (g_.cfg.layer)
{
DD := dllcall("Peixoto\WrappDDrawObject", ptr, numget(p2+0, "ptr"), ptr)
numput(DD,p2+0, ptr)
}
if (g_.cfg.D3D = "7")
{
return r
}
dd := numget(p2+0, "ptr")
dllcall(IDirectDraw.addref, uint, dd)
SetUPShaders()
return r
}
DDCreateEx_hook(p1, p2, p3, p4)
{
static dd7=
g_.proxies := {}
if (dd7)
{
dllcall(IDirectDraw7.release, uint, dd7)
dd7 := 0
}
if (r := dllcall(g_.p.DDCreateEx, uint, p1, uint, p2, uint, p3, uint, p4))
return r
if (g_.cfg.layer)
{
DD := dllcall("Peixoto\WrappDDraw7Object", ptr, numget(p2+0, "ptr"), ptr)
numput(DD,p2+0, ptr)
}
dd7 := numget(p2+0, "ptr")
dllcall(IDirectDraw7.addref, uint, dd7)
SetUPShaders()
return r
}
D3DDDI_CreatePixelShader(p, p2){
return
}
D3DDDI_SetShaderOverride(p){
return
}
D3DDDI_RestoreShader(){
return
}
D3DDDI_Init(){
return
}
InstallCreateSurfaceHook()
{
logErr(IDirectDraw4.Hook("CreateSurface"))
logerr(IDirectDraw2.Hook("CreateSurface"))
return logerr(IDirectDraw.Hook("CreateSurface"))
}
InstallSetCoopLevelHooks()
{
logErr(IDirectDraw.Hook("SetCooperativeLevel", IsFunc("AltSetCooperativeLevel") ? "AltSetCooperativeLevel" : "IDirectDraw_SetCooperativeLevel", , 1))
logErr(IDirectDraw2.Hook("SetCooperativeLevel", IsFunc("AltSetCooperativeLevel") ? "AltSetCooperativeLevel" : "IDirectDraw_SetCooperativeLevel", , 2))
logErr(IDirectDraw4.Hook("SetCooperativeLevel", IsFunc("AltSetCooperativeLevel") ? "AltSetCooperativeLevel" : "IDirectDraw_SetCooperativeLevel", , 3))
}
InitD3DHook()
InitD3DHook()
{
D3DDDI_Init()
(g_.cfg.DMWM) ? (dllcall("ddraw.dll\SetAppCompatData", uint, 12, uint, 0), g_.cfg.DMWM:="")
g_.DDrawPath      := A_WinDir "\System32\ddraw.dll"
VarSetCapacity(DDPath, 261)
DllCall("GetModuleFileNameA", uint, DllCall("LoadLibraryW", str, "ddraw.dll"), uint, &DDPath, uint, 261)
logerr("DDraw.dll : " StrGet(&DDPath, "CP0")), DDPath := ""
if (g_.cfg.D3D = "7")
{
logerr("DirectDrawCreateEX Hook: " InstallHook(isfunc("AltDDCreateEx") ? "AltDDCreateEx" : "DDCreateEx_hook", pDDCreateEx, "ddraw.dll", "DirectDrawCreateEx"))
g_.p.DDCreateEx := pDDCreateEx
if (!(g_.cfg.layeroff or g_.cfg.ver) and g_.cfg.force_dd1_hooks){
logerr("DirectDrawCreate Hook: " InstallHook(isfunc("AltDDrawCreate") ? "AltDDrawCreate" : "DirectDrawCreate_hook", pDirectDrawCreate, "ddraw.dll", "DirectDrawCreate"))
g_.p.DirectDrawCreate := pDirectDrawCreate
}
} else {
logerr("DirectDrawCreate Hook: " InstallHook(isfunc("AltDDrawCreate") ? "AltDDrawCreate" : "DirectDrawCreate_hook", pDirectDrawCreate, "ddraw.dll", "DirectDrawCreate"))
g_.p.DirectDrawCreate := pDirectDrawCreate
}
if ((!g_.cfg.wineoff) or (FileExist(GetSystemDir() "\wined3d.dll")))
{
g_.cfg.mngr     := false
g_.cfg.NEFS     := False
g_.cfg.winedd   := True
g_.cfg.layeroff := false
if (!FileExist(GetSystemDir() "\wined3d.dll"))
{
dllcall("LoadLibraryW", str,  g_.cfg.injector_dir . "\wined3d\"  g_.cfg.wine "\SysWOW64\wined3d.dll")
h_wineddraw            := dllcall("LoadLibraryW", str, g_.cfg.injector_dir . "\wined3d\" . g_.cfg.wine . "\SysWOW64\ddraw.dll")
g_.p.DDCreateEx        := dllcall("GetProcAddress", ptr, h_wineddraw, astr, "DirectDrawCreateEx")
g_.p.DirectDrawCreate  := dllcall("GetProcAddress", ptr, h_wineddraw, astr, "DirectDrawCreate")
}
logerr("InitDDrawWineHoooks " DllCall("peixoto\InitDDrawWineHoooks", uint, 0, "wstr"))
}
g_.p.SetDDSPxFmt           := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "SetDDSurfacePixelFormat", uint)
g_.p.GetDDSPxFmt           := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "GetDDSPixelFormat", uint)
g_.p.Scale                 := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "Scale")
g_.p.ScaleX                := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "ScaleX")
g_.p.Pal2RGB               := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "Pal2RGB")
g_.p.c2c                   := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "Clr2clr")
g_.p.D3D3Clear             := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "IDirect3DDevice3_Clear")
g_.p.Dev2_DrawRect         := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "IDirect3DDevice2_DrawRect")
g_.p.Dev3_DrawRect         := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "IDirect3DDevice3_DrawRect")
g_.p.Dev3_DrawRctWithFlags := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "IDirect3DDevice3_DrawRectWithFlags")
g_.p.DDFrmSrfc             := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "DDFromSurface")
g_.p.DDFrmTx               := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "DDFromTexture")
g_.p.GetSurfaceID          := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "GetSurfaceID")
g_.p.CreateSrfc            := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "CreateSurfaceHook")
g_.p.DDSSrfcAttchDat       := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "DDSurfaceAttachData")
g_.p.ddiCreatePx           := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "d3dddiCreatePxShader")
g_.p.ddiDeletePx           := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "d3dddiDeletePxShader")
g_.p.ddiSetOvrrd           := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "d3dddiSetOverride")
g_.p_SetFilterBlits        := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "SetWineD3DFilterBlits")
(g_.cfg.MHKS)              ? dllcall("Peixoto.dll\InitMouseHooks")
(g_.cfg.DisableFontAA)     ? (dllcall("Peixoto.dll\DisableFontAA"), g_.cfg.DisableFontAA := "")
logerr(g_.p.Dev3_DrawRctWithFlags "============================================")
g_.cfg.layer := (g_.cfg.layeroff) ? False : True
if (g_.cfg.layer)
{
LayerInitTextSwap(g_.cfg.TextSwap, g_.cfg.mngr)
}
D3DHOOKS_DATA.HD       := (g_.cfg.HD)    ? 1 : 0
D3DHOOKS_DATA.32Bit    := (g_.cfg.32bit) ? 1 : 0
D3DHOOKS_DATA.NEFS     := (g_.cfg.NEFS)  ? 1 : 0
D3DHOOKS_DATA.Delay    := g_.cfg.dly
D3DHOOKS_DATA.Safe     := g_.cfg.safe
D3DHOOKS_DATA.UpdateRT := RegisterCallback("Surface1UpDateRTC", "F")
dllcall(dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "InitD3DHooksData"), uint, D3DHOOKS_DATA[])
if (g_.cfg.console)
dllcall("peixoto.dll\D3D12Config", astr, "DBUG", uint, 1)
g_.cfg.FLTR := ""
if (g_.cfg.FLTR)
dllcall("peixoto.dll\D3D12Config", astr, "TEXTURE.FILTER", uint, 1)
g_.dbg := {"frm" : 0}
g_.palette := dllcall("VirtualAlloc", ptr, 0, ptr, 1024, uint, 0x3000, uint, 0x04, ptr)
if g_.cfg.D3D != "7"
g_.cfg.D3D := "3"
if (g_.cfg.D3D = "3")
{
logErr(GetDirectDraw())
logerr(GetDirect3D())
logerr(IDirect3DDevice.compare([IDirect3DDevice2]))
if g_.cfg.GAVM
{
logerr(IDirectDraw2.Hook("GetAvailableVidMem"))
logerr(IDirectDraw4.Hook("GetAvailableVidMem"))
}
if g_.cfg.DDRefcountfix
logerr(IDirectDraw.Hook("Release"))
g_.cfg.DDRefcountfix := ""
InstallCreateSurfaceHook()
logErr(IDirectDrawSurface.Hook("restore"))
logErr(IDirect3DDevice.Hook("EndScene"))
logErr(IDirect3DDevice3.Hook("EndScene"))
logErr(IDirect3D3.Hook("CreateDevice"))
logErr(IDirect3D2.Hook("CreateDevice"))
if (g_.cfg.HD)
InitHDHooks3()
else if (g_.cfg.32bit || g_.cfg.SXTY)
{
logErr(IDirectDraw.hook("SetDisplayMode"))
logErr(IDirectDraw2.hook("SetDisplayMode"))
logErr(IDirectDraw4.hook("SetDisplayMode"))
(g_.cfg.32bit) ? SetupPrxs4()
}
(parsecfg(g_.cfg.TextSwap).e) ? TSwapInit(g_.cfg.TextSwap)
(g_.cfg.mngr)      ? InitMngr()
if g_.cfg.WSTL or g_.cfg.32bit or g_.cfg.NEFS or g_.cfg.HD
InstallSetCoopLevelHooks()
if ( (g_.cfg.NEFS || g_.cfg.SSAA) && g_.cfg.HD)
{
logerr(IDirectDrawSurface.Hook("flip"))
if (!g_.cfg.layer) {
logerr(IDirectDrawSurface4.PatchVtable("EnumAttachedSurfaces"))
logerr(IDirectDrawSurface.PatchVtable("EnumAttachedSurfaces"))
} else {
logerr(IDirectDrawSurface4.Hook("EnumAttachedSurfaces"))
logerr(IDirectDrawSurface.Hook("EnumAttachedSurfaces"))
}
if (!g_.cfg.layer) {
logerr(IDirectDrawSurface4.dllHook("GetAttachedSurface", "GetAttachedSurface4Hook"))
logerr(IDirectDrawSurface.dllHook("GetAttachedSurface", "GetAttachedSurfaceHook"))
} else {
logerr(IDirectDrawSurface4.Hook("GetAttachedSurface", IsFunc(a:="AltIDirectDrawSurface4_GetAttachedSurface")?a:"IDirectDrawSurface4_GetAttachedSurface"))
logerr(IDirectDrawSurface.Hook("GetAttachedSurface", IsFunc(a:="AltIDirectDrawSurface_GetAttachedSurface")?a:"IDirectDrawSurface_GetAttachedSurface"))
}
D3DHOOKS_DATA.GtAttSrfc4    := IDirectDrawSurface4.GetAttachedSurface
D3DHOOKS_DATA.GtAttSrfc     := IDirectDrawSurface.GetAttachedSurface
D3DHOOKS_DATA.AHKGtAttSrfc4 := RegisterCallback(IsFunc(a:="AltIDirectDrawSurface4_GetAttachedSurface")?a:"IDirectDrawSurface4_GetAttachedSurface", "F")
D3DHOOKS_DATA.AHKGtAttSrfc  := RegisterCallback(IsFunc(a:="AltIDirectDrawSurface_GetAttachedSurface")?a:"IDirectDrawSurface_GetAttachedSurface", "F")
} else if (g_.cfg.SYNC)
logerr(IDirectDrawSurface.Hook("flip"))
}
else if (g_.cfg.D3D = "7")
{
logErr(GetDirectDraw())
logerr(GetDirect3D())
logErr(GetDirect3D7())
logErr(IDirectDraw7.Hook("CreateSurface"))
logErr(IDirect3D7.Hook("CreateDevice"))
logErr(IDirect3DDevice7.Hook("EndScene"))
(g_.cfg.HD) ? InitHDHooks7() : (g_.cfg.32bit) ? (logErr(IDirectDraw7.hook("SetDisplayMode")), SetupPrxs7(0))
if (g_.cfg.FHAL && !g_.cfg.HD)
logErr(IDirect3D7.Hook("CreateVertexBuffer"))
if (parsecfg(g_.cfg.TextSwap).e)
InitTextSwapHooks7(g_.cfg.TextSwap)
if g_.cfg.WSTL or g_.cfg.32bit or g_.cfg.NEFS or g_.cfg.HD
logErr(IDirectDraw7.Hook("SetCooperativeLevel", IsFunc("AltSetCooperativeLevel") ? "AltSetCooperativeLevel" :"IDirectDraw_SetCooperativeLevel", , 4))
if ((g_.cfg.NEFS || g_.cfg.SSAA) && g_.cfg.HD)
{
logerr(IDirectDrawSurface7.Hook("flip"))
logerr(IDirectDrawSurface7.Hook("GetAttachedSurface"))
logerr(IDirectDrawSurface7.Hook("EnumAttachedSurfaces"))
}
}
if g_.cfg.gamma and g_.cfg.os_version > 6.1
{
hDC := DllCall("GetDC", "Uint", 0)
DllCall("GetDeviceGammaRamp", "Uint", hDC, "Uint", (g_.gamma_ramp := struct("BYTE clrs[1536]"))[])
DllCall("ReleaseDC", "Uint", 0, "Uint", hDC)
logErr(IDirectDrawGammaControl.hook("SetGammaRamp"))
}
DEVICE3_RECT := struct(DEVICE3_RECT)
DEVICE3_RECT.RenderTarget := 0
DEVICE3_RECT.BeginScene             := IDirect3DDevice3.BeginScene
DEVICE3_RECT.EndScene               := IDirect3DDevice3.EndScene
DEVICE3_RECT.GetCurrentViewport     := IDirect3DDevice3.GetCurrentViewport
DEVICE3_RECT.ReleaseViewport        := IDirect3DViewPort3.Release
DEVICE3_RECT.GetView                := IDirect3DViewPort3.GetViewport2
DEVICE3_RECT.SetView                := IDirect3DViewPort3.SetViewport2
DEVICE3_RECT.ClearView              := IDirect3DViewPort3.Clear2
DEVICE3_RECT.DrawPrimitive          := IDirect3DDevice3.DrawPrimitive
DEVICE3_RECT.SetRenderState         := IDirect3DDevice3.SetRenderState
DEVICE3_RECT.GetRenderState         := IDirect3DDevice3.GetRenderState
DEVICE3_RECT.SetTexture             := IDirect3DDevice3.SetTexture
DEVICE3_RECT.GetTexture             := IDirect3DDevice3.GetTexture
DEVICE3_RECT.SetTextureStageState   := IDirect3DDevice3.SetTextureStageState
DEVICE3_RECT.GetTextureStageState   := IDirect3DDevice3.GetTextureStageState
DEVICE3_RECT.ReleaseTexture         := IDirect3DTexture2.Release
g_.Dev3_DrawRect := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "IDirect3DDevice3_DrawRect")
DEVICE2_RECT.BeginScene      := IDirect3DDevice2.BeginScene
DEVICE2_RECT.EndScene        := IDirect3DDevice2.EndScene
DEVICE2_RECT.DrawPrimitive   := IDirect3DDevice2.DrawPrimitive
DEVICE2_RECT.SetRenderState  := IDirect3DDevice2.SetRenderState
DEVICE2_RECT.GetRenderState  := IDirect3DDevice2.GetRenderState
g_.Dev2_DrawRect := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "IDirect3DDevice2_DrawRect")
}
if (g_.cfg.D3D = "7")
{
DEVICE3_RECT.BeginScene             := IDirect3DDevice7.BeginScene
DEVICE3_RECT.EndScene               := IDirect3DDevice7.EndScene
DEVICE3_RECT.GetView                := IDirect3DDevice7.GetViewport
DEVICE3_RECT.SetView                := IDirect3DDevice7.SetViewport
DEVICE3_RECT.DrawPrimitive          := IDirect3DDevice7.DrawPrimitive
DEVICE3_RECT.SetRenderState         := IDirect3DDevice7.SetRenderState
DEVICE3_RECT.GetRenderState         := IDirect3DDevice7.GetRenderState
DEVICE3_RECT.SetTexture             := IDirect3DDevice7.SetTexture
DEVICE3_RECT.GetTexture             := IDirect3DDevice7.GetTexture
DEVICE3_RECT.SetTextureStageState   := IDirect3DDevice7.SetTextureStageState
DEVICE3_RECT.GetTextureStageState   := IDirect3DDevice7.GetTextureStageState
DEVICE3_RECT.ReleaseTexture         := IDirectDrawSurface7.Release
g_.Dev7_DrawRect         := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "IDirect3DDevice7_DrawRect")
g_.Dev7_DrawRctWithFlags := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "IDirect3DDevice7_DrawRectWithFlags")
}
wined3d_device_context_blt_hook(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10){
err := dllcall(g_.p.wined3d_device_context_blt, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5, uint, p6, uint, p7
, uint, p8, uint, p9, uint, 0, "CDecl")
logerr("wined3d_device_context_blt_hook" err " " ErrorLevel)
return err
}
IDirectDrawGammaControl_SetGammaRamp(p1, p2, p3)
{
hDC := DllCall("GetDC", "Uint", 0, uint)
DllCall("SetDeviceGammaRamp", "Uint", hDC, "Uint", p3)
DllCall("ReleaseDC", "Uint", 0, "Uint", hDC)
return 0
}
__IDirectDraw_SetCooperativeLevel(p1, p2, p3, iface)
{
funcs := [IDirectDraw.SetCooperativeLevel, IDirectDraw2.SetCooperativeLevel
,IDirectDraw4.SetCooperativeLevel, IDirectDraw7.SetCooperativeLevel]
return dllcall(funcs[iface], uint, p1, uint, p2, uint, p3)
}
IDirectDraw_SetCooperativeLevel(p1, p2, p3)
{
if (r := __IDirectDraw_SetCooperativeLevel(p1, p2, (g_.cfg.NEFS) ? DDSCL_NORMAL : p3, A_eventinfo))
return r
g_.hwin    := p2
g_.fllscrn := (p3 & DDSCL_FULLSCREEN)
if g_.cfg.WSTL
(g_.fllscrn) ? HideBorder(p2) : ShowBorder(p2)
dllcall("peixoto.dll\D3D12Config64", str, "HWND", ptr, g_.hwin)
return r
}
HideBorder(hWin)
{
s := dllcall("GetWindowLong", uint, hWin, int, -16, uint)
s &= ~(0x00C00000 | 0x00040000)
g_.win_style := dllcall("SetWindowLong", uint, hWin, int, -16, uint, s)
dllcall("SetWindowPos", uint, hWin, int, 0, uint, 0, uint, 0, uint, 0, uint, 0, uint, 0x0637)
}
ShowBorder(hWin)
{
if ! (g_.win_style)
return
s := dllcall("GetWindowLong", uint, hWin, int, -16, uint)
s |= 0x00C00000
dllcall("SetWindowLong", uint, hWin, int, -16, uint, s)
dllcall("SetWindowPos", uint, hWin, int, 0, uint, 0, uint, 0, uint, 0, uint, 0, uint, 0x0637)
}
UpdateGameWin(DD)
{
(desc:= struct(DDSURFACEDESC)).dwSize  :=  DDSURFACEDESC.size()
dllcall(IDirectDraw.GetDisplayMode, uint, DD, uint, desc[])
HideBorder(g_.hwin), dllcall("SetForegroundWindow", uint,  g_.hwin), hwin := g_.hwin
if ! dllcall("SetWindowPos", uint, g_.hwin, int, 0, uint, 0, uint, 0, uint, desc.dwWidth, uint, desc.dwHeight, uint, 0x0454)
logerr("Failed to resize window " A_lasterror)
}
UpdateGameWin7(dd7)
{
if (!g_.fllscrn)
return
(desc:= struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC2.size()
dllcall(IDirectDraw7.GetDisplayMode, uint, dd7, uint, desc[])
HideBorder(g_.hwin), dllcall("SetForegroundWindow", uint,  g_.hwin), hwin := g_.hwin
if ! dllcall("SetWindowPos", uint, g_.hwin, int, 0, uint, 0, uint, 0, uint, desc.dwWidth, uint, desc.dwHeight, uint, 0x0454)
logerr("Failed to resize window " A_lasterror)
}
SetClipper7(p, dd7)
{
dllcall(IDirectDraw7.CreateClipper, uint, dd7, uint, 0, "ptr*", clpr, uint, 0, uint)
dllcall(IDirectDrawClipper.SetHwnd, uint, clpr, uint, 0, uint, g_.hwin, uint)
dllcall(IDirectDrawSurface7.SetClipper, uint, p, ptr, clpr, uint)
dllcall(IDirectDrawClipper.Release, uint, clpr)
Process, Priority, , H
}
SetClipper(p, Ifc)
{
Ifcs := [IDirectDrawSurface, IDirectDrawSurface4]
clpr := 0
dllcall(IDirectDraw.CreateClipper, uint, dllcall(g_.p.DDFrmSrfc, uint, p), uint, 0, "ptr*", clpr, uint, 0, uint)
dllcall(IDirectDrawClipper.SetHwnd, uint, clpr, uint, 0, uint, g_.hwin, uint)
dllcall(Ifcs[Ifc].SetClipper, uint, p, ptr, clpr, uint)
dllcall(IDirectDrawClipper.Release, uint, clpr)
Process, Priority, , H
}
IDirectDraw_Release(p1)
{
return dllcall(IDirectDraw.Release, uint, p1, uint)-1
}
flip()
{
D               := g_.proxies.dev
g_.proxies.dev  := g_.proxies.prim
g_.proxies.prim := D
}
SSAA(byref sz, dd, fmt)
{
if !g_.cfg.SSAA or !g_.cfg.HD
return
w := D3DHOOKS_DATA.W
h := D3DHOOKS_DATA.H
d := D3DHOOKS_DATA.D
SetupHD(w, h)
D3DHOOKS_DATA.scale := ceil(D3DHOOKS_DATA.scale) * g_.cfg.SSAA
w	:= D3DHOOKS_DATA.W * D3DHOOKS_DATA.scale
h	:= D3DHOOKS_DATA.H * D3DHOOKS_DATA.scale
D3DHOOKS_DATA.HD_X  := 0
rect.left    := 0
rect.top     := 0
rect.right   := w-1
rect.bottom  := h-1
hRECT.left   := 0
hRECT.top    := 0
hRECT.right  := w/2
hRECT.bottom := h/2
sz := (w <<16) |h
logerr("SSAA Setup")
logerr("W " D3DHOOKS_DATA.W)
logerr("H " D3DHOOKS_DATA.H)
logerr("RECT")
for k, v in rect
logerr(k " " v)
g_.proxies.prms[7] := D3DHOOKS_DATA.w*D3DHOOKS_DATA.scale
g_.proxies.prms[8] := D3DHOOKS_DATA.h*D3DHOOKS_DATA.scale
g_.proxies.prms[5] := 1/g_.proxies.prms[7]
g_.proxies.prms[6] := 1/g_.proxies.prms[8]
g_.proxies.prms[11] := g_.proxies.prms[7]/2
g_.proxies.prms[12] := g_.proxies.prms[8]/2
g_.proxies.prms[9]  := 1/g_.proxies.prms[11]
g_.proxies.prms[10] := 1/g_.proxies.prms[12]
dllcall("peixoto.dll\Scaler", uint, D3DHOOKS_DATA.w, uint, D3DHOOKS_DATA.h, uint, w, uint, h, uint, 0, uint, g_HD.Sclr[])
if (g_.cfg.SSAA = 4)
g_.proxies.hlf := (g_.cfg.d3d = 7) ? new Surface7(dd, fmt, ((w/2)<<16 | h/2)) : new Surface(dd, fmt, ((w/2)<<16 | h/2))
primary_sz          :=  (_RECT.right + _RECT.left) << 16 | (_RECT.bottom + _RECT.top)
g_.proxies.filtered := (g_.cfg.d3d = 7) ? new Surface7(dd, fmt, primary_sz) : new Surface(dd, fmt, primary_sz)
}
NEFS(s, byref D, byref DD, byref sz, byref fmt, byref sys)
{
DD             := dllcall(g_.p.DDFrmSrfc, uint, s)
D              := struct(DDSURFACEDESC2)
D.dwSize       := DDSURFACEDESC.size()
dllcall(IDirectDraw.GetDisplayMode, uint, DD, uint, D[])
fmt            := (g_.cfg.32bit) ? "X8RGB" : GetPixelFormat(D)
sys            := fmt = "PAL8"   ? 1 : 0
sz             := (g_.cfg.HD) ? (D3DHOOKS_DATA.HD_W <<16) | D3DHOOKS_DATA.HD_H
:  (D.dwWidth<<16) | D.dwHeight
SSAA(sz, dd, fmt)
}
NEFS7(s, byref D, byref dd7, byref sz, byref fmt, byref sys)
{
dllcall(IDirectDrawSurface7.GetDDInterface, uint, s, "Uint*", dd7:=0)
D              := struct(DDSURFACEDESC2)
D.dwSize       := DDSURFACEDESC2.size()
dllcall(IDirectDraw7.GetDisplayMode, uint, dd7, uint, D[])
fmt            := (g_.cfg.32bit) ? "X8RGB" : GetPixelFormat(D)
sys            := fmt = "PAL8"   ? 1 : 0
sz             := (g_.cfg.HD) ? (D3DHOOKS_DATA.HD_W <<16) | D3DHOOKS_DATA.HD_H
:  (D.dwWidth<<16) | D.dwHeight
SSAA(sz, dd7, fmt)
dd7 ? dllcall(IDirectDraw7.release, uint, dd7)
}
IDirectDraw2_GetAvailableVidMem(p1, p2, p3, p4)
{
total:=0, free:=0
if !(r := dllcall(IDirectDraw2.GetAvailableVidMem, uint, p1, uint, p2, "uint*", total, "uint*", free))
{
if (total > 0x7fffffff)
{
total >>= 1
free  >>= 1
}
p3 ? numput(total, p3+0, "uint")
p4 ? numput(free, p4+0, "uint")
}
return r
}
IDirectDraw4_GetAvailableVidMem(p1, p2, p3, p4)
{
total:=0, free:=0
if !(r := dllcall(IDirectDraw4.GetAvailableVidMem, uint, p1, uint, p2, "uint*", total, "uint*", free))
{
if (total > 0x7fffffff)
{
total >>= 1
free  >>= 1
}
p3 ? numput(total, p3+0, "uint")
p4 ? numput(free, p4+0, "uint")
}
return r
}
IDirectDraw_CreateSurface(pIDirectDraw, pSurfaceDesc, ppSurface, pIUnknown)
{
DDSURFACEDESC[] := pSurfaceDesc
if r := dllcall(g_.p.CreateSrfc, uint, pIDirectDraw, uint, DDSURFACEDESC[], uint, ppSurface, uint, pIUnknown
, uint, IDirectDraw.CreateSurface, uint, D3DHOOKS_DATA[], "uint*", p:=0)
return r
if (p=1)
{
g_.proxies.flp := ""
g_.rtrgt   := ""
g_.device  := ""
g_.device2 := ""
g_.device3 := ""
g_.primary := numget(ppSurface+0, "uint")
(g_.cfg.HD or  g_.cfg.NEFS) ? UpdateGameWin(dllcall(g_.p.DDFrmSrfc, uint, g_.primary))
(g_.cfg.NEFS) ? SetClipper(g_.primary, 1)
dllcall(IDirectDrawSurface.blt, uint, g_.primary, uint, 0, uint, 0, uint, 0, uint, DDBLT_COLORFILL, uint, DDBLTFX[], uint)
if (g_.cfg.HD or g_.cfg.32bit)
{
SetupPrxs4(dllcall(g_.p.DDFrmSrfc, uint, g_.primary))
}
} else dllcall(g_.p.DDSSrfcAttchDat, ptr, numget(ppSurface+0, "ptr"))
return r
}
IDirectDraw2_CreateSurface(pIDirectDraw, pSurfaceDesc, ppSurface, pIUnknown)
{
DDSURFACEDESC[] := pSurfaceDesc
if r := dllcall(g_.p.CreateSrfc, uint, pIDirectDraw, uint, DDSURFACEDESC[], uint, ppSurface, uint, pIUnknown
, uint, IDirectDraw2.CreateSurface, uint, D3DHOOKS_DATA[], "uint*", p:=0)
return r
if (p=1)
{
g_.proxies.flp := ""
g_.rtrgt   := ""
g_.device  := ""
g_.device2 := ""
g_.device3 := ""
g_.primary := numget(ppSurface+0, "uint")
(g_.cfg.HD or  g_.cfg.NEFS) ? UpdateGameWin(dllcall(g_.p.DDFrmSrfc, uint, g_.primary))
(g_.cfg.NEFS) ? SetClipper(g_.primary, 1)
dllcall(IDirectDrawSurface.blt, uint, g_.primary, uint, 0, uint, 0, uint, 0, uint, DDBLT_COLORFILL, uint, DDBLTFX[], uint)
if (g_.cfg.HD or g_.cfg.32bit)
{
SetupPrxs4(dllcall(g_.p.DDFrmSrfc, uint, g_.primary))
}
} else dllcall(g_.p.DDSSrfcAttchDat, ptr, numget(ppSurface+0, "ptr"))
return r
}
IDirectDraw4_CreateSurface(pIDirectDraw4, pSurfaceDesc, ppSurface, pIUnknown)
{
DDSURFACEDESC2[] := pSurfaceDesc
if r := dllcall(g_.p.CreateSrfc, uint, pIDirectDraw4, uint, DDSURFACEDESC2[], uint, ppSurface, uint, pIUnknown
, uint, IDirectDraw4.CreateSurface, uint, D3DHOOKS_DATA[], "uint*", p:=0)
return r
if (DDSURFACEDESC2.ddsCaps.dwCaps & DDSCAPS_PRIMARYSURFACE){
logerr("======================PRIMARY CREATED=====================" p " " r)
} else if (DDSURFACEDESC2.ddsCaps.dwCaps & DDSCAPS_ZBUFFER) {
logerr("======================Z CREATED=====================" p " " r)
}
if (p=1)
{
g_.proxies.flp := ""
g_.rtrgt   := ""
g_.device  := ""
g_.device2 := ""
g_.device3 := ""
g_.pIDirectDraw4 := pIDirectDraw4
g_.primary4      := numget(ppSurface+0, "uint")
(g_.cfg.HD or  g_.cfg.NEFS) ? UpdateGameWin(dllcall(g_.p.DDFrmSrfc, uint, g_.primary4))
(g_.cfg.NEFS)               ? SetClipper(g_.primary4, 2)
printl("IDirectDraw4_CreateSurface" r  ":" ddraw.err[r . ""])
if (g_.cfg.HD or g_.cfg.32bit)
{
SetupPrxs4(dllcall(g_.p.DDFrmSrfc, uint, g_.primary4))
}
} else dllcall(g_.p.DDSSrfcAttchDat, ptr, numget(ppSurface+0, "ptr"))
return r
}
IDirectDraw_GetDisplayMode(p1, p2)
{
if ( (r := dllcall(IDirectDraw.GetDisplayMode, uint, p1, uint, p2)) = 0 )
{
DDSURFACEDESC[] := p2
(g_.cfg.32bit) ? SetPixelFormat(DDSURFACEDESC)
if (g_.cfg.HD) && D3DHOOKS_DATA.D
{
DDSURFACEDESC.dwWidth  := D3DHOOKS_DATA.w
DDSURFACEDESC.dwHeight := D3DHOOKS_DATA.h
DDSURFACEDESC.lPitch   := D3DHOOKS_DATA.w * D3DHOOKS_DATA.D/4
}
} return r
}
IDirectDraw4_GetDisplayMode(p1, p2)
{
if ( (r := dllcall(IDirectDraw4.GetDisplayMode, uint, p1, uint, p2)) = 0 )
{
DDSURFACEDESC2[] := p2
(g_.cfg.32bit) ? SetPixelFormat(DDSURFACEDESC2)
if (g_.cfg.HD) && D3DHOOKS_DATA.D
{
DDSURFACEDESC2.dwWidth  := D3DHOOKS_DATA.w
DDSURFACEDESC2.dwHeight := D3DHOOKS_DATA.h
DDSURFACEDESC2.lPitch   := D3DHOOKS_DATA.w * D3DHOOKS_DATA.D/4
}
} return r
}
IDirectDrawSurface_AddAttachedSurface(p1, p2)
{
if (GetSurfaceCaps(p2) & DDSCAPS_ZBUFFER)
{
g_.proxies.z := new zprx(p1, p2)
p2           := g_.proxies.z.Surface
}
return dllcall(IDirectDrawSurface.AddAttachedSurface, uint, p1, uint, p2)
}
IsProxy(caps, srfc)
{
if ((caps & DDSCAPS_PRIMARYSURFACE) || (caps & DDSCAPS_FLIP))
return True
if (g_.cfg.winedd and g_.proxies.flp.IsThatYou(srfc))
return True
}
IDirectDrawSurface_GetSurfaceDesc(p1, p2)
{
if (r := dllcall(IDirectDrawSurface.GetSurfaceDesc, uint, p1, uint, p2))
return r
caps := GetSurfaceCaps(p1)
if IsProxy(caps, p1)
{
(desc:= struct(DDSURFACEDESC)).dwSize  :=  DDSURFACEDESC.size()
if ! dllcall(IDirectDrawSurface.GetSurfaceDesc, uint, g_.proxies.dev.surface, uint, desc[])
{
DDSURFACEDESC[] := p2
(g_.cfg.32bit) ? SetPixelFormat(DDSURFACEDESC)
DDSURFACEDESC.dwWidth  := desc.dwWidth
DDSURFACEDESC.dwHeight := desc.dwHeight
DDSURFACEDESC.lPitch   := desc.lPitch
}
} return r
}
IDirectDrawSurface4_GetSurfaceDesc(p1, p2)
{
if (r := dllcall(IDirectDrawSurface4.GetSurfaceDesc, uint, p1, uint, p2))
return r
caps := GetSurfaceCaps4(p1)
if IsProxy(caps, p1)
{
(desc:= struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC2.size()
if ! dllcall(IDirectDrawSurface4.GetSurfaceDesc, uint, g_.proxies.dev.surface4, uint, desc[])
{
DDSURFACEDESC2[] := p2
(g_.cfg.32bit) ? SetPixelFormat(DDSURFACEDESC2)
if (g_.cfg.HD)
{
DDSURFACEDESC2.dwWidth  := desc.dwWidth
DDSURFACEDESC2.dwHeight := desc.dwHeight
DDSURFACEDESC2.lPitch   := desc.lPitch
}
}
}
return r
}
IDirectDrawSurface_GetPixelFormat(p1, p2)
{
if IsProxy(GetSurfaceCaps(p1), p1)
return dllcall("peixoto.dll\SetDDSurfacePixelFormat", uint, p2, astr, (D3DHOOKS_DATA.D=16) ? "RG6B" : (D3DHOOKS_DATA.D=8) ? "PAL8" : "X8RGB")
return dllcall(IDirectDrawSurface.GetPixelFormat, uint, p1, uint, p2)
}
IDirectDrawSurface_Restore(p1)
{
if (GetSurfaceCaps(p1) & DDSCAPS_PRIMARYSURFACE)
{
for k, v in g_.proxies
v.check()
}
return dllcall(IDirectDrawSurface.Restore, uint, p1)
}
IDirectDrawSurface_GetAttachedSurface(p1, p2, p3)
{
if !(p2&&p3&&p1)
return DDERR_INVALIDPARAM
if ( GetSurfaceCaps(p1) & DDSCAPS_PRIMARYSURFACE )
{
NEFS(p1, D, DD, sz, fmt, sys)
g_.proxies.flp := new Surface(DD, fmt, sz, sys)
g_.proxies.flp.Attach((f:=new Surface(DD, fmt, sz, sys)).surface)
numput(g_.proxies.flp.surface, p3+0, "uint")
dllcall(IDirectDrawSurface.addref, uint, g_.proxies.flp.surface)
return 0
}
else if (numget(p2+0, "uint") & DDSCAPS_ZBUFFER)
{
if (g_.proxies.z)
{
GUID_FromString(iid, ddraw.IID_IDirectDrawSurface)
if (dllcall(IDirectDrawSurface.QueryInterface, ptr, g_.proxies.z.id, ptr, &iid, ptr, p3) = 0)
return 0
}
}
return dllcall(IDirectDrawSurface.GetAttachedSurface, uint, p1, uint, p2, uint, p3)
}
IDirectDrawSurface4_GetAttachedSurface(p1, p2, p3)
{
if ( GetSurfaceCaps4(p1) & DDSCAPS_PRIMARYSURFACE )
{
if (!isobject(g_.proxies.flp))
{
NEFS(p1, D, DD, sz, fmt, sys)
g_.proxies.flp := new Surface(DD, fmt, sz, sys)
g_.proxies.flp.Attach((f:=new Surface(DD, fmt, sz, sys)).surface)
}
numput(g_.proxies.flp.surface4, p3+0, "uint")
dllcall(IDirectDrawSurface.addref, uint, g_.proxies.flp.surface)
return 0
}
else if (numget(p2+0, "uint") & DDSCAPS_ZBUFFER)
{
if (g_.proxies.z)
{
GUID_FromString(iid, ddraw.IID_IDirectDrawSurface4)
if (dllcall(IDirectDrawSurface.QueryInterface, ptr, g_.proxies.z.id, ptr, &iid, ptr, p3) = 0)
return 0
}
}
r := dllcall(IDirectDrawSurface4.GetAttachedSurface, uint, p1, uint, p2, uint, p3)
return r
}
SrfEnum(p1, p2, p3)
{
static s
if p1
{
s := p1
return 0
}
return s
}
IDirectDrawSurface_EnumAttachedSurfaces(p1, p2, p3)
{
if ( GetSurfaceCaps(p1) & DDSCAPS_PRIMARYSURFACE )
{
logerr("IDirectDrawSurface_EnumAttachedSurfaces PRIMARY")
NEFS(p1, D, DD, sz, fmt, sys)
D.ddsCaps.dwCaps := DDSCAPS_BACKBUFFER | DDSCAPS_FLIP | DDSCAPS_3DDEVICE
if (g_.cfg.HD)
{
D.dwWidth  := D3DHOOKS_DATA.W
D.dwHeight := D3DHOOKS_DATA.H
}
if (g_.cfg.32bit)
SetPixelFormat(D)
if (g_.cfg.NEFS || g_.cfg.SSAA)
{
g_.proxies.flp := new Surface(DD, fmt, sz, sys)
g_.proxies.flp.Attach((f:=new Surface(DD, fmt, sz, sys)).surface)
dllcall(IDirectDrawSurface.addref, uint, g_.proxies.flp.surface)
dllcall(p3, uint, g_.proxies.flp.surface, uint, D[], uint, p2)
}
else
{
g := dllcall(IDirectDrawSurface.GetAttachedSurface, uint, p1, uint, DDSCAPS_BACKBUFFER, "uint*", f:=0) || errorlevel
if (g)
{
c := RegisterCallback("SrfEnum")
dllcall(IDirectDrawSurface.EnumAttachedSurfaces, uint, p1, uint, p2, uint, c)
DllCall("GlobalFree", "Ptr", c, "Ptr")
f := SrfEnum(0,0,0)
}
dllcall(p3, uint, f, uint, D[], uint, p2)
}
return
}
return dllcall(IDirectDrawSurface.EnumAttachedSurfaces, uint, p1, uint, p2, uint, p3)
}
IDirectDrawSurface4_EnumAttachedSurfaces(p1, p2, p3)
{
if ( GetSurfaceCaps4(p1) & DDSCAPS_PRIMARYSURFACE )
{
NEFS(p1, D, DD, sz, fmt, sys)
D.dwSize         := DDSURFACEDESC2.size()
D.ddsCaps.dwCaps := DDSCAPS_BACKBUFFER | DDSCAPS_FLIP | DDSCAPS_3DDEVICE
if (g_.cfg.HD)
{
D.dwWidth  := D3DHOOKS_DATA.W
D.dwHeight := D3DHOOKS_DATA.H
}
if (g_.cfg.32bit)
SetPixelFormat(D)
if (g_.cfg.NEFS || g_.cfg.SSAA)
{
g_.proxies.flp := new Surface(DD, fmt, sz, sys)
g_.proxies.flp.Attach((f:=new Surface(DD, fmt, sz, sys)).surface)
dllcall(IDirectDrawSurface.addref, uint, g_.proxies.flp.surface)
dllcall(p3, uint, g_.proxies.flp.surface4, uint, D[], uint, p2)
}
else
{
g := dllcall(IDirectDrawSurface4.GetAttachedSurface, uint, p1, uint, DDSCAPS_BACKBUFFER, "uint*", f:=0) || errorlevel
if (g)
{
c  := RegisterCallback("SrfEnum")
en := dllcall(IDirectDrawSurface4.EnumAttachedSurfaces, uint, p1, uint, p2, uint, c)
logerr("enum: " en " " errorlevel " " IDirectDrawSurface4.EnumAttachedSurfaces)
DllCall("GlobalFree", "Ptr", c, "Ptr")
f  := SrfEnum(0,0,0)
}
dllcall(p3, uint, f, uint, D[], uint, p2)
}
return
}
return dllcall(IDirectDrawSurface4.EnumAttachedSurfaces, uint, p1, uint, p2, uint, p3)
}
DDWait(s, f="")
{
if ! (g_.cfg.SYNC || f)
return
d := dllcall(g_.p.DDFrmSrfc, uint, s)
dllcall(IDirectDraw.WaitForVerticalBlank, uint, d, uint, 1, uint, 0)
if (g_.cfg.SYNC = 2)
{
dllcall(IDirectDraw.WaitForVerticalBlank, uint, d, uint, 4, uint, 0)
dllcall(IDirectDraw.WaitForVerticalBlank, uint, d, uint, 1, uint, 0)
}
}
IDirectDrawSurface_flip(p1, p2, p3)
{
if (isobject(g_tswap.dly))
{
while (g_tswap.dly.length())
{
dllcall(IDirect3DTexture.Release, ptr, g_tswap.dly.Remove(1))
}
}
if ! (g_.rtrgt)
{
flip()
g_.Device3 ? dllcall(IDirect3DDevice3.SetRenderTarget, uint, g_.Device3, uint, g_.proxies.dev.surface4)
: g_.Device2 ? dllcall(IDirect3DDevice2.SetRenderTarget, uint, g_.Device2, uint, g_.proxies.dev.surface)
DDWait(p1, p2&DDFLIP_WAIT)
Surface1UpDatePrim(p1, g_.proxies.skp := 0)
return 0
}
else if (D3DHOOKS_DATA.Delay = 2)
{
Surface1UpDateRT(0, g_.cfg.cpy)
D3DHOOKS_DATA.Delay := 1
}
if (g_.cfg.SSAA){
dvc := g_.cfg.winedd ? False : new D3DDevice(dllcall(g_.p.DDFrmSrfc, ptr,  g_.proxies.filtered.surface))
if (g_.cfg.SSAA=4)
{
D3DBlt(g_.proxies.hlf, hRECT[], g_.proxies.flp, 0, 3, DDBLTFX[], dvc)
D3DBlt({"surface" : g_.proxies.filtered.surface, "surface4" :  g_.proxies.filtered.surface4}, _RECT[], g_.proxies.hlf, 0, 3, DDBLTFX[], dvc)
} else {
D3DBlt({"surface" : g_.proxies.filtered.surface, "surface4" :  g_.proxies.filtered.surface4}, _RECT[], g_.proxies.flp, 0, g_.cfg.SSAA=1?0:3 g, DDBLTFX[], dvc)
}
DDWait(p1, p2&DDFLIP_WAIT)
dllcall(IDirectdrawSurface.blt, uint, p1, uint, _RECT[], uint, g_.proxies.filtered.surface4, uint, _RECT[], uint, 0, uint, DDBLTFX[], uint)
return
}
else if (g_.cfg.NEFS)
{
DDWait(p1, p2&DDFLIP_WAIT)
r := dllcall(IDirectdrawSurface.blt, uint, p1, uint, 0, uint, g_.rtrgt, uint, 0, uint, 0, uint, DDBLTFX[], uint)
dllcall(IDirectDrawSurface.flip, uint, g_.rtrgt, uint, 0, uint, 0)
return r
}
DDWait(p1, p2&DDFLIP_WAIT)
r := dllcall(IDirectDrawSurface.flip, uint, p1, uint, p2, uint, p3)
return r
}
IDirectDrawSurface_GetPalette(p1, p2)
{
if (GetSurfaceCaps(p1) & DDSCAPS_PRIMARYSURFACE)
p1 := g_.proxies.prim.surface
return dllcall(IDirectDrawSurface.GetPalette, uint, p1, uint, p2)
}
IDirectDrawSurface_SetPalette(p1, p2)
{
if ( (caps := GetSurfaceCaps(p1)) & DDSCAPS_PRIMARYSURFACE  )
{
if (!g_cfg.layer)
{
logerr(IDirectDrawSurface.PatchVtableWithDll("lock", "LockSurfaceHook"))
logerr(IDirectDrawSurface.PatchVtableWithDll("Unlock", "UnLockSurfaceHook"))
}
p1              := g_.proxies.prim.surface
g_.proxies.pltt := p2
dllcall(IDirectDrawPalette.GetCaps, uint, p2, "uint*", cps:=0)
(cps & DDPCAPS_ALLOW256)
? logerr("Get entries " DllCall(IDirectDrawPalette.GetEntries, ptr, p2, uint, 0, uint, 0, uint, 256, ptr, g_.palette))
: logerr("Get entries " DllCall(IDirectDrawPalette.GetEntries, ptr, p2, uint, 1, uint, 0, uint, 255, ptr, g_.palette))
} return 0
return 0
}
IDirectDrawPalette_SetEntries(p1, p2, p3, p4, p5)
{
if (p1 = g_.proxies.pltt)
{
cps:=0
dllcall("RtlMoveMemory", ptr, g_.palette+(p3)*4, ptr, p5, int, (p4)*4)
dllcall(IDirectDrawPalette.GetCaps, uint, p1, "uint*", cps)
if ! (cps & DDPCAPS_ALLOW256)
{
numput(0, g_.palette+0, "uint")
numput(0xffffffff, g_.palette+1020, "uint")
}
Surface1UpDatePrim((g_.cfg.d3d=7) ? g_.primary7 : g_.primary, 0)
}
return dllcall(IDirectDrawPalette.SetEntries, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5)
return 0
}
IDirectDrawPalette_GetEntries(p1, p2, p3, p4, p5)
{
return dllcall(IDirectDrawPalette.GetEntries, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5)
}
Dvc1Query(p1, p2, p3)
{
if ! (r := dllcall(IDirectDrawSurface.QueryInterface, uint, p1, uint, p2, uint, p3))
{
g_.rtrgt       := p1
g_.device      := numget(p3+0, "ptr")
if (parsecfg(g_.cfg.TextSwap).e)
{
TSwapDvc1_2Created()
}
}
return r
}
IDirect3D2_CreateDevice(p1, p2, p3, p4)
{
STATIC H
r := dllcall(IDirect3D2.CreateDevice, uint, p1, uint, p2, uint, p3, uint, p4)
if (r)
{
logerr("IDirect3D2::CreateDevice failed " r d3d.err[r . ""])
return r
}
g_.rtrgt   := p3
g_.device  := ""
g_.Device2 := numget(p4+0, "Ptr")
if (parsecfg(g_.cfg.TextSwap).e)
{
TSwapDvc1_2Created()
}
if (g_.proxies.dev)
dllcall(IDirectdrawSurface.blt, uint, g_.proxies.dev.Surface, uint, 0, uint, 0, uint, 0
, uint, DDBLT_COLORFILL, uint, g_HD.DDBLTFX[], uint)
return r
}
IDirect3D3_CreateDevice(p1, p2, p3, p4, p5)
{
STATIC H=
r := dllcall(IDirect3D3.CreateDevice, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5, uint)
g_.rtrgt   := p3
g_.Device3 := numget(p4+0, "Ptr")
Logerr("IDirect3DDevice3 " r " " d3d.err[r . ""])
if (parsecfg(g_.cfg.TextSwap).e)
{
g_tswap.load := func("LoadTexture2")
if !(H)
{
logerr(IDirect3DTexture.unhook("Release"))
H := true
}
}
if (g_.proxies.dev)
dllcall(IDirectdrawSurface4.blt, uint, g_.proxies.dev.Surface4, uint, 0, uint, 0, uint, 0
, uint, DDBLT_COLORFILL, uint, g_HD.DDBLTFX[], uint)
return r
}
IDirect3DDevice_EndScene(p1)
{
r := dllcall(IDirect3DDevice.EndScene, uint, p1)
TSwapBrowseSurfaces()
D3DHOOKS_DATA.Chck := 0
if (!g_tswap.e || g_.device3)
return r
static clr := 0x00ffffff
keyevent(g_tswap.c)  ? clr := cicleColor(clr)
keyevent(g_tswap.sw) ? D3DHOOKS_DATA.search_enabled := (D3DHOOKS_DATA.search_enabled) & True ? False : True
(D3DHOOKS_DATA.search_enabled) & True ? (g_.device) ? BrowseTextures(g_.rtrgt, clr)
: (g_.device2) ? BrowseTextures2(g_.rtrgt, clr)
return r
}
IDirect3DDevice3_EndScene(p1)
{
r := dllcall(IDirect3DDevice3.EndScene, uint, p1)
TSwapBrowseSurfaces()
D3DHOOKS_DATA.Chck := 0
if ( !g_tswap.e || !g_.device3)
return r
static clr := 0x00ffffff
keyevent(g_tswap.c)  ?	clr := cicleColor(clr)
keyevent(g_tswap.sw) ? D3DHOOKS_DATA.search_enabled := (D3DHOOKS_DATA.search_enabled) & True ? False : True
(D3DHOOKS_DATA.search_enabled) & True ? BrowseDevice3Textures2(g_.rtrgt, clr)
return r
}
IDirect3DDevice3_BeginScene(p1)
{
if (D3DHOOKS_DATA.Delay = 2)
{
Surface1UpDateRT(0, g_.cfg.cpy)
D3DHOOKS_DATA.Delay := 1
}
return dllcall(IDirect3DDevice3.BeginScene, uint, p1)
}
IDirect3DDevice2_BeginScene(p1)
{
if (D3DHOOKS_DATA.Delay = 2)
{
Surface1UpDateRT(0, g_.cfg.cpy)
D3DHOOKS_DATA.Delay := 1
}
return dllcall(IDirect3DDevice2.BeginScene, uint, p1)
}
IDirect3DDevice2_SetRenderTarget(p1, p2, p3)
{
r := dllcall(IDirect3DDevice2.SetRenderTarget, uint, p1, uint, p2, uint, p3)
if (r = 0)
g_.rtrgt := p2
return r
}
IDirectDrawSurface7_AddAttachedSurface(p1, p2)
{
if (GetSurfaceCaps7(p2) & DDSCAPS_ZBUFFER)
{
g_.proxies.z := new zprx7(p1, p2)
p2           := (g_.proxies.z.Surface7) ? g_.proxies.z.Surface7 : g_.proxies.z.Surface
}
return dllcall(IDirectDrawSurface7.AddAttachedSurface, uint, p1, uint, p2)
}
IDirectDraw7_GetDisplayMode(p1, p2)
{
if ( (r := dllcall(IDirectDraw7.GetDisplayMode, uint, p1, uint, p2)) = 0 )
{
DDSURFACEDESC2[] := p2
(g_.cfg.32bit) ? SetPixelFormat(DDSURFACEDESC2)
if (g_.cfg.HD) && D3DHOOKS_DATA.D
{
DDSURFACEDESC2.dwWidth  := D3DHOOKS_DATA.w
DDSURFACEDESC2.dwHeight := D3DHOOKS_DATA.h
DDSURFACEDESC2.lPitch   := D3DHOOKS_DATA.w * D3DHOOKS_DATA.D/4
}
} return r
}
IDirectDraw7_CreateSurface(p1, p2, p3, p4)
{
if r := dllcall(g_.p.CreateSrfc, uint, p1, uint, p2, uint, p3, uint, p4, uint, IDirectDraw7.CreateSurface, uint, D3DHOOKS_DATA[], "uint*", p:=0)
return r
if (p=1)
{
g_.proxies.flp := ""
g_.Dev7     := ""
g_.rtrgt    := ""
g_.primary7 := numget(p3+0, "uint")
(g_.cfg.HD or  g_.cfg.NEFS) ? UpdateGameWin7(p1)
(g_.cfg.NEFS) ? SetClipper7(g_.primary7, p1)
if g_.cfg.HD or g_.cfg.32bit
{
logerr("Setup proxies")
SetupPrxs7(p1, g_.primary7)
}
}else if ( (p=3) && parsecfg(g_.cfg.TextSwap).e )
g_tswap.textures._add(s:=numget(p3+0, "uint"), s)
return r
}
IDirectDrawSurface7_GetPixelFormat(p1, p2)
{
if IsProxy(GetSurfaceCaps7(p1), p1)
return dllcall("peixoto.dll\SetDDSurfacePixelFormat", uint, p2, astr, (D3DHOOKS_DATA.D=16) ? "RG6B" : (D3DHOOKS_DATA.D=8) ? "PAL8" : "X8RGB")
return dllcall(IDirectDrawSurface7.GetPixelFormat, uint, p1, uint, p2)
}
IDirectDrawSurface7_GetSurfaceDesc(p1, p2)
{
if (r := dllcall(IDirectDrawSurface7.GetSurfaceDesc, uint, p1, uint, p2))
return r
caps := GetSurfaceCaps7(p1)
if IsProxy(caps, p1)
{
(desc:= struct(DDSURFACEDESC2)).dwSize  :=  DDSURFACEDESC2.size()
if ! dllcall(IDirectDrawSurface7.GetSurfaceDesc, uint, g_.proxies.dev.surface7, uint, desc[])
{
DDSURFACEDESC2[] := p2
(g_.cfg.32bit) ? SetPixelFormat(DDSURFACEDESC2)
if (g_.cfg.HD)
{
DDSURFACEDESC2.dwWidth  := desc.dwWidth
DDSURFACEDESC2.dwHeight := desc.dwHeight
DDSURFACEDESC2.lPitch   := desc.lPitch
}
}
}
return r
}
IDirectDrawSurface7_GetAttachedSurface(p1, p2, p3)
{
if ( GetSurfaceCaps7(p1) & DDSCAPS_PRIMARYSURFACE )
{
NEFS7(p1, D, dd7, sz, fmt, sys)
g_.proxies.flp := new Surface7(dd7, fmt, sz, sys)
g_.proxies.flp.Attach((f:=new Surface7(dd7, fmt, sz, sys)).surface)
dllcall(IDirectDrawSurface7.addref, uint, g_.proxies.flp.surface7)
(g_.cfg.32bit)   ? SetPixelFormat(D)
D.ddsCaps.dwCaps := DDSCAPS_BACKBUFFER | DDSCAPS_FLIP | DDSCAPS_3DDEVICE
numput(g_.proxies.flp.surface7, p3+0, "uint")
return
}
return dllcall(IDirectDrawSurface7.GetAttachedSurface, uint, p1, uint, p2, uint, p3)
}
IDirectDrawSurface7_EnumAttachedSurfaces(p1, p2, p3)
{
if ( GetSurfaceCaps7(p1) & DDSCAPS_PRIMARYSURFACE )
{
NEFS7(p1, D, dd7, sz, fmt, sys)
D.ddsCaps.dwCaps := DDSCAPS_BACKBUFFER | DDSCAPS_FLIP | DDSCAPS_3DDEVICE
if (g_.cfg.HD)
{
D.dwWidth  := D3DHOOKS_DATA.W
D.dwHeight := D3DHOOKS_DATA.H
}
if (g_.cfg.32bit)
SetPixelFormat(D)
if (g_.cfg.NEFS || g_.cfg.SSAA)
{
g_.proxies.flp := new Surface7(dd7, fmt, sz, sys)
g_.proxies.flp.Attach((f:=new Surface7(dd7, fmt, sz, sys)).surface)
dllcall(IDirectDrawSurface7.addref, uint, g_.proxies.flp.surface7)
dllcall(p3, uint, g_.proxies.flp.surface7, uint, D[], uint, p2)
}
else
{
g := dllcall(IDirectDrawSurface7.GetAttachedSurface, uint, p1, uint, DDSCAPS_BACKBUFFER, "uint*", f:=0) || errorlevel
if (g)
{
c := RegisterCallback("SrfEnum")
dllcall(IDirectDrawSurface7.EnumAttachedSurfaces, uint, p1, uint, p2, uint, c)
DllCall("GlobalFree", "Ptr", c, "Ptr")
f := SrfEnum(0,0,0)
}
dllcall(p3, uint, f, uint, D[], uint, p2)
}
return
}
return dllcall(IDirectDrawSurface7.EnumAttachedSurfaces, uint, p1, uint, p2, uint, p3)
}
IDirectDrawSurface7_flip(p1, p2, p3)
{
if ! (g_.rtrgt)
{
flip()
Surface1UpDatePrim(p1, 0)
return 0
}
else if (D3DHOOKS_DATA.Delay = 2)
{
Surface1UpDateRT(0, g_.cfg.cpy)
D3DHOOKS_DATA.Delay := 1
}
if (g_.cfg.SSAA){
dvc := g_.cfg.winedd ? False : g_.proxies.D3DZ
if (g_.cfg.SSAA=4)
{
D3DBlt(g_.proxies.hlf, hRECT[], g_.proxies.flp, 0, 3, DDBLTFX[], dvc)
D3DBlt({"surface" : g_.proxies.filtered.surface, "surface7" : g_.proxies.filtered.surface7}, _RECT[], g_.proxies.hlf, 0, 3, DDBLTFX[], dvc)
} else {
D3DBlt({"surface" : g_.proxies.filtered.surface, "surface7" : g_.proxies.filtered.surface7}, _RECT[], g_.proxies.flp, 0, g_.cfg.SSAA=1?0:3 g, DDBLTFX[], dvc)
}
DDWait(p1, p2&DDFLIP_WAIT)
dllcall(IDirectdrawSurface7.blt, uint, p1, uint, _RECT[], uint, g_.proxies.filtered.surface7, uint, _RECT[], uint, 0, uint, DDBLTFX[], uint)
return
}
else if g_.cfg.NEFS
{
DDWait(p1, p2&DDFLIP_WAIT)
r := dllcall(IDirectdrawSurface7.blt, uint, p1, uint, 0, uint, g_.rtrgt, uint, 0, uint, 0, uint, g_HD.DDBLTFX[], uint)
dllcall(IDirectdrawSurface7.flip, uint, g_.rtrgt, uint, p2, uint, p3)
return r
}
DDWait(p1, p2&DDFLIP_WAIT)
r := dllcall(IDirectdrawSurface7.flip, uint, p1, uint, p2, uint, p3)
return
}
IDirect3DDevice7_BeginScene(p1)
{
if (D3DHOOKS_DATA.Delay = 2)
{
Surface1UpDateRT(0, g_.cfg.cpy)
D3DHOOKS_DATA.Delay := 1
}
return dllcall(IDirect3DDevice7.BeginScene, uint, p1)
}
IDirect3DDevice7_EndScene(p1)
{
r := dllcall(IDirect3DDevice7.EndScene, uint, p1)
TSwapBrowseSurfaces()
if (!g_tswap.e)
return r
static clr := 0x00ffffff
keyevent(g_tswap.c)  ? clr := cicleColor(clr)
keyevent(g_tswap.sw) ? D3DHOOKS_DATA.search_enabled := (D3DHOOKS_DATA.search_enabled) & True ? False : True
(D3DHOOKS_DATA.search_enabled) & True ? BrowseTextures7(g_.rtrgt, clr)
return r
}
IDirect3D7_CreateDevice(p1, p2, p3, p4)
{
if (g_.cfg.FHAL)
{
GUID_FromString(iid,d3d.IID_IDirect3DHALDevice)
p2 := &iid
}
r := dllcall(IDirect3D7.CreateDevice, uint, p1, uint, p2, uint, p3, uint, p4)
if (r = 0)
{
g_.Dev7  := numget(p4+0, "ptr")
g_.rtrgt := p3
}
logerr("device " r " " d3d.err[r . ""])
return r
}

; <COMPILER: v1.1.15.03>
g_.WnAPI := {}
InitWWnAPIHooks()
InitWWnAPIHooks()
{
if (g_.cfg.HD)
{
if (g_.cfg.WHKS)
{
InstallHook(isfunc("AltMovewindow") ? "AltMovewindow" : "Movewindow", p, "User32.dll", "MoveWindow")
g_.WnAPI.Move   := p
InstallHook(isfunc("AltSetWindowPos") ? "AltSetWindowPos" : "SetWindowPos", p, "User32.dll", "SetWindowPos")
g_.WnAPI.SetPos := p
}
if (g_.cfg.MCLP)
{
InstallHook("ClipCursor", p, "User32.dll", "ClipCursor")
g_.WnAPI.ClpCrsr := p
} else g_.WnAPI.ClpCrsr := dllcall("GetProcAddress", uint, dllcall("GetModuleHandleA", astr, "User32.dll", uint), astr, "ClipCursor")
if (g_.cfg.GDI)
{
dll := 	FileExist(GetSystemDir() "\wined3d.dll") ? "gdi32.dll" : "Gdi32Full.dll"
hook := isfunc(h:="AltStretchBltHook") ? h : "StretchBltHook"
logerr("StretchBlthook " InstallHook(hook, p, dll, "StretchBlt"))
g_.WnAPI.Sblt         := p
hook := isfunc(h:="AltBitBltHook") ? h : "BitBltHook"
logerr("BitBlthook " InstallHook(hook, p, dll, "BitBlt"))
g_.WnAPI.Bitblt       := p
hook := isfunc(h:="PatBlt") ? h : "PatBltHook"
logerr("PatBlthook " InstallHook(hook, p, dll, "PatBlt"))
g_.WnAPI.PatBlt       := p
hook := isfunc(h:="TextOutA") ? h : "TextOutAHook"
logerr("TextOutAhook " InstallHook(hook, p, dll, "TextOutA"))
g_.WnAPI.TextOutA    := p
hook := isfunc(h:="ExtTextOutA") ? h : "ExtTextOutAHook"
logerr("ExtTextOutAhook " InstallHook(hook, p, dll, "ExtTextOutA"))
g_.WnAPI.ExtTextOutA := p
}
}
}
ExtTextOutAHook(p1, p2, p3, p4, p5, p7, p8)
{
if (dllcall("WindowFromDC", ptr, p1) = 0)
return dllcall(g_.WnAPI.ExtTextOutA, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5, uint, p6, uint, p7, uint, p8)
dllcall(IDirectDrawSurface.GetDC, uint, g_.proxies.prim.Surface, "uint*", DC)
r := dllcall(g_.WnAPI.ExtTextOutA, uint, DC, uint, p2, uint, p3, uint, p4, uint, p5, uint, p6, uint, p7, uint, p8)
dllcall(IDirectDrawSurface.ReleaseDC, uint, g_.proxies.prim.Surface, uint, DC)
Surface1UpDatePrim(g_.primary, 0)
return r
}
TextOutAHook(p1, p2, p3, p4, p5)
{
if (dllcall("WindowFromDC", ptr, p1) = 0)
return dllcall(g_.WnAPI.TextOutA, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5)
dllcall(IDirectDrawSurface.GetDC, uint, g_.proxies.prim.Surface, "uint*", DC)
r := dllcall(g_.WnAPI.TextOutA, uint, DC, uint, p2, uint, p3, uint, p4, uint, p5)
dllcall(IDirectDrawSurface.ReleaseDC, uint, g_.proxies.prim.Surface, uint, DC)
Surface1UpDatePrim(g_.primary, 0)
return r
}
PatBltHook(p1, p2, p3, p4, p5, p6)
{
if (dllcall("WindowFromDC", ptr, p1) = 0)
return dllcall(g_.WnAPI.PatBlt, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5, uint, p6)
dllcall(IDirectDrawSurface.GetDC, uint, g_.proxies.prim.Surface, "uint*", DC)
r := dllcall(g_.WnAPI.PatBlt, uint, DC, uint, p2, uint, p3, uint, p4, uint, p5, uint, p6)
dllcall(IDirectDrawSurface.ReleaseDC, uint, g_.proxies.prim.Surface, uint, DC)
Surface1UpDatePrim(g_.primary, 0)
return r
}
BitBltHook(p1, p2, p3, p4, p5, p6, p7, p8, p9)
{
if (dllcall("WindowFromDC", ptr, p1) = 0)
return dllcall(g_.WnAPI.Bitblt, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5, uint, p6, uint, p7, uint, p8, uint, p9)
return StretchBltHook(p1, p2, p3, p4, p5, p6, p7, p8, p4, p5, p9)
}
StretchBltHook(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)
{
dllcall(IDirectDrawSurface.GetDC, uint, g_.proxies.prim.Surface, "uint*", DC:=0)
r := dllcall(g_.WnAPI.Sblt, uint, DC, uint, p2, uint, p3, uint, p4, uint, p5, uint, p6, uint, p7, uint, p8, uint, p9, uint, p10, uint, p11)
dllcall(IDirectDrawSurface.ReleaseDC, uint, g_.proxies.prim.Surface, uint, DC)
Surface1UpDatePrim(g_.primary, 0)
return r
}
ClipCursor(p1)
{
if (g_.cfg.MCLP=2)
{
VarSetCapacity(r, 8, 0)
numput(D3DHOOKS_DATA.HD_X, &r+08, "uint")
numput(D3DHOOKS_DATA.HD_W-D3DHOOKS_DATA.HD_X, &r+08, "uint")
numput(D3DHOOKS_DATA.HD_H, &r+12, "uint")
return dllcall(g_.WnAPI.ClpCrsr, uint, &r)
}
VarSetCapacity(r, 8, 0)
numput(D3DHOOKS_DATA.W, &r+08, "uint")
numput(D3DHOOKS_DATA.H, &r+12, "uint")
return dllcall(g_.WnAPI.ClpCrsr, uint, &r)
}
Movewindow(p1, p2, p3, p4, p5, p6)
{
if (p1 = g_.hwin)
{
d  := Desk()
p4 := d.w
p5 := d.h
}
return dllcall(g_.WnAPI.Move, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5, uint, p6)
}
SetWindowPos(p1, p2, p3, p4, p5, p6, p7)
{
if (p1 = g_.hwin)
{
d  := Desk()
p5 := d.w
p6 := d.h
}
return dllcall(g_.WnAPI.SetPos, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5, uint, p6, uint, p7)
}



logerr(IDirectDraw.unhook("EnumdisplayModes"))
logerr(IDirectDraw4.unhook("EnumdisplayModes"))

AltIDirectDraw2_CreateSurface(p1, p2, p3, p4)
{
	d    := struct(DDSURFACEDESC)
	d[] := p2
	if (d.ddsCaps.dwCaps & DDSCAPS_PRIMARYSURFACE)
		d.ddsCaps.dwCaps &= ~ DDSCAPS_SYSTEMMEMORY
	
	return IDirectDraw2_CreateSurface(p1, p2, p3, p4)	
}

AltIDirectDrawSurface_GetAttachedSurface(p1, p2, p3)
{
	logerr("..............")
	if ( GetSurfaceCaps(p1) & DDSCAPS_PRIMARYSURFACE )
	{
		NEFS(p1, D, DD, sz, fmt, sys)		
		g_.proxies.flp := new Surface(DD, fmt, sz, sys)
		g_.proxies.flp.Attach((f:=new Surface(DD, fmt, sz, sys)).surface)	
		numput(g_.proxies.flp.surface, p3+0, "uint")
		dllcall(IDirectDrawSurface.addref, uint, g_.proxies.flp.surface) 		
		return 0
	}
	else if (numget(p2+0, "uint") & DDSCAPS_ZBUFFER)
	{
		if (g_.proxies.z)
		{
			GUID_FromString(iid, ddraw.IID_IDirectDrawSurface)
			q := dllcall(IDirectDrawSurface.QueryInterface, ptr, g_.proxies.z.id, ptr, &iid, ptr, p3)
			logerr("IDirectDrawSurface::GetAttachedSurface ZBuffer::QueryInterface " q " "ddraw.err[q . ""])
			return q
		}
	}
	return dllcall(IDirectDrawSurface.GetAttachedSurface, uint, p1, uint, p2, uint, p3)
}





printl()
ReleaseDirectDraw()

resume()
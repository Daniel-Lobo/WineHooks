global g_MainThreadID := 52 ;<Tag> 
global g_cmdstring := "-Target^D:\Games\Prince of Persia The Sands of Time\PrinceOfPersia.EXE^-D3D^9^-wiki^https://www.pcgamingwiki.com/wiki/Prince_of_Persia:_The_Sands_of_Time^-FMV_scale^1^-script^Scripts\SOT.ahk^-Path^Prince of Persia\Sands of Time^/HD^-SSAA^4^/PixelSwap^/TextureSwap^-SYNC^2^-J2K^u=true;a=Up,Down,Left,Right,Gamepad 1,Gamepad 2,Gamepad 3,Gamepad 4,Gamepad 5,Gamepad 6,Gamepad 7,Gamepad 8,Gamepad 9,Gamepad 10,Gamepad 11,Gamepad 12,Up,Down,Left,Right;dz=0.25;spd=0.1;b=,,,,,,,,,,,,,,,,,,,;x=w,s,a,d,,,,,,,,,,,,,w,s,a,d;y=,,,,,,,,,,,,,,,,,,,;mds=3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3;rs=0;FF=false;layer=false;^-PxSwap^s=u;sw=del;dev=1;n=<;p=>;d=ins;e=true;^-Textswap^s=4;sz=384;path=Textures\VOKSI;n=];p=[;d=home;sw=end;c=c;q=ins;a=false;l=false;e=true;Fltr=false;^-WNMM^MCI=false;^-k2k^r0e=false;r1e=false;s0e=false;s1e=false;s2e=false;s3e=false;s4e=false;s5e=false;t0e=false;t1e=false;^-DSnd^e=False;^-script_hwnd^0x20212^-error_log^Z:\home\gotardo\Code\WineHooks\Ahk\error.log^-Mydocs^C:\users\gotardo\Documents^-injector_dir^Z:\home\gotardo\Code\WineHooks\Ahk^-rlst^640x480 720x480 720x576 800x600 1024x768 1152x864 1280x720 1280x800 1280x1024 1440x900 1680x1050 1920x1080 ^-max_4x3_res^1152x864^-dsk^1920x1080^-D3D_Driver^^-os_version^10.000000^^-target_dir^D:\Games\Prince of Persia The Sands of Time^-target_name^PrinceOfPersia.EXE^-wine^10_0^-dxvkv^2_6^-common_path^1"
; <COMPILER: v1.1.15.03>
#NoEnv
#persistent
#notrayicon
#KeyHistory 0
#MaxThreads 1
critical, 0xFFFFFFFF
ListLines, Off
SetBatchLines, -1
InstallHook(hook_function_name, byref function2hook, dll = "", function2hook_name = ""
,callback_options = "F", event_info = "")
{
static hdtrs = "", sethooks = ""
if not hdtrs
{
hdtrs  := dllcall("GetModuleHandle", "str", A_Ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll", ptr)
sethooks := dllcall("GetProcAddress", "ptr", hdtrs, "astr", "sethook", ptr)
}
if not hdtrs  or not sethooks
return 1
if hook_function_name is Number
hook_function := hook_function_name
else hook_function := registercallback(hook_function_name, callback_options, "", event_info)
if not hook_function
return 2
if ! (dll = "")
{
hdll := dllcall("LoadLibrary", str, dll, ptr)
if not hdll
{
if (A_lasterror = 126)
return 3
else return 4
}
function2hook := dllcall("GetProcAddress", "ptr", hdll, "astr", function2hook_name, "ptr")
if not function2hook
return 5
}
return dllcall(sethooks, "Ptr*", function2hook, "Ptr", hook_function, int)
}
AltInstallHook(hook, byref original)
{
static hdtrs = "", sethooks = ""
if not hdtrs
{
hdtrs  := dllcall("GetModuleHandle", "str", A_Ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll", ptr)
sethooks := dllcall("GetProcAddress", "ptr", hdtrs, "astr", "sethook", ptr)
}
if not hdtrs or not sethooks
return 1
return dllcall(sethooks, "Ptr*", original, "Ptr", hook)
}
UnHook(Original, Trampoline)
{
static hdtrs = "", unhook = ""
if not hdtrs
{
hdtrs  := dllcall("GetModuleHandle", "str", "peixoto.dll")
unhook := dllcall("GetProcAddress", "int", hdtrs , "astr", "unhook")
}
if not hdtrs or not unhook
return 11
return dllcall(unhook, "Ptr*", Original, "Ptr", Trampoline)
}
InstallComHook(pInterface, byref pHooked, hook_name, offset, release = True)
{
static hdtrs = "", sethooks = ""
if not hdtrs
{
hdtrs  := dllcall("GetModuleHandle", "str", "peixoto.dll")
sethooks := dllcall("GetProcAddress", "int", hdtrs , "astr", "sethook")
}
if not hdtrs  or not sethooks
return 1
pInterface_Vtbl := numget(pInterface+0, "Ptr")
pHooked := numget(pInterface_Vtbl + offset, "Ptr")
pHook := registerCallback(hook_name)
if not pHook
return 2
if release
dllcall(numget(pInterface_Vtbl + 8), "Ptr", pInterface)
return dllcall(sethooks, "Ptr*", pHooked , "Ptr", pHook)
}
ReleaseHooks()
{
static hdll = "", release = ""
if not hdll
{
hdll  := dllcall("GetModuleHandle", "str", "peixoto.dll")
release := dllcall("GetProcAddress", "int", hdll, "astr", "ReleaseAllHooks")
}
if not hdll or not release
return [-2, 0]
varsetcapacity(err, 4, 0)
index := dllcall(release, "int*", &err)
return [index, numget(err, 0, "int")]
}
RedirectCall(_add, _func, options = "F")
{
callBack := RegisterCallback(_func, options)
VarSetCapacity(offset, 4)
numput(callBack - (_add + 5), &offset+0, "int")
old_protect := 0, dummy := 0
if not dllcall("VirtualProtect", uint, _add, uint, 4, uint, (PAGE_READWRITE := 0x04), "uint*", old_protect)
return
loop, 4
numput(numget(&offset + A_index - 1, "uchar"), _add + A_index, "uchar")
dllcall("VirtualProtect", uint, _add, uint, 4, uint, old_protect, "uint*", dummy)
return callBack
}
RedirectCallD(_add, _func, options = "F")
{
callBack := RegisterCallback(_func, options)
VarSetCapacity(offset, 4)
numput(callBack - (_add + 5), &offset+0, "int")
static hdtrs = "", sethooks = ""
if not hdtrs
{
hdtrs  := dllcall("GetModuleHandle", "str", "peixoto.dll")
sethooks := dllcall("GetProcAddress", "int", hdtrs , "astr", "sethook")
}
if not hdtrs  or not sethooks
return 1
return dllcall(sethooks, "Ptr*", _add, "Ptr", callBack)
}
GUID_FromString(ByRef GUID, String) {
VarSetCapacity(GUID, 16, 0)
StringReplace,String,String,-,,All
NumPut("0x" . SubStr(String, 2, 8), GUID, 0, "UInt")
NumPut("0x" . SubStr(String, 10, 4), GUID, 4, "UShort")
NumPut("0x" . SubStr(String, 14, 4), GUID, 6, "UShort")
Loop, 8
NumPut("0x" . SubStr(String, 16+(A_Index*2), 2), GUID, 7+A_Index, "UChar")
}
GUID_ToString(ByRef GUID) {
format := A_FormatInteger
SetFormat, Integer, H
str .= SubStr(NumGet(GUID, 0, "UInt"),3) . "-"
str .= SubStr(NumGet(GUID, 4, "UShort"),3) . "-"
str .= SubStr(NumGet(GUID, 6, "UShort"),3) . "-"
Loop, 8
str .= (A_Index = 2) ? SubStr(NumGet(GUID, 7+A_Index, "UChar"),3) . "-" : SubStr(NumGet(GUID, 7+A_Index, "UChar"),3)
SetFormat, Integer, %format%
return "{" . str . "}"
}
global DDS_PIXELFORMAT := "DWORD dwSize; DWORD dwFlags; DWORD dwFourCC; DWORD dwRGBBitCount; DWORD dwRBitMask; "
.  "DWORD dwGBitMask; DWORD dwBBitMask; DWORD dwABitMask;"
global DDS_HEADER := struct("DWORD dwSize; DWORD  dwFlags; DWORD dwHeight; DWORD dwWidth; DWORD dwPitchOrLinearSize; "
.  "DWORD dwDepth; DWORD dwMipMapCount; DWORD dwReserved1[11]; DDS_PIXELFORMAT ddspf; DWORD dwCaps; DWORD dwCaps2; "
.  "DWORD dwCaps3; DWORD dwCaps4; DWORD dwReserved2;")
DDS_PIXELFORMAT         := struct(DDS_PIXELFORMAT)
global DDPF_RGB         := 0x00000040
global DDPF_ALPHAPIXELS := 0x00000001
global DDPF_BUMPDUDV    := 0x00080000
global BITMAPINFOHEADER := "DWORD biSize, LONG biWidth, LONG biHeight, DWORD biPlanesAndbiBitCount, DWORD biCompression,"
. " DWORD biSizeImage, LONG biXPelsPerMeter, LONG biYPelsPerMeter, DWORD biClrUsed, DWORD biClrImportant"
BITMAPINFOHEADER := struct(BITMAPINFOHEADER)
global BITMAPFILEHEADER := struct("WORD bfType; DWORD bfSize; WORD bfReserved1; WORD bfReserved2; DWORD bfOffBits;")
SetFilePixelFormat(format = "RG6B")
{
if (format = "RG6B") 	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size()
DDS_PIXELFORMAT.dwRGBBitCount := 16
DDS_PIXELFORMAT.dwRBitMask := 0xF800
DDS_PIXELFORMAT.dwGBitMask := 0x07e0
DDS_PIXELFORMAT.dwBBitMask := 0x001F
DDS_PIXELFORMAT.dwABitMask := 0
}
else if (format = "RGB") 	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size()
DDS_PIXELFORMAT.dwRGBBitCount := 24
DDS_PIXELFORMAT.dwRBitMask := 0x00FF0000
DDS_PIXELFORMAT.dwGBitMask := 0x0000FF00
DDS_PIXELFORMAT.dwBBitMask := 0x000000FF
DDS_PIXELFORMAT.dwABitMask := 0
}
else if (format = "X1RGB") 	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size()
DDS_PIXELFORMAT.dwRGBBitCount := 16
DDS_PIXELFORMAT.dwRBitMask := 0x00007C00
DDS_PIXELFORMAT.dwGBitMask := 0x000003E0
DDS_PIXELFORMAT.dwBBitMask := 0x0000001F
DDS_PIXELFORMAT.dwABitMask := 0
}
else if (format = "A1RGB") 	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB | DDPF_ALPHAPIXELS
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size()
DDS_PIXELFORMAT.dwRGBBitCount := 16
DDS_PIXELFORMAT.dwRBitMask := 0x00007C00
DDS_PIXELFORMAT.dwGBitMask := 0x000003E0
DDS_PIXELFORMAT.dwBBitMask := 0x0000001F
DDS_PIXELFORMAT.dwABitMask := 0x00008000
}
else if (format = "A4RGB") 	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB | DDPF_ALPHAPIXELS
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size()
DDS_PIXELFORMAT.dwRGBBitCount := 16
DDS_PIXELFORMAT.dwRBitMask := 0xf00
DDS_PIXELFORMAT.dwGBitMask := 0xf0
DDS_PIXELFORMAT.dwBBitMask := 0xf
DDS_PIXELFORMAT.dwABitMask := 0xf000
}
else if (format = "A8RGB")	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB | DDPF_ALPHAPIXELS
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size("ddpfPixelFormat")
DDS_PIXELFORMAT.dwRGBBitCount := 32
DDS_PIXELFORMAT.dwRBitMask := 0x00FF0000
DDS_PIXELFORMAT.dwGBitMask := 0x0000FF00
DDS_PIXELFORMAT.dwBBitMask := 0x000000FF
DDS_PIXELFORMAT.dwABitMask := 0xFF000000
}
else if (format = "X8RGB")	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size("ddpfPixelFormat")
DDS_PIXELFORMAT.dwRGBBitCount := 32
DDS_PIXELFORMAT.dwRBitMask := 0x00FF0000
DDS_PIXELFORMAT.dwGBitMask := 0x0000FF00
DDS_PIXELFORMAT.dwBBitMask := 0x000000FF
DDS_PIXELFORMAT.dwABitMask := 0
}
else if (format = "A8BGR")	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB | DDPF_ALPHAPIXELS
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size("ddpfPixelFormat")
DDS_PIXELFORMAT.dwRGBBitCount := 32
DDS_PIXELFORMAT.dwRBitMask := 0x000000FF
DDS_PIXELFORMAT.dwGBitMask := 0x0000FF00
DDS_PIXELFORMAT.dwBBitMask := 0x00FF0000
DDS_PIXELFORMAT.dwABitMask := 0xFF000000
}
else if (format = "V8U8")	{
DDS_PIXELFORMAT.dwFlags := 0x80000
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size("ddpfPixelFormat")
DDS_PIXELFORMAT.dwFourCC := 16
DDS_PIXELFORMAT.dwRBitMask := 0xFF
DDS_PIXELFORMAT.dwGBitMask := 0xFF00
DDS_PIXELFORMAT.dwBBitMask := 0
DDS_PIXELFORMAT.dwABitMask := 0
}
else if instr(format, "D"){
DDS_PIXELFORMAT.dwFlags := 0x4
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size("ddpfPixelFormat")
DDS_PIXELFORMAT.dwFourCC := FourCC(format)
}
}
GetFilePixelFormat(byref fileHeader)
{
FMT := "_Unsupported format_"
dllcall(g_.p.GetDDSFilePxFmt, ptr, FileHeader[], astr, FMT)
return FMT
}
LoadDDS(file, byref pData)
{
hFile := dllcall("CreateFileW", str, file, uint, 0x80000000, uint, 0, uint, 0, uint, 3, uint, 0x80, uint, 0)
dllcall("GetFileSizeEx", uint, hFile, "int64*", size)
VarSetCapacity(pData, size)
dllcall("ReadFile", uint, hFile, uint, &pData, uint, size, "uint*", read_, uint, 0)
dllcall("RtlMoveMemory", ptr, DDS_HEADER[], ptr, &pData + 4, int, DDS_HEADER.size())
pixelformat := getFilePixelFormat(DDS_HEADER)
printl("Pixelformat: " pixelformat "  " DDS_HEADER.dwWidth "x" DDS_HEADER.dwHeight)
dllcall("CloseHandle", uint, hFile)
return pixelformat
}
OpenDDS(file, byref hFile)
{
size:=0, signature:=0,
hFile := dllcall("CreateFileW", str, file, uint, 0x80000000, uint, 0x00000001, uint, 0, uint, 3, uint, 0x80, uint, 0)
(hFile=-1)?	logerr("error " A_lasterror " opening file " file)
dllcall("GetFileSizeEx", uint, hFile, "int64*", size)
dllcall("ReadFile", uint, hFile, "uint*", signature, uint, 4, "uint*", (rd:=0), uint, 0)
dllcall("ReadFile", uint, hFile, uint, DDS_HEADER[], uint, DDS_HEADER.size(), "uint*", (rd:=0), uint, 0)
pixelformat := GetFilePixelFormat(DDS_HEADER)
printl("Pixelformat: " pixelformat "  " DDS_HEADER.dwWidth "x" DDS_HEADER.dwHeight)
return pixelformat
}
LoadDumpCollection(dir, byref lst)
{
FileGetAttrib, att, %dir%
if not instr(att, "D")
return
loop, %dir%\*.dds, 0, 0
{
LoadSingleDump(A_LoopFileFullPath, A_LoopFileName)
}
}
LoadSingleDump(path, name)
{
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
dllcall(dll "\AppendDump", astr, path)
}
LoadCompiledDumpCollection(file, byref lst)
{
SplitPath, file, , dir
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
dllcall(dll "\LoadDumps", astr, file, astr, dir)
}
IsDump(o, f)
{
return
return dllcall("peixoto.dll\IsDump", astr, f)
}
FourCC(code)
{
if code is not number
{
VarSetCapacity(format, 4)
strput(code, &format, 4, "CP0")
return numget(&format+0, "uint")
} else {
VarSetCapacity(format, 4)
numput(code, &format, "uint")
return strget(&format, 4, "CP0")
}
}
Class ComInterfaceWrapper
{
__New(byref definition, ppIface, D3D8 = False)
{
this.Adds    := {}
this.offsets := {}
n            := 0
def          := definition.def
loop, parse, def, `n
{
if instr(A_loopfield , "STDMETHOD")
{
method := trim(strsplit(A_loopfield, "(")[2])
method := strsplit(method, ")")[1]
if instr(method, ",")
{
stringsplit, method_, method,`,
method := trim(method_2)
}
this.offsets[method] := n * A_ptrsize
n += 1
}
}
pIface := D3D8 ? ppIface : numget(ppIface+0, "ptr")
if pIface
{
Vtbl := numget(pIface + 0, "Ptr")
for k, v in this.offsets
{
value        := numget(Vtbl + v, "Ptr")
this[k]      := value
this.Adds[k] := value
}
}
this.dwSize        := n*A_ptrsize
this.pVTbl         := Vtbl
this.p             := pIface
this.def           := def
this.name          := definition.name
this.released      := False
this.Hooks         := {}
this.Mthds         := {}
this.Hooked        := {}
}
Hook(Method, hook = "", options = "F", EventInfo="")
{
if this.Hooked[Method]
return this.name "::" Method " is already hooked"
if not this.pVTbl
return "Failed to hook " this.name "::" Method " - The interface pointer is not valid"
hook ?:	hook := isfunc("Alt_" Method) ? "Alt_" Method : isfunc("Alt" this.name "_" Method)
? "Alt" this.name "_" Method : this.name "_" Method
pHook := registerCallback(hook, options, ,EventInfo)
if not pHook
return "Failed to hook " this.name "::" Method " - could not create callback"
pInterface_Vtbl    := this.pVTbl
pHooked            := numget(pInterface_Vtbl + this.offsets[Method], "Ptr")
this.Mthds[Method] := pHooked
r                  := dllcall(ComInterfaceWrapper.sethooks, "Ptr*", pHooked, "Ptr", pHook)
this[Method]       := pHooked
if r
return "Failed to hook " this.name "::" Method " - detours error " r
else
{
this.Hooked[Method] := True
this.hooks[hook]    := pHook
}
return "Succeeded to hook " this.name "::" Method
}
dllHook(Method, hook, dll = "peixoto.dll")
{
if this.Hooked[Method]
return this.name "::" Method " is already hooked"
if not this.pVTbl
return "Failed to hook " this.name "::" Method " - The interface pointer is not valid"
pHook := dllcall("GetProcAddress", ptr, dllcall("GetModuleHandle", str, dll, ptr), astr, hook, ptr)
if not pHook
return "Failed to hook " this.name "::" Method " - could not create callback"
pInterface_Vtbl    := this.pVTbl
pHooked            := numget(pInterface_Vtbl + this.offsets[Method], "Ptr")
this.Mthds[Method] := pHooked
r                  := dllcall(ComInterfaceWrapper.sethooks, "Ptr*", pHooked, "Ptr", pHook)
this[Method]       := pHooked
if r
return "Failed to hook " this.name "::" Method " - detours error " r
else
{
this.Hooked[Method] := "dll"
this.hooks[hook]    := pHook
}
return "Succeeded to hook " this.name "::" Method
}
PatchVtable(method, EventInfo="", HookFunc="")
{
table       := this.pVTbl
target      := table+this.offsets[method]
if ! (hook := RegisterCallback(HookFunc ? HookFunc :Isfunc("Alt_" Method) ? "Alt_" Method : isfunc("Alt" this.name "_" Method)
? "Alt" this.name "_" Method : this.name "_" Method , "F",,EventInfo))
return "Failed to hook " this.name "::" Method " - could not create callback"
if ! isobject(p := new Prtct(target, A_ptrsize))
return "Failed to hook " this.name "::" Method " - VirtualProtect failed"
numput(hook, table+this.offsets[method], "ptr")
return "Succeeded to hook " this.name "::" Method
}
PatchVtableWithDll(method, hook, dll = "peixoto.dll")
{
table  := this.pVTbl
target := table+this.offsets[method]
p      := new Prtct(target, A_ptrsize)
if not (hook := dllcall("GetProcAddress", ptr, dllcall("GetModuleHandle", str, dll, ptr), astr, hook, ptr))
return "Failed to hook " this.name "::" Method " - could not create callback"
if ! isobject(p := new Prtct(target, A_ptrsize))
return "Failed to hook " this.name "::" Method " - VirtualProtect failed"
numput(hook, table+this.offsets[method], "ptr")
return "Succeeded to hook " this.name "::" Method
}
__delete()
{
if not this.released
dllcall(this.release, uint, this.p, uint)
}
__release()
{
this.released := True
r := dllcall(this.Release, uint, this.p, uint)
return r
}
UnHook(Method, hook = "")
{
logerr("unhook " ComInterfaceWrapper._unhook)
if not this.Hooked[Method]
return "Method " Method " is not hooked yet"
if not hook
hook := this.name "_" Method
r := dllcall(ComInterfaceWrapper._unhook, "Ptr*", this.Mthds[Method], "Ptr", this.hooks[hook])
if r
return "Failed to unhook " this.name "::" Method " - detours error " r
else
{
if not this.Hooked[Method] = "dll"
DllCall("GlobalFree", "Ptr", this.hooks[hook], "Ptr")
this.hooks.remove(hook)
this.Hooked.remove(Method)
}
return "Succeeded to unhook " this.name "::" Method
}
Compare(interfaces)
{
r=
for method, adress in this.adds
{
reimp=
for k, i in interfaces
{
if (i.adds[method] != adress)
reimp .= i.name "[" i.adds[method] "], "
}
if (reimp)
r .= Trim(this.name "::" method "[" adress "] reimplement in " reimp "`n", ",")
}
return Trim(r, "`n")
}
}
class Memory {
__new(sz) {
this.p := dllcall("VirtualAlloc", ptr, 0, ptr, sz, uint, 0x00001000, uint, 0x04)
}
__delete() {
dllcall("VirtualFree", ptr, this.p, ptr, 0x00008000, uint, 0x04)
}
}
Class Prtct{
__new(a, s)
{
if !dllcall("VirtualProtect", uint, a, uint, s, uint, 0x04, "uint*", o:=0)
return
this.a := a
this.s := s
this.o := o
}
__delete()
{
dllcall("VirtualProtect", uint, this.a, uint, this.s, uint, this.o, "uint*", o:=0)
}
}
Class Collection {
__new(ThreadSafe=False)
{
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
hdll := dllcall("GetModuleHandle", str, dll, ptr)
this.pc     := dllcall(dllcall("GetProcAddress", ptr, hdll, astr, "PointerCollectionCreate", ptr), ptr)
this.vtbl   := struct("LPVOID insert; LPVOID insert_disposable; LPVOID remove; LPVOID discard; LPVOID Value; LPVOID Key; LPVOID ValueAt; LPVOID KeyAt; LPVOID Count")
this.vtbl[] := numget(this.pc+0, "ptr")
this.size := 0
}
_add(key, data){
return (this.size := dllcall(this.vtbl.Insert_disposable, ptr, this.pc, ptr, key, ptr, data, uint))
}
_Insert(key, memsize)
{
pData := dllcall("VirtualAlloc", ptr, 0, ptr, memsize, uint, 0x00001000 | 0x00002000, uint, 0x04, ptr)
dllcall("RtlZeroMemory", ptr, pData, uint, memsize)
this.size := dllcall(this.vtbl.insert, ptr, this.pc, ptr, key, ptr, pData, uint)
return pData
}
PutStr(key, s){
Strput(s, this._insert(key, strlen(s)+1)+0, "CP0")
}
GetStr(key){
return Strget(this.value(key)+0, "CP0")
}
Value(key) {
return dllcall(this.vtbl.Value, ptr, this.pc, ptr, key, ptr)
}
Key(value) {
return dllcall(this.vtbl.Key, ptr, this.pc, ptr, value, ptr)
}
ValueAt(index) {
return dllcall(this.vtbl.ValueAt, ptr, this.pc, ptr, index, ptr)
}
KeyAt(index) {
return dllcall(this.vtbl.KeyAt, ptr, this.pc, ptr, index, ptr)
}
Remove(key) {
return (this.size := dllcall(this.vtbl.Remove, ptr, this.pc, ptr, key, uint))
}
Discard(key) {
return (this.size := dllcall(this.vtbl.Discard, ptr, this.pc, ptr, key, uint))
}
Count(){
return dllcall(this.vtbl.Count, ptr, this.pc)
}
}
keyevent(key, dummy="")
{
static state := {}
state[key] ?: state[key] := getkeystate(key, "p") ? 1 :-1
event := False
newstate := getkeystate(key, "p") ? 1 :-1
if ( (newstate = 1) and (state[key] = -1)  )
event := True
state[key] := newstate
return event
}
StringFromIID(pIID)
{
dllcall("Ole32.dll\StringFromIID", uint, pIID, "uint*", GUID)
rtn := StrGet(GUID)
dllcall("Ole32.dll\CoTaskMemFree", uint, GUID)
return rtn
}
zeromem(struct){
varsetcapacity(struct[], struct.size(), 0)
}
newmem(struct){
VarSetCapacity(st, struct.size(), 0)
struct[] := &st
}
class Loger
{
__new(logpath, maxlogs=1000)
{
this.f     := logpath
this.hnd   := DllCall("GetStdHandle", "int", -11, ptr)
this.count := 0
this.max   := maxlogs
FileDelete, % logpath
}
err(msg)
{
fileAppend, %msg%`n, % this.f
dllcall("WriteConsole", "ptr", this.hnd, "ptr", &msg, "int", strlen(msg), uint, 0, ptr, 0)
}
log(msg)
{
if (this.count > this.max)
return
this.count += 1
return this.err(msg)
}
}
logErr(msg){
static file="", call="", maxlogs = 10
call += 1
if not file
{
file    := strsplit(msg, "|")[1]
maxlogs := strsplit(msg, "|")[2]
filedelete, %file%
return
}
if (call < maxlogs + 2)
fileAppend, %msg%`n, %file%
printl(msg)
}
Ciclecolor(c)
{
static clrs := [0x00000000, 0x00FFFFFF, 0x00ff0000, 0x0000ff00, 0x000000ff, 0x00ffff00, 0x00ff00ff
,0x0000ffff, 0x00000000]
for k, v in clrs
{
if (c = v)
{
c := clrs[k+1]
break
}
}return c
}
print(msg = "")
{
static hnd=""
if ! hnd
{
VarSetCapacity(name, 260)
dllcall("GetModuleFileNameA", ptr, 0, "ptr", &name, int, 260)
name := strget(&name+0, "CP0")
splitpath, name, fname
if !isfunc("CreateProcessA_hook")
DllCall("AllocConsole")
else DllCall("AttachConsole", uint, (ATTACH_PARENT_PROCESS := -1))
hnd := DllCall("GetStdHandle", "int", -11, ptr)
}
return dllcall("WriteConsole", "ptr", hnd , "ptr", &msg, "int", strlen(msg), uint, 0, ptr, 0)
}
printl(msg = "") {
return msg ? print(msg . "`n") : (g_.cfg.console) ?: DllCall("FreeConsole")
}
Parsecfg(item = "")
{
if not item
{
cfg  := strsplit(g_cmdstring, "^")
globals := {}
globals.cfg := {}
for k, v in cfg
{
Key := SubStr(v, 1, 1)
_Key := SubStr(v, 2, strlen(v)-1)
if _Key is number
continue
if (Key = "-")
globals.cfg[SubStr(v, 2, strlen(v)-1)] := cfg[k + 1]
else if (Key = "/")
globals.cfg[SubStr(v, 2, strlen(v)-1)] := True
}
return globals
} else {
cfg := {}
for k, v in strsplit(item, ";")
{
split := strsplit(v, "=")
key := split[1]
val := split[2]
if not split[2]
{
continue
}
(val = "True") ? val := True
(val = "False") ? val := False
cfg[key] := val
}
return cfg
}
}
resume()
{
if (hThread := dllcall("OpenThread", uint, 0x0002, uint, 0, uint, g_MainThreadID, ptr))
{
dllcall("ResumeThread", "ptr", hThread, "uint")
dllcall("CloseHandle", ptr, hThread)
} else {
dllcall("ddraw.dll\ProxyResume")
}
dllcall("SendMessageW", uint, g_.cfg.script_hwnd, uint, dllcall("RegisterWindowMessageW", str, "Peixoto.Thread"), uint, 0, uint, 0)
}
GetDesktopResolution()
{
if g_.cfg.DSR
{
res := strsplit(g_.cfg.DSR, "x")
return  {"w" : res[1], "h" : res[2]}
}
r := {"w" : dllcall("GetSystemMetrics", uint, 0) , "h" : dllcall("GetSystemMetrics", uint, 1)}
res := r.w "x" r.h
if ( r.w/r.h < 1.33	)
{
res := strsplit(g_.cfg.max_4x3_res, "x")
r := {"w" : res[1], "h" : res[2]}
}
return r
}
Desk()
{
r := strsplit(g_.cfg.DSR ? g_.cfg.DSR : g_.cfg.dsk, "x")
return {"w" : r[1], "h" : r[2]}
}
CreateLinksCollection(links)
{
target_dir := g_.cfg.path
FileCreateDir, %target_dir%
for k, v in  links {
printl("Simbolic link : " v "-> " target_dir v " Succes= " dllcall("CreateSymbolicLinkW", str, A_workingdir "\" v
, str, target_dir v, uint, 0, uint) " code= " A_lasterror " "  )
}
}
FOV(oldfov, ratio)
{
ratio := strsplit(ratio, ":")
oldfov *= 0.01745329252 / 2
return 2 * (ATan(tan(oldfov) * ratio[1]/ratio[2]) * 57.29578)
}
Matrix2String(pMatrix)
{
D3DMATRIX[] := pMatrix
str := 	D3DMATRIX.m11 " " D3DMATRIX.m12 " " D3DMATRIX.m13 " " D3DMATRIX.m14 "`n"
str .= 	D3DMATRIX.m21 " " D3DMATRIX.m22 " " D3DMATRIX.m23 " " D3DMATRIX.m24 "`n"
str .= 	D3DMATRIX.m31 " " D3DMATRIX.m32 " " D3DMATRIX.m33 " " D3DMATRIX.m34 "`n"
str .= 	D3DMATRIX.m41 " " D3DMATRIX.m42 " " D3DMATRIX.m43 " " D3DMATRIX.m44 "`n"
return str
}
ProcessD3DShader(code, w=0, h=0, tw=1, th=1)
{
c := ""
w ? c .= "`n#define w " w "."
h ? c .= "`n#define h " h "."
c .= "`n#define tw 1./" tw "."
c .= "`n#define th 1./" th "."
return c . "`n" code
}
GetSystemDir(){
VarSetCapacity(SysDir, 261)
DllCall("GetSystemDirectoryW", Str, SysDir, UInt, 261)
return SysDir
}
class Comptr {
__new(ptr, obj=""){
this.p   := ptr
this.obj := obj
}
__delete(){
if (this.obj)
dllcall(this.obj.release, prt, this.p)
else dllcall(numget(numget(this.p+0, "ptr")+A_PtrSize*2, "ptr"), prt, this.p)
}
}
Release(o){
return dllcall(numget(numget(o+0, "ptr")+A_PtrSize*2, "ptr"), uint, o)
}
AddRef(o){
return dllcall(numget(numget(o+0, "ptr")+A_PtrSize*1, "ptr"), uint, o)
}
global GUID := "DWORD Data1; WORD  Data2;  WORD  Data3;  BYTE  Data4[8]"
global g_fhks := {}
global CSIDL_FLAG_CREATE    := 0x8000
global CSIDL_COMMON_APPDATA := 35
global CSIDL_LOCAL_APPDATA  := 28
global CSIDL_APPDATA        := 26
global CSIDL_PERSONAL       := 5
global CSIDL_WINDOWS     := 36
global CSIDL_SYSTEM	     := 37
global CSIDL_SYSTEMX86	 := 41
InitFileHooks(byref cfg)
{
flags       := 0
g_fhks.docs := g_.cfg.path
path        := g_fhks.docs
FileCreateDir, %path%\Saves
FileCreateDir, %path%\mods
FileCreateDir, %path%\cfg
g_fhks.files     := new Collection()
f := HasFiles(path "cfg")
if isfunc("AltCreateFileA")
{
if (g_.cfg.mods)
logerr("CreateFileA_Hook : " InstallHook("AltCreateFileA", pCreateFileA, "peixoto.dll", "CreateFileA_Hook") " <- 0 means no error")
else logerr("CreateFileA_Hook : " InstallHook("AltCreateFileA", pCreateFileA, "Kernel32.dll", "CreateFileA") " <- 0 means no error")
g_fhks.pCreateFileA := pCreateFileA
}
if isfunc("AltCreateFileW")
{
if (g_.cfg.mods or f)
logerr("CreateFileW_Hook : " InstallHook("AltCreateFileW", pCreateFileW, "peixoto.dll", "CreateFileW_Hook") " <- 0 means no error")
else logerr("CreateFileW_Hook : " InstallHook("AltCreateFileW", pCreateFileW, "Kernel32.dll", "CreateFileW") " <- 0 means no error")
g_fhks.pCreateFileW := pCreateFileW
}
f := HasFiles(path "cfg")
if (g_.cfg.mods or f)
{
flags        |= 0x10
g_fhks.paths := []
for k, v in strsplit(g_.cfg.mods, ";")
g_fhks.paths.insert(g_.cfg.path "mods\" v)
if (f)
g_fhks.paths.insert(g_.cfg.path "cfg")
Buildfileslist()
}
path := StrReplace(path "\Saves\", "\\", "\")
pex  := A_PtrSize=8 ? "peixoto64.dll\" : "peixoto.dll\"
dllcall(pex "InitFileHooks", str, path, astr, path, ptr, g_fhks.files.pc, ptr, 0, uint, flags)
return
for k, v in g_fhks.filesList
{
logerr(k " " v)
dllcall(pex "FileHooksInsertFile", wstr, k, wstr, v)
logerr(errorlevel)
}
}
HasFiles(dir)
{
logerr(dir "Files: " )
loop, %dir%\*.*, 0, 0
{
logerr(A_loopfilefullpath)
FileGetAttrib, att, %A_loopfilefullpath%
if not instr(att, "D"){
logerr("HasFiles 1")
return 1
}
}
logerr("HasFiles 0")
}
InitSteamFileHooks()
{
name    := "INIT_STEAM_FILE_HOOKS: "
hSteam  := dllcall("GetModuleHandleA", astr, A_PtrSize=4 ? "steamclient.dll" : "steamclient64.dll", ptr)
if (!hSteam)
return logerr(name "no handle " errorlevel)
pFunc   := dllcall("GetProcAddress", ptr, hSteam, astr, "CreateInterface", ptr)
if (!pFunc)
return logerr(name "no adress " errorlevel)
pIntrfc := DllCall(pFunc, astr, "SteamUser018", "int*", r:=0, ptr)
if (!pIntrfc)
return logerr(name "no pointer " errorlevel)
pTable  := numget(pIntrfc+0, "ptr")
pGtFldr := numget(pTable+A_ptrsize*6, "ptr")
VarSetCapacity(path, 260)
logerr(name dllcall(pGtFldr, ptr, pIntrfc, ptr, &path, int, 260) " " errorlevel)
logerr(name strget(&path+0, "CP0"))
h := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "ISteamUser_GetUserDataFolder_Hook", ptr)
logerr(name AltInstallHook(h, pGtFldr))
logerr(name "OK")
}
IsSteamCloudnabled(steam)
{
logerr("IsSteamCloudnabled ==========================================")
return 0
}
OpenFile(p1, p2, p3)
{
file := strget(p1, "CP0")
printl("open " file)
stringreplace, file, file, /, \, 1
Splitpath, file, filename, filedir, ext
g_fhks.filesList[filename] ? file := g_fhks.filesList[filename]
r := dllcall(g_fhks.pOpenFile , astr, file, uint, p2, uint, p3)
return r
}
BuildDirFlslst(dir, byref collec)
{
logerr("isobject " isobject(collec))
loop, %dir%\*.*, 1, 0
{
if (instr(FileExist(A_LoopFileFullPath), "D"))
{
name  := A_loopfilename
g_fhks.fldrs.lst[A_loopfilename] := new Collection()
pK := dllcall("VirtualAlloc", ptr, 0, ptr, (strlen(name)+1)*2, uint, 0x00003000, uint, 0x04, ptr)
strput(name, pK, "UTF-16")
g_fhks.fldrs._add(pK, g_fhks.fldrs.lst[A_loopfilename].pc)
BuildDirFlslst(A_LoopFileFullPath, g_fhks.fldrs.lst[A_loopfilename])
} else
{
name  := A_loopfilename
logerr("Found file" A_LoopFileFullPath)
pK := dllcall("VirtualAlloc", ptr, 0, ptr, (strlen(name)+1)*2, uint, 0x00003000, uint, 0x04, ptr)
strput(name, pK, "UTF-16")
strput(A_loopfilefullpath, collec._Insert(pK, (strlen(A_loopfilefullpath)+1)*2, "UTF-16"))
}
}
logerr("Collection size " collec.Count())
}
Buildfileslist()
{
folders          := g_fhks.paths
g_fhks.filesList := {}
for k, v in folders
{
loop, %v%\*.*, 0, 1
{
StringLower, name, A_loopfilename
if (name = "error.log")
continue
pK := dllcall("VirtualAlloc", ptr, 0, ptr, (strlen(name)+1)*2, uint, 0x00003000, uint, 0x04, ptr)
strput(name, pK, "UTF-16")
strput(A_loopfilefullpath, g_fhks.files._Insert(pK, (strlen(A_loopfilefullpath)+1)*2, "UTF-16"))
g_fhks.filesList[name] := A_loopfilefullpath
}
}
err := g_.cfg.error_log
splitpath, err, errofile
g_fhks.filesList.remove(errofile)
}
global g_                    := ParseCfg()
g_cmdstring                  := ""
g_.h_PeixotoDll              := dllcall("GetModuleHandleW", str, (A_ptrsize = 4) ? "peixoto.dll" : "peixoto64.dll", ptr)
g_.p                         := {}
g_.p.Scale                   := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "Scale", uint)
g_.p.Critical                := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "Critical")
g_.p.GetDDSFilePxFmt         := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "GetDDSFileFormat", ptr)
g_.p.LoadSurfData            := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "LoadData2Surface", uint)
g_.p.GetTicks                := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "TimeGetTimeF", uint)
ComInterfaceWrapper.sethooks := dllcall("GetProcAddress", "ptr", g_.h_PeixotoDll, "astr", "sethook", ptr)
ComInterfaceWrapper._unhook  := dllcall("GetProcAddress", "ptr", g_.h_PeixotoDll, "astr", "unhook", ptr)
g_.s := {}
InitGlobals()
InitGlobals()
{
if ! g_.cfg.path
{
path := g_.cfg.target
splitpath, path, , , ,name
g_.cfg.path := g_.cfg.MyDocs "\WineHooks\Games\" name "\"
} else 	g_.cfg.path :=  g_.cfg.MyDocs "\WineHooks\Games\" g_.cfg.path "\"
if !fileexist((mds := g_.cfg.path "mods"))
FileCreateDir, % mds
cfg := "Peixotos's patch remote settings:`nCommand Line: " dllcall("GetCommandLineA", astr) "`n"
for kk, vv in g_.cfg
cfg .= kk ": " vv "`n"
if g_.cfg.console
logErr(g_.cfg.error_log "|100")
else
logErr(g_.cfg.error_log "|100")
logerr(cfg)
logerr("Working directory: " A_workingdir)
InitFileHooks(g_.cfg)
if (g_.cfg.HRT)
{
logerr("TimeGetTime Hook " AltInstallHook(dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "TimeGetTimeHook")
, dllcall("GetProcAddress", ptr, dllcall("LoadLibrary", str, "Winmm.dll"), astr, "timeGetTime")))
logerr("GetTckCount Hook " AltInstallHook(dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "TimeGetTimeHook")
, dllcall("GetProcAddress", ptr, dllcall("LoadLibrary", str, "Kernel32.dll"), astr, "GetTickCount")))
g_.cfg.HRT := ""
}
if (g_.cfg.QPCFix)
dllcall("peixoto.dll\HookQueryPerformanceCounter")
g_.cfg.QPCFix := ""
if (g_.cfg.iso)
new VirtualDisk().Mount("E:\Users\dllob\Downloads\Game ISOS\" trim(g_.cfg.iso), "D")
}
sleephook(p1){
return
}
GlobalMemHook(p1)
{
dllcall(g_.p.GlobalMem, uint, p1)
m   := struct("DWORD Length; DWORD Load; SIZE_T TotalPhys; SIZE_T AvailPhys; SIZE_T TotalPage; SIZE_T AvailPage; SIZE_T TotalVirt; SIZE_T AvailVirt;")
m[] := p1
mg  := 1024*1024
logerr("&&&&&&&&&&&&&&&&&&&& " m.AvailPage)
if (m.AvailPage >= 0x7fffffff)
m.AvailPage := 256*mg
}
SdbGetMatchingExe()
{
return
}
DWMShimCallOut()
{
logerr("DWMShimCallOut " dllcall(g_.DWMShimCallOut))
return 0
}
wait()
{
static l = 0
n := dllcall(g_.p.GetTicks, double)
while ( n - l < g_.cfg.LMT )
n := dllcall(g_.p.GetTicks, double)
l := n
}
Class VirtualDisk
{
Mount(path, drv)
{
dllcall("Kernel32.dll\DeleteVolumeMountPointW", str, drv ":\")
vol := this.EnumVolumes()
dllcall("peixoto.dll\MountISO", str, path)
for k, v in this.EnumVolumes()
{
if ! vol[k]
{
FileAppend, % "Mounted " k "`n", *
if (dllcall("Kernel32.dll\SetVolumeMountPointW", str, drv ":\", str, k) = 0)
return A_Lasterror
}
}
}
EnumVolumes()
{
VarSetCapacity(VolName, 1024)
Volumes  := []
hFVol    := dllcall("Kernel32.dll\FindFirstVolumeW", str, VolName, uint, 1024)
if (hFVol = -1)
{
FileAppend, % "FindFirstVolumeW Failed`n", *
}
Volumes[VolName] := True
success := 1
while (success)
{
success          := dllcall("Kernel32.dll\FindNextVolumeW", ptr, hFVol, str, VolName, uint, 1024)
Volumes[VolName] := True
}
for k, v in Volumes
{
dllcall("GetVolumePathNameW", str, v, str, VolName, uint, 1024)
FileAppend, % v " " k " " VolName "`n", *
}
return Volumes
}
}

; <COMPILER: v1.1.15.03>
memlib_sound(sound) {
return (sound=1) ? A_windir "\media\Windows Foreground.wav"  : (sound=0) ? A_windir "\media\Windows Ding.wav"
:  A_windir "\media\Windows Critical Stop.wav"
}
get_process_list()
{
process_list := {}
snapshot_handle := dllcall("CreateToolhelp32Snapshot", "int", 0x00000002, int, 0)
varsetcapacity(lppe, 556 , 0),	numput(556, lppe, 0,Int)
success :=  dllcall("Process32First", "Ptr", snapshot_handle, "Ptr", &lppe)
process_list.insert({"name" : StrGet(&lppe + 36, 520, 0), "ID" : NumGet(lppe, 8, "Int")})
offset := (A_ptrsize=4) ? 36 : 44
while (success = 1)
{
varsetcapacity(lppe, 556 , 0),	numput(556, lppe, 0,Int)
success := dllcall("Process32Next", "Ptr", snapshot_handle, "Ptr", &lppe)
process_list.insert({"name" : StrGet(&lppe + offset, 520, 0), "ID" : NumGet(lppe, 8, "Int")})
}
return 	process_list
}
open_process(ProcessID, access = "", InheritHandle = 0)
{
if access =
access := 0x0008 | 0x0010 | 0x0020 |  0x0400
return DllCall("OpenProcess", "Int", access, "Char", InheritHandle, "UInt", ProcessID, "Uint")
}
get_process_handle(process_, access = "")
{
for k, v in get_process_list()
{
if v.name = process_
return open_process(v.ID, access)
}
}
close_process_handle(hProcess){
return dllcall("CloseHandle", "int", hProcess)
}
write_process_memory(hProcess, adress, type_, value)
{
size := {"char": 1, "uchar": 1, "short": 2, "int": 4, "array": value._MaxIndex()
, "float" : 4, "str" : (StrLen(value)+1) * 2}
if (type_ = "array")
{
varsetcapacity(buffer, size[type_], 0)
loop, % value._MaxIndex()
Numput(value[A_index], buffer, A_index - 1, "UChar")
}
else if  (type_ = "str")
{
varsetcapacity(buffer, size[type_], 0)
StrPut(value, &buffer, size[type_], "UTF-16")
}
else
{
varsetcapacity(buffer, size[type_], 0)
Numput(value, buffer, 0, type_)
}
r := dllcall("WriteProcessMemory"
,"Ptr", hProcess
,"Ptr", adress
,"Ptr", &buffer
,"Ptr", size[type_]
,"Ptr", 0
,"uint")
return r
}
read_process_memory(hProcess, adress, type_, arraysize = "")
{
size := {"char": 1, "UChar": 1, "short": 2, "int": 4, "Uint": 4, "Ptr": 4, "array": arraysize
, "float" : 4}
if (type_ = "array")
varsetcapacity(buffer, arraysize, 0)
else
varsetcapacity(buffer, size[type_], 0)
r := dllcall("ReadProcessMemory"
,"Int", hProcess
,"Ptr", adress
,"Ptr", &buffer
,"UInt", size[type_]
,"Int", 0
,"Uint")
if ! r
return
if (type_ = "array")
{
return_value := []
loop, % arraysize
return_value.insert(Numget(buffer,  A_index - 1, "UChar"))
}
else return_value := Numget(buffer,  0, type_)
return return_value
}
read_pointer_sequence(hprocess, baseadress, offsets)
{
pointer := read_process_memory(hprocess, baseadress, "Ptr")
for k, offset in offsets
{
adress := pointer + offset
pointer := read_process_memory(hprocess, adress, "Ptr")
}
return [adress, pointer]
}
class CodeInjection
{
__New(hprocess, addy, newcode)
{
format := A_FormatInteger
setformat, integer, H
this.process_ := hprocess
this.addy := addy
this.newcode := newcode
this.original_code := read_process_memory(hprocess, this.addy, "array", this.newcode._maxIndex())
setformat, integer, %format%
}
_enable()
{
return write_process_memory(this.process_, this.addy, "array", this.newcode)
}
_disable()
{
return write_process_memory(this.process_, this.addy, "array", this.original_code)
}
switch()
{
current_code := read_process_memory(this.process_, this.addy, "array", this.newcode._maxIndex())
for k, v in current_code
fileappend, % v ":" this.original_code[k] ":" this.newcode[k]"`n", *
if arrays_are_equal(current_code, this.original_code)
{
if this._enable()
return memlib_sound(1)
else return memlib_sound(-1)
}
else if arrays_are_equal(current_code, this.newcode)
{
if this._disable()
return memlib_sound(0)
else return memlib_sound(-1)
}
}
__Delete()	{
this._disable()
}
}
VirtualAllocEx(hProcess, mem_size)
{
adress := dllcall("VirtualAllocEx"
,"ptr", hProcess
,"ptr", 0
,"ptr", mem_size
,"uint", 0x00001000 | 0x00002000
,"uint", 0x04
,"ptr")
return adress
}
dllcallEx(h_process, Lib, function, argument)
{
if (Lib = "Kernel32.dll")
procedure := dllcall("Kernel32.dll\GetProcAddress", ptr, dllcall("LoadLibraryW", str, Lib, ptr), astr, function, ptr)
else
procedure := GetProcAddressEx(h_process, Lib, function)
if not procedure
return 1
adress := VirtualAllocEx(h_process, StrLen(argument) * 2)
if not adress
return 2
if not write_process_memory(h_process, adress, "str", argument) {
dllcall("VirtualFreeEx", ptr, h_process, ptr, adress, ptr, 0, uint, 0x8000)
return 3
}
VarSetCapacity(out, StrLen(argument) * 2)
r := dllcall("ReadProcessMemory"
,"Int", h_process
,"Ptr", adress
,"ptr", &out
,"UInt", StrLen(argument) * 2
,"Int", 0
,"Uint")
if ! (hThread := dllcall("CreateRemoteThread"
,ptr, h_process
,ptr, 0
,ptr, 0
,ptr, procedure
,ptr, adress
,uint, 0
,ptr, 0
,ptr) )
{
dllcall("VirtualFreeEx", ptr, h_process, ptr, adress, ptr, StrLen(argument) * 2, uint, 0x4000 | 0x8000)
return 4
} else {
dllcall("WaitForSingleObject", "ptr", hThread, "uint", 0xffffffff)
dllcall("VirtualFreeEx", ptr, h_process, ptr, adress, ptr, 0, uint, 0x8000)
dllcall("CloseHandle", ptr, hThread)
return 0
}
}
GetProcAddressEx(h_process, module, function)
{
this_fucntion_add := dllcall("Kernel32.dll\GetProcAddress", ptr, dllcall("LoadLibraryW", str, module, ptr), astr, function, ptr)
this_module_info  := find_module(module, DllCall("GetCurrentProcessId"))
offset            := this_fucntion_add - this_module_info.BaseAddr
module_info := find_module(module, dllcall("GetProcessId", uint, h_process, uint))
address     := module_info.BaseAddr + offset
return address
}
ReverseInt32bytes(int32)
{
format := A_FormatInteger
setformat, integer, H
stringreplace, int32, int32, 0x, ,
while (strlen(int32) < 8)
int32 := "0" int32
add_ := []
loop, 4
add_.insert("0x" substr(int32, 7 - (A_index - 1)*2, 2))
setformat, integer, %format%
return add_
}
Class CodeCave
{
__New(hprocess, from, code, nops = 0)
{
format := A_FormatInteger
setformat, integer, H
to := VirtualAllocEx(hprocess, code._MaxIndex() + 6 + nops)
if not to
return
this.orginal_code := read_process_memory(hProcess, from, "array", 6 + nops)
this.code := code
this.from := from
this.to := to
this.hprocess := hprocess
adress2go := ReverseInt32bytes(to)
adress2return := ReverseInt32bytes(from + 6 + nops)
this.jump_instruction := [0x68]
loop, 4
this.jump_instruction.insert(adress2go[A_index])
this.jump_instruction.insert(0xc3)
loop, % nops
this.jump_instruction.insert(0x90)
this.jumpback_instruction := [0x68]
loop, 4
this.jumpback_instruction.insert(adress2return[A_index])
this.jumpback_instruction.insert(0xc3)
setformat, integer, %format%
}
_enable()
{
if not write_process_memory(this.hprocess, this.from, "array", this.jump_instruction)
return
for k, v in this.jumpback_instruction
this.code.insert(v)
return write_process_memory(this.hprocess, this.to, "array", this.code)
}
_disable()	{
return write_process_memory(this.hprocess, this.from, "array", this.orginal_code)
}
switch()
{
if arrays_are_equal(read_process_memory(this.hprocess, this.from, "array"
,this.orginal_code._MaxIndex()), this.orginal_code)
{
if this._enable()
return memlib_sound(1)
else return memlib_sound(-1)
}
else if arrays_are_equal(read_process_memory(this.hprocess, this.from, "array"
,this.jump_instruction._MaxIndex()), this.jump_instruction)
{
if this._disable()
return memlib_sound(0)
else return memlib_sound(-1)
}
}
__Delete()	{
this._disable()
return dllcall("VirtualFreeEx", uint, this.hprocess, uint, this.to, uint, 0, uint, (MEM_RELEASE := 0x8000) )
}
}
GetSystemInfo()
{
varsetcapacity(lpSystemInfo, (A_ptrsize=4) ? 36 : 48)
dllcall("GetSystemInfo", "Int", &lpSystemInfo)
MinimumApplicationAddres := numget(lpSystemInfo, 8, "ptr")
MaximumApplicationAddress := numget(lpSystemInfo, 8+A_ptrsize, "ptr")
fileappend, % MinimumApplicationAddres	" " MaximumApplicationAddress "`n", *
return [MinimumApplicationAddres, MaximumApplicationAddress]
}
VirtualQueryEx(hprocess, base_adress)
{
varsetcapacity(MEMORY_BASIC_INFORMATION, (A_ptrsize=4)?28:48)
success := dllcall("VirtualQueryEx"
,"Int", hProcess
,"Int", base_adress
,"Ptr", &MEMORY_BASIC_INFORMATION
,"Int", (A_ptrsize=4)?28:48)
if not success
return False
return [numget(MEMORY_BASIC_INFORMATION, 0, "ptr"), numget(MEMORY_BASIC_INFORMATION, A_ptrsize*2, "int32")
,numget(MEMORY_BASIC_INFORMATION, A_ptrsize*3, "ptr"), numget(MEMORY_BASIC_INFORMATION, (A_ptrsize=4)?20:36, "int32")]
}
find_memory_pages(hprocess)
{
r := GetSystemInfo()
Min := r[1]
Max := r[2]
pages := []
result := True
while result
{
result :=  VirtualQueryEx(hprocess, Min)
if (result[4] && 0x10) and (result[2] && 0x10)
pages.insert({"base_" : result[1], "Alocation" : result[4], "Size" : result[3]})
Min := result[1] + result[3]
}
for k, v in pages
{
Execute := v.Alocation && 0x10
}
return pages
}
arrays_are_equal(a1, a2)
{
format := A_FormatInteger
setformat, integer, H
if not (isobject(a1) or not isobject(a2)) {
setformat, integer, %format%
return 0
}
for k, v in a1
{
if a2[k] is not number {
setformat, integer, %format%
return 0
}
if (v != a2[k]) {
setformat, integer, %format%
return 0
}
}
for k, v in a1
fileappend, % "arrays " v " " a2[k] "`n", *
setformat, integer, %format%
return 1
}
get_process_ID(_process)
{
for k, v in get_process_list() {
if (v.name = _process)
return v.ID
}
}
get_modules_list64(proccessID)
{
hProcess := open_process(proccessID)
dllcall("Psapi.dll\EnumProcessModules", ptr, hProcess, ptr, 0, uint, 0, "uint*", required)
VarSetCapacity(Modules, required)
dllcall("Psapi.dll\EnumProcessModules", ptr, hProcess, ptr, &Modules, uint, required, "uint*", required)
VarSetCapacity(name, 256 * 2)
VarSetCapacity(info, 24)
mods := []
loop, % required/A_ptrsize
{
hModule := numget(&Modules + (A_index - 1) * A_ptrsize, "ptr")
n := dllcall("Psapi.dll\GetModuleBaseNameW", ptr, hProcess, ptr, hModule, ptr, &name, uint, 256 * 2)
i := dllcall("Psapi.dll\GetModuleInformation", ptr, hProcess, ptr, hModule, ptr, &info, uint, 24)
mName := strget(&name+0, "UTF-16")
baseAdd := numget(&info+0, "ptr")
size := numget(&info+A_ptrsize, "uint")
mods.insert({"BaseAddr" : baseAdd, "BaseSize" : size, "Name" : mName})
}
close_process_handle(hProcess)
return mods
}
get_modules_list(proccessID)
{
if (A_ptrsize = 8)
return get_modules_list64(proccessID)
snapshot_handle := 24
while snapshot_handle = 24
snapshot_handle := dllcall("CreateToolhelp32Snapshot"
,"int", (TH32CS_SNAPMODULE := 0x00000008)
,"int", proccessID)
modules := []
varsetcapacity(module_info, 1061 , 0),	numput(1061, module_info, 0, "Int")
success := dllcall("Module32First", "Ptr", snapshot_handle, "Ptr", &module_info)
modules.insert({"BaseAddr"   : numget(module_info, 20, "UInt")
,"BaseSize"   : numget(module_info, 24, "UInt")
,"Name"       : strget(&module_info+32, 512, "UTF-8")})
while success
{
varsetcapacity(module_info, 2061 , 0),	numput(1061, module_info, 0, "Int")
success := dllcall("Module32Next", "Ptr", snapshot_handle, "Ptr", &module_info)
modules.insert({"BaseAddr"   : numget(module_info, 20, "UInt")
,"BaseSize"   : numget(module_info, 24, "UInt")
,"Name"       : strget(&module_info+32, 512, "UTF-8")})
}
return modules
}
find_pages_in_range(hprocess, start, end_)
{
pages := []
for k, v in find_memory_pages(hprocess)
{
if  ((v.base_ >= start) and (v.base_ + v.size <= end_))
{
pages.insert(v)
}
}
return pages
}
read_process_struct(hProcess, byref struct, size, adress)
{
varsetcapacity(bytes_read, A_ptrsize, 0)
r := dllcall("ReadProcessMemory"
,"Ptr", hProcess
,"Ptr", adress
,"Ptr", &struct
,"Ptr", size
,"Ptr", &bytes_read
,"Ptr")
return numget(bytes_read, 0, "int")
}
find_module(name, id_process)
{
for k, v in get_modules_list(id_process)
{
if (name = v.name)
return v
}
}
aobscan(hprocess, id_process, module_name, bytes, dllname = "peixoto.dll", range_ = 1)
{
static sigscan:=0
if not sigscan
{
if not DllCall("LoadLibrary", "Str", dllname, "Ptr")
return "L " . dllname
dllModule := DllCall("GetModuleHandle", "wstr", dllname, "ptr")
if not dllModule
return "G " . dllname
sigscan := dllCall("GetProcAddress", "int", dllModule, "astr", "sigscan", "ptr")
if not sigscan
return "S " . A_lasterror
}
module := find_module(module_name, id_process)
if not module
return "M " module_name
if (range_ = 1)
pages := find_pages_in_range(hprocess, module.BaseAddr, module.BaseAddr + module.BaseSize)
else if (range_ = 0)
pages := find_memory_pages(hprocess)
else if (range_ > 1)
pages := find_pages_in_range(hprocess, range_, 0xffffffff)
if not isobject(pages)
return "P " range_
varsetcapacity(buffer, bytes._maxindex(), 0)
loop, % bytes._MaxIndex()
Numput(bytes[A_index], buffer, A_index - 1, "UChar")
for k, v in pages
{
varsetcapacity(pagemem, v.size)
r := read_process_struct(hProcess, pagemem, v.size, v.base_)
s := dllcall(sigscan
,"ptr", &pagemem, "int", v.size
,"ptr", &buffer, "int", bytes._maxindex())
varsetcapacity(pagemem, 0)
if (s > 0)
return v.base_ + s
}
return
}
CreateIdleProcess(Target, workingdir = "", args = "", nowindow = "", rn="")
{
varsetcapacity(SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(THREAD_SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(PROCESS_INFORMATION, 8 + A_ptrsize * 2)
varsetcapacity(STARTUPINFO, 9*4 + 2*2 + 7*A_ptrsize)
numput(9*4 + 2*2 + 7*A_ptrsize, STARTUPINFO, 0 , "uint")
if not workingdir
{
SplitPath, Target, OutFileName, OutDir
if not OutDir
workingdir := A_WorkingDir
else workingdir := OutDir
}
flags := rn ? 0 : (CREATE_SUSPENDED := 0x00000004)
if nowindow
flags |= (CREATE_NO_WINDOW := 0x08000000)
r := dllcall("CreateProcess"
,"ptr", 0
,"str", """" Target """ " args
,"Ptr", &SECURITY_ATTRIBUTES
,"Ptr", &THREAD_SECURITY_ATTRIBUTES
,"uint", 1
,"int", flags
,"Ptr", 0
,"Str", workingdir
,"Ptr", &STARTUPINFO
,"Ptr", &PROCESS_INFORMATION)
if (r = 0)
{
return A_lasterror
}
else
{
pInfo            := {}
pInfo.hProcess   := numget(PROCESS_INFORMATION, 0, "ptr")
pInfo.hThread    := numget(PROCESS_INFORMATION, A_ptrsize, "ptr")
pInfo.Process_id := numget(PROCESS_INFORMATION, A_ptrsize*2, "UInt")
pInfo.Thread_id  := numget(PROCESS_INFORMATION, A_ptrsize*2 + 4, "UInt")
return pInfo
}
}
ResumeProcess(hThread){
return dllcall("ResumeThread", "ptr", hThread, "uint")
}
BlockNewProcess(parent_id, child_list)
{
if not isobject(child_list)
child_list := [child_list]
for k, v in child_list
{
h_app := ""
while not h_app
{
process, exist, %parent_id%
if not errorlevel
return
h_app := get_process_handle(v, (PROCESS_CREATE_THREAD := 0x0002)
| (PROCESS_QUERY_INFORMATION := 0x0400)
| (PROCESS_VM_OPERATION := 0x0008)
| (PROCESS_VM_READ := 0x0010)
| (PROCESS_VM_WRITE := 0x0020))
sleep, 100
}
dllcallEx(h_app, "Kernel32.dll", "ExitProcess", "0")
}
}
memlib_Number2String(num, typ, reverse = False)
{
format := A_FormatInteger
VarSetCapacity(var, 4)
numput(num, var, typ)
setformat, integer, h
string :=
if not reverse
{
loop, 4
string .= numget(var, A_index-1, "uchar") " "
}
else
{
loop, 4
string .= numget(var, 4-A_index, "uchar") " "
}
setformat, integer, %format%
return string
}
memlib_String2ByteArray(string)
{
ret := []
loop, parse, string, %A_space%
{
if instr(A_loopfield, "0x")
field := A_loopfield
else field := "0x" A_loopfield
ret.insert(field + 0)
}
return ret
}
if (A_ptrsize = 4)
{
g_.pCreateProcessA := dllcall("GetProcAddress", ptr, dllcall("GetModuleHandle", str, "Kernel32.dll", ptr), astr, "CreateProcessA")
g_.pCreateProcessW := dllcall("GetProcAddress", ptr, dllcall("GetModuleHandle", str, "Kernel32.dll", ptr), astr, "CreateProcessW")
logerr("CreateProcessA Hook: " AltInstallHook(dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "CreateProcessAHook"), pCA := g_.pCreateProcessA))
logerr("CreateProcessW Hook: " AltInstallHook(dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "CreateProcessWHook"), pCW := g_.pCreateProcessW))
g_.pCreateProcessA := pCA
g_.pCreateProcessW := pCW
dllcall("Peixoto.dll\InitCreateProcessHook", uint, RegisterCallback("CreateProcessA_hook", "F", ,0), uint, RegisterCallback("CreateProcessA_hook", "F", ,1))
logerr("ShellExecuteA Hook  :" InstallHook("ShellExecuteA", pSEA, "Shell32.dll", "ShellExecuteA"))
g_.p.ShellExecA := pSEA
logerr("ShellExecuteExW Hook  :" InstallHook("ShellExecuteExW", pSEW, "Shell32.dll", "ShellExecuteExW"))
g_.p.ShellExecExW := pSEW
} else {
logerr("CreateProcessA Hook: " InstallHook("CreateProcessA_hook", pCA:=0, "Kernel32.dll", "CreateProcessA", "F", 0))
logerr("CreateProcessW Hook: " InstallHook("CreateProcessA_hook", pCW:=0, "Kernel32.dll", "CreateProcessW", "F", 1))
g_.pCreateProcessA := pCA
g_.pCreateProcessW := pCW
}
ShellExecuteA(p1, p2, p3, p4, p5, p6)
{
if (instr(strget(p3+0, "CP0"), ".exe"))
{
varsetcapacity(SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(THREAD_SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(PROCESS_INFORMATION, 8 + A_ptrsize * 2)
varsetcapacity(STARTUPINFO, 9*4 + 2*2 + 7*A_ptrsize)
numput(9*4 + 2*2 + 7*A_ptrsize, STARTUPINFO, 0 , "uint")
r := dllcall("CreateProcessA", ptr, p3, ptr, p4, Ptr, &SECURITY_ATTRIBUTES, Ptr, &THREAD_SECURITY_ATTRIBUTES
, uint, 0, uint, 0, Ptr, 0, ptr, p5, Ptr, &STARTUPINFO, Ptr, &PROCESS_INFORMATION)
if (r)
return 33
}
return dllcall(g_.p.ShellExecA, ptr, p1, ptr, p2, ptr, p3, ptr, p4, ptr, p5, uint, p6)
}
ShellExecuteExW(p1)
{
info   := struct("DWORD Size; ULONG Mask; HWND hwnd; LPCWSTR Verb; LPCWSTR File; LPCWSTR Params; LPCSTR Dir;")
info[] := p1
logerr("ShellExecuteExW " info.File)
if (instr(info.File, ".exe") && info.Params = "")
{
varsetcapacity(SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(THREAD_SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(PROCESS_INFORMATION, 8 + A_ptrsize * 2)
varsetcapacity(STARTUPINFO, 9*4 + 2*2 + 7*A_ptrsize)
numput(9*4 + 2*2 + 7*A_ptrsize, STARTUPINFO, 0 , "uint")
r := dllcall("CreateProcessA", astr, info.File, ptr, 0, Ptr, &SECURITY_ATTRIBUTES, Ptr, &THREAD_SECURITY_ATTRIBUTES
, uint, 0, uint, 0, Ptr, 0, ptr, 0, Ptr, &STARTUPINFO, Ptr, &PROCESS_INFORMATION)
logerr("ShellExecuteExW " info.File " " info.Params " " info.Dir " " r " " A_lasterror)
if (r)
return 33
}
return dllcall(g_.p.ShellExecExW, ptr, p1, ptr, p2, ptr, p3, ptr, p4, ptr, p5, uint, p6)
}
CreateProcessA_hook(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
{
encode := A_eventinfo ? "UTF-16" : "CP0"
args  := strget(p2+0, encode)
if (p1)
trgt := strget(p1+0, encode)
else
{
trgt  := ""
quote := False
for k, v in strsplit(args)
{
if (v = """")
{
if quote
break
else quote := True
}
if ( (v = A_space) && (!quote) )
break
trgt .= v
}
}
p := g_.target_dir
StringReplace, trgt, trgt, .\ ,%p%
if ! instr(trgt, ":")
trgt := A_workingdir "\" trgt
t    := strget(p1+0, encode)
StringToSend := trgt
SizeInBytes  := (StrLen(StringToSend) + 1) * (A_IsUnicode ? 2 : 1)
VarSetCapacity(CopyDataStruct, 3*A_PtrSize, 0)
NumPut(SizeInBytes, CopyDataStruct, A_PtrSize)
NumPut(&StringToSend, CopyDataStruct, 2*A_PtrSize)
dllcall("SendMessageW", ptr, g_.cfg.script_hwnd, uint, 0x4a, uint, 0, ptr, &CopyDataStruct)
logerr("CreateProcess " " lpApplicationName:" strget(p1, encode) " lpCommandLine:" strget(p2,  encode) " trgt: " trgt " args: " args)
if (A_eventinfo)
{
if (p1)
r := dllcall(g_.pCreateProcessW, str, t, str, args, ptr, p3, ptr, p4, uint, 1, uint, p6|(CREATE_SUSPENDED := 0x00000004)
, ptr, p7, ptr, p8, ptr, p9, ptr, p10)
else
r := dllcall(g_.pCreateProcessW, ptr, 0, str, args, ptr, p3, ptr, p4, uint, 1, uint, p6|(CREATE_SUSPENDED := 0x00000004)
, ptr, p7, ptr, p8, ptr, p9, ptr, p10)
} else {
if (p1)
r := dllcall(g_.pCreateProcessA, astr, t, astr, args, ptr, p3, ptr, p4, uint, 1, uint, p6|(CREATE_SUSPENDED := 0x00000004)
, ptr, p7, ptr, p8, ptr, p9, ptr, p10)
else
r := dllcall(g_.pCreateProcessA, ptr, 0, astr, args, ptr, p3, ptr, p4, uint, 1, uint, p6|(CREATE_SUSPENDED := 0x00000004)
, ptr, p7, ptr, p8, ptr, p9, ptr, p10)
}
if !r
return r
g_.hChildProcess                 := numget(p10+0, 0, "ptr")
g_.hChildProcessId               := numget(p10+0, A_ptrsize*2, "ptr")
g_.hChildProcessThread           := numget(p10+0, A_ptrsize, "ptr")
g_.ChildProcessThreadID          := numget(p10+0, (A_ptrsize*2)+4, "ptr")
dllcall("SendMessageW", ptr, g_.cfg.script_hwnd, uint, dllcall("RegisterWindowMessageW", str, "Peixoto.Hwnd")
, uint, g_.ChildProcessThreadID, uint, g_.hChildProcessId)
return r
}
Is64Bit(trgt)
{
r := dllcall("GetBinaryType", astr, trgt, "uint*", btype)
if (btype = 6)
return true
}

; <COMPILER: v1.1.15.03>
XinputSetState(index = 1, left_ = 0, right_ = 0)
{
static XINPUT_STATE=0, XINPUT_SETSTATE=0, XINPUT_VIBRATION=0
if ! XINPUT_VIBRATION
VarSetCapacity(XINPUT_VIBRATION, 4)
if ! XINPUT_SETSTATATE
{
XINPUT_HANDLE := dllcall("LoadLibrary", "wstr", "Xinput1_3.dll")
if not XINPUT_HANDLE
XINPUT_HANDLE := dllcall("GetModuleHandle", "wstr", "Xinput1_3.dll")
XINPUT_SETSTATE := dllcall("GetProcAddress", "Int", XINPUT_HANDLE, "astr", "XInputSetState")
}
index -= 1
numput(left_ * 65535, XINPUT_VIBRATION, "Short")
numput(right_ * 65535, XINPUT_VIBRATION, 2, "Short")
return dllcall(XINPUT_SETSTATE, int, index, ptr, &XINPUT_VIBRATION)
}
global XINPUT_GAMEPAD :=
(
"
  WORD  wButtons;
  BYTE  bLeftTrigger;
  BYTE  bRightTrigger;
  SHORT sThumbLX;
  SHORT sThumbLY;
  SHORT sThumbRX;
  SHORT sThumbRY;
"
)
global  XINPUT_GAMEPAD_DPAD_UP        := 0
global  XINPUT_GAMEPAD_DPAD_DOWN      := 0
global	XINPUT_GAMEPAD_DPAD_LEFT      := 0
global	XINPUT_GAMEPAD_DPAD_RIGHT     := 0
global	XINPUT_GAMEPAD_START          := 0
global	XINPUT_GAMEPAD_BACK           := 0
global	XINPUT_GAMEPAD_LEFT_THUMB     := 0
global	XINPUT_GAMEPAD_RIGHT_THUMB	  := 0
global	XINPUT_GAMEPAD_LEFT_SHOULDER  := 0
global	XINPUT_GAMEPAD_RIGHT_SHOULDER := 0
global	XINPUT_GAMEPAD_A              := 0
global	XINPUT_GAMEPAD_B              := 0
global	XINPUT_GAMEPAD_X              := 0
global	XINPUT_GAMEPAD_Y              := 0
global  XINPUT_GAMEPAD_DPAD_UP_PREV	        := 0
global  XINPUT_GAMEPAD_DPAD_DOWN_PREV	    := 0
global	XINPUT_GAMEPAD_DPAD_LEFT_PREV	    := 0
global	XINPUT_GAMEPAD_DPAD_RIGHT_PREV	    := 0
global	XINPUT_GAMEPAD_START_PREV	        := 0
global	XINPUT_GAMEPAD_BACK_PREV	        := 0
global	XINPUT_GAMEPAD_LEFT_THUMB_PREV	    := 0
global	XINPUT_GAMEPAD_RIGHT_THUMB_PREV	    := 0
global	XINPUT_GAMEPAD_LEFT_SHOULDER_PREV   := 0
global	XINPUT_GAMEPAD_RIGHT_SHOULDER_PREV	:= 0
global	XINPUT_GAMEPAD_A_PREV		        := 0
global	XINPUT_GAMEPAD_B_PREV               := 0
global	XINPUT_GAMEPAD_X_PREV		        := 0
global	XINPUT_GAMEPAD_Y_PREV	            := 0
global  XINPUT_GAMEPAD_bLeftTrigger_prev    := 0
global  XINPUT_GAMEPAD_bRightTrigger_prev   := 0
global  XINPUT_GAMEPAD_sThumbLX_prev        := 0
global  XINPUT_GAMEPAD_sThumbLY_prev        := 0
XINPUT_GAMEPAD := Struct("DWORD dwPacketNumber;`n" XINPUT_GAMEPAD)
XinputGetState(index = 1)
{
static XINPUT_STATE=0
static XINPUT_GETSTATE_ADRESS=0
index -= 1
if ! XINPUT_GETSTATE_ADRESS
{
XINPUT_HANDLE := dllcall("LoadLibrary", "wstr", "Xinput1_3.dll")
if not XINPUT_HANDLE
XINPUT_HANDLE := dllcall("GetModuleHandle", "wstr", "Xinput1_3.dll")
if not XINPUT_HANDLE
return -1
XINPUT_GETSTATE_ADRESS := dllcall("GetProcAddress", "Int", XINPUT_HANDLE, "astr", "XInputGetState")
}
XINPUT_GAMEPAD_bLeftTrigger_prev  := XINPUT_GAMEPAD.bLeftTrigger
XINPUT_GAMEPAD_bRightTrigger_prev := XINPUT_GAMEPAD.bRightTrigger
XINPUT_GAMEPAD_sThumbLX_prev      := XINPUT_GAMEPAD.sThumbLX
XINPUT_GAMEPAD_sThumbLY_prev      := XINPUT_GAMEPAD.sThumbLY
XINPUT_GAMEPAD_DPAD_UP_PREV	:= XINPUT_GAMEPAD_DPAD_UP
XINPUT_GAMEPAD_DPAD_DOWN_PREV := XINPUT_GAMEPAD_DPAD_DOWN
XINPUT_GAMEPAD_DPAD_LEFT_PREV :=  XINPUT_GAMEPAD_DPAD_LEFT
XINPUT_GAMEPAD_DPAD_RIGHT_PREV := XINPUT_GAMEPAD_DPAD_RIGHT
XINPUT_GAMEPAD_START_PREV :=  XINPUT_GAMEPAD_START
XINPUT_GAMEPAD_BACK_PREV :=  XINPUT_GAMEPAD_BACK
XINPUT_GAMEPAD_LEFT_THUMB_PREV := XINPUT_GAMEPAD_LEFT_THUMB
XINPUT_GAMEPAD_RIGHT_THUMB_PREV := XINPUT_GAMEPAD_RIGHT_THUMB
XINPUT_GAMEPAD_LEFT_SHOULDER_PREV := XINPUT_GAMEPAD_LEFT_SHOULDER
XINPUT_GAMEPAD_RIGHT_SHOULDER_PREV := XINPUT_GAMEPAD_RIGHT_SHOULDER
XINPUT_GAMEPAD_A_PREV := XINPUT_GAMEPAD_A
XINPUT_GAMEPAD_B_PREV := XINPUT_GAMEPAD_B
XINPUT_GAMEPAD_X_PREV := XINPUT_GAMEPAD_X
XINPUT_GAMEPAD_Y_PREV := XINPUT_GAMEPAD_Y
r := dllcall(XINPUT_GETSTATE_ADRESS, "int", index, "ptr", XINPUT_GAMEPAD[])
XINPUT_GAMEPAD_DPAD_UP	:= XINPUT_GAMEPAD.wButtons & 0x0001
XINPUT_GAMEPAD_DPAD_DOWN := XINPUT_GAMEPAD.wButtons & 	0x0002
XINPUT_GAMEPAD_DPAD_LEFT := XINPUT_GAMEPAD.wButtons & 	0x0004
XINPUT_GAMEPAD_DPAD_RIGHT := XINPUT_GAMEPAD.wButtons & 	0x0008
XINPUT_GAMEPAD_START := XINPUT_GAMEPAD.wButtons & 	0x0010
XINPUT_GAMEPAD_BACK  := XINPUT_GAMEPAD.wButtons & 0x0020
XINPUT_GAMEPAD_LEFT_THUMB	:= XINPUT_GAMEPAD.wButtons & 0x0040
XINPUT_GAMEPAD_RIGHT_THUMB	:= XINPUT_GAMEPAD.wButtons & 	0x0080
XINPUT_GAMEPAD_LEFT_SHOULDER := XINPUT_GAMEPAD.wButtons & 	0x0100
XINPUT_GAMEPAD_RIGHT_SHOULDER	:= XINPUT_GAMEPAD.wButtons & 	0x0200
XINPUT_GAMEPAD_A	:= XINPUT_GAMEPAD.wButtons & 	0x1000
XINPUT_GAMEPAD_B	:= XINPUT_GAMEPAD.wButtons & 	0x2000
XINPUT_GAMEPAD_X	:= XINPUT_GAMEPAD.wButtons & 	0x4000
XINPUT_GAMEPAD_Y	:= XINPUT_GAMEPAD.wButtons & 	0x8000
return r
}
XinputGetLeftStickAngle()
{
x := XINPUT_GAMEPAD.sThumbLX/32767
y := XINPUT_GAMEPAD.sThumbLY/32767
if ( (x > 0) and (y > 0) )
return ATan(x/y) * 57.29578
else if ( (x > 0) and (y < 0) )
return 180 - (ATan(x/abs(y)) * 57.29578)
else if ( (x < 0) and (y < 0) )
return 180 + (ATan(abs(x)/abs(y)) * 57.29578)
else if ( (x < 0) and (y > 0) )
return 360 - (ATan(abs(x)/y) * 57.29578)
}
XinputGetEvent(index=1, deadzone=0.25, double_tap=100)
{
if XinputGetState(index)
return ""
dead        := deadzone*32767
dead_neg    := dead * (-1)
static freq := 0, prev_event := [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
events := []
states := [
, [XINPUT_GAMEPAD_DPAD_UP_PREV, XINPUT_GAMEPAD_DPAD_UP]
, [XINPUT_GAMEPAD_DPAD_DOWN_PREV, XINPUT_GAMEPAD_DPAD_DOWN]
, [XINPUT_GAMEPAD_DPAD_LEFT_PREV,  XINPUT_GAMEPAD_DPAD_LEFT]
, [XINPUT_GAMEPAD_DPAD_RIGHT_PREV, XINPUT_GAMEPAD_DPAD_RIGHT]
, [XINPUT_GAMEPAD_A_PREV, XINPUT_GAMEPAD_A]
, [XINPUT_GAMEPAD_B_PREV, XINPUT_GAMEPAD_B]
, [XINPUT_GAMEPAD_X_PREV, XINPUT_GAMEPAD_X]
, [XINPUT_GAMEPAD_Y_PREV, XINPUT_GAMEPAD_Y]
, [XINPUT_GAMEPAD_LEFT_SHOULDER_PREV, XINPUT_GAMEPAD_LEFT_SHOULDER]
, [XINPUT_GAMEPAD_RIGHT_SHOULDER_PREV, XINPUT_GAMEPAD_RIGHT_SHOULDER]
, [XINPUT_GAMEPAD_bLeftTrigger_prev, XINPUT_GAMEPAD.bLeftTrigger]
, [XINPUT_GAMEPAD_bRightTrigger_prev, XINPUT_GAMEPAD.bRightTrigger]
, [XINPUT_GAMEPAD_BACK_PREV, XINPUT_GAMEPAD_BACK]
, [XINPUT_GAMEPAD_START_PREV, XINPUT_GAMEPAD_START]
, [XINPUT_GAMEPAD_LEFT_THUMB_PREV, XINPUT_GAMEPAD_LEFT_THUMB]
, [XINPUT_GAMEPAD_RIGHT_THUMB_PREV, XINPUT_GAMEPAD_RIGHT_THUMB]
, [(XINPUT_GAMEPAD_sThumbLY_prev>dead), (XINPUT_GAMEPAD.sThumbLY>dead)]
, [(XINPUT_GAMEPAD_sThumbLY_prev<dead_neg), (XINPUT_GAMEPAD.sThumbLY<dead_neg)]
, [(XINPUT_GAMEPAD_sThumbLX_prev<dead_neg), (XINPUT_GAMEPAD.sThumbLX<dead_neg)]
, [(XINPUT_GAMEPAD_sThumbLX_prev>dead), (XINPUT_GAMEPAD.sThumbLX>dead)] ]
now  := 0
freq ?:	DllCall("QueryPerformanceFrequency", "Int64*", freq)
DllCall("QueryPerformanceCounter", "Int64*", now)
for k, v in states {
v[1] and not v[2] ? events.insert(-1) : v[2] and not v[1] ? events.insert(1) : events.insert(0)
} return events
}
XinputAltSetMousePos(deadzone=0.2, sensitivity=1.)
{
dead           := deadzone*32767
dy := (abs(XINPUT_GAMEPAD.sThumbRY) < dead) ? 0 : (XINPUT_GAMEPAD.sThumbRY/32767) * -A_ScreenHeight*0.1*sensitivity
dx := (abs(XINPUT_GAMEPAD.sThumbRX) < dead) ? 0 : (XINPUT_GAMEPAD.sThumbRX/32767) * A_ScreenWidth*0.1*sensitivity
MOUSEEVENTF_MOVE := 0x0001
dllcall("User32.dll\mouse_event", uint, MOUSEEVENTF_MOVE, uint, dx, uint, dy, uint, 0, uint, 0)
}
XinputSetMousePos(deadzone=0.2, sensitivity=1.)
{
if (J2K.rs_alt) {
return XinputAltSetMousePos(deadzone, sensitivity)
}
static MOUSEINPUT
MOUSEINPUT ?: MOUSEINPUT := struct("DWORD type; LONG dx; LONG dy; DWORD mouseData; DWORD dwFlags; DWORD time; ULONG_PTR dwExtraInfo;")
, MOUSEINPUT.dwFlags := 0x0001, MOUSEINPUT.type := 0
dead          := deadzone*32767
MOUSEINPUT.dy := (abs(XINPUT_GAMEPAD.sThumbRY) < dead) ? 0 : (XINPUT_GAMEPAD.sThumbRY/32767) * -A_ScreenHeight*0.1*sensitivity
MOUSEINPUT.dx := (abs(XINPUT_GAMEPAD.sThumbRX) < dead) ? 0 : (XINPUT_GAMEPAD.sThumbRX/32767) * A_ScreenWidth*0.1*sensitivity
dllcall("User32.dll\SendInput", uint, 1, uint, MOUSEINPUT[], uint, MOUSEINPUT.size())
}


; <COMPILER: v1.1.15.03>
Global dinput := {}
dinput.CLSID_DirectInput := "{25E609E0-B259-11CF-BFC7-444553540000}"
dinput.CLSID_DirectInputDevice := "{25E609E1-B259-11CF-BFC7-444553540000}"
dinput.CLSID_DirectInput8 := "{25E609E4-B259-11CF-BFC7-444553540000}"
dinput.CLSID_DirectInputDevice8 := "{25E609E5-B259-11CF-BFC7-444553540000}"
dinput.IID_IDirectInputA := "{89521360-AA8A-11CF-BFC7-444553540000}"
dinput.IID_IDirectInputW := "{89521361-AA8A-11CF-BFC7-444553540000}"
dinput.IID_IDirectInput2A := "{5944E662-AA8A-11CF-BFC7-444553540000}"
dinput.IID_IDirectInput2W := "{5944E663-AA8A-11CF-BFC7-444553540000}"
dinput.IID_IDirectInput7A := "{9A4CB684-236D-11D3-8E9D-00C04F6844AE}"
dinput.IID_IDirectInput7W := "{9A4CB685-236D-11D3-8E9D-00C04F6844AE}"
dinput.IID_IDirectInput8A := "{BF798030-483A-4DA2-AA99-5D64ED369700}"
dinput.IID_IDirectInput8W := "{BF798031-483A-4DA2-AA99-5D64ED369700}"
dinput.IID_IDirectInputDeviceA := "{5944E680-C92E-11CF-BFC7-444553540000}"
dinput.IID_IDirectInputDeviceW := "{5944E681-C92E-11CF-BFC7-444553540000}"
dinput.IID_IDirectInputDevice2A := "{5944E682-C92E-11CF-BFC7-444553540000}"
dinput.IID_IDirectInputDevice2W := "{5944E683-C92E-11CF-BFC7-444553540000}"
dinput.IID_IDirectInputDevice7A := "{57D7C6BC-2356-11D3-8E9D-00C04F6844AE}"
dinput.IID_IDirectInputDevice7W := "{57D7C6BD-2356-11D3-8E9D-00C04F6844AE}"
dinput.IID_IDirectInputDevice8A := "{54D41080-DC15-4833-A41B-748F73A38179}"
dinput.IID_IDirectInputDevice8W := "{54D41081-DC15-4833-A41B-748F73A38179}"
dinput.IID_IDirectInputEffect := "{E7E1F7C0-88D2-11D0-9AD0-00A0C9A06E35}"
dinput.GUID_XAxis := "{A36D02E0-C9F3-11CF-BFC7-444553540000}"
dinput.GUID_YAxis := "{A36D02E1-C9F3-11CF-BFC7-444553540000}"
dinput.GUID_ZAxis := "{A36D02E2-C9F3-11CF-BFC7-444553540000}"
dinput.GUID_RxAxis := "{A36D02F4-C9F3-11CF-BFC7-444553540000}"
dinput.GUID_RyAxis := "{A36D02F5-C9F3-11CF-BFC7-444553540000}"
dinput.GUID_RzAxis := "{A36D02E3-C9F3-11CF-BFC7-444553540000}"
dinput.GUID_Slider := "{A36D02E4-C9F3-11CF-BFC7-444553540000}"
dinput.GUID_Button := "{A36D02F0-C9F3-11CF-BFC7-444553540000}"
dinput.GUID_Key := "{55728220-D33C-11CF-BFC7-444553540000}"
dinput.GUID_POV := "{A36D02F2-C9F3-11CF-BFC7-444553540000}"
dinput.GUID_Unknown := "{A36D02F3-C9F3-11CF-BFC7-444553540000}"
dinput.GUID_SysMouse := "{6F1D2B60-D5A0-11CF-BFC7-444553540000}"
dinput.GUID_SysKeyboard := "{6F1D2B61-D5A0-11CF-BFC7-444553540000}"
dinput.GUID_Joystick := "{6F1D2B70-D5A0-11CF-BFC7-444553540000}"
dinput.GUID_SysMouseEm := "{6F1D2B80-D5A0-11CF-BFC7-444553540000}"
dinput.GUID_SysMouseEm2 := "{6F1D2B81-D5A0-11CF-BFC7-444553540000}"
dinput.GUID_SysKeyboardEm := "{6F1D2B82-D5A0-11CF-BFC7-444553540000}"
dinput.GUID_SysKeyboardEm2 := "{6F1D2B83-D5A0-11CF-BFC7-444553540000}"
dinput.GUID_ConstantForce := "{13541C20-8E33-11D0-9AD0-00A0C9A06E35}"
dinput.GUID_RampForce := "{13541C21-8E33-11D0-9AD0-00A0C9A06E35}"
dinput.GUID_Square := "{13541C22-8E33-11D0-9AD0-00A0C9A06E35}"
dinput.GUID_Sine := "{13541C23-8E33-11D0-9AD0-00A0C9A06E35}"
dinput.GUID_Triangle := "{13541C24-8E33-11D0-9AD0-00A0C9A06E35}"
dinput.GUID_SawtoothUp := "{13541C25-8E33-11D0-9AD0-00A0C9A06E35}"
dinput.GUID_SawtoothDown := "{13541C26-8E33-11D0-9AD0-00A0C9A06E35}"
dinput.GUID_Spring := "{13541C27-8E33-11D0-9AD0-00A0C9A06E35}"
dinput.GUID_Damper := "{13541C28-8E33-11D0-9AD0-00A0C9A06E35}"
dinput.GUID_Inertia := "{13541C29-8E33-11D0-9AD0-00A0C9A06E35}"
dinput.GUID_Friction := "{13541C2A-8E33-11D0-9AD0-00A0C9A06E35}"
dinput.GUID_CustomForce := "{13541C2B-8E33-11D0-9AD0-00A0C9A06E35}"
dinput.IDirectInputEffect := {}
dinput.IDirectInputEffect.name := "IDirectInputEffect"
dinput.IDirectInputEffect.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(Initialize)(THIS_ HINSTANCE,DWORD,REFGUID) PURE;
    STDMETHOD(GetEffectGuid)(THIS_ LPGUID) PURE;
    STDMETHOD(GetParameters)(THIS_ LPDIEFFECT,DWORD) PURE;
    STDMETHOD(SetParameters)(THIS_ LPCDIEFFECT,DWORD) PURE;
    STDMETHOD(Start)(THIS_ DWORD,DWORD) PURE;
    STDMETHOD(Stop)(THIS) PURE;
    STDMETHOD(GetEffectStatus)(THIS_ LPDWORD) PURE;
    STDMETHOD(Download)(THIS) PURE;
    STDMETHOD(Unload)(THIS) PURE;
    STDMETHOD(Escape)(THIS_ LPDIEFFESCAPE) PURE;
"
)
dinput.IDirectInputDeviceW := {}
dinput.IDirectInputDeviceW.name := "IDirectInputDeviceW"
dinput.IDirectInputDeviceW.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetCapabilities)(THIS_ LPDIDEVCAPS) PURE;
    STDMETHOD(EnumObjects)(THIS_ LPDIENUMDEVICEOBJECTSCALLBACKW,LPVOID,DWORD) PURE;
    STDMETHOD(GetProperty)(THIS_ REFGUID,LPDIPROPHEADER) PURE;
    STDMETHOD(SetProperty)(THIS_ REFGUID,LPCDIPROPHEADER) PURE;
    STDMETHOD(Acquire)(THIS) PURE;
    STDMETHOD(Unacquire)(THIS) PURE;
    STDMETHOD(GetDeviceState)(THIS_ DWORD,LPVOID) PURE;
    STDMETHOD(GetDeviceData)(THIS_ DWORD,LPDIDEVICEOBJECTDATA,LPDWORD,DWORD) PURE;
    STDMETHOD(SetDataFormat)(THIS_ LPCDIDATAFORMAT) PURE;
    STDMETHOD(SetEventNotification)(THIS_ HANDLE) PURE;
    STDMETHOD(SetCooperativeLevel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(GetObjectInfo)(THIS_ LPDIDEVICEOBJECTINSTANCEW,DWORD,DWORD) PURE;
    STDMETHOD(GetDeviceInfo)(THIS_ LPDIDEVICEINSTANCEW) PURE;
    STDMETHOD(RunControlPanel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(Initialize)(THIS_ HINSTANCE,DWORD,REFGUID) PURE;
"
)
dinput.IDirectInputDeviceA := {}
dinput.IDirectInputDeviceA.name := "IDirectInputDeviceA"
dinput.IDirectInputDeviceA.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetCapabilities)(THIS_ LPDIDEVCAPS) PURE;
    STDMETHOD(EnumObjects)(THIS_ LPDIENUMDEVICEOBJECTSCALLBACKA,LPVOID,DWORD) PURE;
    STDMETHOD(GetProperty)(THIS_ REFGUID,LPDIPROPHEADER) PURE;
    STDMETHOD(SetProperty)(THIS_ REFGUID,LPCDIPROPHEADER) PURE;
    STDMETHOD(Acquire)(THIS) PURE;
    STDMETHOD(Unacquire)(THIS) PURE;
    STDMETHOD(GetDeviceState)(THIS_ DWORD,LPVOID) PURE;
    STDMETHOD(GetDeviceData)(THIS_ DWORD,LPDIDEVICEOBJECTDATA,LPDWORD,DWORD) PURE;
    STDMETHOD(SetDataFormat)(THIS_ LPCDIDATAFORMAT) PURE;
    STDMETHOD(SetEventNotification)(THIS_ HANDLE) PURE;
    STDMETHOD(SetCooperativeLevel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(GetObjectInfo)(THIS_ LPDIDEVICEOBJECTINSTANCEA,DWORD,DWORD) PURE;
    STDMETHOD(GetDeviceInfo)(THIS_ LPDIDEVICEINSTANCEA) PURE;
    STDMETHOD(RunControlPanel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(Initialize)(THIS_ HINSTANCE,DWORD,REFGUID) PURE;
"
)
dinput.IDirectInputDevice2W := {}
dinput.IDirectInputDevice2W.name := "IDirectInputDevice2W"
dinput.IDirectInputDevice2W.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetCapabilities)(THIS_ LPDIDEVCAPS) PURE;
    STDMETHOD(EnumObjects)(THIS_ LPDIENUMDEVICEOBJECTSCALLBACKW,LPVOID,DWORD) PURE;
    STDMETHOD(GetProperty)(THIS_ REFGUID,LPDIPROPHEADER) PURE;
    STDMETHOD(SetProperty)(THIS_ REFGUID,LPCDIPROPHEADER) PURE;
    STDMETHOD(Acquire)(THIS) PURE;
    STDMETHOD(Unacquire)(THIS) PURE;
    STDMETHOD(GetDeviceState)(THIS_ DWORD,LPVOID) PURE;
    STDMETHOD(GetDeviceData)(THIS_ DWORD,LPDIDEVICEOBJECTDATA,LPDWORD,DWORD) PURE;
    STDMETHOD(SetDataFormat)(THIS_ LPCDIDATAFORMAT) PURE;
    STDMETHOD(SetEventNotification)(THIS_ HANDLE) PURE;
    STDMETHOD(SetCooperativeLevel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(GetObjectInfo)(THIS_ LPDIDEVICEOBJECTINSTANCEW,DWORD,DWORD) PURE;
    STDMETHOD(GetDeviceInfo)(THIS_ LPDIDEVICEINSTANCEW) PURE;
    STDMETHOD(RunControlPanel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(Initialize)(THIS_ HINSTANCE,DWORD,REFGUID) PURE;
    STDMETHOD(CreateEffect)(THIS_ REFGUID,LPCDIEFFECT,LPDIRECTINPUTEFFECT *,LPUNKNOWN) PURE;
    STDMETHOD(EnumEffects)(THIS_ LPDIENUMEFFECTSCALLBACKW,LPVOID,DWORD) PURE;
    STDMETHOD(GetEffectInfo)(THIS_ LPDIEFFECTINFOW,REFGUID) PURE;
    STDMETHOD(GetForceFeedbackState)(THIS_ LPDWORD) PURE;
    STDMETHOD(SendForceFeedbackCommand)(THIS_ DWORD) PURE;
    STDMETHOD(EnumCreatedEffectObjects)(THIS_ LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,LPVOID,DWORD) PURE;
    STDMETHOD(Escape)(THIS_ LPDIEFFESCAPE) PURE;
    STDMETHOD(Poll)(THIS) PURE;
    STDMETHOD(SendDeviceData)(THIS_ DWORD,LPCDIDEVICEOBJECTDATA,LPDWORD,DWORD) PURE;
"
)
dinput.IDirectInputDevice2A := {}
dinput.IDirectInputDevice2A.name := "IDirectInputDevice2A"
dinput.IDirectInputDevice2A.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetCapabilities)(THIS_ LPDIDEVCAPS) PURE;
    STDMETHOD(EnumObjects)(THIS_ LPDIENUMDEVICEOBJECTSCALLBACKA,LPVOID,DWORD) PURE;
    STDMETHOD(GetProperty)(THIS_ REFGUID,LPDIPROPHEADER) PURE;
    STDMETHOD(SetProperty)(THIS_ REFGUID,LPCDIPROPHEADER) PURE;
    STDMETHOD(Acquire)(THIS) PURE;
    STDMETHOD(Unacquire)(THIS) PURE;
    STDMETHOD(GetDeviceState)(THIS_ DWORD,LPVOID) PURE;
    STDMETHOD(GetDeviceData)(THIS_ DWORD,LPDIDEVICEOBJECTDATA,LPDWORD,DWORD) PURE;
    STDMETHOD(SetDataFormat)(THIS_ LPCDIDATAFORMAT) PURE;
    STDMETHOD(SetEventNotification)(THIS_ HANDLE) PURE;
    STDMETHOD(SetCooperativeLevel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(GetObjectInfo)(THIS_ LPDIDEVICEOBJECTINSTANCEA,DWORD,DWORD) PURE;
    STDMETHOD(GetDeviceInfo)(THIS_ LPDIDEVICEINSTANCEA) PURE;
    STDMETHOD(RunControlPanel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(Initialize)(THIS_ HINSTANCE,DWORD,REFGUID) PURE;
    STDMETHOD(CreateEffect)(THIS_ REFGUID,LPCDIEFFECT,LPDIRECTINPUTEFFECT *,LPUNKNOWN) PURE;
    STDMETHOD(EnumEffects)(THIS_ LPDIENUMEFFECTSCALLBACKA,LPVOID,DWORD) PURE;
    STDMETHOD(GetEffectInfo)(THIS_ LPDIEFFECTINFOA,REFGUID) PURE;
    STDMETHOD(GetForceFeedbackState)(THIS_ LPDWORD) PURE;
    STDMETHOD(SendForceFeedbackCommand)(THIS_ DWORD) PURE;
    STDMETHOD(EnumCreatedEffectObjects)(THIS_ LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,LPVOID,DWORD) PURE;
    STDMETHOD(Escape)(THIS_ LPDIEFFESCAPE) PURE;
    STDMETHOD(Poll)(THIS) PURE;
    STDMETHOD(SendDeviceData)(THIS_ DWORD,LPCDIDEVICEOBJECTDATA,LPDWORD,DWORD) PURE;
"
)
dinput.IDirectInputDevice7W := {}
dinput.IDirectInputDevice7W.name := "IDirectInputDevice7W"
dinput.IDirectInputDevice7W.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetCapabilities)(THIS_ LPDIDEVCAPS) PURE;
    STDMETHOD(EnumObjects)(THIS_ LPDIENUMDEVICEOBJECTSCALLBACKW,LPVOID,DWORD) PURE;
    STDMETHOD(GetProperty)(THIS_ REFGUID,LPDIPROPHEADER) PURE;
    STDMETHOD(SetProperty)(THIS_ REFGUID,LPCDIPROPHEADER) PURE;
    STDMETHOD(Acquire)(THIS) PURE;
    STDMETHOD(Unacquire)(THIS) PURE;
    STDMETHOD(GetDeviceState)(THIS_ DWORD,LPVOID) PURE;
    STDMETHOD(GetDeviceData)(THIS_ DWORD,LPDIDEVICEOBJECTDATA,LPDWORD,DWORD) PURE;
    STDMETHOD(SetDataFormat)(THIS_ LPCDIDATAFORMAT) PURE;
    STDMETHOD(SetEventNotification)(THIS_ HANDLE) PURE;
    STDMETHOD(SetCooperativeLevel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(GetObjectInfo)(THIS_ LPDIDEVICEOBJECTINSTANCEW,DWORD,DWORD) PURE;
    STDMETHOD(GetDeviceInfo)(THIS_ LPDIDEVICEINSTANCEW) PURE;
    STDMETHOD(RunControlPanel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(Initialize)(THIS_ HINSTANCE,DWORD,REFGUID) PURE;
    STDMETHOD(CreateEffect)(THIS_ REFGUID,LPCDIEFFECT,LPDIRECTINPUTEFFECT *,LPUNKNOWN) PURE;
    STDMETHOD(EnumEffects)(THIS_ LPDIENUMEFFECTSCALLBACKW,LPVOID,DWORD) PURE;
    STDMETHOD(GetEffectInfo)(THIS_ LPDIEFFECTINFOW,REFGUID) PURE;
    STDMETHOD(GetForceFeedbackState)(THIS_ LPDWORD) PURE;
    STDMETHOD(SendForceFeedbackCommand)(THIS_ DWORD) PURE;
    STDMETHOD(EnumCreatedEffectObjects)(THIS_ LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,LPVOID,DWORD) PURE;
    STDMETHOD(Escape)(THIS_ LPDIEFFESCAPE) PURE;
    STDMETHOD(Poll)(THIS) PURE;
    STDMETHOD(SendDeviceData)(THIS_ DWORD,LPCDIDEVICEOBJECTDATA,LPDWORD,DWORD) PURE;
    STDMETHOD(EnumEffectsInFile)(THIS_ LPCWSTR,LPDIENUMEFFECTSINFILECALLBACK,LPVOID,DWORD) PURE;
    STDMETHOD(WriteEffectToFile)(THIS_ LPCWSTR,DWORD,LPDIFILEEFFECT,DWORD) PURE;
"
)
dinput.IDirectInputDevice7A := {}
dinput.IDirectInputDevice7A.name := "IDirectInputDevice7A"
dinput.IDirectInputDevice7A.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetCapabilities)(THIS_ LPDIDEVCAPS) PURE;
    STDMETHOD(EnumObjects)(THIS_ LPDIENUMDEVICEOBJECTSCALLBACKA,LPVOID,DWORD) PURE;
    STDMETHOD(GetProperty)(THIS_ REFGUID,LPDIPROPHEADER) PURE;
    STDMETHOD(SetProperty)(THIS_ REFGUID,LPCDIPROPHEADER) PURE;
    STDMETHOD(Acquire)(THIS) PURE;
    STDMETHOD(Unacquire)(THIS) PURE;
    STDMETHOD(GetDeviceState)(THIS_ DWORD,LPVOID) PURE;
    STDMETHOD(GetDeviceData)(THIS_ DWORD,LPDIDEVICEOBJECTDATA,LPDWORD,DWORD) PURE;
    STDMETHOD(SetDataFormat)(THIS_ LPCDIDATAFORMAT) PURE;
    STDMETHOD(SetEventNotification)(THIS_ HANDLE) PURE;
    STDMETHOD(SetCooperativeLevel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(GetObjectInfo)(THIS_ LPDIDEVICEOBJECTINSTANCEA,DWORD,DWORD) PURE;
    STDMETHOD(GetDeviceInfo)(THIS_ LPDIDEVICEINSTANCEA) PURE;
    STDMETHOD(RunControlPanel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(Initialize)(THIS_ HINSTANCE,DWORD,REFGUID) PURE;
    STDMETHOD(CreateEffect)(THIS_ REFGUID,LPCDIEFFECT,LPDIRECTINPUTEFFECT *,LPUNKNOWN) PURE;
    STDMETHOD(EnumEffects)(THIS_ LPDIENUMEFFECTSCALLBACKA,LPVOID,DWORD) PURE;
    STDMETHOD(GetEffectInfo)(THIS_ LPDIEFFECTINFOA,REFGUID) PURE;
    STDMETHOD(GetForceFeedbackState)(THIS_ LPDWORD) PURE;
    STDMETHOD(SendForceFeedbackCommand)(THIS_ DWORD) PURE;
    STDMETHOD(EnumCreatedEffectObjects)(THIS_ LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,LPVOID,DWORD) PURE;
    STDMETHOD(Escape)(THIS_ LPDIEFFESCAPE) PURE;
    STDMETHOD(Poll)(THIS) PURE;
    STDMETHOD(SendDeviceData)(THIS_ DWORD,LPCDIDEVICEOBJECTDATA,LPDWORD,DWORD) PURE;
    STDMETHOD(EnumEffectsInFile)(THIS_ LPCSTR,LPDIENUMEFFECTSINFILECALLBACK,LPVOID,DWORD) PURE;
    STDMETHOD(WriteEffectToFile)(THIS_ LPCSTR,DWORD,LPDIFILEEFFECT,DWORD) PURE;
"
)
dinput.IDirectInputDevice8W := {}
dinput.IDirectInputDevice8W.name := "IDirectInputDevice8W"
dinput.IDirectInputDevice8W.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetCapabilities)(THIS_ LPDIDEVCAPS) PURE;
    STDMETHOD(EnumObjects)(THIS_ LPDIENUMDEVICEOBJECTSCALLBACKW,LPVOID,DWORD) PURE;
    STDMETHOD(GetProperty)(THIS_ REFGUID,LPDIPROPHEADER) PURE;
    STDMETHOD(SetProperty)(THIS_ REFGUID,LPCDIPROPHEADER) PURE;
    STDMETHOD(Acquire)(THIS) PURE;
    STDMETHOD(Unacquire)(THIS) PURE;
    STDMETHOD(GetDeviceState)(THIS_ DWORD,LPVOID) PURE;
    STDMETHOD(GetDeviceData)(THIS_ DWORD,LPDIDEVICEOBJECTDATA,LPDWORD,DWORD) PURE;
    STDMETHOD(SetDataFormat)(THIS_ LPCDIDATAFORMAT) PURE;
    STDMETHOD(SetEventNotification)(THIS_ HANDLE) PURE;
    STDMETHOD(SetCooperativeLevel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(GetObjectInfo)(THIS_ LPDIDEVICEOBJECTINSTANCEW,DWORD,DWORD) PURE;
    STDMETHOD(GetDeviceInfo)(THIS_ LPDIDEVICEINSTANCEW) PURE;
    STDMETHOD(RunControlPanel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(Initialize)(THIS_ HINSTANCE,DWORD,REFGUID) PURE;
    STDMETHOD(CreateEffect)(THIS_ REFGUID,LPCDIEFFECT,LPDIRECTINPUTEFFECT *,LPUNKNOWN) PURE;
    STDMETHOD(EnumEffects)(THIS_ LPDIENUMEFFECTSCALLBACKW,LPVOID,DWORD) PURE;
    STDMETHOD(GetEffectInfo)(THIS_ LPDIEFFECTINFOW,REFGUID) PURE;
    STDMETHOD(GetForceFeedbackState)(THIS_ LPDWORD) PURE;
    STDMETHOD(SendForceFeedbackCommand)(THIS_ DWORD) PURE;
    STDMETHOD(EnumCreatedEffectObjects)(THIS_ LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,LPVOID,DWORD) PURE;
    STDMETHOD(Escape)(THIS_ LPDIEFFESCAPE) PURE;
    STDMETHOD(Poll)(THIS) PURE;
    STDMETHOD(SendDeviceData)(THIS_ DWORD,LPCDIDEVICEOBJECTDATA,LPDWORD,DWORD) PURE;
    STDMETHOD(EnumEffectsInFile)(THIS_ LPCWSTR,LPDIENUMEFFECTSINFILECALLBACK,LPVOID,DWORD) PURE;
    STDMETHOD(WriteEffectToFile)(THIS_ LPCWSTR,DWORD,LPDIFILEEFFECT,DWORD) PURE;
    STDMETHOD(BuildActionMap)(THIS_ LPDIACTIONFORMATW,LPCWSTR,DWORD) PURE;
    STDMETHOD(SetActionMap)(THIS_ LPDIACTIONFORMATW,LPCWSTR,DWORD) PURE;
    STDMETHOD(GetImageInfo)(THIS_ LPDIDEVICEIMAGEINFOHEADERW) PURE;
"
)
dinput.IDirectInputDevice8A := {}
dinput.IDirectInputDevice8A.name := "IDirectInputDevice8A"
dinput.IDirectInputDevice8A.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetCapabilities)(THIS_ LPDIDEVCAPS) PURE;
    STDMETHOD(EnumObjects)(THIS_ LPDIENUMDEVICEOBJECTSCALLBACKA,LPVOID,DWORD) PURE;
    STDMETHOD(GetProperty)(THIS_ REFGUID,LPDIPROPHEADER) PURE;
    STDMETHOD(SetProperty)(THIS_ REFGUID,LPCDIPROPHEADER) PURE;
    STDMETHOD(Acquire)(THIS) PURE;
    STDMETHOD(Unacquire)(THIS) PURE;
    STDMETHOD(GetDeviceState)(THIS_ DWORD,LPVOID) PURE;
    STDMETHOD(GetDeviceData)(THIS_ DWORD,LPDIDEVICEOBJECTDATA,LPDWORD,DWORD) PURE;
    STDMETHOD(SetDataFormat)(THIS_ LPCDIDATAFORMAT) PURE;
    STDMETHOD(SetEventNotification)(THIS_ HANDLE) PURE;
    STDMETHOD(SetCooperativeLevel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(GetObjectInfo)(THIS_ LPDIDEVICEOBJECTINSTANCEA,DWORD,DWORD) PURE;
    STDMETHOD(GetDeviceInfo)(THIS_ LPDIDEVICEINSTANCEA) PURE;
    STDMETHOD(RunControlPanel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(Initialize)(THIS_ HINSTANCE,DWORD,REFGUID) PURE;
    STDMETHOD(CreateEffect)(THIS_ REFGUID,LPCDIEFFECT,LPDIRECTINPUTEFFECT *,LPUNKNOWN) PURE;
    STDMETHOD(EnumEffects)(THIS_ LPDIENUMEFFECTSCALLBACKA,LPVOID,DWORD) PURE;
    STDMETHOD(GetEffectInfo)(THIS_ LPDIEFFECTINFOA,REFGUID) PURE;
    STDMETHOD(GetForceFeedbackState)(THIS_ LPDWORD) PURE;
    STDMETHOD(SendForceFeedbackCommand)(THIS_ DWORD) PURE;
    STDMETHOD(EnumCreatedEffectObjects)(THIS_ LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,LPVOID,DWORD) PURE;
    STDMETHOD(Escape)(THIS_ LPDIEFFESCAPE) PURE;
    STDMETHOD(Poll)(THIS) PURE;
    STDMETHOD(SendDeviceData)(THIS_ DWORD,LPCDIDEVICEOBJECTDATA,LPDWORD,DWORD) PURE;
    STDMETHOD(EnumEffectsInFile)(THIS_ LPCSTR,LPDIENUMEFFECTSINFILECALLBACK,LPVOID,DWORD) PURE;
    STDMETHOD(WriteEffectToFile)(THIS_ LPCSTR,DWORD,LPDIFILEEFFECT,DWORD) PURE;
    STDMETHOD(BuildActionMap)(THIS_ LPDIACTIONFORMATA,LPCSTR,DWORD) PURE;
    STDMETHOD(SetActionMap)(THIS_ LPDIACTIONFORMATA,LPCSTR,DWORD) PURE;
    STDMETHOD(GetImageInfo)(THIS_ LPDIDEVICEIMAGEINFOHEADERA) PURE;
"
)
dinput.IDirectInputW := {}
dinput.IDirectInputW.name := "IDirectInputW"
dinput.IDirectInputW.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(CreateDevice)(THIS_ REFGUID,LPDIRECTINPUTDEVICEW *,LPUNKNOWN) PURE;
    STDMETHOD(EnumDevices)(THIS_ DWORD,LPDIENUMDEVICESCALLBACKW,LPVOID,DWORD) PURE;
    STDMETHOD(GetDeviceStatus)(THIS_ REFGUID) PURE;
    STDMETHOD(RunControlPanel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(Initialize)(THIS_ HINSTANCE,DWORD) PURE;
"
)
dinput.IDirectInputA := {}
dinput.IDirectInputA.name := "IDirectInputA"
dinput.IDirectInputA.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(CreateDevice)(THIS_ REFGUID,LPDIRECTINPUTDEVICEA *,LPUNKNOWN) PURE;
    STDMETHOD(EnumDevices)(THIS_ DWORD,LPDIENUMDEVICESCALLBACKA,LPVOID,DWORD) PURE;
    STDMETHOD(GetDeviceStatus)(THIS_ REFGUID) PURE;
    STDMETHOD(RunControlPanel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(Initialize)(THIS_ HINSTANCE,DWORD) PURE;
"
)
dinput.IDirectInput2W := {}
dinput.IDirectInput2W.name := "IDirectInput2W"
dinput.IDirectInput2W.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(CreateDevice)(THIS_ REFGUID,LPDIRECTINPUTDEVICEW *,LPUNKNOWN) PURE;
    STDMETHOD(EnumDevices)(THIS_ DWORD,LPDIENUMDEVICESCALLBACKW,LPVOID,DWORD) PURE;
    STDMETHOD(GetDeviceStatus)(THIS_ REFGUID) PURE;
    STDMETHOD(RunControlPanel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(Initialize)(THIS_ HINSTANCE,DWORD) PURE;
    STDMETHOD(FindDevice)(THIS_ REFGUID,LPCWSTR,LPGUID) PURE;
"
)
dinput.IDirectInput2A := {}
dinput.IDirectInput2A.name := "IDirectInput2A"
dinput.IDirectInput2A.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(CreateDevice)(THIS_ REFGUID,LPDIRECTINPUTDEVICEA *,LPUNKNOWN) PURE;
    STDMETHOD(EnumDevices)(THIS_ DWORD,LPDIENUMDEVICESCALLBACKA,LPVOID,DWORD) PURE;
    STDMETHOD(GetDeviceStatus)(THIS_ REFGUID) PURE;
    STDMETHOD(RunControlPanel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(Initialize)(THIS_ HINSTANCE,DWORD) PURE;
    STDMETHOD(FindDevice)(THIS_ REFGUID,LPCSTR,LPGUID) PURE;
"
)
dinput.IDirectInput7W := {}
dinput.IDirectInput7W.name := "IDirectInput7W"
dinput.IDirectInput7W.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(CreateDevice)(THIS_ REFGUID,LPDIRECTINPUTDEVICEW *,LPUNKNOWN) PURE;
    STDMETHOD(EnumDevices)(THIS_ DWORD,LPDIENUMDEVICESCALLBACKW,LPVOID,DWORD) PURE;
    STDMETHOD(GetDeviceStatus)(THIS_ REFGUID) PURE;
    STDMETHOD(RunControlPanel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(Initialize)(THIS_ HINSTANCE,DWORD) PURE;
    STDMETHOD(FindDevice)(THIS_ REFGUID,LPCWSTR,LPGUID) PURE;
    STDMETHOD(CreateDeviceEx)(THIS_ REFGUID,REFIID,LPVOID *,LPUNKNOWN) PURE;
"
)
dinput.IDirectInput7A := {}
dinput.IDirectInput7A.name := "IDirectInput7A"
dinput.IDirectInput7A.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(CreateDevice)(THIS_ REFGUID,LPDIRECTINPUTDEVICEA *,LPUNKNOWN) PURE;
    STDMETHOD(EnumDevices)(THIS_ DWORD,LPDIENUMDEVICESCALLBACKA,LPVOID,DWORD) PURE;
    STDMETHOD(GetDeviceStatus)(THIS_ REFGUID) PURE;
    STDMETHOD(RunControlPanel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(Initialize)(THIS_ HINSTANCE,DWORD) PURE;
    STDMETHOD(FindDevice)(THIS_ REFGUID,LPCSTR,LPGUID) PURE;
    STDMETHOD(CreateDeviceEx)(THIS_ REFGUID,REFIID,LPVOID *,LPUNKNOWN) PURE;
"
)
dinput.IDirectInput8W := {}
dinput.IDirectInput8W.name := "IDirectInput8W"
dinput.IDirectInput8W.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(CreateDevice)(THIS_ REFGUID,LPDIRECTINPUTDEVICE8W *,LPUNKNOWN) PURE;
    STDMETHOD(EnumDevices)(THIS_ DWORD,LPDIENUMDEVICESCALLBACKW,LPVOID,DWORD) PURE;
    STDMETHOD(GetDeviceStatus)(THIS_ REFGUID) PURE;
    STDMETHOD(RunControlPanel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(Initialize)(THIS_ HINSTANCE,DWORD) PURE;
    STDMETHOD(FindDevice)(THIS_ REFGUID,LPCWSTR,LPGUID) PURE;
    STDMETHOD(EnumDevicesBySemantics)(THIS_ LPCWSTR,LPDIACTIONFORMATW,LPDIENUMDEVICESBYSEMANTICSCBW,LPVOID,DWORD) PURE;
    STDMETHOD(cfgureDevices)(THIS_ LPDIcfgUREDEVICESCALLBACK,LPDIcfgUREDEVICESPARAMSW,DWORD,LPVOID) PURE;
"
)
dinput.IDirectInput8A := {}
dinput.IDirectInput8A.name := "IDirectInput8A"
dinput.IDirectInput8A.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(CreateDevice)(THIS_ REFGUID,LPDIRECTINPUTDEVICE8A *,LPUNKNOWN) PURE;
    STDMETHOD(EnumDevices)(THIS_ DWORD,LPDIENUMDEVICESCALLBACKA,LPVOID,DWORD) PURE;
    STDMETHOD(GetDeviceStatus)(THIS_ REFGUID) PURE;
    STDMETHOD(RunControlPanel)(THIS_ HWND,DWORD) PURE;
    STDMETHOD(Initialize)(THIS_ HINSTANCE,DWORD) PURE;
    STDMETHOD(FindDevice)(THIS_ REFGUID,LPCSTR,LPGUID) PURE;
    STDMETHOD(EnumDevicesBySemantics)(THIS_ LPCSTR,LPDIACTIONFORMATA,LPDIENUMDEVICESBYSEMANTICSCBA,LPVOID,DWORD) PURE;
    STDMETHOD(cfgureDevices)(THIS_ LPDIcfgUREDEVICESCALLBACK,LPDIcfgUREDEVICESPARAMSA,DWORD,LPVOID) PURE;
"
)
Global DI8DEVCLASS_DEVICE := 1
Global DI8DEVCLASS_GAMECTRL := 4
Global DI8DEVCLASS_KEYBOARD := 3
Global DI8DEVCLASS_POINTER := 2
Global DI8DEVTYPE1STPERSON_SHOOTER := 4
Global DI8DEVTYPE1STPERSON_SIXDOF := 3
Global DI8DEVTYPE1STPERSON_UNKNOWN := 2
Global DI8DEVTYPE_1STPERSON := 24
Global DI8DEVTYPE_DEVICE := 17
Global DI8DEVTYPE_DEVICECTRL := 25
Global DI8DEVTYPE_DRIVING := 22
Global DI8DEVTYPE_FLIGHT := 23
Global DI8DEVTYPE_GAMEPAD := 21
Global DI8DEVTYPE_JOYSTICK := 20
Global DI8DEVTYPE_KEYBOARD := 19
Global DI8DEVTYPE_LIMITEDGAMESUBTYPE := 1
Global DI8DEVTYPE_MOUSE := 18
Global DI8DEVTYPE_REMOTE := 27
Global DI8DEVTYPE_SCREENPOINTER := 26
Global DI8DEVTYPE_SUPPLEMENTAL := 28
Global DI8DEVTYPEDEVICECTRL_COMMSSELECTION := 3
Global DI8DEVTYPEDEVICECTRL_COMMSSELECTION_HARDWIRED := 4
Global DI8DEVTYPEDEVICECTRL_UNKNOWN := 2
Global DI8DEVTYPEDRIVING_COMBINEDPEDALS := 2
Global DI8DEVTYPEDRIVING_DUALPEDALS := 3
Global DI8DEVTYPEDRIVING_HANDHELD := 5
Global DI8DEVTYPEDRIVING_THREEPEDALS := 4
Global DI8DEVTYPEFLIGHT_RC := 4
Global DI8DEVTYPEFLIGHT_STICK := 2
Global DI8DEVTYPEFLIGHT_YOKE := 3
Global DI8DEVTYPEGAMEPAD_STANDARD := 2
Global DI8DEVTYPEGAMEPAD_TILT := 3
Global DI8DEVTYPEJOYSTICK_STANDARD := 2
Global DI8DEVTYPEKEYBOARD_J3100 := 12
Global DI8DEVTYPEKEYBOARD_JAPAN106 := 10
Global DI8DEVTYPEKEYBOARD_JAPANAX := 11
Global DI8DEVTYPEKEYBOARD_NEC98 := 7
Global DI8DEVTYPEKEYBOARD_NEC98106 := 9
Global DI8DEVTYPEKEYBOARD_NEC98LAPTOP := 8
Global DI8DEVTYPEKEYBOARD_NOKIA1050 := 5
Global DI8DEVTYPEKEYBOARD_NOKIA9140 := 6
Global DI8DEVTYPEKEYBOARD_OLIVETTI := 2
Global DI8DEVTYPEKEYBOARD_PCAT := 3
Global DI8DEVTYPEKEYBOARD_PCENH := 4
Global DI8DEVTYPEKEYBOARD_PCXT := 1
Global DI8DEVTYPEMOUSE_ABSOLUTE := 6
Global DI8DEVTYPEMOUSE_FINGERSTICK := 3
Global DI8DEVTYPEMOUSE_TOUCHPAD := 4
Global DI8DEVTYPEMOUSE_TRACKBALL := 5
Global DI8DEVTYPEMOUSE_TRADITIONAL := 2
Global DI8DEVTYPEMOUSE_UNKNOWN := 1
Global DI8DEVTYPEREMOTE_UNKNOWN := 2
Global DI8DEVTYPESCREENPTR_LIGHTGUN := 3
Global DI8DEVTYPESCREENPTR_LIGHTPEN := 4
Global DI8DEVTYPESCREENPTR_TOUCH := 5
Global DI8DEVTYPESCREENPTR_UNKNOWN := 2
Global DI8DEVTYPESUPPLEMENTAL_2NDHANDCONTROLLER := 3
Global DI8DEVTYPESUPPLEMENTAL_COMBINEDPEDALS := 10
Global DI8DEVTYPESUPPLEMENTAL_DUALPEDALS := 11
Global DI8DEVTYPESUPPLEMENTAL_HANDTRACKER := 5
Global DI8DEVTYPESUPPLEMENTAL_HEADTRACKER := 4
Global DI8DEVTYPESUPPLEMENTAL_RUDDERPEDALS := 13
Global DI8DEVTYPESUPPLEMENTAL_SHIFTER := 7
Global DI8DEVTYPESUPPLEMENTAL_SHIFTSTICKGATE := 6
Global DI8DEVTYPESUPPLEMENTAL_SPLITTHROTTLE := 9
Global DI8DEVTYPESUPPLEMENTAL_THREEPEDALS := 12
Global DI8DEVTYPESUPPLEMENTAL_THROTTLE := 8
Global DI8DEVTYPESUPPLEMENTAL_UNKNOWN := 2
Global DI_DEGREES := 100
Global DI_DOWNLOADSKIPPED := 0x00000003
Global DI_EFFECTRESTARTED := 0x00000004
Global DI_FFNOMINALMAX := 10000
Global DI_POLLEDDEVICE := 0x00000002
Global DI_SECONDS := 1000000
Global DI_SETTINGSNOTSAVED := 0x0000000B
Global DI_TRUNCATED := 0x00000008
Global DI_TRUNCATEDANDRESTARTED := 0x0000000C
Global DI_WRITEPROTECT := 0x00000013
Global DIA_APPFIXED := 16
Global DIA_APPMAPPED := 2
Global DIA_APPNOMAP := 4
Global DIA_FORCEFEEDBACK := 1
Global DIA_NORANGE := 8
Global DIAFTS_NEWDEVICEHIGH := 4294967295
Global DIAFTS_NEWDEVICELOW := 4294967295
Global DIAH_APPREQUESTED := 2
Global DIAH_DEFAULT := 32
Global DIAH_ERROR := 2147483648
Global DIAH_HWAPP := 4
Global DIAH_HWDEFAULT := 8
Global DIAH_USERcfg := 1
Global DIAXIS_ANY_1 := 4278206977
Global DIAXIS_ANY_2 := 4278206978
Global DIAXIS_ANY_3 := 4278206979
Global DIAXIS_ANY_4 := 4278206980
Global DIAXIS_ANY_A_1 := 4278436353
Global DIAXIS_ANY_A_2 := 4278436354
Global DIAXIS_ANY_B_1 := 4278469121
Global DIAXIS_ANY_B_2 := 4278469122
Global DIAXIS_ANY_C_1 := 4278501889
Global DIAXIS_ANY_C_2 := 4278501890
Global DIAXIS_ANY_R_1 := 4278338049
Global DIAXIS_ANY_R_2 := 4278338050
Global DIAXIS_ANY_S_1 := 4278534657
Global DIAXIS_ANY_S_2 := 4278534658
Global DIAXIS_ANY_U_1 := 4278370817
Global DIAXIS_ANY_U_2 := 4278370818
Global DIAXIS_ANY_V_1 := 4278403585
Global DIAXIS_ANY_V_2 := 4278403586
Global DIAXIS_ANY_X_1 := 4278239745
Global DIAXIS_ANY_X_2 := 4278239746
Global DIAXIS_ANY_Y_1 := 4278272513
Global DIAXIS_ANY_Y_2 := 4278272514
Global DIAXIS_ANY_Z_1 := 4278305281
Global DIAXIS_ANY_Z_2 := 4278305282
Global DICD_EDIT := 1
Global DIDAL_BOTTOMALIGNED := 8
Global DIDAL_LEFTALIGNED := 1
Global DIDAL_RIGHTALIGNED := 2
Global DIDAL_TOPALIGNED := 4
Global DIDBAM_HWDEFAULTS := 4
Global DIDBAM_INITIALIZE := 2
Global DIDBAM_PRESERVE := 1
Global DIDC_ALIAS := 65536
Global DIDC_ATTACHED := 1
Global DIDC_DEADBAND := 16384
Global DIDC_EMULATED := 4
Global DIDC_FFATTACK := 512
Global DIDC_FFFADE := 1024
Global DIDC_FORCEFEEDBACK := 256
Global DIDC_HIDDEN := 262144
Global DIDC_PHANTOM := 131072
Global DIDC_POLLEDDATAFORMAT := 8
Global DIDC_POLLEDDEVICE := 2
Global DIDC_POSNEGCOEFFICIENTS := 4096
Global DIDC_POSNEGSATURATION := 8192
Global DIDC_SATURATION := 2048
Global DIDC_STARTDELAY := 32768
Global DIDEVTYPE_DEVICE := 1
Global DIDEVTYPE_HID := 65536
Global DIDEVTYPE_JOYSTICK := 4
Global DIDEVTYPE_KEYBOARD := 3
Global DIDEVTYPE_MOUSE := 2
Global DIDEVTYPEJOYSTICK_FLIGHTSTICK := 3
Global DIDEVTYPEJOYSTICK_GAMEPAD := 4
Global DIDEVTYPEJOYSTICK_HEADTRACKER := 7
Global DIDEVTYPEJOYSTICK_RUDDER := 5
Global DIDEVTYPEJOYSTICK_TRADITIONAL := 2
Global DIDEVTYPEJOYSTICK_UNKNOWN := 1
Global DIDEVTYPEJOYSTICK_WHEEL := 6
Global DIDEVTYPEKEYBOARD_J3100 := 12
Global DIDEVTYPEKEYBOARD_JAPAN106 := 10
Global DIDEVTYPEKEYBOARD_JAPANAX := 11
Global DIDEVTYPEKEYBOARD_NEC98 := 7
Global DIDEVTYPEKEYBOARD_NEC98106 := 9
Global DIDEVTYPEKEYBOARD_NEC98LAPTOP := 8
Global DIDEVTYPEKEYBOARD_NOKIA1050 := 5
Global DIDEVTYPEKEYBOARD_NOKIA9140 := 6
Global DIDEVTYPEKEYBOARD_OLIVETTI := 2
Global DIDEVTYPEKEYBOARD_PCAT := 3
Global DIDEVTYPEKEYBOARD_PCENH := 4
Global DIDEVTYPEKEYBOARD_PCXT := 1
Global DIDEVTYPEMOUSE_FINGERSTICK := 3
Global DIDEVTYPEMOUSE_TOUCHPAD := 4
Global DIDEVTYPEMOUSE_TRACKBALL := 5
Global DIDEVTYPEMOUSE_TRADITIONAL := 2
Global DIDEVTYPEMOUSE_UNKNOWN := 1
Global DIDF_ABSAXIS := 1
Global DIDF_RELAXIS := 2
Global DIDFT_ABSAXIS := 2
Global DIDFT_ALIAS := 134217728
Global DIDFT_ANYINSTANCE := 16776960
Global DIDFT_AXIS := 3
Global DIDFT_BUTTON := 12
Global DIDFT_COLLECTION := 64
Global DIDFT_FFACTUATOR := 16777216
Global DIDFT_FFEFFECTTRIGGER := 33554432
Global DIDFT_NOCOLLECTION := 16776960
Global DIDFT_NODATA := 128
Global DIDFT_OPTIONAL := 2147483648
Global DIDFT_OUTPUT := 268435456
Global DIDFT_POV := 16
Global DIDFT_PSHBUTTON := 4
Global DIDFT_RELAXIS := 1
Global DIDFT_TGLBUTTON := 8
Global DIDFT_VENDORDEFINED := 67108864
Global DIDIFT_cfgURATION := 1
Global DIDIFT_OVERLAY := 2
Global DIDOI_ASPECTACCEL := 768
Global DIDOI_ASPECTFORCE := 1024
Global DIDOI_ASPECTMASK := 3840
Global DIDOI_ASPECTPOSITION := 256
Global DIDOI_ASPECTVELOCITY := 512
Global DIDOI_FFACTUATOR := 1
Global DIDOI_FFEFFECTTRIGGER := 2
Global DIDOI_GUIDISUSAGE := 65536
Global DIDOI_POLLED := 32768
Global DIDSAM_FORCESAVE := 2
Global DIDSAM_NOUSER := 1
Global DIEB_NOTRIGGER := 4294967295
Global DIEDBS_MAPPEDPRI1 := 1
Global DIEDBS_MAPPEDPRI2 := 2
Global DIEDBS_NEWDEVICE := 32
Global DIEDBS_RECENTDEVICE := 16
Global DIEDBSFL_AVAILABLEDEVICES := 4096
Global DIEDBSFL_MULTIMICEKEYBOARDS := 8192
Global DIEDBSFL_NONGAMINGDEVICES := 16384
Global DIEDBSFL_THISUSER := 16
Global DIEDBSFL_VALID := 28944
Global DIEDFL_ATTACHEDONLY := 1
Global DIEDFL_FORCEFEEDBACK := 256
Global DIEDFL_INCLUDEALIASES := 65536
Global DIEDFL_INCLUDEHIDDEN := 262144
Global DIEDFL_INCLUDEPHANTOMS := 131072
Global DIEFF_CARTESIAN := 16
Global DIEFF_OBJECTIDS := 1
Global DIEFF_OBJECTOFFSETS := 2
Global DIEFF_POLAR := 32
Global DIEFF_SPHERICAL := 64
Global DIEFT_CONDITION := 4
Global DIEFT_CONSTANTFORCE := 1
Global DIEFT_CUSTOMFORCE := 5
Global DIEFT_DEADBAND := 16384
Global DIEFT_FFATTACK := 512
Global DIEFT_FFFADE := 1024
Global DIEFT_HARDWARE := 255
Global DIEFT_PERIODIC := 3
Global DIEFT_POSNEGCOEFFICIENTS := 4096
Global DIEFT_POSNEGSATURATION := 8192
Global DIEFT_RAMPFORCE := 2
Global DIEFT_SATURATION := 2048
Global DIEFT_STARTDELAY := 32768
Global DIEGES_EMULATED := 2
Global DIEGES_PLAYING := 1
Global DIENUM_CONTINUE := 1
Global DIEP_ALLPARAMS := 511
Global DIEP_ALLPARAMS_DX5 := 511
Global DIEP_AXES := 32
Global DIEP_DIRECTION := 64
Global DIEP_DURATION := 1
Global DIEP_ENVELOPE := 128
Global DIEP_GAIN := 4
Global DIEP_NODOWNLOAD := 2147483648
Global DIEP_NORESTART := 1073741824
Global DIEP_SAMPLEPERIOD := 2
Global DIEP_START := 536870912
Global DIEP_STARTDELAY := 512
Global DIEP_TRIGGERBUTTON := 8
Global DIEP_TRIGGERREPEATINTERVAL := 16
Global DIEP_TYPESPECIFICPARAMS := 256
Global DIERR_DEVICEFULL := 0x80040201
Global DIERR_EFFECTPLAYING := 0x80040208
Global DIERR_HASEFFECTS := 0x80040204
Global DIERR_INCOMPLETEEFFECT := 0x80040206
Global DIERR_INSUFFICIENTPRIVS := 0x80040200
Global DIERR_MAPFILEFAIL := 0x8004020B
Global DIERR_MOREDATA := 0x80040202
Global DIERR_NOTBUFFERED := 0x80040207
Global DIERR_NOTDOWNLOADED := 0x80040203
Global DIERR_NOTEXCLUSIVEACQUIRED := 0x80040205
Global DIERR_REPORTFULL := 0x8004020A
Global DIERR_UNPLUGGED := 0x80040209
Global DIES_NODOWNLOAD := 2147483648
Global DIES_SOLO := 1
Global DIFEF_INCLUDENONSTANDARD := 1
Global DIFEF_MODIFYIFNEEDED := 16
Global DIGDD_PEEK := 1
Global DIGFFS_ACTUATORSOFF := 32
Global DIGFFS_ACTUATORSON := 16
Global DIGFFS_DEVICELOST := 2147483648
Global DIGFFS_EMPTY := 1
Global DIGFFS_PAUSED := 4
Global DIGFFS_POWEROFF := 128
Global DIGFFS_POWERON := 64
Global DIGFFS_SAFETYSWITCHOFF := 512
Global DIGFFS_SAFETYSWITCHON := 256
Global DIGFFS_STOPPED := 2
Global DIGFFS_USERFFSWITCHOFF := 2048
Global DIGFFS_USERFFSWITCHON := 1024
Global DIK_0 := 11
Global DIK_1 := 2
Global DIK_2 := 3
Global DIK_3 := 4
Global DIK_4 := 5
Global DIK_5 := 6
Global DIK_6 := 7
Global DIK_7 := 8
Global DIK_8 := 9
Global DIK_9 := 10
Global DIK_A := 30
Global DIK_APOSTROPHE := 40
Global DIK_B := 48
Global DIK_BACKSLASH := 43
Global DIK_C := 46
Global DIK_CAPITAL := 58
Global DIK_COMMA := 51
Global DIK_D := 32
Global DIK_E := 18
Global DIK_EQUALS := 13
Global DIK_ESCAPE := 1
Global DIK_F := 33
Global DIK_F1 := 59
Global DIK_F10 := 68
Global DIK_F11 := 87
Global DIK_F12 := 88
Global DIK_F2 := 60
Global DIK_F3 := 61
Global DIK_F4 := 62
Global DIK_F5 := 63
Global DIK_F6 := 64
Global DIK_F7 := 65
Global DIK_F8 := 66
Global DIK_F9 := 67
Global DIK_G := 34
Global DIK_H := 35
Global DIK_I := 23
Global DIK_J := 36
Global DIK_K := 37
Global DIK_L := 38
Global DIK_LBRACKET := 26
Global DIK_LCONTROL := 29
Global DIK_LSHIFT := 42
Global DIK_M := 50
Global DIK_N := 49
Global DIK_NUMLOCK := 69
Global DIK_NUMPAD0 := 82
Global DIK_NUMPAD1 := 79
Global DIK_NUMPAD2 := 80
Global DIK_NUMPAD3 := 81
Global DIK_NUMPAD4 := 75
Global DIK_NUMPAD5 := 76
Global DIK_NUMPAD6 := 77
Global DIK_NUMPAD7 := 71
Global DIK_NUMPAD8 := 72
Global DIK_NUMPAD9 := 73
Global DIK_O := 24
Global DIK_P := 25
Global DIK_Q := 16
Global DIK_R := 19
Global DIK_RBRACKET := 27
Global DIK_RCONTROL := 157
Global DIK_RSHIFT := 54
Global DIK_S := 31
Global DIK_SEMICOLON := 39
Global DIK_SPACE := 57
Global DIK_SYSRQ := 183
Global DIK_T := 20
Global DIK_TAB := 15
Global DIK_U := 22
Global DIK_V := 47
Global DIK_W := 17
Global DIK_X := 45
Global DIK_Y := 21
Global DIK_Z := 44
Global DIKEYBOARD_0 := 2164261899
Global DIKEYBOARD_1 := 2164261890
Global DIKEYBOARD_2 := 2164261891
Global DIKEYBOARD_3 := 2164261892
Global DIKEYBOARD_4 := 2164261893
Global DIKEYBOARD_5 := 2164261894
Global DIKEYBOARD_6 := 2164261895
Global DIKEYBOARD_7 := 2164261896
Global DIKEYBOARD_8 := 2164261897
Global DIKEYBOARD_9 := 2164261898
Global DIKEYBOARD_A := 2164261918
Global DIKEYBOARD_APOSTROPHE := 2164261928
Global DIKEYBOARD_B := 2164261936
Global DIKEYBOARD_BACKSLASH := 2164261931
Global DIKEYBOARD_C := 2164261934
Global DIKEYBOARD_CAPITAL := 2164261946
Global DIKEYBOARD_COMMA := 2164261939
Global DIKEYBOARD_D := 2164261920
Global DIKEYBOARD_E := 2164261906
Global DIKEYBOARD_EQUALS := 2164261901
Global DIKEYBOARD_ESCAPE := 2164261889
Global DIKEYBOARD_F := 2164261921
Global DIKEYBOARD_F1 := 2164261947
Global DIKEYBOARD_F10 := 2164261956
Global DIKEYBOARD_F11 := 2164261975
Global DIKEYBOARD_F12 := 2164261976
Global DIKEYBOARD_F2 := 2164261948
Global DIKEYBOARD_F3 := 2164261949
Global DIKEYBOARD_F4 := 2164261950
Global DIKEYBOARD_F5 := 2164261951
Global DIKEYBOARD_F6 := 2164261952
Global DIKEYBOARD_F7 := 2164261953
Global DIKEYBOARD_F8 := 2164261954
Global DIKEYBOARD_F9 := 2164261955
Global DIKEYBOARD_G := 2164261922
Global DIKEYBOARD_H := 2164261923
Global DIKEYBOARD_I := 2164261911
Global DIKEYBOARD_J := 2164261924
Global DIKEYBOARD_K := 2164261925
Global DIKEYBOARD_L := 2164261926
Global DIKEYBOARD_LBRACKET := 2164261914
Global DIKEYBOARD_LCONTROL := 2164261917
Global DIKEYBOARD_LSHIFT := 2164261930
Global DIKEYBOARD_M := 2164261938
Global DIKEYBOARD_N := 2164261937
Global DIKEYBOARD_NUMLOCK := 2164261957
Global DIKEYBOARD_NUMPAD0 := 2164261970
Global DIKEYBOARD_NUMPAD1 := 2164261967
Global DIKEYBOARD_NUMPAD2 := 2164261968
Global DIKEYBOARD_NUMPAD3 := 2164261969
Global DIKEYBOARD_NUMPAD4 := 2164261963
Global DIKEYBOARD_NUMPAD5 := 2164261964
Global DIKEYBOARD_NUMPAD6 := 2164261965
Global DIKEYBOARD_NUMPAD7 := 2164261959
Global DIKEYBOARD_NUMPAD8 := 2164261960
Global DIKEYBOARD_NUMPAD9 := 2164261961
Global DIKEYBOARD_O := 2164261912
Global DIKEYBOARD_P := 2164261913
Global DIKEYBOARD_Q := 2164261904
Global DIKEYBOARD_R := 2164261907
Global DIKEYBOARD_RBRACKET := 2164261915
Global DIKEYBOARD_RCONTROL := 2164262045
Global DIKEYBOARD_RSHIFT := 2164261942
Global DIKEYBOARD_S := 2164261919
Global DIKEYBOARD_SEMICOLON := 2164261927
Global DIKEYBOARD_SPACE := 2164261945
Global DIKEYBOARD_SYSRQ := 2164262071
Global DIKEYBOARD_T := 2164261908
Global DIKEYBOARD_TAB := 2164261903
Global DIKEYBOARD_U := 2164261910
Global DIKEYBOARD_V := 2164261935
Global DIKEYBOARD_W := 2164261905
Global DIKEYBOARD_X := 2164261933
Global DIKEYBOARD_Y := 2164261909
Global DIKEYBOARD_Z := 2164261932
Global DIPH_BYID := 2
Global DIPH_BYOFFSET := 1
Global DIPH_BYUSAGE := 3
Global DIPOV_ANY_1 := 4278208001
Global DIPOV_ANY_2 := 4278208002
Global DIPOV_ANY_3 := 4278208003
Global DIPOV_ANY_4 := 4278208004
Global DIPROPAUTOCENTER_ON := 1
Global DIPROPAXISMODE_REL := 1
Global DIPROPCALIBRATIONMODE_RAW := 1
Global DIRECTINPUT_HEADER_VERSION := 2048
Global DISCL_BACKGROUND := 8
Global DISCL_EXCLUSIVE := 1
Global DISCL_FOREGROUND := 4
Global DISCL_NONEXCLUSIVE := 2
Global DISCL_NOWINKEY := 16
Global DISDD_CONTINUE := 1
Global DISFFC_CONTINUE := 8
Global DISFFC_PAUSE := 4
Global DISFFC_RESET := 1
Global DISFFC_SETACTUATORSOFF := 32
Global DISFFC_SETACTUATORSON := 16
Global DISFFC_STOPALL := 2
Global DIVIRTUAL_ARCADE_PLATFORM := 570425344
Global DIVIRTUAL_ARCADE_SIDE2SIDE := 553648128
Global DIVIRTUAL_BROWSER_CONTROL := 671088640
Global DIVIRTUAL_CAD_2DCONTROL := 587202560
Global DIVIRTUAL_CAD_3DCONTROL := 603979776
Global DIVIRTUAL_CAD_FLYBY := 620756992
Global DIVIRTUAL_CAD_MODEL := 637534208
Global DIVIRTUAL_DRIVING_COMBAT := 33554432
Global DIVIRTUAL_DRIVING_MECHA := 687865856
Global DIVIRTUAL_DRIVING_RACE := 16777216
Global DIVIRTUAL_DRIVING_TANK := 50331648
Global DIVIRTUAL_FIGHTING_FPS := 150994944
Global DIVIRTUAL_FIGHTING_HAND2HAND := 134217728
Global DIVIRTUAL_FIGHTING_THIRDPERSON := 167772160
Global DIVIRTUAL_FLYING_CIVILIAN := 67108864
Global DIVIRTUAL_FLYING_HELICOPTER := 100663296
Global DIVIRTUAL_FLYING_MILITARY := 83886080
Global DIVIRTUAL_REMOTE_CONTROL := 654311424
Global DIVIRTUAL_SPACESIM := 117440512
Global DIVIRTUAL_SPORTS_BASEBALL_BAT := 251658240
Global DIVIRTUAL_SPORTS_BASEBALL_FIELD := 285212672
Global DIVIRTUAL_SPORTS_BASEBALL_PITCH := 268435456
Global DIVIRTUAL_SPORTS_BASKETBALL_DEFENSE := 318767104
Global DIVIRTUAL_SPORTS_BASKETBALL_OFFENSE := 301989888
Global DIVIRTUAL_SPORTS_BIKING_MOUNTAIN := 469762048
Global DIVIRTUAL_SPORTS_FISHING := 234881024
Global DIVIRTUAL_SPORTS_FOOTBALL_DEFENSE := 385875968
Global DIVIRTUAL_SPORTS_FOOTBALL_FIELD := 335544320
Global DIVIRTUAL_SPORTS_FOOTBALL_OFFENSE := 369098752
Global DIVIRTUAL_SPORTS_FOOTBALL_QBCK := 352321536
Global DIVIRTUAL_SPORTS_GOLF := 402653184
Global DIVIRTUAL_SPORTS_HOCKEY_DEFENSE := 436207616
Global DIVIRTUAL_SPORTS_HOCKEY_GOALIE := 452984832
Global DIVIRTUAL_SPORTS_HOCKEY_OFFENSE := 419430400
Global DIVIRTUAL_SPORTS_HUNTING := 218103808
Global DIVIRTUAL_SPORTS_RACQUET := 536870912
Global DIVIRTUAL_SPORTS_SKIING := 486539264
Global DIVIRTUAL_SPORTS_SOCCER_DEFENSE := 520093696
Global DIVIRTUAL_SPORTS_SOCCER_OFFENSE := 503316480
Global DIVIRTUAL_STRATEGY_ROLEPLAYING := 184549376
Global DIVIRTUAL_STRATEGY_TURN := 201326592
Global DIVOICE_ALL := 2197816330
Global DIVOICE_CHANNEL1 := 2197816321
Global DIVOICE_CHANNEL2 := 2197816322
Global DIVOICE_CHANNEL3 := 2197816323
Global DIVOICE_CHANNEL4 := 2197816324
Global DIVOICE_CHANNEL5 := 2197816325
Global DIVOICE_CHANNEL6 := 2197816326
Global DIVOICE_CHANNEL7 := 2197816327
Global DIVOICE_CHANNEL8 := 2197816328
Global DIVOICE_PLAYBACKMUTE := 2197816332
Global DIVOICE_RECORDMUTE := 2197816331
Global DIVOICE_TEAM := 2197816329
Global DIVOICE_TRANSMIT := 2197816333
Global DIVOICE_VOICECOMMAND := 2197816336
Global E_PENDING := 0x8000000A
Global JOY_HWS_AUTOLOAD := 0x10000000
Global JOY_HWS_GAMEPORTBUSBUSY := 0x00000001
Global JOY_HWS_ISANALOGPORTDRIVER := 0x08000000
Global JOY_HWS_ISGAMEPORTBUS := 0x80000000
Global JOY_HWS_ISGAMEPORTDRIVER := 0x04000000
Global JOY_HWS_ISHEADTRACKER := 0x02000000
Global JOY_HWS_NODEVNODE := 0x20000000
Global JOY_OEMPOLL_PASSDRIVERDATA := 7
Global JOY_PASSDRIVERDATA := 0x10000000
Global JOY_US_VOLATILE := 0x00000008
Global MAXCPOINTSNUM := 8
dinput.err := {}
dinput.err["" . 0] := "DI_OK"
dinput.err[2147942487 . ""] := "DIERR_INVALIDPARAMS"
global DIDEVICEINSTANCE_DX3A := Struct("DWORD dwSize, GUID guidInstance, GUID guidProduct, DWORD dwDevType,"
. "CHAR tszInstanceName[260], CHAR tszProductName[260]")
global DIDEVCAPS_DX3 :=
(
"
    DWORD   dwSize;
    DWORD   dwFlags;
    DWORD   dwDevType;
    DWORD   dwAxes;
    DWORD   dwButtons;
    DWORD   dwPOVs;
"
)
DIDEVCAPS_DX3 := Struct(DIDEVCAPS_DX3)
global DIDEVCAPS :=
(
"
    DWORD dwSize; 
    DWORD dwFlags; 
    DWORD dwDevType; 
    DWORD dwAxes; 
    DWORD dwButtons; 
    DWORD dwPOVs; 
    DWORD dwFFSamplePeriod; 
    DWORD dwFFMinTimeResolution; 
    DWORD dwFirmwareRevision; 
    DWORD dwHardwareRevision; 
    DWORD dwDriverVersion;
"
)
DIDEVCAPS := Struct(DIDEVCAPS)
global DIJOYSTATE :=
(
"
	LONG lX;
    LONG lY;
    LONG lZ;
    LONG lRx;
    LONG lRy;
    LONG lRz;
    LONG rglSlider[2];
    DWORD rgdwPOV[4];
    BYTE rgbButtons[32];
"
)
DIJOYSTATE := Struct(DIJOYSTATE)
global DIJOYSTATE_DX3 :=
(
"	
	LONG lX;
    LONG lY;
    LONG lZ;
    LONG lRx;
    LONG lRy;
    LONG lRz;
    Byte rgdwPOV[4];
    Byte rgbButtons[32];
"
)
DIJOYSTATE_DX3 := Struct(DIJOYSTATE_DX3)
global DIJOYSTATE2 :=
(
"
    LONG    lX;
    LONG    lY;
    LONG    lZ;
    LONG    lRx;
    LONG    lRy;
    LONG    lRz;
    LONG    rglSlider[2];
    DWORD   rgdwPOV[4];
    BYTE    rgbButtons[128];
    LONG    lVX;
    LONG    lVY;
    LONG    lVZ;
    LONG    lVRx;
    LONG    lVRy;
    LONG    lVRz;
    LONG    rglVSlider[2];
    LONG    lAX;
    LONG    lAY;
    LONG    lAZ;
    LONG    lARx;
    LONG    lARy;
    LONG    lARz;
    LONG    rglASlider[2];
    LONG    lFX;
    LONG    lFY;
    LONG    lFZ;
    LONG    lFRx;
    LONG    lFRy;
    LONG    lFRz;
    LONG    rglFSlider[2];
"
)
DIJOYSTATE2 := Struct(DIJOYSTATE2)
global DIEffectInfo :=
(
"
    DWORD dwSize;
    GUID guid;
    DWORD dwEffType;
    DWORD dwStaticParams;
    DWORD dwDynamicParams;
    TCHAR tszName[MAX_PATH];
"
)
DIEffectInfo := struct(DIEffectInfo)
global IDirectInputA :=0, IDirectInputW :=0, IDirectInputDeviceA :=0, IDirectInputDeviceW :=0, IDirectInputDevice2W:=0,IDirectInputDevice2A:=0
global IDirectInput8W:=0, IDirectInput8A:=0, IDirectInputDevice8W:=0, IDirectInputDevice8A:=0
global IDirectInput7W:=0, IDirectInput7A:=0, IDirectInputDevice7A:=0, IDirectInputDevice7W:=0
global g_XinputDevicesDinputGUIDS := []
GetDirectInput7(w = false)
{
p := dllcall("GetProcAddress", ptr, dllcall("LoadLibrary", str, "dinput.dll", ptr), astr, "DirectInputCreateEx")
if (!p)
return "GetProcAddress or LoadLibrary failed"
GUID_FromString(iid, w ? dinput.IID_IDirectInput7W : dinput.IID_IDirectInput7W)
r := dllcall(p, uint, A_ModuleHandle, uint, 0x0700, ptr, &iid, "uint*", pDI:=0, uint, 0, uint)
if (r)
return "DirectInputCreateEx Failed"
if not (w)
{
IDirectInput7A := new ComInterfaceWrapper(dinput.IDirectInput7A, pDI, True)
GUID_FromString(GUID, dinput.GUID_SysKeyboard)
r := dllcall(IDirectInput7A.CreateDevice, uint, IDirectInput7A.p, uint, &GUID, "uint*", pDvc:=0, uint, 0, uint)
if (r != 0)
return "Failed to create the IDirectInputDevice7A interface " r " - " dinput.err[r . ""] ErrorLevel " " pDI
IDirectInputDevice7A := new ComInterfaceWrapper(dinput.IDirectInputDevice7A, pDvc, True)
}
else
{
IDirectInput7W  := new ComInterfaceWrapper(dinput.IDirectInput7W, pDI, True)
GUID_FromString(GUID, dinput.GUID_SysKeyboard)
r := dllcall(IDirectInput7W.CreateDevice, uint, IDirectInput7W.p, uint, &GUID, "uint*", pDvc:=0, uint, 0, uint)
if (r != 0)
return "Failed to create the IDirectInputDevice7W interface " r " - " dinput.err[r . ""]
IDirectInputDevice7W := new ComInterfaceWrapper(dinput.IDirectInputDevice7W, pDvc, True)
}
return "Succeeded to create the DirectInput7 Interfaces"
}
DirectInputCreate(w = False)
{
p := dllcall("GetProcAddress", ptr, dllcall("LoadLibrary", str, "dinput.dll", ptr), astr, w ? "DirectInputCreateW" : "DirectInputCreateA")
if (!p)
return "GetProcAddress or LoadLibrary failed"
r := dllcall(p, uint, A_ModuleHandle, uint, 0x0500, "uint*", pDI:=0, uint, 0, uint)
if (r)
return "DirectInputCreate Failed"
if (w)
IDirectInputW  := new ComInterfaceWrapper(dinput.IDirectInputW, pDI, True)
else IDirectInputA := new ComInterfaceWrapper(dinput.IDirectInputA, pDI, True)
}
GetDirectInput(w = false)
{
r := DirectInputCreate(w)
if (r)
return "Failed to create the IDirectInput interface " r " - " dinput.err[r . ""]
if (!w)
{
g_XinputDevicesDinputGUIDS := []
print("Enumerating Controlers:`n")
r := dllcall(IDirectInputA.EnumDevices, uint, IDirectInputA.p, uint, DIDEVTYPE_JOYSTICK
, uint, RegisterCallback("DIEnumDevicesCallback")
, uint, 0, uint, DIEDFL_ATTACHEDONLY, uint)
GUID_FromString(iid, dinput.GUID_SysKeyboard)
r := dllcall(IDirectInputA.CreateDevice, uint, IDirectInputA.p, uint, &iid, "uint*", pDvc:=0, uint, 0, uint)
if (r != 0)
return "Failed to create the IDirectInputDevice interface " r " - " dinput.err[r . ""]
IDirectInputDeviceA := new ComInterfaceWrapper(dinput.IDirectInputDeviceA, pDvc, True)
GUID_FromString(iid, dinput.IID_IDirectInputDevice2A)
r := dllcall(IDirectInputDeviceA.QueryInterface, uint, IDirectInputDeviceA.p, uint, &iid, "uint*", pDvc:=0)
if (r != 0)
return "Failed to create the IDirectInputDevice2 interface " r " - " dinput.err[r . ""]
IDirectInputDevice2A := new ComInterfaceWrapper(dinput.IDirectInputDevice2A, pDvc, True)
}
else
{
GUID_FromString(iid, dinput.GUID_SysKeyboard)
r := dllcall(IDirectInputW.CreateDevice, uint, IDirectInputW.p, uint, &iid, "uint*", pDvc:=0, uint, 0, uint)
if (r != 0)
return "Failed to create the IDirectInputDevice interface " r " - " dinput.err[r . ""]
IDirectInputDeviceW := new ComInterfaceWrapper(dinput.IDirectInputDeviceW, pDvc, True)
GUID_FromString(iid, dinput.IID_IDirectInputDevice2W)
r := dllcall(IDirectInputDeviceW.QueryInterface, uint, IDirectInputDeviceW.p, uint, &iid, "uint*", pDvc:=0)
if (r != 0)
return "Failed to create the IDirectInputDevice2 interface " r " - " dinput.err[r . ""]
IDirectInputDevice2W := new ComInterfaceWrapper(dinput.IDirectInputDevice2W, pDvc, True)
}
return "Succeeded to create the DirectInput Interfaces"
}
DIEnumDevicesCallback(lpddi, pvRef)
{
hpx      := dllcall("GetModuleHandle", str, "peixoto.dll", uint)
IsXinput := dllcall("GetProcAddress", uint, hpx, astr, "IsXInputDevice", uint)
DIDEVICEINSTANCE_DX3A[] := lpddi
add_ := DIDEVICEINSTANCE_DX3A[] + DIDEVICEINSTANCE_DX3A.offset("tszInstanceName")
if (pvRef = 0)
name  := strget(add_+0, "CP0")
else name := strget(add_+0, "UTF-16")
guidProduct := DIDEVICEINSTANCE_DX3A[] + DIDEVICEINSTANCE_DX3A.offset("guidProduct")
guidInstace := DIDEVICEINSTANCE_DX3A[] + DIDEVICEINSTANCE_DX3A.offset("guidInstance")
xinput      := dllcall(IsXinput, uint, guidProduct, int) ? "Yes" : "No"
guid_string := StringFromIID(guidInstace)
if (xinput)
g_XinputDevicesDinputGUIDS.insert([name, guid_string])
printl("Controler: " name " " guid_string " Xinput: " xinput)
printl(guid_string)
return True
}
GetDirectInput8(w=True)
{
dllcall("LoadLibraryW", str, "dinput8.dll")
GUID_FromString(dinputGUID, w ? dinput.IID_IDirectInput8W : dinput.IID_IDirectInput8A)
r := dllcall("dinput8.dll\DirectInput8Create", uint, A_ModuleHandle, uint, 0x0800, uint, &dinputGUID, "uint*", pDI:=0, uint, 0, uint)
if (r)
return "Failed to create the IDirectInput8 interface" r " " dinput.err[r . ""]
if (w)
{
IDirectInput8W := new ComInterfaceWrapper(dinput.IDirectInput8W,  pDI, True)
GUID_FromString(GUID, dinput.GUID_SysKeyboard)
r := dllcall(IDirectInput8W.CreateDevice, uint, IDirectInput8W.p, uint, &GUID, "uint*", pDvc:=0, uint, 0, uint)
if (r)
return "Failed to create the IDirectInputDevice8 interface" r " " dinput.err[r . ""]
IDirectInputDevice8W :=  new ComInterfaceWrapper(dinput.IDirectInputDevice8W, pDvc, True)
return "Succeeded to create the DirectInput8 Interfaces"
} else {
IDirectInput8A := new ComInterfaceWrapper(dinput.IDirectInput8A,  pDI, True)
GUID_FromString(GUID, dinput.GUID_SysKeyboard)
r := dllcall(IDirectInput8A.CreateDevice, uint, IDirectInput8A.p, uint, &GUID, "uint*", pDvc:=0, uint, 0, uint)
if (r)
return "Failed to create the IDirectInputDevice8 interface" r " " dinput.err[r . ""]
IDirectInputDevice8A :=  new ComInterfaceWrapper(dinput.IDirectInputDevice8A, pDvc, True)
return "Succeeded to create the DirectInput8 Interfaces"
}
}
global DINPT_HOOKS :=
(
"
int           DZone;
int         NgDZone;
DWORD          Flag;
DWORD      Buts[12];
DWORD      Trigs[2];
LPVOID        GtStt;
LPVOID       GtStt8;
LPVOID       GtSttW;
LPVOID      GtStt8W;
LPVOID        StPrp;
LPVOID       StPrp8;
LPVOID       StPrpW;
LPVOID      StPrp8W;
LPVOID        CrtFx;
LPVOID       CrtFx8;
LPVOID       CrtFxW;
LPVOID      CrtFx8W;
LPVOID        GtCps;
LPVOID       GtCps8;
LPVOID       GtCpsW;
LPVOID      GtCps8W;
LPVOID    EnumObjcs;
LPVOID   EnumObjcs8;
LPVOID   EnumObjcsW;
LPVOID  EnumObjcs8W;
LPVOID   SetDataFmt;
LPVOID  SetDataFmt8;
LPVOID  SetDataFmtW;
LPVOID SetDataFmt8W;
LPVOID      GetData;
LPVOID     GetData8;
LPVOID     GetDataW;
LPVOID    GetData8W;
"
)
DINPT_HOOKS := struct(DINPT_HOOKS)
global g_dnpt := {}
g_dnpt.controls := ["A","B","X","Y"
, "LEFT_THUMB", "RIGHT_THUMB", "LEFT_SHOULDER", "RIGHT_SHOULDER"
, "start", "back", "bRightTrigger", "bLeftTrigger"]
g_dnpt.pDIGetRange := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "DIGetRange")
g_dnpt.loger       := new Loger(g_.cfg.injector_dir "\Input.log")
InitDInputEmu(byref cfg, _unicode = true)
{
if (r:=XinPutGetState(1))
{
logerr("NO xinput gamepad " r)
return
}
cfg       := parsecfg(cfg)
cfg.layer := True
dllcall("peixoto.dll\InitDInputHooks", ptr, DINPT_HOOKS[])
if (cfg.layer)
dllcall("peixoto.dll\InitDInputLayer")
g_dnpt.loger.log(GetDirectInput(0))
g_dnpt.loger.log(GetDirectInput(1))
g_dnpt.loger.log(GetDirectInput7(0))
g_dnpt.loger.log(GetDirectInput7(1))
g_dnpt.loger.log(GetDirectInput8(0))
g_dnpt.loger.log(GetDirectInput8(1))
g_dnpt.loger.log(IDirectInputA.compare([IDirectInputW, IDirectInput7A, IDirectInput7W]))
g_dnpt.loger.log(IDirectInputDeviceA.compare([IDirectInputDeviceW, IDirectInputDevice7A, IDirectInputDevice7W]))
g_dnpt.loger.log(IDirectInput8A.compare([IDirectInput8W]))
g_dnpt.loger.log(IDirectInputDevice8A.compare([IDirectInputDevice8W]))
g_dnpt.loger.log(IDirectInputDevice8A.dllhook("GetDeviceState", "DinputDevice8GetState"))
g_dnpt.loger.log(IDirectInputDeviceA.dllhook("GetDeviceState", "DinputDeviceGetState"))
g_dnpt.loger.log(IDirectInputDevice8A.dllhook("SetProperty", "DinputDevice8SetProperty"))
g_dnpt.loger.log(IDirectInputDeviceA.dllhook("SetProperty", "DinputDeviceSetProperty"))
g_dnpt.loger.log(IDirectInputDevice8A.dllhook("GetCapabilities", "Di8GetDvcCaps"))
g_dnpt.loger.log(IDirectInputDeviceA.dllhook("GetCapabilities", "DiGetDvcCaps"))
g_dnpt.loger.log(IDirectInputDevice8A.dllhook("EnumObjects", "DiEnumObjects8Hook"))
g_dnpt.loger.log(IDirectInputDeviceA.dllhook("EnumObjects", "DiEnumObjectsHook"))
g_dnpt.loger.log(IDirectInputDevice8A.dllhook("SetDataFormat", "DiDcvSetDataFormat"))
g_dnpt.loger.log(IDirectInputDeviceA.dllhook("SetDataFormat", "DiDcvSetDataFormat"))
g_dnpt.loger.log(IDirectInputDevice8A.dllhook("GetDeviceData", "DinputDeviceGetData"))
g_dnpt.loger.log(IDirectInputDeviceA.dllhook("GetDeviceData", "DinputDeviceGetData"))
DINPT_HOOKS.GtCps        := IDirectInputDeviceA.GetCapabilities
DINPT_HOOKS.GtCps8       := IDirectInputDevice8A.GetCapabilities
DINPT_HOOKS.GtStt        := IDirectInputDeviceA.GetDeviceState
DINPT_HOOKS.GtStt8       := IDirectInputDevice8A.GetDeviceState
DINPT_HOOKS.StPrp        := IDirectInputDeviceA.SetProperty
DINPT_HOOKS.StPrp8       := IDirectInputDevice8A.SetProperty
DINPT_HOOKS.EnumObjcs    := IDirectInputDeviceA.EnumObjects
DINPT_HOOKS.EnumObjcs8   := IDirectInputDevice8A.EnumObjects
DINPT_HOOKS.SetDataFmt   := IDirectInputDeviceA.SetDataFormat
DINPT_HOOKS.SetDataFmt8  := IDirectInputDevice8A.SetDataFormat
DINPT_HOOKS.GetData      := IDirectInputDeviceA.GetDeviceData
DINPT_HOOKS.GetData8     := IDirectInputDevice8A.GetDeviceData
if (cfg.layer)
{
g_dnpt.loger.log(IDirectInputDevice8W.dllhook("GetDeviceState", "DinputDevice8GetStateW"))
g_dnpt.loger.log(IDirectInputDeviceW.dllhook("GetDeviceState", "DinputDeviceGetStateW"))
g_dnpt.loger.log(IDirectInputDevice8W.dllhook("SetProperty", "DinputDevice8SetPropertyW"))
g_dnpt.loger.log(IDirectInputDeviceW.dllhook("SetProperty", "DinputDeviceSetPropertyW"))
g_dnpt.loger.log(IDirectInputDevice8W.dllhook("GetCapabilities", "Di8GetDvcCapsW"))
g_dnpt.loger.log(IDirectInputDeviceW.dllhook("GetCapabilities", "DiGetDvcCapsW"))
g_dnpt.loger.log(IDirectInputDevice8W.dllhook("EnumObjects", "DiEnumObjects8WHook"))
g_dnpt.loger.log(IDirectInputDeviceW.dllhook("EnumObjects", "DiEnumObjectsWHook"))
g_dnpt.loger.log(IDirectInputDevice8W.dllhook("SetDataFormat", "DiDcvSetDataFormat"))
g_dnpt.loger.log(IDirectInputDeviceW.dllhook("SetDataFormat", "DiDcvSetDataFormat"))
g_dnpt.loger.log(IDirectInputDevice8W.dllhook("GetDeviceData", "DinputDeviceGetData"))
g_dnpt.loger.log(IDirectInputDeviceW.dllhook("GetDeviceData", "DinputDeviceGetData"))
DINPT_HOOKS.GtCpsW       := IDirectInputDeviceW.GetCapabilities
DINPT_HOOKS.GtCps8W      := IDirectInputDevice8W.GetCapabilities
DINPT_HOOKS.GtSttW       := IDirectInputDeviceW.GetDeviceState
DINPT_HOOKS.GtStt8W      := IDirectInputDevice8W.GetDeviceState
DINPT_HOOKS.StPrpW       := IDirectInputDeviceW.SetProperty
DINPT_HOOKS.StPrp8W      := IDirectInputDevice8W.SetProperty
DINPT_HOOKS.EnumObjcsW   := IDirectInputDeviceW.EnumObjects
DINPT_HOOKS.EnumObjcs8W  := IDirectInputDevice8W.EnumObjects
DINPT_HOOKS.SetDataFmtW  := IDirectInputDeviceW.SetDataFormat
DINPT_HOOKS.SetDataFmt8W := IDirectInputDevice8W.SetDataFormat
DINPT_HOOKS.GetDataW     := IDirectInputDeviceW.GetDeviceData
DINPT_HOOKS.GetData8W    := IDirectInputDevice8W.GetDeviceData
}
DINPT_HOOKS.GtCpsW        := IDirectInputDeviceA.GetCapabilities
DINPT_HOOKS.GtCps8W       := IDirectInputDevice8A.GetCapabilities
DINPT_HOOKS.GtSttW        := IDirectInputDeviceA.GetDeviceState
DINPT_HOOKS.GtStt8W       := IDirectInputDevice8A.GetDeviceState
DINPT_HOOKS.StPrpW        := IDirectInputDeviceA.SetProperty
DINPT_HOOKS.StPrp8W       := IDirectInputDevice8A.SetProperty
DINPT_HOOKS.EnumObjcsW    := IDirectInputDeviceA.EnumObjects
DINPT_HOOKS.EnumObjcs8W   := IDirectInputDevice8A.EnumObjects
DINPT_HOOKS.SetDataFmtW   := IDirectInputDeviceA.SetDataFormat
DINPT_HOOKS.SetDataFmt8W  := IDirectInputDevice8A.SetDataFormat
DINPT_HOOKS.GetDataW      := IDirectInputDeviceA.GetDeviceData
DINPT_HOOKS.GetData8W     := IDirectInputDevice8A.GetDeviceData
mds              := strsplit(cfg.mds, ",")
ls_mode          := mds[17]
dp_mode          := mds[1] & 0xF
DINPT_HOOKS.flag := ls_mode | (dp_mode << 4)
if cfg.rs
DINPT_HOOKS.flag |= (cfg.rs << 8)
g_dnpt.loger.log("flags " DINPT_HOOKS.flag)
buts             := strsplit(cfg.a, ",")
for k, v in strsplit(cfg.mds, ",")
{
if (k<5)
continue
else if (k>16)
break
if (v=3)
{
DINPT_HOOKS.buts[k-4]     := strsplit(buts[k], "Gamepad ")[2]
} else DINPT_HOOKS.buts[k-4]  := 0
g_dnpt.loger.log("Button " k " " DINPT_HOOKS.buts[k-4])
}
(cfg.dz = 0) ?: cfg.dz := 0.25
g_dnpt.dead    := cfg.dz * 32768
g_dnpt.dead_m  := g_dnpt.dead*(-1)
DINPT_HOOKS.DZone   := g_dnpt.dead
DINPT_HOOKS.NgDZone := g_dnpt.dead_m
if (cfg.ff)
{
g_dnpt.loger.log(IDirectInput8W.Hook("EnumDevices", "IDirectInput8W_EnumDevices") )
g_dnpt.loger.log(IDirectInput8A.Hook("EnumDevices", "IDirectInput8A_EnumDevices") )
g_dnpt.loger.log(IDirectInputA.Hook("EnumDevices", "IDirectInputA_EnumDevices") )
g_dnpt.loger.log(IDirectInputW.Hook("EnumDevices", "IDirectInputW_EnumDevices") )
g_dnpt.loger.log(IDirectInputDevice2A.Hook("EnumEffects", "DInputEnumeffectsA"))
g_dnpt.loger.log(IDirectInputDevice2W.Hook("EnumEffects", "DInputEnumeffectsW"))
g_dnpt.loger.log(IDirectInputDevice8A.Hook("EnumEffects", "DInputEnumeffectsA"))
g_dnpt.loger.log(IDirectInputDevice8W.Hook("EnumEffects", "DInputEnumeffectsW"))
g_dnpt.loger.log(IDirectInputDevice2A.dllHook("CreateEffect", "DinputCreateEffectHook"))
g_dnpt.loger.log(IDirectInputDevice8A.dllHook("CreateEffect", "DinputCreateEffectHook"))
g_dnpt.loger.log(IDirectInputDevice2A.dllHook("GetEffectInfo", "DiGetEffectInfoA"))
g_dnpt.loger.log(IDirectInputDevice8A.dllHook("GetEffectInfo", "DiGetEffectInfoA"))
if (cfg.layer)
{
g_dnpt.loger.log(IDirectInputDevice2W.dllHook("CreateEffect", "DinputCreateEffectHook"))
g_dnpt.loger.log(IDirectInputDevice8W.dllHook("CreateEffect", "DinputCreateEffectHook"))
g_dnpt.loger.log(IDirectInputDevice2W.dllHook("GetEffectInfo", "DiGetEffectInfoW"))
g_dnpt.loger.log(IDirectInputDevice8W.dllHook("GetEffectInfo", "DiGetEffectInfoW"))
}
DINPT_HOOKS.CrtFx := IDirectInputDevice8A.CreateEffect
}
VarSetCapacity(zero, 32, 0)
g_dnpt.pz := &zero
return
}
DInputEnumeffectsA(p1, p2, p3, p4)
{
g_dnpt.loger.log("DInputEnumeffectsA")
return dllcall("peixoto.dll\DIEnumEffectsA", ptr, p2, ptr, p3, uint, p4)
}
DInputEnumeffectsW(p1, p2, p3, p4)
{
g_dnpt.loger.log("DInputEnumeffectsW")
return dllcall("peixoto.dll\DIEnumEffectsW", ptr, p2, ptr, p3, uint, p4)
}
IDirectInputDeviceA_SetProperty(p1, p2, p3)
{
r := dllcall(IDirectInputDeviceA.SetProperty, uint, p1, uint, p2, uint, p3)
logerr("IDirectInputDeviceA::SetProperty " r " " p2)
return 0
}
IDirectInputDeviceA_GetProperty(p1, p2, p3)
{
r := dllcall(IDirectInputDeviceA.GetProperty, uint, p1, uint, p2, uint, p3)
logerr("IDirectInputDeviceA::GetProperty " r " " p2)
return r
}
IDirectInputDeviceA_SetDataFormat(p1, p2)
{
r := dllcall(IDirectInputDeviceA.SetDataFormat, uint, p1, uint, p2)
logerr("IDirectInputDeviceA::SetDataFormat " r)
return r
}
IDirectInputDeviceA_SetCooperativeLevel(p1, p2, p3)
{
r := dllcall(IDirectInputDeviceA.SetCooperativeLevel, uint, p1, uint, p2, uint, p3)
logerr("IDirectInputDeviceA::SetCooperativeLevel " r)
return r
}
IDirectInputDeviceA_GetDeviceData(p1, p2, p3, p4, p5)
{
r := dllcall(IDirectInputDeviceA.GetDeviceData, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5)
if (r)
{
logerr("IDirectInputDeviceA::GetDeviceData failed")
dllcall(IDirectInputDeviceA.Acquire, ptr, p1)
}
return 0
}
DiPatchCreateEffect(pDvc, caller)
{
dvc1          := new ComInterfaceWrapper(dinput.IDirectInputDeviceA, pDvc, True)
dvc1.released := True
GUID_FromString(GUID, dinput.IID_IDirectInputDevice2A)
q := dllcall(dvc1.QueryInterface, uint, dvc1.p, uint, &GUID, "uint*", d)
if (q = 0)
{
Dvc := new ComInterfaceWrapper(dinput.IDirectInputDevice2A, d, True)
logerr("IDirectInputDeviceA_Acquire: " Dvc.PatchVTableWithdll("CreateEffect", "DinputCreateEffectHook") )
}
}
IDirectInputDeviceA_Acquire(p1)
{
r := dllcall(IDirectInputDeviceA.Acquire, uint, p1)
if (r = 0)
{
}
return r
}
IDirectInputA_CreateDevice(p1, p2, p3, p4)
{
r := dllcall(IDirectInputA.CreateDevice, uint, p1, uint, p2, uint, p3, uint, p4)
if (r = 0)
{
DiPatchCreateEffect(numget(p3+0, ptr), "IDirectInputA::CreateDevice")
} return 0
}
IDirectInputDeviceA_GetCapabilities(p1, p2)
{
logerr(IDirectInputW.patchVtable("EnumDevices", "IDirectInputW_EnumDevices") )
if ! (r := dllcall(IDirectInputDeviceA.GetCapabilities, uint, p1, uint, p2))
{
DIDEVCAPS[] := p2
if (DIDEVCAPS.dwDevType & DIDEVTYPE_JOYSTICK)
{
if (DIDEVCAPS.dwSize = 44)
{
DIDEVCAPS.dwAxes    := 4
DIDEVCAPS.dwButtons := 12
if (DINPT_HOOKS.CrtFx)
DIDEVCAPS.dwFlags |= DIDC_FORCEFEEDBACK
}
else if (DIDEVCAPS.dwSize = 24)
{
DIDEVCAPS_DX3[]         := p2
DIDEVCAPS_DX3.dwAxes    := 4
DIDEVCAPS_DX3.dwButtons := 12
if (DINPT_HOOKS.CrtFx)
DIDEVCAPS_DX3.dwFlags |= DIDC_FORCEFEEDBACK
}
}
}
return r
}
IDirectInput8A_EnumDevices(p1, p2, p3, p4, p5)
{
g_dnpt.loger.log("IDirectInput8A_EnumDevices " p5&DIEDFL_FORCEFEEDBACK )
p5 &= ~ DIEDFL_FORCEFEEDBACK
return dllcall(IDirectInput8A.EnumDevices, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5)
}
IDirectInput8W_EnumDevices(p1, p2, p3, p4, p5)
{
g_dnpt.loger.log("IDirectInput8W_EnumDevices " p5&DIEDFL_FORCEFEEDBACK )
p5 &= ~ DIEDFL_FORCEFEEDBACK
return dllcall(IDirectInput8W.EnumDevices, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5)
}
IDirectInputA_EnumDevices(p1, p2, p3, p4, p5)
{
g_dnpt.loger.log("IDirectInputA_EnumDevices " p5&DIEDFL_FORCEFEEDBACK )
p5 &= ~ DIEDFL_FORCEFEEDBACK
return dllcall(IDirectInputA.EnumDevices, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5)
}
IDirectInputW_EnumDevices(p1, p2, p3, p4, p5)
{
g_dnpt.loger.log("IDirectInputW_EnumDevices " p5&DIEDFL_FORCEFEEDBACK )
p5 &= ~ DIEDFL_FORCEFEEDBACK
return dllcall(IDirectInputW.EnumDevices, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5)
}
(parsecfg(g_.cfg.J2K).u) ? InitDInputEmu(g_.cfg.J2K)


; <COMPILER: v1.1.15.03>
Global d3DX9core := {}
d3DX9core.IID_ID3DXBuffer := "{8ba5fb08-5195-40e2-ac58-0d989c3a0102}"
d3DX9core.IID_ID3DXSprite := "{ba0b762d-7d28-43ec-b9dc-2f84443b0614}"
d3DX9core.IID_ID3DXFont := "{d79dbb70-5f21-4d36-bbc2-ff525c213cdc}"
d3DX9core.IID_ID3DXRenderToSurface := "{6985f346-2c3d-43b3-be8b-daae8a03d894}"
d3DX9core.IID_ID3DXRenderToEnvMap := "{313f1b4b-c7b0-4fa2-9d9d-8d380b64385e}"
d3DX9core.IID_ID3DXLine := "{d379ba7f-9042-4ac4-9f5e-58192a4c6bd8}"
d3DX9core.ID3DXBuffer := {}
d3DX9core.ID3DXBuffer.name := "ID3DXBuffer"
d3DX9core.ID3DXBuffer.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
    STDMETHOD_(LPVOID, GetBufferPointer)(THIS) PURE;
    STDMETHOD_(DWORD, GetBufferSize)(THIS) PURE;
"
)
d3DX9core.ID3DXSprite := {}
d3DX9core.ID3DXSprite.name := "ID3DXSprite"
d3DX9core.ID3DXSprite.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ LPDIRECT3DDEVICE9* ppDevice) PURE;
    STDMETHOD(GetTransform)(THIS_ D3DXMATRIX *pTransform) PURE;
    STDMETHOD(SetTransform)(THIS_ CONST D3DXMATRIX *pTransform) PURE;
    STDMETHOD(SetWorldViewRH)(THIS_ CONST D3DXMATRIX *pWorld, CONST D3DXMATRIX *pView) PURE;
    STDMETHOD(SetWorldViewLH)(THIS_ CONST D3DXMATRIX *pWorld, CONST D3DXMATRIX *pView) PURE;
    STDMETHOD(Begin)(THIS_ DWORD Flags) PURE;
    STDMETHOD(Draw)(THIS_ LPDIRECT3DTEXTURE9 pTexture, CONST RECT *pSrcRect, CONST D3DXVECTOR3 *pCenter, CONST D3DXVECTOR3 *pPosition, D3DCOLOR Color) PURE;
    STDMETHOD(Flush)(THIS) PURE;
    STDMETHOD(End)(THIS) PURE;
    STDMETHOD(OnLostDevice)(THIS) PURE;
    STDMETHOD(OnResetDevice)(THIS) PURE;
"
)
d3DX9core.ID3DXFont := {}
d3DX9core.ID3DXFont.name := "ID3DXFont"
d3DX9core.ID3DXFont.def :=
( 
"
 return PreloadTextW(pString, Count);"
)
d3DX9core.ID3DXRenderToSurface := {}
d3DX9core.ID3DXRenderToSurface.name := "ID3DXRenderToSurface"
d3DX9core.ID3DXRenderToSurface.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ LPDIRECT3DDEVICE9* ppDevice) PURE;
    STDMETHOD(GetDesc)(THIS_ D3DXRTS_DESC* pDesc) PURE;
    STDMETHOD(BeginScene)(THIS_ LPDIRECT3DSURFACE9 pSurface, CONST D3DVIEWPORT9* pViewport) PURE;
    STDMETHOD(EndScene)(THIS_ DWORD MipFilter) PURE;
    STDMETHOD(OnLostDevice)(THIS) PURE;
    STDMETHOD(OnResetDevice)(THIS) PURE;
"
)
d3DX9core.ID3DXRenderToEnvMap := {}
d3DX9core.ID3DXRenderToEnvMap.name := "ID3DXRenderToEnvMap"
d3DX9core.ID3DXRenderToEnvMap.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ LPDIRECT3DDEVICE9* ppDevice) PURE;
    STDMETHOD(GetDesc)(THIS_ D3DXRTE_DESC* pDesc) PURE;
    STDMETHOD(BeginCube)(THIS_         LPDIRECT3DCUBETEXTURE9 pCubeTex) PURE;
    STDMETHOD(BeginSphere)(THIS_        LPDIRECT3DTEXTURE9 pTex) PURE;
    STDMETHOD(BeginHemisphere)(THIS_         LPDIRECT3DTEXTURE9 pTexZPos,        LPDIRECT3DTEXTURE9 pTexZNeg) PURE;
    STDMETHOD(BeginParabolic)(THIS_         LPDIRECT3DTEXTURE9 pTexZPos,        LPDIRECT3DTEXTURE9 pTexZNeg) PURE;
    STDMETHOD(Face)(THIS_ D3DCUBEMAP_FACES Face, DWORD MipFilter) PURE;
    STDMETHOD(End)(THIS_ DWORD MipFilter) PURE;
    STDMETHOD(OnLostDevice)(THIS) PURE;
    STDMETHOD(OnResetDevice)(THIS) PURE;
"
)
d3DX9core.ID3DXLine := {}
d3DX9core.ID3DXLine.name := "ID3DXLine"
d3DX9core.ID3DXLine.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ LPDIRECT3DDEVICE9* ppDevice) PURE;
    STDMETHOD(Begin)(THIS) PURE;
    STDMETHOD(Draw)(THIS_ CONST D3DXVECTOR2 *pVertexList,        DWORD dwVertexListCount, D3DCOLOR Color) PURE;
    STDMETHOD(DrawTransform)(THIS_ CONST D3DXVECTOR3 *pVertexList,        DWORD dwVertexListCount, CONST D3DXMATRIX* pTransform,         D3DCOLOR Color) PURE;
    STDMETHOD(SetPattern)(THIS_ DWORD dwPattern) PURE;
    STDMETHOD_(DWORD, GetPattern)(THIS) PURE;
    STDMETHOD(SetPatternScale)(THIS_ FLOAT fPatternScale) PURE;
    STDMETHOD_(FLOAT, GetPatternScale)(THIS) PURE;
    STDMETHOD(SetWidth)(THIS_ FLOAT fWidth) PURE;
    STDMETHOD_(FLOAT, GetWidth)(THIS) PURE;
    STDMETHOD(SetAntialias)(THIS_ BOOL bAntialias) PURE;
    STDMETHOD_(BOOL, GetAntialias)(THIS) PURE;
    STDMETHOD(SetGLLines)(THIS_ BOOL bGLLines) PURE;
    STDMETHOD_(BOOL, GetGLLines)(THIS) PURE;
    STDMETHOD(End)(THIS) PURE;
    STDMETHOD(OnLostDevice)(THIS) PURE;
    STDMETHOD(OnResetDevice)(THIS) PURE;
"
)
Global D3DX_SDK_VERSION := 34
Global D3DX_VERSION := 2306
d3DX9core.err := {}
global D3DX_FILTER_NONE :=             (1 << 0)
global D3DX_FILTER_POINT :=            (2 << 0)
global D3DX_FILTER_LINEAR :=           (3 << 0)
global D3DX_FILTER_TRIANGLE :=         (4 << 0)
global D3DX_FILTER_BOX  :=             (5 << 0)
global D3DX_FILTER_MIRROR_U :=         (1 << 16)
global D3DX_FILTER_MIRROR_V :=         (2 << 16)
global D3DX_FILTER_MIRROR_W :=         (4 << 16)
global D3DX_FILTER_MIRROR :=           (7 << 16)
global D3DX_FILTER_DITHER :=           (1 << 19)
global D3DX_FILTER_DITHER_DIFFUSION := (2 << 19)
global D3DX_FILTER_SRGB_IN :=          (1 << 21)
global D3DX_FILTER_SRGB_OUT :=         (2 << 21)
global D3DX_FILTER_SRGB  :=            (3 << 21)
d3DX9core.ID3DXFont:= {}
d3DX9core.ID3DXFont.name := "ID3DXFont"
d3DX9core.ID3DXFont.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ LPDIRECT3DDEVICE9 *ppDevice) PURE;
    STDMETHOD(GetDescA)(THIS_ D3DXFONT_DESCA *pDesc) PURE;
    STDMETHOD(GetDescW)(THIS_ D3DXFONT_DESCW *pDesc) PURE;
    STDMETHOD_(BOOL, GetTextMetricsA)(THIS_ TEXTMETRICA *pTextMetrics) PURE;
    STDMETHOD_(BOOL, GetTextMetricsW)(THIS_ TEXTMETRICW *pTextMetrics) PURE;
    STDMETHOD_(HDC, GetDC)(THIS) PURE;
    STDMETHOD(GetGlyphData)(THIS_ UINT Glyph, LPDIRECT3DTEXTURE9 *ppTexture, RECT *pBlackBox, POINT *pCellInc) PURE;
    STDMETHOD(PreloadCharacters)(THIS_ UINT First, UINT Last) PURE;
    STDMETHOD(PreloadGlyphs)(THIS_ UINT First, UINT Last) PURE;
    STDMETHOD(PreloadTextA)(THIS_ LPCSTR pString, INT Count) PURE;
    STDMETHOD(PreloadTextW)(THIS_ LPCWSTR pString, INT Count) PURE;
    STDMETHOD_(INT, DrawTextA)(THIS_ LPD3DXSPRITE pSprite, LPCSTR pString, INT Count, LPRECT pRect, DWORD Format, D3DCOLOR Color) PURE;
    STDMETHOD_(INT, DrawTextW)(THIS_ LPD3DXSPRITE pSprite, LPCWSTR pString, INT Count, LPRECT pRect, DWORD Format, D3DCOLOR Color) PURE;
    STDMETHOD(OnLostDevice)(THIS) PURE;
    STDMETHOD(OnResetDevice)(THIS) PURE;
"
)
global D3DX9Mesh := {}
D3DX9Mesh.ID3DXBuffer := {}
D3DX9Mesh.ID3DXBuffer.name := "ID3DXBuffer"
D3DX9Mesh.ID3DXBuffer.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
    STDMETHOD(GetBufferPointer)(THIS) PURE;
    STDMETHOD(GetBufferSize)(THIS) PURE;
"    
)
global ID3DXBuffer:=0
class D3DX9 {
__new(dll = "d3dx9_43.dll")
{
f := IsFunc("D3D9IsLinux") ? Func("D3D9IsLinux") : Func("D3D8IsLinux")
if (f.call()){
arch := A_PtrSize = 8 ? "x64" : "x86"
dll  := g_.cfg.injector_dir . "\D3DCompilers\" . arch . "\d3dx9_43.dll"
}
logerr(dll . " loaded")
this.h_dll := ""
this.pD3DXLoadSurfaceFromFile := ""
this.pD3DXCreateFont := ""
h_dll := dllcall("GetModuleHandle", str, dll)
h_dll ?: h_dll := dllcall("LoadLibraryW", str, dll)
if not h_dll
return ""
this.h_dll                     := h_dll
this.D3DXDisassembleShader     := dllcall("GetProcAddress", uint, this.h_dll, astr, "D3DXDisassembleShader")
this.D3DXAssembleShader        := dllcall("GetProcAddress", uint, this.h_dll, astr, "D3DXAssembleShader")
this.pD3DXLoadSurfaceFromFile  := dllcall("GetProcAddress", uint, this.h_dll, astr, "D3DXLoadSurfaceFromFileW")
this.pD3DXCreateFont           := dllcall("GetProcAddress", uint, this.h_dll, astr, "D3DXCreateFontW")
this.D3DXCompileShader         := dllcall("GetProcAddress", uint, this.h_dll, astr, "D3DXCompileShader")
this.D3DXCompileShaderFromFile := dllcall("GetProcAddress", uint, this.h_dll, astr, "D3DXCompileShaderFromFileA")
this.D3DXGetPixelShaderProfile := dllcall("GetProcAddress", uint, this.h_dll, astr, "D3DXGetPixelShaderProfile")
this.D3DXCreateBuffer          := dllcall("GetProcAddress", uint, this.h_dll, astr, "D3DXCreateBuffer")
this.D3DXCreateTextureFromFile := dllcall("GetProcAddress", uint, this.h_dll, astr, "D3DXCreateTextureFromFileW")
this.rect                      := Struct("LONG left; LONG top; LONG right; LONG bottom;")
this.POINT                     := Struct("LONG x; LONG y;")
}
CreateTextureFromFile(pDevice, file, byref pTexture){
return dllcall(this.D3DXCreateTextureFromFile
,uint, pdevice, str, file, "uint*", pTexture)
}
LoadSurfaceFromFile(pSurface, file, filter = 1)
{
RETURN dllcall(this.pD3DXLoadSurfaceFromFile
, uint, pSurface
, uint, pDestPalette
, uint, 0
, str, file
, uint, 0
, uint, filter
, uint, ColorKey
, uint, pSrcInfo, uint)
}
CreateFontW(pDevice, font = "Verdana", italic = False)
{
pID3DXFont := 0
r := dllcall(this.pD3DXCreateFont
, uint, pDevice
, int, 0
, int, 0
, int, 600
, uint, 0
, uint, italic
, uint, 0
, uint, 0
, uint, 0
, uint, 0
, str, font
, "uint*", pID3DXFont, uint)
if r
return	r
fnt := new ComInterfaceWrapper(d3DX9core.ID3DXFont, pID3DXFont, True)
return fnt
}
DrawText(byref fnt, txt, clr = 0xFFFFFFFF, rct = "")
{
if not isobject(fnt)
return
if not rct
rct := "0|0|640|480"
rct_ := strsplit(rct, "|")
this.rect.left := rct_[1]
this.rect.top := rct_[2]
this.rect.right := rct_[3]
this.rect.bottom := rct_[4]
r := dllcall(fnt.DrawTextW, uint, fnt.p
, uint, 0
, str,  txt
, int, -1
, uint, this.RECT[]
, uint, 256
, uint, clr
, uint)
return r
}
HLSLtoDXBC(hlsl, main, byref blob)
{
r := dllcall(this.D3DXCompileShader, astr, hlsl, uint, strlen(hlsl), uint, 0, uint, 0
, astr, main, astr, "ps_3_0", uint, 0, "ptr*", blob
, "uint*", err:=0, uint, 0, uint)
if r
{
_ptr := dllcall(numget(numget(err+0, "ptr")+A_PtrSize*3, "ptr"), uint, err)
size := dllcall(numget(numget(err+0, "ptr")+A_PtrSize*4, "ptr"), uint, err)
rr := strget(_ptr+0, size, "CP0")
dllcall(numget(numget(err+0, "ptr")+A_PtrSize*2, "ptr"), uint, err)
return "compilation failed " rr
}
}
Asm2DXBC(asm, byref blob)
{
r := dllcall(this.D3DXAssembleShader, astr, asm, uint, strlen(asm), uint, 0
, uint, 0, uint, 0, "ptr*", blob, "uint*"
, err:=0, uint, 0, uint)
if r
{
_ptr := dllcall(numget(numget(err+0, "ptr")+A_PtrSize*3, "ptr"), uint, err)
size := dllcall(numget(numget(err+0, "ptr")+A_PtrSize*4, "ptr"), uint, err)
rr := strget(_ptr+0, size, "CP0")
dllcall(numget(numget(err+0, "ptr")+A_PtrSize*2, "ptr"), uint, err)
return "compilation failed " rr
}
}
CompileShaderFromFile(pDevice, file, entrypoint, byref pShader)
{
pShader:=0, pError:=0
r := dllcall(this.D3DXCompileShaderFromFile
, astr, file
, uint, 0
, uint, 0
, astr, entrypoint
, astr, "ps_3_0"
, uint, 0
, "uint*", pShaderBytecode
, "uint*", pError
, uint, 0, uint)
use := r ? pError : pShaderBytecode
_ptr := dllcall(numget(numget(use+0, "ptr")+A_PtrSize*3, "ptr"), uint, use)
size := dllcall(numget(numget(use+0, "ptr")+A_PtrSize*4, "ptr"), uint, use)
if r
{
rr := strget(_ptr+0, size, "CP0")
dllcall(numget(numget(use+0, "ptr")+A_PtrSize*2, "ptr"), uint, use)
return "compilation failed " rr
}
else
{
r := dllcall(IDirect3DDevice9.CreatePixelShader, uint, pDevice, uint, _ptr, "uint*", pShader)
dllcall(numget(numget(use+0, "ptr")+A_PtrSize*2, "ptr"), uint, use)
return r
}
}
CompileShader(pDevice, byref Shader, entrypoint, byref pShader)
{
pShader:=0, pError:=0, pShaderByteCode:=0
r := dllcall(this.D3DXCompileShader
, astr, Shader
, UINT, strlen(Shader)
, uint, 0
, uint, 0
, astr, entrypoint
, astr, "ps_3_0"
, uint, 0
, "uint*", pShaderByteCode
, "uint*", pError
, uint, 0, uint)
use := r ? pError : pShaderBytecode
_ptr := dllcall(numget(numget(use+0, "ptr")+A_PtrSize*3, "ptr"), uint, use)
size := dllcall(numget(numget(use+0, "ptr")+A_PtrSize*4, "ptr"), uint, use)
if r
{
rr := strget(_ptr+0, size, "CP0")
dllcall(numget(numget(use+0, "ptr")+A_PtrSize*2, "ptr"), uint, use)
return "compilation failed " rr
}
else
{
r := dllcall(IDirect3DDevice9.CreatePixelShader, uint, pDevice, uint, _ptr, "uint*", pShader)
dllcall(numget(numget(use+0, "ptr")+A_PtrSize*2, "ptr"), uint, use)
return r
}
}
AssembleShader(pDevice, byref Shader, byref pShader)
{
pShader:=0, pError:=0, pShaderByteCode:=0
printl("Assembling")
r := dllcall(this.D3DXAssembleShader
, astr, Shader
, UINT, strlen(Shader)
, uint, 0
, uint, 0
, uint, 0
, "uint*", pShaderBytecode
, "uint*", pError
, uint, 0, uint)
use := r ? pError : pShaderBytecode
_ptr := dllcall(numget(numget(use+0, "ptr")+A_PtrSize*3, "ptr"), uint, use)
size := dllcall(numget(numget(use+0, "ptr")+A_PtrSize*4, "ptr"), uint, use)
if r
{
rr := strget(_ptr+0, size, "CP0")
dllcall(numget(numget(use+0, "ptr")+A_PtrSize*2, "ptr"), uint, use)
return "compilation failed " rr
}
else
{
r := dllcall(IDirect3DDevice9.CreatePixelShader, uint, pDevice, uint, _ptr, "uint*", pShader)
dllcall(numget(numget(use+0, "ptr")+A_PtrSize*2, "ptr"), uint, use)
return r
}
}
DisassembleShader(pShaderData)
{
pBuffer := 0
if (r := dllcall(this.D3DXDisassembleShader, uint, pShaderData, uint, 0, uint, 0, "uint*", pBuffer))
return r
_ptr := dllcall(numget(numget(pBuffer+0, "ptr")+A_PtrSize*3, "ptr"), uint, pBuffer)
size := dllcall(numget(numget(pBuffer+0, "ptr")+A_PtrSize*4, "ptr"), uint, pBuffer)
rr := strget(_ptr+0, size, "UTF-8")
pBuffer ? dllcall(numget(numget(use+0, "ptr")+A_PtrSize*2, "ptr"), uint, pBuffer)
return rr
}
}

; <COMPILER: v1.1.15.03>
Global d3D9 := {}
d3D9.IID_IDirect3D9 := "{81bdcbca-64d4-426d-ae8d-ad0147f4275c}"
d3D9.IID_IDirect3DDevice9 := "{d0223b96-bf7a-43fd-92bd-a43b0d82b9eb}"
d3D9.IID_IDirect3DResource9 := "{5eec05d-8f7d-4362-b999-d1baf357c704}"
d3D9.IID_IDirect3DBaseTexture9 := "{580ca87e-1d3c-4d54-991d-b7d3e3c298ce}"
d3D9.IID_IDirect3DTexture9 := "{85c31227-3de5-4f00-9b3a-f11ac38c18b5}"
d3D9.IID_IDirect3DCubeTexture9 := "{fff32f81-d953-473a-9223-93d652aba93f}"
d3D9.IID_IDirect3DVolumeTexture9 := "{2518526c-e789-4111-a7b9-47ef328d13e6}"
d3D9.IID_IDirect3DVertexBuffer9 := "{b64bb1b5-fd70-4df6-bf91-19d0a12455e3}"
d3D9.IID_IDirect3DIndexBuffer9 := "{7c9dd65e-d3f7-4529-acee-785830acde35}"
d3D9.IID_IDirect3DSurface9 := "{cfbaf3a-9ff6-429a-99b3-a2796af8b89b}"
d3D9.IID_IDirect3DVolume9 := "{24f416e6-1f67-4aa7-b88e-d33f6f3128a1}"
d3D9.IID_IDirect3DSwapChain9 := "{794950f2-adfc-458a-905e-10a10b0b503b}"
d3D9.IID_IDirect3DVertexDeclaration9 := "{dd13c59c-36fa-4098-a8fb-c7ed39dc8546}"
d3D9.IID_IDirect3DVertexShader9 := "{efc5557e-6265-4613-8a94-43857889eb36}"
d3D9.IID_IDirect3DPixelShader9 := "{6d3bdbdc-5b02-4415-b852-ce5e8bccb289}"
d3D9.IID_IDirect3DStateBlock9 := "{b07c4fe5-310d-4ba8-a23c-4f0f206f218b}"
d3D9.IID_IDirect3DQuery9 := "{d9771460-a695-4f26-bbd3-27b840b541cc}"
d3D9.IID_HelperName := "{e4a36723-fdfe-4b22-b146-3c04c07f4cc8}"
d3D9.IID_IDirect3D9Ex := "{02177241-69FC-400C-8FF1-93A44DF6861D}"
d3D9.IID_IDirect3DDevice9Ex := "{b18b10ce-2649-405a-870f-95f777d4313a}"
d3D9.IID_IDirect3DSwapChain9Ex := "{91886caf-1c3d-4d2e-a0ab-3e4c7d8d3303}"
d3D9.IDirect3D9 := {}
d3D9.IDirect3D9.name := "IDirect3D9"
d3D9.IDirect3D9.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(RegisterSoftwareDevice)(THIS_ void* pInitializeFunction) PURE;
    STDMETHOD_(UINT, GetAdapterCount)(THIS) PURE;
    STDMETHOD(GetAdapterIdentifier)(THIS_ UINT Adapter,DWORD Flags,D3DADAPTER_IDENTIFIER9* pIdentifier) PURE;
    STDMETHOD_(UINT, GetAdapterModeCount)(THIS_ UINT Adapter,D3DFORMAT Format) PURE;
    STDMETHOD(EnumAdapterModes)(THIS_ UINT Adapter,D3DFORMAT Format,UINT Mode,D3DDISPLAYMODE* pMode) PURE;
    STDMETHOD(GetAdapterDisplayMode)(THIS_ UINT Adapter,D3DDISPLAYMODE* pMode) PURE;
    STDMETHOD(CheckDeviceType)(THIS_ UINT Adapter,D3DDEVTYPE DevType,D3DFORMAT AdapterFormat,D3DFORMAT BackBufferFormat,BOOL bWindowed) PURE;
    STDMETHOD(CheckDeviceFormat)(THIS_ UINT Adapter,D3DDEVTYPE DeviceType,D3DFORMAT AdapterFormat,DWORD Usage,D3DRESOURCETYPE RType,D3DFORMAT CheckFormat) PURE;
    STDMETHOD(CheckDeviceMultiSampleType)(THIS_ UINT Adapter,D3DDEVTYPE DeviceType,D3DFORMAT SurfaceFormat,BOOL Windowed,D3DMULTISAMPLE_TYPE MultiSampleType,DWORD* pQualityLevels) PURE;
    STDMETHOD(CheckDepthStencilMatch)(THIS_ UINT Adapter,D3DDEVTYPE DeviceType,D3DFORMAT AdapterFormat,D3DFORMAT RenderTargetFormat,D3DFORMAT DepthStencilFormat) PURE;
    STDMETHOD(CheckDeviceFormatConversion)(THIS_ UINT Adapter,D3DDEVTYPE DeviceType,D3DFORMAT SourceFormat,D3DFORMAT TargetFormat) PURE;
    STDMETHOD(GetDeviceCaps)(THIS_ UINT Adapter,D3DDEVTYPE DeviceType,D3DCAPS9* pCaps) PURE;
    STDMETHOD_(HMONITOR, GetAdapterMonitor)(THIS_ UINT Adapter) PURE;
    STDMETHOD(CreateDevice)(THIS_ UINT Adapter,D3DDEVTYPE DeviceType,HWND hFocusWindow,DWORD BehaviorFlags,D3DPRESENT_PARAMETERS* pPresentationParameters,IDirect3DDevice9** ppReturnedDeviceInterface) PURE;
        LPCWSTR Version;
"
)
d3D9.IDirect3DDevice9 := {}
d3D9.IDirect3DDevice9.name := "IDirect3DDevice9"
d3D9.IDirect3DDevice9.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(TestCooperativeLevel)(THIS) PURE;
    STDMETHOD_(UINT, GetAvailableTextureMem)(THIS) PURE;
    STDMETHOD(EvictManagedResources)(THIS) PURE;
    STDMETHOD(GetDirect3D)(THIS_ IDirect3D9** ppD3D9) PURE;
    STDMETHOD(GetDeviceCaps)(THIS_ D3DCAPS9* pCaps) PURE;
    STDMETHOD(GetDisplayMode)(THIS_ UINT iSwapChain,D3DDISPLAYMODE* pMode) PURE;
    STDMETHOD(GetCreationParameters)(THIS_ D3DDEVICE_CREATION_PARAMETERS *pParameters) PURE;
    STDMETHOD(SetCursorProperties)(THIS_ UINT XHotSpot,UINT YHotSpot,IDirect3DSurface9* pCursorBitmap) PURE;
    STDMETHOD_(void, SetCursorPosition)(THIS_ int X,int Y,DWORD Flags) PURE;
    STDMETHOD_(BOOL, ShowCursor)(THIS_ BOOL bShow) PURE;
    STDMETHOD(CreateAdditionalSwapChain)(THIS_ D3DPRESENT_PARAMETERS* pPresentationParameters,IDirect3DSwapChain9** pSwapChain) PURE;
    STDMETHOD(GetSwapChain)(THIS_ UINT iSwapChain,IDirect3DSwapChain9** pSwapChain) PURE;
    STDMETHOD_(UINT, GetNumberOfSwapChains)(THIS) PURE;
    STDMETHOD(Reset)(THIS_ D3DPRESENT_PARAMETERS* pPresentationParameters) PURE;
    STDMETHOD(Present)(THIS_ CONST RECT* pSourceRect,CONST RECT* pDestRect,HWND hDestWindowOverride,CONST RGNDATA* pDirtyRegion) PURE;
    STDMETHOD(GetBackBuffer)(THIS_ UINT iSwapChain,UINT iBackBuffer,D3DBACKBUFFER_TYPE Type,IDirect3DSurface9** ppBackBuffer) PURE;
    STDMETHOD(GetRasterStatus)(THIS_ UINT iSwapChain,D3DRASTER_STATUS* pRasterStatus) PURE;
    STDMETHOD(SetDialogBoxMode)(THIS_ BOOL bEnableDialogs) PURE;
    STDMETHOD_(void, SetGammaRamp)(THIS_ UINT iSwapChain,DWORD Flags,CONST D3DGAMMARAMP* pRamp) PURE;
    STDMETHOD_(void, GetGammaRamp)(THIS_ UINT iSwapChain,D3DGAMMARAMP* pRamp) PURE;
    STDMETHOD(CreateTexture)(THIS_ UINT Width,UINT Height,UINT Levels,DWORD Usage,D3DFORMAT Format,D3DPOOL Pool,IDirect3DTexture9** ppTexture,HANDLE* pSharedHandle) PURE;
    STDMETHOD(CreateVolumeTexture)(THIS_ UINT Width,UINT Height,UINT Depth,UINT Levels,DWORD Usage,D3DFORMAT Format,D3DPOOL Pool,IDirect3DVolumeTexture9** ppVolumeTexture,HANDLE* pSharedHandle) PURE;
    STDMETHOD(CreateCubeTexture)(THIS_ UINT EdgeLength,UINT Levels,DWORD Usage,D3DFORMAT Format,D3DPOOL Pool,IDirect3DCubeTexture9** ppCubeTexture,HANDLE* pSharedHandle) PURE;
    STDMETHOD(CreateVertexBuffer)(THIS_ UINT Length,DWORD Usage,DWORD FVF,D3DPOOL Pool,IDirect3DVertexBuffer9** ppVertexBuffer,HANDLE* pSharedHandle) PURE;
    STDMETHOD(CreateIndexBuffer)(THIS_ UINT Length,DWORD Usage,D3DFORMAT Format,D3DPOOL Pool,IDirect3DIndexBuffer9** ppIndexBuffer,HANDLE* pSharedHandle) PURE;
    STDMETHOD(CreateRenderTarget)(THIS_ UINT Width,UINT Height,D3DFORMAT Format,D3DMULTISAMPLE_TYPE MultiSample,DWORD MultisampleQuality,BOOL Lockable,IDirect3DSurface9** ppSurface,HANDLE* pSharedHandle) PURE;
    STDMETHOD(CreateDepthStencilSurface)(THIS_ UINT Width,UINT Height,D3DFORMAT Format,D3DMULTISAMPLE_TYPE MultiSample,DWORD MultisampleQuality,BOOL Discard,IDirect3DSurface9** ppSurface,HANDLE* pSharedHandle) PURE;
    STDMETHOD(UpdateSurface)(THIS_ IDirect3DSurface9* pSourceSurface,CONST RECT* pSourceRect,IDirect3DSurface9* pDestinationSurface,CONST POINT* pDestPoint) PURE;
    STDMETHOD(UpdateTexture)(THIS_ IDirect3DBaseTexture9* pSourceTexture,IDirect3DBaseTexture9* pDestinationTexture) PURE;
    STDMETHOD(GetRenderTargetData)(THIS_ IDirect3DSurface9* pRenderTarget,IDirect3DSurface9* pDestSurface) PURE;
    STDMETHOD(GetFrontBufferData)(THIS_ UINT iSwapChain,IDirect3DSurface9* pDestSurface) PURE;
    STDMETHOD(StretchRect)(THIS_ IDirect3DSurface9* pSourceSurface,CONST RECT* pSourceRect,IDirect3DSurface9* pDestSurface,CONST RECT* pDestRect,D3DTEXTUREFILTERTYPE Filter) PURE;
    STDMETHOD(ColorFill)(THIS_ IDirect3DSurface9* pSurface,CONST RECT* pRect,D3DCOLOR color) PURE;
    STDMETHOD(CreateOffscreenPlainSurface)(THIS_ UINT Width,UINT Height,D3DFORMAT Format,D3DPOOL Pool,IDirect3DSurface9** ppSurface,HANDLE* pSharedHandle) PURE;
    STDMETHOD(SetRenderTarget)(THIS_ DWORD RenderTargetIndex,IDirect3DSurface9* pRenderTarget) PURE;
    STDMETHOD(GetRenderTarget)(THIS_ DWORD RenderTargetIndex,IDirect3DSurface9** ppRenderTarget) PURE;
    STDMETHOD(SetDepthStencilSurface)(THIS_ IDirect3DSurface9* pNewZStencil) PURE;
    STDMETHOD(GetDepthStencilSurface)(THIS_ IDirect3DSurface9** ppZStencilSurface) PURE;
    STDMETHOD(BeginScene)(THIS) PURE;
    STDMETHOD(EndScene)(THIS) PURE;
    STDMETHOD(Clear)(THIS_ DWORD Count,CONST D3DRECT* pRects,DWORD Flags,D3DCOLOR Color,float Z,DWORD Stencil) PURE;
    STDMETHOD(SetTransform)(THIS_ D3DTRANSFORMSTATETYPE State,CONST D3DMATRIX* pMatrix) PURE;
    STDMETHOD(GetTransform)(THIS_ D3DTRANSFORMSTATETYPE State,D3DMATRIX* pMatrix) PURE;
    STDMETHOD(MultiplyTransform)(THIS_ D3DTRANSFORMSTATETYPE,CONST D3DMATRIX*) PURE;
    STDMETHOD(SetViewport)(THIS_ CONST D3DVIEWPORT9* pViewport) PURE;
    STDMETHOD(GetViewport)(THIS_ D3DVIEWPORT9* pViewport) PURE;
    STDMETHOD(SetMaterial)(THIS_ CONST D3DMATERIAL9* pMaterial) PURE;
    STDMETHOD(GetMaterial)(THIS_ D3DMATERIAL9* pMaterial) PURE;
    STDMETHOD(SetLight)(THIS_ DWORD Index,CONST D3DLIGHT9*) PURE;
    STDMETHOD(GetLight)(THIS_ DWORD Index,D3DLIGHT9*) PURE;
    STDMETHOD(LightEnable)(THIS_ DWORD Index,BOOL Enable) PURE;
    STDMETHOD(GetLightEnable)(THIS_ DWORD Index,BOOL* pEnable) PURE;
    STDMETHOD(SetClipPlane)(THIS_ DWORD Index,CONST float* pPlane) PURE;
    STDMETHOD(GetClipPlane)(THIS_ DWORD Index,float* pPlane) PURE;
    STDMETHOD(SetRenderState)(THIS_ D3DRENDERSTATETYPE State,DWORD Value) PURE;
    STDMETHOD(GetRenderState)(THIS_ D3DRENDERSTATETYPE State,DWORD* pValue) PURE;
    STDMETHOD(CreateStateBlock)(THIS_ D3DSTATEBLOCKTYPE Type,IDirect3DStateBlock9** ppSB) PURE;
    STDMETHOD(BeginStateBlock)(THIS) PURE;
    STDMETHOD(EndStateBlock)(THIS_ IDirect3DStateBlock9** ppSB) PURE;
    STDMETHOD(SetClipStatus)(THIS_ CONST D3DCLIPSTATUS9* pClipStatus) PURE;
    STDMETHOD(GetClipStatus)(THIS_ D3DCLIPSTATUS9* pClipStatus) PURE;
    STDMETHOD(GetTexture)(THIS_ DWORD Stage,IDirect3DBaseTexture9** ppTexture) PURE;
    STDMETHOD(SetTexture)(THIS_ DWORD Stage,IDirect3DBaseTexture9* pTexture) PURE;
    STDMETHOD(GetTextureStageState)(THIS_ DWORD Stage,D3DTEXTURESTAGESTATETYPE Type,DWORD* pValue) PURE;
    STDMETHOD(SetTextureStageState)(THIS_ DWORD Stage,D3DTEXTURESTAGESTATETYPE Type,DWORD Value) PURE;
    STDMETHOD(GetSamplerState)(THIS_ DWORD Sampler,D3DSAMPLERSTATETYPE Type,DWORD* pValue) PURE;
    STDMETHOD(SetSamplerState)(THIS_ DWORD Sampler,D3DSAMPLERSTATETYPE Type,DWORD Value) PURE;
    STDMETHOD(ValidateDevice)(THIS_ DWORD* pNumPasses) PURE;
    STDMETHOD(SetPaletteEntries)(THIS_ UINT PaletteNumber,CONST PALETTEENTRY* pEntries) PURE;
    STDMETHOD(GetPaletteEntries)(THIS_ UINT PaletteNumber,PALETTEENTRY* pEntries) PURE;
    STDMETHOD(SetCurrentTexturePalette)(THIS_ UINT PaletteNumber) PURE;
    STDMETHOD(GetCurrentTexturePalette)(THIS_ UINT *PaletteNumber) PURE;
    STDMETHOD(SetScissorRect)(THIS_ CONST RECT* pRect) PURE;
    STDMETHOD(GetScissorRect)(THIS_ RECT* pRect) PURE;
    STDMETHOD(SetSoftwareVertexProcessing)(THIS_ BOOL bSoftware) PURE;
    STDMETHOD_(BOOL, GetSoftwareVertexProcessing)(THIS) PURE;
    STDMETHOD(SetNPatchMode)(THIS_ float nSegments) PURE;
    STDMETHOD_(float, GetNPatchMode)(THIS) PURE;
    STDMETHOD(DrawPrimitive)(THIS_ D3DPRIMITIVETYPE PrimitiveType,UINT StartVertex,UINT PrimitiveCount) PURE;
    STDMETHOD(DrawIndexedPrimitive)(THIS_ D3DPRIMITIVETYPE,INT BaseVertexIndex,UINT MinVertexIndex,UINT NumVertices,UINT startIndex,UINT primCount) PURE;
    STDMETHOD(DrawPrimitiveUP)(THIS_ D3DPRIMITIVETYPE PrimitiveType,UINT PrimitiveCount,CONST void* pVertexStreamZeroData,UINT VertexStreamZeroStride) PURE;
    STDMETHOD(DrawIndexedPrimitiveUP)(THIS_ D3DPRIMITIVETYPE PrimitiveType,UINT MinVertexIndex,UINT NumVertices,UINT PrimitiveCount,CONST void* pIndexData,D3DFORMAT IndexDataFormat,CONST void* pVertexStreamZeroData,UINT VertexStreamZeroStride) PURE;
    STDMETHOD(ProcessVertices)(THIS_ UINT SrcStartIndex,UINT DestIndex,UINT VertexCount,IDirect3DVertexBuffer9* pDestBuffer,IDirect3DVertexDeclaration9* pVertexDecl,DWORD Flags) PURE;
    STDMETHOD(CreateVertexDeclaration)(THIS_ CONST D3DVERTEXELEMENT9* pVertexElements,IDirect3DVertexDeclaration9** ppDecl) PURE;
    STDMETHOD(SetVertexDeclaration)(THIS_ IDirect3DVertexDeclaration9* pDecl) PURE;
    STDMETHOD(GetVertexDeclaration)(THIS_ IDirect3DVertexDeclaration9** ppDecl) PURE;
    STDMETHOD(SetFVF)(THIS_ DWORD FVF) PURE;
    STDMETHOD(GetFVF)(THIS_ DWORD* pFVF) PURE;
    STDMETHOD(CreateVertexShader)(THIS_ CONST DWORD* pFunction,IDirect3DVertexShader9** ppShader) PURE;
    STDMETHOD(SetVertexShader)(THIS_ IDirect3DVertexShader9* pShader) PURE;
    STDMETHOD(GetVertexShader)(THIS_ IDirect3DVertexShader9** ppShader) PURE;
    STDMETHOD(SetVertexShaderConstantF)(THIS_ UINT StartRegister,CONST float* pConstantData,UINT Vector4fCount) PURE;
    STDMETHOD(GetVertexShaderConstantF)(THIS_ UINT StartRegister,float* pConstantData,UINT Vector4fCount) PURE;
    STDMETHOD(SetVertexShaderConstantI)(THIS_ UINT StartRegister,CONST int* pConstantData,UINT Vector4iCount) PURE;
    STDMETHOD(GetVertexShaderConstantI)(THIS_ UINT StartRegister,int* pConstantData,UINT Vector4iCount) PURE;
    STDMETHOD(SetVertexShaderConstantB)(THIS_ UINT StartRegister,CONST BOOL* pConstantData,UINT  BoolCount) PURE;
    STDMETHOD(GetVertexShaderConstantB)(THIS_ UINT StartRegister,BOOL* pConstantData,UINT BoolCount) PURE;
    STDMETHOD(SetStreamSource)(THIS_ UINT StreamNumber,IDirect3DVertexBuffer9* pStreamData,UINT OffsetInBytes,UINT Stride) PURE;
    STDMETHOD(GetStreamSource)(THIS_ UINT StreamNumber,IDirect3DVertexBuffer9** ppStreamData,UINT* pOffsetInBytes,UINT* pStride) PURE;
    STDMETHOD(SetStreamSourceFreq)(THIS_ UINT StreamNumber,UINT Setting) PURE;
    STDMETHOD(GetStreamSourceFreq)(THIS_ UINT StreamNumber,UINT* pSetting) PURE;
    STDMETHOD(SetIndices)(THIS_ IDirect3DIndexBuffer9* pIndexData) PURE;
    STDMETHOD(GetIndices)(THIS_ IDirect3DIndexBuffer9** ppIndexData) PURE;
    STDMETHOD(CreatePixelShader)(THIS_ CONST DWORD* pFunction,IDirect3DPixelShader9** ppShader) PURE;
    STDMETHOD(SetPixelShader)(THIS_ IDirect3DPixelShader9* pShader) PURE;
    STDMETHOD(GetPixelShader)(THIS_ IDirect3DPixelShader9** ppShader) PURE;
    STDMETHOD(SetPixelShaderConstantF)(THIS_ UINT StartRegister,CONST float* pConstantData,UINT Vector4fCount) PURE;
    STDMETHOD(GetPixelShaderConstantF)(THIS_ UINT StartRegister,float* pConstantData,UINT Vector4fCount) PURE;
    STDMETHOD(SetPixelShaderConstantI)(THIS_ UINT StartRegister,CONST int* pConstantData,UINT Vector4iCount) PURE;
    STDMETHOD(GetPixelShaderConstantI)(THIS_ UINT StartRegister,int* pConstantData,UINT Vector4iCount) PURE;
    STDMETHOD(SetPixelShaderConstantB)(THIS_ UINT StartRegister,CONST BOOL* pConstantData,UINT  BoolCount) PURE;
    STDMETHOD(GetPixelShaderConstantB)(THIS_ UINT StartRegister,BOOL* pConstantData,UINT BoolCount) PURE;
    STDMETHOD(DrawRectPatch)(THIS_ UINT Handle,CONST float* pNumSegs,CONST D3DRECTPATCH_INFO* pRectPatchInfo) PURE;
    STDMETHOD(DrawTriPatch)(THIS_ UINT Handle,CONST float* pNumSegs,CONST D3DTRIPATCH_INFO* pTriPatchInfo) PURE;
    STDMETHOD(DeletePatch)(THIS_ UINT Handle) PURE;
    STDMETHOD(CreateQuery)(THIS_ D3DQUERYTYPE Type,IDirect3DQuery9** ppQuery) PURE;
        D3DDEVICE_CREATION_PARAMETERS CreationParameters;
    D3DPRESENT_PARAMETERS PresentParameters;
    D3DDISPLAYMODE DisplayMode;
    D3DCAPS9 Caps;
        UINT AvailableTextureMem;
    UINT SwapChains;
    UINT Textures;
    UINT VertexBuffers;
    UINT IndexBuffers;
    UINT VertexShaders;
    UINT PixelShaders;
        D3DVIEWPORT9 Viewport;
    D3DMATRIX ProjectionMatrix;
    D3DMATRIX ViewMatrix;
    D3DMATRIX WorldMatrix;
    D3DMATRIX TextureMatrices[8];
        DWORD FVF;
    UINT VertexSize;
    DWORD VertexShaderVersion;
    DWORD PixelShaderVersion;
    BOOL SoftwareVertexProcessing;
        D3DMATERIAL9 Material;
    D3DLIGHT9 Lights[16];
    BOOL LightsEnabled[16];
        D3DGAMMARAMP GammaRamp;
    RECT ScissorRect;
    BOOL DialogBoxMode;
"
)
d3D9.IDirect3DStateBlock9 := {}
d3D9.IDirect3DStateBlock9.name := "IDirect3DStateBlock9"
d3D9.IDirect3DStateBlock9.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ IDirect3DDevice9** ppDevice) PURE;
    STDMETHOD(Capture)(THIS) PURE;
    STDMETHOD(Apply)(THIS) PURE;
        LPCWSTR CreationCallStack;
"
)
d3D9.IDirect3DSwapChain9 := {}
d3D9.IDirect3DSwapChain9.name := "IDirect3DSwapChain9"
d3D9.IDirect3DSwapChain9.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(Present)(THIS_ CONST RECT* pSourceRect,CONST RECT* pDestRect,HWND hDestWindowOverride,CONST RGNDATA* pDirtyRegion,DWORD dwFlags) PURE;
    STDMETHOD(GetFrontBufferData)(THIS_ IDirect3DSurface9* pDestSurface) PURE;
    STDMETHOD(GetBackBuffer)(THIS_ UINT iBackBuffer,D3DBACKBUFFER_TYPE Type,IDirect3DSurface9** ppBackBuffer) PURE;
    STDMETHOD(GetRasterStatus)(THIS_ D3DRASTER_STATUS* pRasterStatus) PURE;
    STDMETHOD(GetDisplayMode)(THIS_ D3DDISPLAYMODE* pMode) PURE;
    STDMETHOD(GetDevice)(THIS_ IDirect3DDevice9** ppDevice) PURE;
    STDMETHOD(GetPresentParameters)(THIS_ D3DPRESENT_PARAMETERS* pPresentationParameters) PURE;
        D3DPRESENT_PARAMETERS PresentParameters;
    D3DDISPLAYMODE DisplayMode;
    LPCWSTR CreationCallStack;
"
)
d3D9.IDirect3DResource9 := {}
d3D9.IDirect3DResource9.name := "IDirect3DResource9"
d3D9.IDirect3DResource9.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ IDirect3DDevice9** ppDevice) PURE;
    STDMETHOD(SetPrivateData)(THIS_ REFGUID refguid,CONST void* pData,DWORD SizeOfData,DWORD Flags) PURE;
    STDMETHOD(GetPrivateData)(THIS_ REFGUID refguid,void* pData,DWORD* pSizeOfData) PURE;
    STDMETHOD(FreePrivateData)(THIS_ REFGUID refguid) PURE;
    STDMETHOD_(DWORD, SetPriority)(THIS_ DWORD PriorityNew) PURE;
    STDMETHOD_(DWORD, GetPriority)(THIS) PURE;
    STDMETHOD_(void, PreLoad)(THIS) PURE;
    STDMETHOD_(D3DRESOURCETYPE, GetType)(THIS) PURE;
"
)
d3D9.IDirect3DVertexDeclaration9 := {}
d3D9.IDirect3DVertexDeclaration9.name := "IDirect3DVertexDeclaration9"
d3D9.IDirect3DVertexDeclaration9.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ IDirect3DDevice9** ppDevice) PURE;
    STDMETHOD(GetDeclaration)(THIS_ D3DVERTEXELEMENT9* pElement,UINT* pNumElements) PURE;
        LPCWSTR CreationCallStack;
"
)
d3D9.IDirect3DVertexShader9 := {}
d3D9.IDirect3DVertexShader9.name := "IDirect3DVertexShader9"
d3D9.IDirect3DVertexShader9.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ IDirect3DDevice9** ppDevice) PURE;
    STDMETHOD(GetFunction)(THIS_ void*,UINT* pSizeOfData) PURE;
        DWORD Version;
    LPCWSTR CreationCallStack;
"
)
d3D9.IDirect3DPixelShader9 := {}
d3D9.IDirect3DPixelShader9.name := "IDirect3DPixelShader9"
d3D9.IDirect3DPixelShader9.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ IDirect3DDevice9** ppDevice) PURE;
    STDMETHOD(GetFunction)(THIS_ void*,UINT* pSizeOfData) PURE;
        DWORD Version;
    LPCWSTR CreationCallStack;
"
)
d3D9.IDirect3DBaseTexture9 := {}
d3D9.IDirect3DBaseTexture9.name := "IDirect3DBaseTexture9"
d3D9.IDirect3DBaseTexture9.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ IDirect3DDevice9** ppDevice) PURE;
    STDMETHOD(SetPrivateData)(THIS_ REFGUID refguid,CONST void* pData,DWORD SizeOfData,DWORD Flags) PURE;
    STDMETHOD(GetPrivateData)(THIS_ REFGUID refguid,void* pData,DWORD* pSizeOfData) PURE;
    STDMETHOD(FreePrivateData)(THIS_ REFGUID refguid) PURE;
    STDMETHOD_(DWORD, SetPriority)(THIS_ DWORD PriorityNew) PURE;
    STDMETHOD_(DWORD, GetPriority)(THIS) PURE;
    STDMETHOD_(void, PreLoad)(THIS) PURE;
    STDMETHOD_(D3DRESOURCETYPE, GetType)(THIS) PURE;
    STDMETHOD_(DWORD, SetLOD)(THIS_ DWORD LODNew) PURE;
    STDMETHOD_(DWORD, GetLOD)(THIS) PURE;
    STDMETHOD_(DWORD, GetLevelCount)(THIS) PURE;
    STDMETHOD(SetAutoGenFilterType)(THIS_ D3DTEXTUREFILTERTYPE FilterType) PURE;
    STDMETHOD_(D3DTEXTUREFILTERTYPE, GetAutoGenFilterType)(THIS) PURE;
    STDMETHOD_(void, GenerateMipSubLevels)(THIS) PURE;
"
)
d3D9.IDirect3DTexture9 := {}
d3D9.IDirect3DTexture9.name := "IDirect3DTexture9"
d3D9.IDirect3DTexture9.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ IDirect3DDevice9** ppDevice) PURE;
    STDMETHOD(SetPrivateData)(THIS_ REFGUID refguid,CONST void* pData,DWORD SizeOfData,DWORD Flags) PURE;
    STDMETHOD(GetPrivateData)(THIS_ REFGUID refguid,void* pData,DWORD* pSizeOfData) PURE;
    STDMETHOD(FreePrivateData)(THIS_ REFGUID refguid) PURE;
    STDMETHOD_(DWORD, SetPriority)(THIS_ DWORD PriorityNew) PURE;
    STDMETHOD_(DWORD, GetPriority)(THIS) PURE;
    STDMETHOD_(void, PreLoad)(THIS) PURE;
    STDMETHOD_(D3DRESOURCETYPE, GetType)(THIS) PURE;
    STDMETHOD_(DWORD, SetLOD)(THIS_ DWORD LODNew) PURE;
    STDMETHOD_(DWORD, GetLOD)(THIS) PURE;
    STDMETHOD_(DWORD, GetLevelCount)(THIS) PURE;
    STDMETHOD(SetAutoGenFilterType)(THIS_ D3DTEXTUREFILTERTYPE FilterType) PURE;
    STDMETHOD_(D3DTEXTUREFILTERTYPE, GetAutoGenFilterType)(THIS) PURE;
    STDMETHOD_(void, GenerateMipSubLevels)(THIS) PURE;
    STDMETHOD(GetLevelDesc)(THIS_ UINT Level,D3DSURFACE_DESC *pDesc) PURE;
    STDMETHOD(GetSurfaceLevel)(THIS_ UINT Level,IDirect3DSurface9** ppSurfaceLevel) PURE;
    STDMETHOD(LockRect)(THIS_ UINT Level,D3DLOCKED_RECT* pLockedRect,CONST RECT* pRect,DWORD Flags) PURE;
    STDMETHOD(UnlockRect)(THIS_ UINT Level) PURE;
    STDMETHOD(AddDirtyRect)(THIS_ CONST RECT* pDirtyRect) PURE;
        LPCWSTR Name;
    UINT Width;
    UINT Height;
    UINT Levels;
    DWORD Usage;
    D3DFORMAT Format;
    D3DPOOL Pool;
    DWORD Priority;
    DWORD LOD;
    D3DTEXTUREFILTERTYPE FilterType;
    UINT LockCount;
    LPCWSTR CreationCallStack;
"
)
d3D9.IDirect3DVolumeTexture9 := {}
d3D9.IDirect3DVolumeTexture9.name := "IDirect3DVolumeTexture9"
d3D9.IDirect3DVolumeTexture9.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ IDirect3DDevice9** ppDevice) PURE;
    STDMETHOD(SetPrivateData)(THIS_ REFGUID refguid,CONST void* pData,DWORD SizeOfData,DWORD Flags) PURE;
    STDMETHOD(GetPrivateData)(THIS_ REFGUID refguid,void* pData,DWORD* pSizeOfData) PURE;
    STDMETHOD(FreePrivateData)(THIS_ REFGUID refguid) PURE;
    STDMETHOD_(DWORD, SetPriority)(THIS_ DWORD PriorityNew) PURE;
    STDMETHOD_(DWORD, GetPriority)(THIS) PURE;
    STDMETHOD_(void, PreLoad)(THIS) PURE;
    STDMETHOD_(D3DRESOURCETYPE, GetType)(THIS) PURE;
    STDMETHOD_(DWORD, SetLOD)(THIS_ DWORD LODNew) PURE;
    STDMETHOD_(DWORD, GetLOD)(THIS) PURE;
    STDMETHOD_(DWORD, GetLevelCount)(THIS) PURE;
    STDMETHOD(SetAutoGenFilterType)(THIS_ D3DTEXTUREFILTERTYPE FilterType) PURE;
    STDMETHOD_(D3DTEXTUREFILTERTYPE, GetAutoGenFilterType)(THIS) PURE;
    STDMETHOD_(void, GenerateMipSubLevels)(THIS) PURE;
    STDMETHOD(GetLevelDesc)(THIS_ UINT Level,D3DVOLUME_DESC *pDesc) PURE;
    STDMETHOD(GetVolumeLevel)(THIS_ UINT Level,IDirect3DVolume9** ppVolumeLevel) PURE;
    STDMETHOD(LockBox)(THIS_ UINT Level,D3DLOCKED_BOX* pLockedVolume,CONST D3DBOX* pBox,DWORD Flags) PURE;
    STDMETHOD(UnlockBox)(THIS_ UINT Level) PURE;
    STDMETHOD(AddDirtyBox)(THIS_ CONST D3DBOX* pDirtyBox) PURE;
        LPCWSTR Name;
    UINT Width;
    UINT Height;
    UINT Depth;
    UINT Levels;
    DWORD Usage;
    D3DFORMAT Format;
    D3DPOOL Pool;
    DWORD Priority;
    DWORD LOD;
    D3DTEXTUREFILTERTYPE FilterType;
    UINT LockCount;
    LPCWSTR CreationCallStack;
"
)
d3D9.IDirect3DCubeTexture9 := {}
d3D9.IDirect3DCubeTexture9.name := "IDirect3DCubeTexture9"
d3D9.IDirect3DCubeTexture9.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ IDirect3DDevice9** ppDevice) PURE;
    STDMETHOD(SetPrivateData)(THIS_ REFGUID refguid,CONST void* pData,DWORD SizeOfData,DWORD Flags) PURE;
    STDMETHOD(GetPrivateData)(THIS_ REFGUID refguid,void* pData,DWORD* pSizeOfData) PURE;
    STDMETHOD(FreePrivateData)(THIS_ REFGUID refguid) PURE;
    STDMETHOD_(DWORD, SetPriority)(THIS_ DWORD PriorityNew) PURE;
    STDMETHOD_(DWORD, GetPriority)(THIS) PURE;
    STDMETHOD_(void, PreLoad)(THIS) PURE;
    STDMETHOD_(D3DRESOURCETYPE, GetType)(THIS) PURE;
    STDMETHOD_(DWORD, SetLOD)(THIS_ DWORD LODNew) PURE;
    STDMETHOD_(DWORD, GetLOD)(THIS) PURE;
    STDMETHOD_(DWORD, GetLevelCount)(THIS) PURE;
    STDMETHOD(SetAutoGenFilterType)(THIS_ D3DTEXTUREFILTERTYPE FilterType) PURE;
    STDMETHOD_(D3DTEXTUREFILTERTYPE, GetAutoGenFilterType)(THIS) PURE;
    STDMETHOD_(void, GenerateMipSubLevels)(THIS) PURE;
    STDMETHOD(GetLevelDesc)(THIS_ UINT Level,D3DSURFACE_DESC *pDesc) PURE;
    STDMETHOD(GetCubeMapSurface)(THIS_ D3DCUBEMAP_FACES FaceType,UINT Level,IDirect3DSurface9** ppCubeMapSurface) PURE;
    STDMETHOD(LockRect)(THIS_ D3DCUBEMAP_FACES FaceType,UINT Level,D3DLOCKED_RECT* pLockedRect,CONST RECT* pRect,DWORD Flags) PURE;
    STDMETHOD(UnlockRect)(THIS_ D3DCUBEMAP_FACES FaceType,UINT Level) PURE;
    STDMETHOD(AddDirtyRect)(THIS_ D3DCUBEMAP_FACES FaceType,CONST RECT* pDirtyRect) PURE;
        LPCWSTR Name;
    UINT Width;
    UINT Height;
    UINT Levels;
    DWORD Usage;
    D3DFORMAT Format;
    D3DPOOL Pool;
    DWORD Priority;
    DWORD LOD;
    D3DTEXTUREFILTERTYPE FilterType;
    UINT LockCount;
    LPCWSTR CreationCallStack;
"
)
d3D9.IDirect3DVertexBuffer9 := {}
d3D9.IDirect3DVertexBuffer9.name := "IDirect3DVertexBuffer9"
d3D9.IDirect3DVertexBuffer9.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ IDirect3DDevice9** ppDevice) PURE;
    STDMETHOD(SetPrivateData)(THIS_ REFGUID refguid,CONST void* pData,DWORD SizeOfData,DWORD Flags) PURE;
    STDMETHOD(GetPrivateData)(THIS_ REFGUID refguid,void* pData,DWORD* pSizeOfData) PURE;
    STDMETHOD(FreePrivateData)(THIS_ REFGUID refguid) PURE;
    STDMETHOD_(DWORD, SetPriority)(THIS_ DWORD PriorityNew) PURE;
    STDMETHOD_(DWORD, GetPriority)(THIS) PURE;
    STDMETHOD_(void, PreLoad)(THIS) PURE;
    STDMETHOD_(D3DRESOURCETYPE, GetType)(THIS) PURE;
    STDMETHOD(Lock)(THIS_ UINT OffsetToLock,UINT SizeToLock,void** ppbData,DWORD Flags) PURE;
    STDMETHOD(Unlock)(THIS) PURE;
    STDMETHOD(GetDesc)(THIS_ D3DVERTEXBUFFER_DESC *pDesc) PURE;
        LPCWSTR Name;
    UINT Length;
    DWORD Usage;
    DWORD FVF;
    D3DPOOL Pool;
    DWORD Priority;
    UINT LockCount;
    LPCWSTR CreationCallStack;
"
)
d3D9.IDirect3DIndexBuffer9 := {}
d3D9.IDirect3DIndexBuffer9.name := "IDirect3DIndexBuffer9"
d3D9.IDirect3DIndexBuffer9.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ IDirect3DDevice9** ppDevice) PURE;
    STDMETHOD(SetPrivateData)(THIS_ REFGUID refguid,CONST void* pData,DWORD SizeOfData,DWORD Flags) PURE;
    STDMETHOD(GetPrivateData)(THIS_ REFGUID refguid,void* pData,DWORD* pSizeOfData) PURE;
    STDMETHOD(FreePrivateData)(THIS_ REFGUID refguid) PURE;
    STDMETHOD_(DWORD, SetPriority)(THIS_ DWORD PriorityNew) PURE;
    STDMETHOD_(DWORD, GetPriority)(THIS) PURE;
    STDMETHOD_(void, PreLoad)(THIS) PURE;
    STDMETHOD_(D3DRESOURCETYPE, GetType)(THIS) PURE;
    STDMETHOD(Lock)(THIS_ UINT OffsetToLock,UINT SizeToLock,void** ppbData,DWORD Flags) PURE;
    STDMETHOD(Unlock)(THIS) PURE;
    STDMETHOD(GetDesc)(THIS_ D3DINDEXBUFFER_DESC *pDesc) PURE;
        LPCWSTR Name;
    UINT Length;
    DWORD Usage;
    D3DFORMAT Format;
    D3DPOOL Pool;
    DWORD Priority;
    UINT LockCount;
    LPCWSTR CreationCallStack;
"
)
d3D9.IDirect3DSurface9 := {}
d3D9.IDirect3DSurface9.name := "IDirect3DSurface9"
d3D9.IDirect3DSurface9.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ IDirect3DDevice9** ppDevice) PURE;
    STDMETHOD(SetPrivateData)(THIS_ REFGUID refguid,CONST void* pData,DWORD SizeOfData,DWORD Flags) PURE;
    STDMETHOD(GetPrivateData)(THIS_ REFGUID refguid,void* pData,DWORD* pSizeOfData) PURE;
    STDMETHOD(FreePrivateData)(THIS_ REFGUID refguid) PURE;
    STDMETHOD_(DWORD, SetPriority)(THIS_ DWORD PriorityNew) PURE;
    STDMETHOD_(DWORD, GetPriority)(THIS) PURE;
    STDMETHOD_(void, PreLoad)(THIS) PURE;
    STDMETHOD_(D3DRESOURCETYPE, GetType)(THIS) PURE;
    STDMETHOD(GetContainer)(THIS_ REFIID riid,void** ppContainer) PURE;
    STDMETHOD(GetDesc)(THIS_ D3DSURFACE_DESC *pDesc) PURE;
    STDMETHOD(LockRect)(THIS_ D3DLOCKED_RECT* pLockedRect,CONST RECT* pRect,DWORD Flags) PURE;
    STDMETHOD(UnlockRect)(THIS) PURE;
    STDMETHOD(GetDC)(THIS_ HDC *phdc) PURE;
    STDMETHOD(ReleaseDC)(THIS_ HDC hdc) PURE;
        LPCWSTR Name;
    UINT Width;
    UINT Height;
    DWORD Usage;
    D3DFORMAT Format;
    D3DPOOL Pool;
    D3DMULTISAMPLE_TYPE MultiSampleType;
    DWORD MultiSampleQuality;
    DWORD Priority;
    UINT LockCount;
    UINT DCCount;
    LPCWSTR CreationCallStack;
"
)
d3D9.IDirect3DVolume9 := {}
d3D9.IDirect3DVolume9.name := "IDirect3DVolume9"
d3D9.IDirect3DVolume9.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ IDirect3DDevice9** ppDevice) PURE;
    STDMETHOD(SetPrivateData)(THIS_ REFGUID refguid,CONST void* pData,DWORD SizeOfData,DWORD Flags) PURE;
    STDMETHOD(GetPrivateData)(THIS_ REFGUID refguid,void* pData,DWORD* pSizeOfData) PURE;
    STDMETHOD(FreePrivateData)(THIS_ REFGUID refguid) PURE;
    STDMETHOD(GetContainer)(THIS_ REFIID riid,void** ppContainer) PURE;
    STDMETHOD(GetDesc)(THIS_ D3DVOLUME_DESC *pDesc) PURE;
    STDMETHOD(LockBox)(THIS_ D3DLOCKED_BOX * pLockedVolume,CONST D3DBOX* pBox,DWORD Flags) PURE;
    STDMETHOD(UnlockBox)(THIS) PURE;
        LPCWSTR Name;
    UINT Width;
    UINT Height;
    UINT Depth;
    DWORD Usage;
    D3DFORMAT Format;
    D3DPOOL Pool;
    UINT LockCount;
    LPCWSTR CreationCallStack;
"
)
d3D9.IDirect3DQuery9 := {}
d3D9.IDirect3DQuery9.name := "IDirect3DQuery9"
d3D9.IDirect3DQuery9.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ IDirect3DDevice9** ppDevice) PURE;
    STDMETHOD_(D3DQUERYTYPE, GetType)(THIS) PURE;
    STDMETHOD_(DWORD, GetDataSize)(THIS) PURE;
    STDMETHOD(Issue)(THIS_ DWORD dwIssueFlags) PURE;
    STDMETHOD(GetData)(THIS_ void* pData,DWORD dwSize,DWORD dwGetDataFlags) PURE;
        D3DQUERYTYPE Type;
    DWORD DataSize;
    LPCWSTR CreationCallStack;
"
)
d3D9.IDirect3D9Ex := {}
d3D9.IDirect3D9Ex.name := "IDirect3D9Ex"
d3D9.IDirect3D9Ex.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD_(UINT, GetAdapterCount)(THIS) PURE;
    STDMETHOD(GetAdapterIdentifier)(THIS_ UINT Adapter,DWORD Flags,D3DADAPTER_IDENTIFIER9* pIdentifier) PURE;
    STDMETHOD_(UINT, GetAdapterModeCount)(THIS_ UINT Adapter,D3DFORMAT Format) PURE;
    STDMETHOD(EnumAdapterModes)(THIS_ UINT Adapter,D3DFORMAT Format,UINT Mode,D3DDISPLAYMODE* pMode) PURE;
    STDMETHOD(GetAdapterDisplayMode)(THIS_ UINT Adapter,D3DDISPLAYMODE* pMode) PURE;
    STDMETHOD(CheckDeviceType)(THIS_ UINT Adapter,D3DDEVTYPE DevType,D3DFORMAT AdapterFormat,D3DFORMAT BackBufferFormat,BOOL bWindowed) PURE;
    STDMETHOD(CheckDeviceFormat)(THIS_ UINT Adapter,D3DDEVTYPE DeviceType,D3DFORMAT AdapterFormat,DWORD Usage,D3DRESOURCETYPE RType,D3DFORMAT CheckFormat) PURE;
    STDMETHOD(CheckDeviceMultiSampleType)(THIS_ UINT Adapter,D3DDEVTYPE DeviceType,D3DFORMAT SurfaceFormat,BOOL Windowed,D3DMULTISAMPLE_TYPE MultiSampleType,DWORD* pQualityLevels) PURE;
    STDMETHOD(CheckDepthStencilMatch)(THIS_ UINT Adapter,D3DDEVTYPE DeviceType,D3DFORMAT AdapterFormat,D3DFORMAT RenderTargetFormat,D3DFORMAT DepthStencilFormat) PURE;
    STDMETHOD(CheckDeviceFormatConversion)(THIS_ UINT Adapter,D3DDEVTYPE DeviceType,D3DFORMAT SourceFormat,D3DFORMAT TargetFormat) PURE;
    STDMETHOD(GetDeviceCaps)(THIS_ UINT Adapter,D3DDEVTYPE DeviceType,D3DCAPS9* pCaps) PURE;
    STDMETHOD_(HMONITOR, GetAdapterMonitor)(THIS_ UINT Adapter) PURE;
    STDMETHOD(CreateDevice)(THIS_ UINT Adapter,D3DDEVTYPE DeviceType,HWND hFocusWindow,DWORD BehaviorFlags,D3DPRESENT_PARAMETERS* pPresentationParameters,IDirect3DDevice9** ppReturnedDeviceInterface) PURE;
    STDMETHOD_(UINT, GetAdapterModeCountEx)(THIS_ UINT Adapter,CONST D3DDISPLAYMODEFILTER* pFilter ) PURE;
    STDMETHOD(EnumAdapterModesEx)(THIS_ UINT Adapter,CONST D3DDISPLAYMODEFILTER* pFilter,UINT Mode,D3DDISPLAYMODEEX* pMode) PURE;
    STDMETHOD(GetAdapterDisplayModeEx)(THIS_ UINT Adapter,D3DDISPLAYMODEEX* pMode,D3DDISPLAYROTATION* pRotation) PURE;
    STDMETHOD(CreateDeviceEx)(THIS_ UINT Adapter,D3DDEVTYPE DeviceType,HWND hFocusWindow,DWORD BehaviorFlags,D3DPRESENT_PARAMETERS* pPresentationParameters,D3DDISPLAYMODEEX* pFullscreenDisplayMode,IDirect3DDevice9Ex** ppReturnedDeviceInterface) PURE;
    STDMETHOD(GetAdapterLUID)(THIS_ UINT Adapter,LUID * pLUID) PURE;
"
)
d3D9.IDirect3DDevice9Ex := {}
d3D9.IDirect3DDevice9Ex.name := "IDirect3DDevice9Ex"
d3D9.IDirect3DDevice9Ex.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(TestCooperativeLevel)(THIS) PURE;
    STDMETHOD_(UINT, GetAvailableTextureMem)(THIS) PURE;
    STDMETHOD(EvictManagedResources)(THIS) PURE;
    STDMETHOD(GetDirect3D)(THIS_ IDirect3D9** ppD3D9) PURE;
    STDMETHOD(GetDeviceCaps)(THIS_ D3DCAPS9* pCaps) PURE;
    STDMETHOD(GetDisplayMode)(THIS_ UINT iSwapChain,D3DDISPLAYMODE* pMode) PURE;
    STDMETHOD(GetCreationParameters)(THIS_ D3DDEVICE_CREATION_PARAMETERS *pParameters) PURE;
    STDMETHOD(SetCursorProperties)(THIS_ UINT XHotSpot,UINT YHotSpot,IDirect3DSurface9* pCursorBitmap) PURE;
    STDMETHOD_(void, SetCursorPosition)(THIS_ int X,int Y,DWORD Flags) PURE;
    STDMETHOD_(BOOL, ShowCursor)(THIS_ BOOL bShow) PURE;
    STDMETHOD(CreateAdditionalSwapChain)(THIS_ D3DPRESENT_PARAMETERS* pPresentationParameters,IDirect3DSwapChain9** pSwapChain) PURE;
    STDMETHOD(GetSwapChain)(THIS_ UINT iSwapChain,IDirect3DSwapChain9** pSwapChain) PURE;
    STDMETHOD_(UINT, GetNumberOfSwapChains)(THIS) PURE;
    STDMETHOD(Reset)(THIS_ D3DPRESENT_PARAMETERS* pPresentationParameters) PURE;
    STDMETHOD(Present)(THIS_ CONST RECT* pSourceRect,CONST RECT* pDestRect,HWND hDestWindowOverride,CONST RGNDATA* pDirtyRegion) PURE;
    STDMETHOD(GetBackBuffer)(THIS_ UINT iSwapChain,UINT iBackBuffer,D3DBACKBUFFER_TYPE Type,IDirect3DSurface9** ppBackBuffer) PURE;
    STDMETHOD(GetRasterStatus)(THIS_ UINT iSwapChain,D3DRASTER_STATUS* pRasterStatus) PURE;
    STDMETHOD(SetDialogBoxMode)(THIS_ BOOL bEnableDialogs) PURE;
    STDMETHOD_(void, SetGammaRamp)(THIS_ UINT iSwapChain,DWORD Flags,CONST D3DGAMMARAMP* pRamp) PURE;
    STDMETHOD_(void, GetGammaRamp)(THIS_ UINT iSwapChain,D3DGAMMARAMP* pRamp) PURE;
    STDMETHOD(CreateTexture)(THIS_ UINT Width,UINT Height,UINT Levels,DWORD Usage,D3DFORMAT Format,D3DPOOL Pool,IDirect3DTexture9** ppTexture,HANDLE* pSharedHandle) PURE;
    STDMETHOD(CreateVolumeTexture)(THIS_ UINT Width,UINT Height,UINT Depth,UINT Levels,DWORD Usage,D3DFORMAT Format,D3DPOOL Pool,IDirect3DVolumeTexture9** ppVolumeTexture,HANDLE* pSharedHandle) PURE;
    STDMETHOD(CreateCubeTexture)(THIS_ UINT EdgeLength,UINT Levels,DWORD Usage,D3DFORMAT Format,D3DPOOL Pool,IDirect3DCubeTexture9** ppCubeTexture,HANDLE* pSharedHandle) PURE;
    STDMETHOD(CreateVertexBuffer)(THIS_ UINT Length,DWORD Usage,DWORD FVF,D3DPOOL Pool,IDirect3DVertexBuffer9** ppVertexBuffer,HANDLE* pSharedHandle) PURE;
    STDMETHOD(CreateIndexBuffer)(THIS_ UINT Length,DWORD Usage,D3DFORMAT Format,D3DPOOL Pool,IDirect3DIndexBuffer9** ppIndexBuffer,HANDLE* pSharedHandle) PURE;
    STDMETHOD(CreateRenderTarget)(THIS_ UINT Width,UINT Height,D3DFORMAT Format,D3DMULTISAMPLE_TYPE MultiSample,DWORD MultisampleQuality,BOOL Lockable,IDirect3DSurface9** ppSurface,HANDLE* pSharedHandle) PURE;
    STDMETHOD(CreateDepthStencilSurface)(THIS_ UINT Width,UINT Height,D3DFORMAT Format,D3DMULTISAMPLE_TYPE MultiSample,DWORD MultisampleQuality,BOOL Discard,IDirect3DSurface9** ppSurface,HANDLE* pSharedHandle) PURE;
    STDMETHOD(UpdateSurface)(THIS_ IDirect3DSurface9* pSourceSurface,CONST RECT* pSourceRect,IDirect3DSurface9* pDestinationSurface,CONST POINT* pDestPoint) PURE;
    STDMETHOD(UpdateTexture)(THIS_ IDirect3DBaseTexture9* pSourceTexture,IDirect3DBaseTexture9* pDestinationTexture) PURE;
    STDMETHOD(GetRenderTargetData)(THIS_ IDirect3DSurface9* pRenderTarget,IDirect3DSurface9* pDestSurface) PURE;
    STDMETHOD(GetFrontBufferData)(THIS_ UINT iSwapChain,IDirect3DSurface9* pDestSurface) PURE;
    STDMETHOD(StretchRect)(THIS_ IDirect3DSurface9* pSourceSurface,CONST RECT* pSourceRect,IDirect3DSurface9* pDestSurface,CONST RECT* pDestRect,D3DTEXTUREFILTERTYPE Filter) PURE;
    STDMETHOD(ColorFill)(THIS_ IDirect3DSurface9* pSurface,CONST RECT* pRect,D3DCOLOR color) PURE;
    STDMETHOD(CreateOffscreenPlainSurface)(THIS_ UINT Width,UINT Height,D3DFORMAT Format,D3DPOOL Pool,IDirect3DSurface9** ppSurface,HANDLE* pSharedHandle) PURE;
    STDMETHOD(SetRenderTarget)(THIS_ DWORD RenderTargetIndex,IDirect3DSurface9* pRenderTarget) PURE;
    STDMETHOD(GetRenderTarget)(THIS_ DWORD RenderTargetIndex,IDirect3DSurface9** ppRenderTarget) PURE;
    STDMETHOD(SetDepthStencilSurface)(THIS_ IDirect3DSurface9* pNewZStencil) PURE;
    STDMETHOD(GetDepthStencilSurface)(THIS_ IDirect3DSurface9** ppZStencilSurface) PURE;
    STDMETHOD(BeginScene)(THIS) PURE;
    STDMETHOD(EndScene)(THIS) PURE;
    STDMETHOD(Clear)(THIS_ DWORD Count,CONST D3DRECT* pRects,DWORD Flags,D3DCOLOR Color,float Z,DWORD Stencil) PURE;
    STDMETHOD(SetTransform)(THIS_ D3DTRANSFORMSTATETYPE State,CONST D3DMATRIX* pMatrix) PURE;
    STDMETHOD(GetTransform)(THIS_ D3DTRANSFORMSTATETYPE State,D3DMATRIX* pMatrix) PURE;
    STDMETHOD(MultiplyTransform)(THIS_ D3DTRANSFORMSTATETYPE,CONST D3DMATRIX*) PURE;
    STDMETHOD(SetViewport)(THIS_ CONST D3DVIEWPORT9* pViewport) PURE;
    STDMETHOD(GetViewport)(THIS_ D3DVIEWPORT9* pViewport) PURE;
    STDMETHOD(SetMaterial)(THIS_ CONST D3DMATERIAL9* pMaterial) PURE;
    STDMETHOD(GetMaterial)(THIS_ D3DMATERIAL9* pMaterial) PURE;
    STDMETHOD(SetLight)(THIS_ DWORD Index,CONST D3DLIGHT9*) PURE;
    STDMETHOD(GetLight)(THIS_ DWORD Index,D3DLIGHT9*) PURE;
    STDMETHOD(LightEnable)(THIS_ DWORD Index,BOOL Enable) PURE;
    STDMETHOD(GetLightEnable)(THIS_ DWORD Index,BOOL* pEnable) PURE;
    STDMETHOD(SetClipPlane)(THIS_ DWORD Index,CONST float* pPlane) PURE;
    STDMETHOD(GetClipPlane)(THIS_ DWORD Index,float* pPlane) PURE;
    STDMETHOD(SetRenderState)(THIS_ D3DRENDERSTATETYPE State,DWORD Value) PURE;
    STDMETHOD(GetRenderState)(THIS_ D3DRENDERSTATETYPE State,DWORD* pValue) PURE;
    STDMETHOD(CreateStateBlock)(THIS_ D3DSTATEBLOCKTYPE Type,IDirect3DStateBlock9** ppSB) PURE;
    STDMETHOD(BeginStateBlock)(THIS) PURE;
    STDMETHOD(EndStateBlock)(THIS_ IDirect3DStateBlock9** ppSB) PURE;
    STDMETHOD(SetClipStatus)(THIS_ CONST D3DCLIPSTATUS9* pClipStatus) PURE;
    STDMETHOD(GetClipStatus)(THIS_ D3DCLIPSTATUS9* pClipStatus) PURE;
    STDMETHOD(GetTexture)(THIS_ DWORD Stage,IDirect3DBaseTexture9** ppTexture) PURE;
    STDMETHOD(SetTexture)(THIS_ DWORD Stage,IDirect3DBaseTexture9* pTexture) PURE;
    STDMETHOD(GetTextureStageState)(THIS_ DWORD Stage,D3DTEXTURESTAGESTATETYPE Type,DWORD* pValue) PURE;
    STDMETHOD(SetTextureStageState)(THIS_ DWORD Stage,D3DTEXTURESTAGESTATETYPE Type,DWORD Value) PURE;
    STDMETHOD(GetSamplerState)(THIS_ DWORD Sampler,D3DSAMPLERSTATETYPE Type,DWORD* pValue) PURE;
    STDMETHOD(SetSamplerState)(THIS_ DWORD Sampler,D3DSAMPLERSTATETYPE Type,DWORD Value) PURE;
    STDMETHOD(ValidateDevice)(THIS_ DWORD* pNumPasses) PURE;
    STDMETHOD(SetPaletteEntries)(THIS_ UINT PaletteNumber,CONST PALETTEENTRY* pEntries) PURE;
    STDMETHOD(GetPaletteEntries)(THIS_ UINT PaletteNumber,PALETTEENTRY* pEntries) PURE;
    STDMETHOD(SetCurrentTexturePalette)(THIS_ UINT PaletteNumber) PURE;
    STDMETHOD(GetCurrentTexturePalette)(THIS_ UINT *PaletteNumber) PURE;
    STDMETHOD(SetScissorRect)(THIS_ CONST RECT* pRect) PURE;
    STDMETHOD(GetScissorRect)(THIS_ RECT* pRect) PURE;
    STDMETHOD(SetSoftwareVertexProcessing)(THIS_ BOOL bSoftware) PURE;
    STDMETHOD_(BOOL, GetSoftwareVertexProcessing)(THIS) PURE;
    STDMETHOD(SetNPatchMode)(THIS_ float nSegments) PURE;
    STDMETHOD_(float, GetNPatchMode)(THIS) PURE;
    STDMETHOD(DrawPrimitive)(THIS_ D3DPRIMITIVETYPE PrimitiveType,UINT StartVertex,UINT PrimitiveCount) PURE;
    STDMETHOD(DrawIndexedPrimitive)(THIS_ D3DPRIMITIVETYPE,INT BaseVertexIndex,UINT MinVertexIndex,UINT NumVertices,UINT startIndex,UINT primCount) PURE;
    STDMETHOD(DrawPrimitiveUP)(THIS_ D3DPRIMITIVETYPE PrimitiveType,UINT PrimitiveCount,CONST void* pVertexStreamZeroData,UINT VertexStreamZeroStride) PURE;
    STDMETHOD(DrawIndexedPrimitiveUP)(THIS_ D3DPRIMITIVETYPE PrimitiveType,UINT MinVertexIndex,UINT NumVertices,UINT PrimitiveCount,CONST void* pIndexData,D3DFORMAT IndexDataFormat,CONST void* pVertexStreamZeroData,UINT VertexStreamZeroStride) PURE;
    STDMETHOD(ProcessVertices)(THIS_ UINT SrcStartIndex,UINT DestIndex,UINT VertexCount,IDirect3DVertexBuffer9* pDestBuffer,IDirect3DVertexDeclaration9* pVertexDecl,DWORD Flags) PURE;
    STDMETHOD(CreateVertexDeclaration)(THIS_ CONST D3DVERTEXELEMENT9* pVertexElements,IDirect3DVertexDeclaration9** ppDecl) PURE;
    STDMETHOD(SetVertexDeclaration)(THIS_ IDirect3DVertexDeclaration9* pDecl) PURE;
    STDMETHOD(GetVertexDeclaration)(THIS_ IDirect3DVertexDeclaration9** ppDecl) PURE;
    STDMETHOD(SetFVF)(THIS_ DWORD FVF) PURE;
    STDMETHOD(GetFVF)(THIS_ DWORD* pFVF) PURE;
    STDMETHOD(CreateVertexShader)(THIS_ CONST DWORD* pFunction,IDirect3DVertexShader9** ppShader) PURE;
    STDMETHOD(SetVertexShader)(THIS_ IDirect3DVertexShader9* pShader) PURE;
    STDMETHOD(GetVertexShader)(THIS_ IDirect3DVertexShader9** ppShader) PURE;
    STDMETHOD(SetVertexShaderConstantF)(THIS_ UINT StartRegister,CONST float* pConstantData,UINT Vector4fCount) PURE;
    STDMETHOD(GetVertexShaderConstantF)(THIS_ UINT StartRegister,float* pConstantData,UINT Vector4fCount) PURE;
    STDMETHOD(SetVertexShaderConstantI)(THIS_ UINT StartRegister,CONST int* pConstantData,UINT Vector4iCount) PURE;
    STDMETHOD(GetVertexShaderConstantI)(THIS_ UINT StartRegister,int* pConstantData,UINT Vector4iCount) PURE;
    STDMETHOD(SetVertexShaderConstantB)(THIS_ UINT StartRegister,CONST BOOL* pConstantData,UINT  BoolCount) PURE;
    STDMETHOD(GetVertexShaderConstantB)(THIS_ UINT StartRegister,BOOL* pConstantData,UINT BoolCount) PURE;
    STDMETHOD(SetStreamSource)(THIS_ UINT StreamNumber,IDirect3DVertexBuffer9* pStreamData,UINT OffsetInBytes,UINT Stride) PURE;
    STDMETHOD(GetStreamSource)(THIS_ UINT StreamNumber,IDirect3DVertexBuffer9** ppStreamData,UINT* pOffsetInBytes,UINT* pStride) PURE;
    STDMETHOD(SetStreamSourceFreq)(THIS_ UINT StreamNumber,UINT Setting) PURE;
    STDMETHOD(GetStreamSourceFreq)(THIS_ UINT StreamNumber,UINT* pSetting) PURE;
    STDMETHOD(SetIndices)(THIS_ IDirect3DIndexBuffer9* pIndexData) PURE;
    STDMETHOD(GetIndices)(THIS_ IDirect3DIndexBuffer9** ppIndexData) PURE;
    STDMETHOD(CreatePixelShader)(THIS_ CONST DWORD* pFunction,IDirect3DPixelShader9** ppShader) PURE;
    STDMETHOD(SetPixelShader)(THIS_ IDirect3DPixelShader9* pShader) PURE;
    STDMETHOD(GetPixelShader)(THIS_ IDirect3DPixelShader9** ppShader) PURE;
    STDMETHOD(SetPixelShaderConstantF)(THIS_ UINT StartRegister,CONST float* pConstantData,UINT Vector4fCount) PURE;
    STDMETHOD(GetPixelShaderConstantF)(THIS_ UINT StartRegister,float* pConstantData,UINT Vector4fCount) PURE;
    STDMETHOD(SetPixelShaderConstantI)(THIS_ UINT StartRegister,CONST int* pConstantData,UINT Vector4iCount) PURE;
    STDMETHOD(GetPixelShaderConstantI)(THIS_ UINT StartRegister,int* pConstantData,UINT Vector4iCount) PURE;
    STDMETHOD(SetPixelShaderConstantB)(THIS_ UINT StartRegister,CONST BOOL* pConstantData,UINT  BoolCount) PURE;
    STDMETHOD(GetPixelShaderConstantB)(THIS_ UINT StartRegister,BOOL* pConstantData,UINT BoolCount) PURE;
    STDMETHOD(DrawRectPatch)(THIS_ UINT Handle,CONST float* pNumSegs,CONST D3DRECTPATCH_INFO* pRectPatchInfo) PURE;
    STDMETHOD(DrawTriPatch)(THIS_ UINT Handle,CONST float* pNumSegs,CONST D3DTRIPATCH_INFO* pTriPatchInfo) PURE;
    STDMETHOD(DeletePatch)(THIS_ UINT Handle) PURE;
    STDMETHOD(CreateQuery)(THIS_ D3DQUERYTYPE Type,IDirect3DQuery9** ppQuery) PURE;
    STDMETHOD(SetConvolutionMonoKernel)(THIS_ UINT width,UINT height,float* rows,float* columns) PURE;
    STDMETHOD(ComposeRects)(THIS_ IDirect3DSurface9* pSrc,IDirect3DSurface9* pDst,IDirect3DVertexBuffer9* pSrcRectDescs,UINT NumRects,IDirect3DVertexBuffer9* pDstRectDescs,D3DCOMPOSERECTSOP Operation,int Xoffset,int Yoffset) PURE;
    STDMETHOD(PresentEx)(THIS_ CONST RECT* pSourceRect,CONST RECT* pDestRect,HWND hDestWindowOverride,CONST RGNDATA* pDirtyRegion,DWORD dwFlags) PURE;
    STDMETHOD(GetGPUThreadPriority)(THIS_ INT* pPriority) PURE;
    STDMETHOD(SetGPUThreadPriority)(THIS_ INT Priority) PURE;
    STDMETHOD(WaitForVBlank)(THIS_ UINT iSwapChain) PURE;
    STDMETHOD(CheckResourceResidency)(THIS_ IDirect3DResource9** pResourceArray,UINT32 NumResources) PURE;
    STDMETHOD(SetMaximumFrameLatency)(THIS_ UINT MaxLatency) PURE;
    STDMETHOD(GetMaximumFrameLatency)(THIS_ UINT* pMaxLatency) PURE;
    STDMETHOD(CheckDeviceState)(THIS_ HWND hDestinationWindow) PURE;
    STDMETHOD(CreateRenderTargetEx)(THIS_ UINT Width,UINT Height,D3DFORMAT Format,D3DMULTISAMPLE_TYPE MultiSample,DWORD MultisampleQuality,BOOL Lockable,IDirect3DSurface9** ppSurface,HANDLE* pSharedHandle,DWORD Usage) PURE;
    STDMETHOD(CreateOffscreenPlainSurfaceEx)(THIS_ UINT Width,UINT Height,D3DFORMAT Format,D3DPOOL Pool,IDirect3DSurface9** ppSurface,HANDLE* pSharedHandle,DWORD Usage) PURE;
    STDMETHOD(CreateDepthStencilSurfaceEx)(THIS_ UINT Width,UINT Height,D3DFORMAT Format,D3DMULTISAMPLE_TYPE MultiSample,DWORD MultisampleQuality,BOOL Discard,IDirect3DSurface9** ppSurface,HANDLE* pSharedHandle,DWORD Usage) PURE;
    STDMETHOD(ResetEx)(THIS_ D3DPRESENT_PARAMETERS* pPresentationParameters,D3DDISPLAYMODEEX *pFullscreenDisplayMode) PURE;
    STDMETHOD(GetDisplayModeEx)(THIS_ UINT iSwapChain,D3DDISPLAYMODEEX* pMode,D3DDISPLAYROTATION* pRotation) PURE;
"
)
d3D9.IDirect3DSwapChain9Ex := {}
d3D9.IDirect3DSwapChain9Ex.name := "IDirect3DSwapChain9Ex"
d3D9.IDirect3DSwapChain9Ex.def :=
( 
"
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void** ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;
    STDMETHOD(Present)(THIS_ CONST RECT* pSourceRect,CONST RECT* pDestRect,HWND hDestWindowOverride,CONST RGNDATA* pDirtyRegion,DWORD dwFlags) PURE;
    STDMETHOD(GetFrontBufferData)(THIS_ IDirect3DSurface9* pDestSurface) PURE;
    STDMETHOD(GetBackBuffer)(THIS_ UINT iBackBuffer,D3DBACKBUFFER_TYPE Type,IDirect3DSurface9** ppBackBuffer) PURE;
    STDMETHOD(GetRasterStatus)(THIS_ D3DRASTER_STATUS* pRasterStatus) PURE;
    STDMETHOD(GetDisplayMode)(THIS_ D3DDISPLAYMODE* pMode) PURE;
    STDMETHOD(GetDevice)(THIS_ IDirect3DDevice9** ppDevice) PURE;
    STDMETHOD(GetPresentParameters)(THIS_ D3DPRESENT_PARAMETERS* pPresentationParameters) PURE;
    STDMETHOD(GetLastPresentCount)(THIS_ UINT* pLastPresentCount) PURE;
    STDMETHOD(GetPresentStats)(THIS_ D3DPRESENTSTATS* pPresentationStatistics) PURE;
    STDMETHOD(GetDisplayModeEx)(THIS_ D3DDISPLAYMODEEX* pMode,D3DDISPLAYROTATION* pRotation) PURE;
"
)
Global _FACD3D := 2166
Global D3D9b_SDK_VERSION := 31
Global D3D_SDK_VERSION := 32
Global D3DCREATE_ADAPTERGROUP_DEVICE := 0x00000200
Global D3DCREATE_DISABLE_DRIVER_MANAGEMENT := 0x00000100
Global D3DCREATE_DISABLE_DRIVER_MANAGEMENT_EX := 0x00000400
Global D3DCREATE_DISABLE_PRINTSCREEN := 0x00008000
Global D3DCREATE_DISABLE_PSGP_THREADING := 0x00002000
Global D3DCREATE_ENABLE_PRESENTSTATS := 0x00004000
Global D3DCREATE_FPU_PRESERVE := 0x00000002
Global D3DCREATE_HARDWARE_VERTEXPROCESSING := 0x00000040
Global D3DCREATE_MIXED_VERTEXPROCESSING := 0x00000080
Global D3DCREATE_MULTITHREADED := 0x00000004
Global D3DCREATE_NOWINDOWCHANGES := 0x00000800
Global D3DCREATE_PUREDEVICE := 0x00000010
Global D3DCREATE_SCREENSAVER := 0x10000000
Global D3DCREATE_SOFTWARE_VERTEXPROCESSING := 0x00000020
Global D3DCURSOR_IMMEDIATE_UPDATE := 0x00000001
Global D3DENUM_NO_DRIVERVERSION := 0x00000004
Global D3DENUM_WHQL_LEVEL := 0x00000002
Global D3DPRESENT_BACK_BUFFERS_MAX := 3
Global D3DPRESENT_BACK_BUFFERS_MAX_EX := 30
Global D3DPRESENT_DONOTFLIP := 0x00000004
Global D3DPRESENT_DONOTWAIT := 0x00000001
Global D3DPRESENT_FLIPRESTART := 0x00000008
Global D3DPRESENT_LINEAR_CONTENT := 0x00000002
Global D3DPRESENT_VIDEO_RESTRICT_TO_MONITOR := 0x00000010
Global D3DSGR_CALIBRATE := 0x00000001
Global D3DSGR_NO_CALIBRATION := 0x00000000
Global D3DSPD_IUNKNOWN := 0x00000001
Global DIRECT3D_VERSION := 2304
d3D9.err := {}
d3D9.err[2289436705 . ""] := "D3DERR_CONFLICTINGRENDERSTATE"
d3D9.err[2289436702 . ""] := "D3DERR_CONFLICTINGTEXTUREFILTER"
d3D9.err[2289436710 . ""] := "D3DERR_CONFLICTINGTEXTUREPALETTE"
d3D9.err[2289436788 . ""] := "D3DERR_DEVICEHUNG"
d3D9.err[2289436776 . ""] := "D3DERR_DEVICELOST"
d3D9.err[2289436777 . ""] := "D3DERR_DEVICENOTRESET"
d3D9.err[2289436784 . ""] := "D3DERR_DEVICEREMOVED"
d3D9.err[2289436711 . ""] := "D3DERR_DRIVERINTERNALERROR"
d3D9.err[2289436781 . ""] := "D3DERR_DRIVERINVALIDCALL"
d3D9.err[2289436780 . ""] := "D3DERR_INVALIDCALL"
d3D9.err[2289436779 . ""] := "D3DERR_INVALIDDEVICE"
d3D9.err[2289436775 . ""] := "D3DERR_MOREDATA"
d3D9.err[2289436778 . ""] := "D3DERR_NOTAVAILABLE"
d3D9.err[2289436774 . ""] := "D3DERR_NOTFOUND"
d3D9.err[2289435004 . ""] := "D3DERR_OUTOFVIDEOMEMORY"
d3D9.err[2289436701 . ""] := "D3DERR_TOOMANYOPERATIONS"
d3D9.err[2289436700 . ""] := "D3DERR_UNSUPPORTEDALPHAARG"
d3D9.err[2289436699 . ""] := "D3DERR_UNSUPPORTEDALPHAOPERATION"
d3D9.err[2289436698 . ""] := "D3DERR_UNSUPPORTEDCOLORARG"
d3D9.err[2289436697 . ""] := "D3DERR_UNSUPPORTEDCOLOROPERATION"
d3D9.err[2289436703 . ""] := "D3DERR_UNSUPPORTEDFACTORVALUE"
d3D9.err[2289436706 . ""] := "D3DERR_UNSUPPORTEDTEXTUREFILTER"
d3D9.err[2289435164 . ""] := "D3DERR_WASSTILLDRAWING"
d3D9.err[2289436696 . ""] := "D3DERR_WRONGTEXTUREFORMAT"
d3D9.err[141953135 . ""] := "D3DOK_NOAUTOGEN"
d3D9.err[141953141 . ""] := "S_NOT_RESIDENT"
d3D9.err[141953143 . ""] := "S_PRESENT_MODE_CHANGED"
d3D9.err[141953144 . ""] := "S_PRESENT_OCCLUDED"
d3D9.err[141953142 . ""] := "S_RESIDENT_IN_SHARED_MEMORY"
Global D3DERR_CONFLICTINGRENDERSTATE := 2289436705
Global D3DERR_CONFLICTINGTEXTUREFILTER := 2289436702
Global D3DERR_CONFLICTINGTEXTUREPALETTE := 2289436710
Global D3DERR_DEVICEHUNG := 2289436788
Global D3DERR_DEVICELOST := 2289436776
Global D3DERR_DEVICENOTRESET := 2289436777
Global D3DERR_DEVICEREMOVED := 2289436784
Global D3DERR_DRIVERINTERNALERROR := 2289436711
Global D3DERR_DRIVERINVALIDCALL := 2289436781
Global D3DERR_INVALIDCALL := 2289436780
Global D3DERR_INVALIDDEVICE := 2289436779
Global D3DERR_MOREDATA := 2289436775
Global D3DERR_NOTAVAILABLE := 2289436778
Global D3DERR_NOTFOUND := 2289436774
Global D3DERR_OUTOFVIDEOMEMORY := 2289435004
Global D3DERR_TOOMANYOPERATIONS := 2289436701
Global D3DERR_UNSUPPORTEDALPHAARG := 2289436700
Global D3DERR_UNSUPPORTEDALPHAOPERATION := 2289436699
Global D3DERR_UNSUPPORTEDCOLORARG := 2289436698
Global D3DERR_UNSUPPORTEDCOLOROPERATION := 2289436697
Global D3DERR_UNSUPPORTEDFACTORVALUE := 2289436703
Global D3DERR_UNSUPPORTEDTEXTUREFILTER := 2289436706
Global D3DERR_WASSTILLDRAWING := 2289435164
Global D3DERR_WRONGTEXTUREFORMAT := 2289436696
Global D3DOK_NOAUTOGEN := 141953135
Global S_NOT_RESIDENT := 141953141
Global S_PRESENT_MODE_CHANGED := 141953143
Global S_PRESENT_OCCLUDED := 141953144
Global S_RESIDENT_IN_SHARED_MEMORY := 141953142
Global d3D9types := {}
Global D3D9_RESOURCE_PRIORITY_HIGH := 2684354560
Global D3D9_RESOURCE_PRIORITY_LOW := 1342177280
Global D3D9_RESOURCE_PRIORITY_MAXIMUM := 3355443200
Global D3D9_RESOURCE_PRIORITY_MINIMUM := 671088640
Global D3D9_RESOURCE_PRIORITY_NORMAL := 2013265920
Global D3D_MAX_SIMULTANEOUS_RENDERTARGETS := 4
Global D3DCOMPOSERECTS_MAXNUMRECTS := 65535
Global D3DCONVOLUTIONMONO_MAXWIDTH := 7
Global D3DCS_BACK := 0x00000020
Global D3DCS_BOTTOM := 0x00000008
Global D3DCS_FRONT := 0x00000010
Global D3DCS_LEFT := 0x00000001
Global D3DCS_PLANE0 := 0x00000040
Global D3DCS_PLANE1 := 0x00000080
Global D3DCS_PLANE2 := 0x00000100
Global D3DCS_PLANE3 := 0x00000200
Global D3DCS_PLANE4 := 0x00000400
Global D3DCS_PLANE5 := 0x00000800
Global D3DCS_RIGHT := 0x00000002
Global D3DCS_TOP := 0x00000004
Global D3DDMAPSAMPLER := 256
Global D3DDP_MAXTEXCOORD := 8
Global D3DFMT_A1_SURFACE_MAXHEIGHT := 2048
Global D3DFMT_A1_SURFACE_MAXWIDTH := 8192
Global D3DFVF_DIFFUSE := 64
Global D3DFVF_LASTBETA_D3DCOLOR := 32768
Global D3DFVF_LASTBETA_UBYTE4 := 4096
Global D3DFVF_NORMAL := 16
Global D3DFVF_POSITION_MASK := 16398
Global D3DFVF_PSIZE := 32
Global D3DFVF_RESERVED0 := 1
Global D3DFVF_RESERVED2 := 24576
Global D3DFVF_SPECULAR := 128
Global D3DFVF_TEX1 := 256
Global D3DFVF_TEX2 := 512
Global D3DFVF_TEX3 := 768
Global D3DFVF_TEX4 := 1024
Global D3DFVF_TEX5 := 1280
Global D3DFVF_TEX6 := 1536
Global D3DFVF_TEX7 := 1792
Global D3DFVF_TEX8 := 2048
Global D3DFVF_TEXCOUNT_MASK := 3840
Global D3DFVF_TEXCOUNT_SHIFT := 8
Global D3DFVF_TEXTUREFORMAT1 := 3
Global D3DFVF_TEXTUREFORMAT3 := 1
Global D3DFVF_TEXTUREFORMAT4 := 2
Global D3DFVF_XYZ := 2
Global D3DFVF_XYZB1 := 6
Global D3DFVF_XYZB2 := 8
Global D3DFVF_XYZB3 := 10
Global D3DFVF_XYZB4 := 12
Global D3DFVF_XYZB5 := 14
Global D3DFVF_XYZRHW := 4
Global D3DFVF_XYZW := 16386
Global D3DLOCK_DISCARD := 0x00002000
Global D3DLOCK_DONOTWAIT := 0x00004000
Global D3DLOCK_NO_DIRTY_UPDATE := 0x00008000
Global D3DLOCK_NOOVERWRITE := 0x00001000
Global D3DLOCK_NOSYSLOCK := 0x00000800
Global D3DLOCK_READONLY := 0x00000010
Global D3DMAXUSERCLIPPLANES := 32
Global D3DPRESENTFLAG_DEVICECLIP := 4
Global D3DPRESENTFLAG_DISCARD_DEPTHSTENCIL := 2
Global D3DPRESENTFLAG_LOCKABLE_BACKBUFFER := 1
Global D3DPRESENTFLAG_NOAUTOROTATE := 32
Global D3DPRESENTFLAG_UNPRUNEDMODE := 64
Global D3DPRESENTFLAG_VIDEO := 16
Global D3DPS_END := 65535
Global D3DSHADER_ADDRESSMODE_SHIFT := 13
Global D3DSI_COISSUE := 1073741824
Global D3DSI_COMMENTSIZE_MASK := 2147418112
Global D3DSI_COMMENTSIZE_SHIFT := 16
Global D3DSI_INSTLENGTH_MASK := 251658240
Global D3DSI_INSTLENGTH_SHIFT := 24
Global D3DSI_OPCODE_MASK := 65535
Global D3DSP_DCL_USAGE_MASK := 15
Global D3DSP_DCL_USAGEINDEX_MASK := 983040
Global D3DSP_DCL_USAGEINDEX_SHIFT := 16
Global D3DSP_DSTMOD_MASK := 15728640
Global D3DSP_DSTMOD_SHIFT := 20
Global D3DSP_DSTSHIFT_MASK := 251658240
Global D3DSP_DSTSHIFT_SHIFT := 24
Global D3DSP_OPCODESPECIFICCONTROL_MASK := 16711680
Global D3DSP_OPCODESPECIFICCONTROL_SHIFT := 16
Global D3DSP_REGNUM_MASK := 2047
Global D3DSP_REGTYPE_MASK := 1879048192
Global D3DSP_REGTYPE_MASK2 := 6144
Global D3DSP_REGTYPE_SHIFT := 28
Global D3DSP_REGTYPE_SHIFT2 := 8
Global D3DSP_SRCMOD_MASK := 251658240
Global D3DSP_SRCMOD_SHIFT := 24
Global D3DSP_SWIZZLE_MASK := 16711680
Global D3DSP_SWIZZLE_SHIFT := 16
Global D3DSP_TEXTURETYPE_MASK := 2013265920
Global D3DSP_TEXTURETYPE_SHIFT := 27
Global D3DSP_WRITEMASK_0 := 65536
Global D3DSP_WRITEMASK_1 := 131072
Global D3DSP_WRITEMASK_2 := 262144
Global D3DSP_WRITEMASK_3 := 524288
Global D3DSP_WRITEMASK_ALL := 983040
Global D3DTA_ALPHAREPLICATE := 32
Global D3DTA_COMPLEMENT := 16
Global D3DTA_CONSTANT := 6
Global D3DTA_CURRENT := 1
Global D3DTA_SELECTMASK := 15
Global D3DTA_SPECULAR := 4
Global D3DTA_TEMP := 5
Global D3DTA_TEXTURE := 2
Global D3DTA_TFACTOR := 3
Global D3DTSS_TCI_CAMERASPACENORMAL := 65536
Global D3DTSS_TCI_CAMERASPACEPOSITION := 131072
Global D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR := 196608
Global D3DTSS_TCI_SPHEREMAP := 262144
Global D3DVS_ADDRESSMODE_SHIFT := 13
Global D3DVS_END := 65535
Global D3DVS_SWIZZLE_MASK := 16711680
Global D3DVS_SWIZZLE_SHIFT := 16
Global D3DWRAP_U := 0x00000001
Global D3DWRAP_V := 0x00000002
Global D3DWRAP_W := 0x00000004
Global D3DWRAPCOORD_0 := 0x00000001
Global D3DWRAPCOORD_1 := 0x00000002
Global D3DWRAPCOORD_2 := 0x00000004
Global D3DWRAPCOORD_3 := 0x00000008
Global DIRECT3D_VERSION := 2304
Global MAX_DEVICE_IDENTIFIER_STRING := 512
Global MAXD3DDECLLENGTH := 64
Global MAXD3DDECLUSAGEINDEX := 15
Global D3DLIGHT_POINT := 1
Global D3DLIGHT_SPOT := 2
Global D3DLIGHT_DIRECTIONAL := 3
Global D3DSHADE_FLAT := 1
Global D3DSHADE_GOURAUD := 2
Global D3DSHADE_PHONG := 3
Global D3DFILL_POINT := 1
Global D3DFILL_WIREFRAME := 2
Global D3DFILL_SOLID := 3
Global D3DBLEND_ZERO := 1
Global D3DBLEND_ONE := 2
Global D3DBLEND_SRCCOLOR := 3
Global D3DBLEND_INVSRCCOLOR := 4
Global D3DBLEND_SRCALPHA := 5
Global D3DBLEND_INVSRCALPHA := 6
Global D3DBLEND_DESTALPHA := 7
Global D3DBLEND_INVDESTALPHA := 8
Global D3DBLEND_DESTCOLOR := 9
Global D3DBLEND_INVDESTCOLOR := 10
Global D3DBLEND_SRCALPHASAT := 11
Global D3DBLEND_BOTHSRCALPHA := 12
Global D3DBLEND_BOTHINVSRCALPHA := 13
Global D3DBLEND_SRCCOLOR2 := 16
Global D3DBLEND_INVSRCCOLOR2 := 17
Global D3DBLENDOP_ADD := 1
Global D3DBLENDOP_SUBTRACT := 2
Global D3DBLENDOP_REVSUBTRACT := 3
Global D3DBLENDOP_MIN := 4
Global D3DBLENDOP_MAX := 5
Global D3DTADDRESS_WRAP := 1
Global D3DTADDRESS_MIRROR := 2
Global D3DTADDRESS_CLAMP := 3
Global D3DTADDRESS_BORDER := 4
Global D3DTADDRESS_MIRRORONCE := 5
Global D3DCULL_NONE := 1
Global D3DCULL_CW := 2
Global D3DCULL_CCW := 3
Global D3DCMP_NEVER := 1
Global D3DCMP_LESS := 2
Global D3DCMP_EQUAL := 3
Global D3DCMP_LESSEQUAL := 4
Global D3DCMP_GREATER := 5
Global D3DCMP_NOTEQUAL := 6
Global D3DCMP_GREATEREQUAL := 7
Global D3DCMP_ALWAYS := 8
Global D3DSTENCILOP_KEEP := 1
Global D3DSTENCILOP_ZERO := 2
Global D3DSTENCILOP_REPLACE := 3
Global D3DSTENCILOP_INCRSAT := 4
Global D3DSTENCILOP_DECRSAT := 5
Global D3DSTENCILOP_INVERT := 6
Global D3DSTENCILOP_INCR := 7
Global D3DSTENCILOP_DECR := 8
Global D3DFOG_EXP := 1
Global D3DFOG_EXP2 := 2
Global D3DFOG_LINEAR := 3
Global D3DZB_TRUE := 1
Global D3DPT_POINTLIST := 1
Global D3DPT_LINELIST := 2
Global D3DPT_LINESTRIP := 3
Global D3DPT_TRIANGLELIST := 4
Global D3DPT_TRIANGLESTRIP := 5
Global D3DPT_TRIANGLEFAN := 6
Global D3DTS_VIEW := 2
Global D3DTS_PROJECTION := 3
Global D3DTS_TEXTURE0 := 16
Global D3DTS_TEXTURE1 := 17
Global D3DTS_TEXTURE2 := 18
Global D3DTS_TEXTURE3 := 19
Global D3DTS_TEXTURE4 := 20
Global D3DTS_TEXTURE5 := 21
Global D3DTS_TEXTURE6 := 22
Global D3DTS_TEXTURE7 := 23
Global D3DRS_CLIPPING := 136
Global D3DRS_LIGHTING := 137
Global D3DRS_AMBIENT := 139
Global D3DRS_FOGVERTEXMODE := 140
Global D3DRS_COLORVERTEX := 141
Global D3DRS_LOCALVIEWER := 142
Global D3DRS_NORMALIZENORMALS := 143
Global D3DRS_DIFFUSEMATERIALSOURCE := 145
Global D3DRS_SPECULARMATERIALSOURCE := 146
Global D3DRS_AMBIENTMATERIALSOURCE := 147
Global D3DRS_EMISSIVEMATERIALSOURCE := 148
Global D3DRS_VERTEXBLEND := 151
Global D3DRS_CLIPPLANEENABLE := 152
Global D3DRS_MULTISAMPLEANTIALIAS := 161
Global D3DRS_COLORWRITEENABLE := 168
Global D3DRS_SLOPESCALEDEPTHBIAS := 175
Global D3DRS_ANTIALIASEDLINEENABLE := 176
Global D3DRS_MINTESSELLATIONLEVEL := 178
Global D3DRS_MAXTESSELLATIONLEVEL := 179
Global D3DRS_ADAPTIVETESS_X := 180
Global D3DRS_ADAPTIVETESS_Y := 181
Global D3DRS_ADAPTIVETESS_Z := 182
Global D3DRS_ADAPTIVETESS_W := 183
Global D3DRS_ENABLEADAPTIVETESSELLATION := 184
Global D3DRS_DEPTHBIAS := 195
Global D3DRS_WRAP9 := 199
Global D3DRS_WRAP10 := 200
Global D3DRS_WRAP11 := 201
Global D3DRS_WRAP12 := 202
Global D3DRS_WRAP13 := 203
Global D3DRS_WRAP14 := 204
Global D3DRS_WRAP15 := 205
Global D3DTOP_DISABLE := 1
Global D3DTOP_MODULATE := 4
Global D3DTOP_MULTIPLYADD := 25
Global D3DSIO_TEXCOORD := 64
Global D3DSIO_PHASE := 0xFFFD
Global D3DSIO_COMMENT := 0xFFFE
Global D3DSIO_END := 0xFFFF
Global D3DSIO_FORCE_DWORD := 0x7fffffff
Global D3DSPC_RESERVED1 := 7
Global D3DSTT_UNKNOWN := 0<<D3DSP_TEXTURETYPE_SHIFT
Global D3DSRO_FORCE_DWORD := 0x7fffffff
Global D3DVS_ADDRMODE_ABSOLUTE := (0 << D3DVS_ADDRESSMODE_SHIFT)
Global D3DVS_ADDRMODE_RELATIVE := (1 << D3DVS_ADDRESSMODE_SHIFT)
Global D3DVS_ADDRMODE_FORCE_DWORD := 0x7fffffff
Global D3DSHADER_ADDRMODE_ABSOLUTE := (0 << D3DSHADER_ADDRESSMODE_SHIFT)
Global D3DSHADER_ADDRMODE_RELATIVE := (1 << D3DSHADER_ADDRESSMODE_SHIFT)
Global D3DSHADER_ADDRMODE_FORCE_DWORD := 0x7fffffff
Global D3DSPSM_NONE := 0<<D3DSP_SRCMOD_SHIFT
Global D3DBASIS_BSPLINE := 1
Global D3DBASIS_FORCE_DWORD := 0x7fffffff
Global D3DDEGREE_LINEAR := 1
Global D3DDEGREE_QUADRATIC := 2
Global D3DDEGREE_CUBIC := 3
Global D3DDEGREE_QUINTIC := 5
Global D3DDEGREE_FORCE_DWORD := 0x7fffffff
Global D3DPATCHEDGE_CONTINUOUS := 1
Global D3DPATCHEDGE_FORCE_DWORD := 0x7fffffff
Global D3DSBT_ALL := 1
Global D3DDEVTYPE_HAL := 1
Global D3DDEVTYPE_REF := 2
Global D3DDEVTYPE_SW := 3
Global D3DDEVTYPE_NULLREF := 4
Global D3DDEVTYPE_FORCE_DWORD := 0x7fffffff
Global D3DMULTISAMPLE_NONMASKABLE := 1
Global D3DMULTISAMPLE_2_SAMPLES := 2
Global D3DMULTISAMPLE_3_SAMPLES := 3
Global D3DMULTISAMPLE_4_SAMPLES := 4
Global D3DMULTISAMPLE_5_SAMPLES := 5
Global D3DMULTISAMPLE_6_SAMPLES := 6
Global D3DMULTISAMPLE_7_SAMPLES := 7
Global D3DMULTISAMPLE_8_SAMPLES := 8
Global D3DMULTISAMPLE_9_SAMPLES := 9
Global D3DMULTISAMPLE_10_SAMPLES := 10
Global D3DMULTISAMPLE_11_SAMPLES := 11
Global D3DMULTISAMPLE_12_SAMPLES := 12
Global D3DMULTISAMPLE_13_SAMPLES := 13
Global D3DMULTISAMPLE_14_SAMPLES := 14
Global D3DMULTISAMPLE_15_SAMPLES := 15
Global D3DMULTISAMPLE_16_SAMPLES := 16
Global D3DMULTISAMPLE_FORCE_DWORD := 0x7fffffff
Global D3DFMT_R8G8B8 := 20
Global D3DFMT_A8R8G8B8 := 21
Global D3DFMT_X8R8G8B8 := 22
Global D3DFMT_R5G6B5 := 23
Global D3DFMT_X1R5G5B5 := 24
Global D3DFMT_A1R5G5B5 := 25
Global D3DFMT_A4R4G4B4 := 26
Global D3DFMT_R3G3B2 := 27
Global D3DFMT_A8 := 28
Global D3DFMT_A8R3G3B2 := 29
Global D3DFMT_X4R4G4B4 := 30
Global D3DFMT_A2B10G10R10 := 31
Global D3DFMT_A8B8G8R8 := 32
Global D3DFMT_X8B8G8R8 := 33
Global D3DFMT_G16R16 := 34
Global D3DFMT_A2R10G10B10 := 35
Global D3DFMT_A16B16G16R16 := 36
Global D3DFMT_A8P8 := 40
Global D3DFMT_P8 := 41
Global D3DFMT_L8 := 50
Global D3DFMT_A8L8 := 51
Global D3DFMT_A4L4 := 52
Global D3DFMT_V8U8 := 60
Global D3DFMT_L6V5U5 := 61
Global D3DFMT_X8L8V8U8 := 62
Global D3DFMT_Q8W8V8U8 := 63
Global D3DFMT_V16U16 := 64
Global D3DFMT_A2W10V10U10 := 67
Global D3DFMT_D16_LOCKABLE := 70
Global D3DFMT_D32 := 71
Global D3DFMT_D15S1 := 73
Global D3DFMT_D24S8 := 75
Global D3DFMT_D24X8 := 77
Global D3DFMT_D24X4S4 := 79
Global D3DFMT_D16 := 80
Global D3DFMT_D32F_LOCKABLE := 82
Global D3DFMT_D24FS8 := 83
Global D3DFMT_D32_LOCKABLE := 84
Global D3DFMT_S8_LOCKABLE := 85
Global D3DFMT_L16 := 81
Global D3DFMT_VERTEXDATA := 100
Global D3DFMT_INDEX16 := 101
Global D3DFMT_INDEX32 := 102
Global D3DFMT_Q16W16V16U16 := 110
Global D3DFMT_R16F := 111
Global D3DFMT_G16R16F := 112
Global D3DFMT_A16B16G16R16F := 113
Global D3DFMT_R32F := 114
Global D3DFMT_G32R32F := 115
Global D3DFMT_A32B32G32R32F := 116
Global D3DFMT_CxV8U8 := 117
Global D3DFMT_A1 := 118
Global D3DFMT_BINARYBUFFER := 199
Global D3DFMT_FORCE_DWORD := 0x7fffffff
Global D3DSWAPEFFECT_DISCARD := 1
Global D3DSWAPEFFECT_FLIP := 2
Global D3DSWAPEFFECT_COPY := 3
Global D3DSWAPEFFECT_FORCE_DWORD := 0x7fffffff
Global D3DPOOL_MANAGED := 1
Global D3DPOOL_SYSTEMMEM := 2
Global D3DPOOL_SCRATCH := 3
Global D3DPOOL_FORCE_DWORD := 0x7fffffff
Global D3DBACKBUFFER_TYPE_LEFT := 1
Global D3DBACKBUFFER_TYPE_RIGHT := 2
Global D3DBACKBUFFER_TYPE_FORCE_DWORD := 0x7fffffff
Global D3DRTYPE_SURFACE := 1
Global D3DRTYPE_VOLUME := 2
Global D3DRTYPE_TEXTURE := 3
Global D3DRTYPE_VOLUMETEXTURE := 4
Global D3DRTYPE_CUBETEXTURE := 5
Global D3DRTYPE_VERTEXBUFFER := 6
Global D3DRTYPE_INDEXBUFFER := 7
Global D3DCUBEMAP_FACE_NEGATIVE_X := 1
Global D3DCUBEMAP_FACE_POSITIVE_Y := 2
Global D3DCUBEMAP_FACE_NEGATIVE_Y := 3
Global D3DCUBEMAP_FACE_POSITIVE_Z := 4
Global D3DCUBEMAP_FACE_NEGATIVE_Z := 5
Global D3DCUBEMAP_FACE_FORCE_DWORD := 0x7fffffff
Global D3DCOMPOSERECTS_COPY := 1
Global D3DCOMPOSERECTS_OR := 2
Global D3DCOMPOSERECTS_AND := 3
Global D3DCOMPOSERECTS_NEG := 4
Global D3DSCANLINEORDERING_PROGRESSIVE := 1
Global D3DSCANLINEORDERING_INTERLACED := 2
Global D3DDISPLAYROTATION_IDENTITY := 1
d3D9types.err := {}
d3D9.result[0 . ""] := "D3DERR_OK"
D3DPRESENT_PARAMETERS :=
(
"
  UINT                BackBufferWidth;
  UINT                BackBufferHeight;
  int                 BackBufferFormat;
  UINT                BackBufferCount;
  int                 MultiSampleType;
  DWORD               MultiSampleQuality;
  int                 SwapEffect;
  HWND                hDeviceWindow;
  BOOL                Windowed;
  BOOL                EnableAutoDepthStencil;
  int                 AutoDepthStencilFormat;
  DWORD               Flags;
  UINT                FullScreen_RefreshRateInHz;
  UINT                PresentationInterval;
" 
)
global D3DPRESENT_PARAMETERS := Struct(D3DPRESENT_PARAMETERS)
global D3DLOCKED_RECT := Struct("INT Pitch; uint pBits;")
D3DDISPLAYMODE :=
(
"
  UINT                Width;
  UINT                Height;
  UINT                RefreshRate;
  UINT                Format;  
" 
)
D3DDISPLAYMODEEX :=
(
"
  UINT                Size;
  UINT                Width;
  UINT                Height;
  UINT                RefreshRate;
  UINT                Format;
  UINT                ScanLineOrdering;
" 
)
global D3DDISPLAYMODE   := struct(D3DDISPLAYMODE)
global D3DDISPLAYMODEEX := struct(D3DDISPLAYMODEEX)
global D3DSURFACE_DESC  := struct("DWORD Format; DWORD Type; DWORD Usage; DWORD Pool; DWORD MultiSampleType; DWORD MultiSampleQuality; DWORD Width; DWORD Height")
global D3DVIEWPORT9     := struct("DWORD X; DWORD Y; DWORD Width; DWORD Height; float MinZ; float MaxZ;")
global D3D9_RECT        := struct("UINT X, Y, W, H;")
global IDirect3D9:=0, IDirect3DDevice9:=0, IDirect3DPixelShader9:=0, IDirect3DVertexBuffer9:=0
global IDirect3DTexture9:=0, IDirect3DMTexture9:=0, IDirect3DSurface9:=0, IDirect3DMSurface9:=0
global IDirect3DSwapChain9:=0, ISrfc9:=0, IZbuff9:=0, IDirect3DCubeTexture9:=0, IDirect3DCubeFace9:=0
globaL IDirect3DStateBlock9:=0
D3D9SetPixelFormat(s)
{
if instr(s, "DX")
return FourCC(s)
f := {"A8RGB" : D3DFMT_A8R8G8B8, "X8RGB" : D3DFMT_X8R8G8B8, "RG6B"  : D3DFMT_R5G6B5
,"X1RGB" : D3DFMT_X1R5G5B5, "A1RGB" : D3DFMT_A1R5G5B5, "A4RGB" : D3DFMT_A4R4G4B4}
return f[s]
}
D3D9GetPixelFormat(fmt)
{
f := {D3DFMT_A8R8G8B8 "": "A8RGB", D3DFMT_X8R8G8B8 "": "X8RGB", D3DFMT_A4R4G4B4 "": "A4RGB"
,D3DFMT_X1R5G5B5 "": "X1RGB", D3DFMT_A1R5G5B5 "": "A1RGB", D3DFMT_R5G6B5   "": "RG6B"
,D3DFMT_D24X8 "": "D24X8", D3DFMT_D24S8 "": "D24S8", D3DFMT_D16 "": "D16X0"}
loop, 5
f[FourCC("DXT" A_index) ""] := "DXT" A_index
return f[fmt . ""]
}
GetDirect3D9(h_win = "", windowed = True, refresh = 60, ww = 640, hh = 480
,pixelformat = "A8RGB", dll = "d3dx9_43.dll")
{
VarSetCapacity(SysDir, 261)
DllCall("GetSystemDirectoryW", Str, SysDir, UInt, 261)
hModule           := dllcall("LoadLibraryW", str, SysDir "\D3D9.dll")
hModule           := dllcall("LoadLibraryW", str, "d3d9.dll")
Direct3DCreate9   := dllcall("GetProcAddress", uint, hModule, astr, "Direct3DCreate9")
Direct3DCreate9Ex := dllcall("GetProcAddress", uint, hModule, astr, "Direct3DCreate9Ex")
if ( (! hModule) or (! Direct3DCreate9) or (! Direct3DCreate9Ex))
return "Failed to get the entry point of the Direct3DCreate9 procedure or get the handle to d3D9.dll " A_lasterror
p_D3D9 := dllcall(g_.pD3D9Create, uint, D3D_SDK_VERSION)
if not p_D3D9
return "Failed to create the IDirect3D9 interface " r " - " D3D9.result[r . ""]
IDirect3D9 := new ComInterfaceWrapper(D3D9.IDirect3D9, p_D3D9, True)
if ! h_win
h_win := A_scripthwnd
VarSetCapacity(p_d3D9Dev, 4)
ZeroMem(D3DPRESENT_PARAMETERS)
D3DPRESENT_PARAMETERS.Windowed         := windowed
D3DPRESENT_PARAMETERS.RefreshRateInHz  := refresh
D3DPRESENT_PARAMETERS.BackBufferWidth  := ww
D3DPRESENT_PARAMETERS.BackBufferHeight := hh
D3DPRESENT_PARAMETERS.SwapEffect       := 1
D3DPRESENT_PARAMETERS.hDeviceWindow    := h_win
D3DPRESENT_PARAMETERS.Flags            := (D3DPRESENT_LOCKABLE_BACKBUFFER := 0x00000001)
D3DPRESENT_PARAMETERS.BackBufferFormat := D3D9SetPixelFormat(pixelformat)
D3DPRESENT_PARAMETERS.EnableAutoDepthStencil := 1
D3DPRESENT_PARAMETERS.AutoDepthStencilFormat := 75
D3D_DISPLAYMODEX                  := struct("UINT Size; UINT Width; UINT Height; UINT RefreshRate; UINT Format; UINT ScanLineOrdering;")
D3D_DISPLAYMODEX.size             := D3D_DISPLAYMODEX.size()
D3D_DISPLAYMODEX.Width            := 640
D3D_DISPLAYMODEX.Width            := 480
D3D_DISPLAYMODEX.RefreshRate      := 60
D3D_DISPLAYMODEX.Format           := 21
D3D_DISPLAYMODEX.ScanLineOrdering := 1
logerr(D3D_DISPLAYMODEX.size " " IDirect3D9Ex.CreateDeviceEx)
r := dllcall(IDirect3D9.CreateDevice, ptr, IDirect3D9.p
, uint, 0
, uint, 1
, uint, h_win
, uint, D3DCREATE_HARDWARE_VERTEXPROCESSING
, ptr, D3DPRESENT_PARAMETERS[]
, "ptr*", pD3D9Dev:=0, uint)
if (r > 0)
return "Failed to create the IDirect3DDevice9 interface " r " - " D3D9.result[r . ""]
IDirect3DDevice9 := new ComInterfaceWrapper(D3D9.IDirect3DDevice9, pD3D9Dev, True)
if (r := dllcall(IDirect3DDevice9.CreateStateBlock, ptr, IDirect3dDevice9.p, uint, 1, "ptr*", sb:=0))
return "Failed to create the IDirect3DStateBlock9 interface " r " - " D3D9.result[r . ""]
IDirect3DStateBlock9 := new ComInterfaceWrapper(D3D9.IDirect3DStateBlock9, SB, True)
if (r := dllcall(IDirect3DDevice9.GetSwapChain, ptr, pD3D9Dev, uint, 0, "ptr*", pp:=0))
return 	"Failed to accquire the defalt swapchain " r D3D9.err[r . ""]
IDirect3DSwapChain9 := new ComInterfaceWrapper(D3D9.IDirect3DSwapChain9, pp, True)
if (r := dllcall(IDirect3DDevice9.GetBackBuffer, ptr, pD3D9Dev, uint, 0, uint, 0, uint, 0, "ptr*", bb:=0))
return 	"Failed to accquire the defalt framebuffer " r D3D9.err[r . ""]
IDirect3DSurface9 := new ComInterfaceWrapper(D3D9.IDirect3DSurface9, bb, True)
if (r := dllcall(IDirect3DDevice9.CreateCubeTexture, ptr, IDirect3DDevice9.p, uint, 16, uint, 1, uint, 1, uint
, D3D9SetPixelFormat("A8RGB"), uint, 0, "ptr*", cb:=0, uint, 0))
return "Failed to create cube texture " r D3D9.err[r . ""]
IDirect3DCubeTexture9 := new ComInterfaceWrapper(D3D9.IDirect3DCubeTexture9, cb, True)
if (r := dllcall(IDirect3DCubeTexture9.GetCubeMapSurface, ptr, cb, uint, 0, uint, 0, "ptr*", cbf:=0))
return "Failed to get cube texture face " r D3D9.err[r . ""]
IDirect3DCubeFace9 := new ComInterfaceWrapper(D3D9.IDirect3DSurface9, cbf, True)
D3DX9.__new(dll)
shader := "float4 PixelShaderFunction(float4 color: COLOR0) : COLOR0`n"
. "{`nreturn float4(0,0,0,0);`n};"
r := D3DX9.CompileShader(IDirect3DDevice9.p, shader, "PixelShaderFunction", pShader:=0)
if (r != 0)
return "Failed to create the IDirect3DPixelShader9 interface " r " - " D3D9.result[r . ""]
IDirect3DPixelShader9 := new ComInterfaceWrapper(D3D9.IDirect3DPixelShader9, pShader, True)
r := dllcall(IDirect3DDevice9.CreateVertexBuffer, ptr, IDirect3DDevice9.p, uint, 20, uint, 0
, uint, D3DFVF_XYZRHW | D3DFVF_DIFFUSE
, uint, 0, "ptr*", pVbuffer:=0, uint, 0)
if (r != 0)
return "Failed to create the IDirect3DVertexBuffer9 interface " r " - " D3D9.result[r . ""]
IDirect3DVertexBuffer9 :=  new ComInterfaceWrapper(D3D9.IDirect3DVertexBuffer9, pVbuffer, True)
r := dllcall(IDirect3DDevice9.CreateTexture, ptr, IDirect3Ddevice9.p, uint, 256, uint, 256, uint, 1
, uint, 0x00000200
, uint, D3D9SetPixelFormat(pixelformat), uint, 0
, "ptr*", p_text9:=0, uint, 0, uint)
if (r != 0)
return "Failed to create the IDirect3DTexture9 interface " r " - " D3D9.result[r . ""]
IDirect3DTexture9 := new ComInterfaceWrapper(D3D9.IDirect3DTexture9, p_text9, True)
return "Succeeded to create the Direct3D9 interfaces"
}
D3D9LoadTexture(pDevice, file)
{
static pLoadData2Surface
pLoadData2Surface ?: pLoadData2Surface := dllcall("GetProcAddress", uint, dllcall("GetModuleHandle", str, "peixoto.dll", uint)
, astr, "LoadData2Surface", uint)
if not (pixelformat := OpenDDS(file, hFile))
{
return print("Unknown pixelformat")
}
if (r := dllcall(IDirect3DDevice9.CreateTexture, uint, pDevice, uint, DDS_HEADER.dwWidth, uint, DDS_HEADER.dwHeight, uint, 1
, uint, 0, uint, D3D9SetPixelFormat(pixelformat), uint, 0, "uint*", pTexture, uint, 0)!= 0)
return printl("Failed to create video memory texture " r " " D3D9.err[r . ""])
if (r := dllcall(IDirect3DTexture9.GetSurfaceLevel, uint, pTexture, uint, 0, "uint*", pSurface) != 0)
return printl("Failed to create video memory surface " r " - " D3D9.result[r . ""])
if (r := dllcall(IDirect3DDevice9.CreateTexture, uint,pDevice, uint, DDS_HEADER.dwWidth, uint,  DDS_HEADER.dwHeight, uint, 1
, uint, 0, uint, D3D9SetPixelFormat(pixelformat), uint, 2, "uint*", pSTexture, uint, 0)!= 0)
return printl("Failed to create system memory texture " r " " D3D9.err[r . ""])
if (r := dllcall(IDirect3DTexture9.GetSurfaceLevel, uint, pSTexture, uint, 0, "uint*", pSSurface)!= 0)
return printl("Failed to create system memory surface " r " - " D3D9.result[r . ""])
if (r := dllcall(IDirect3DSurface9.LockRect, uint, pSSurface, uint, D3DLOCKED_RECT[], uint, 0, uint, 0)!= 0)
return printl("Failed to lock system memory texture " r " " D3D9.err[r . ""])
else
{
bytesperpixel := instr(pixelformat, "8") ? 4 : 2
dllcall(pLoadData2Surface, uint, D3DLOCKED_RECT.pBits, uint, hFile, uint, D3DLOCKED_RECT.pitch, uint, DDS_HEADER.dwWidth
, uint, DDS_HEADER.dwHeight, uint, bytesperpixel)
dllcall(IDirect3DSurface9.UnLockRect, uint, pSSurface)
}
if (r := dllcall(IDirect3DDevice9.UpdateSurface, uint, pDevice, uint, pSSurface, uint, 0, uint, pSurface, uint, 0)!= 0)
return printl("Failed to copy data from system to video texture " r " " D3D9.err[r . ""])
dllcall(IDirect3DTexture9.release, uint, pSTexture)
dllcall(IDirect3DSurface9.release, uint, pSSurface)
return pTexture
}
D3D9LoadManagedTexture(pDevice, file)
{
static pLoadData2Surface:=0
pTexture                :=0
pSurface                :=0
pLoadData2Surface ?: pLoadData2Surface := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "LoadData2Surface", uint)
if not (pixelformat := OpenDDS(file, hFile))
{
return print("Unknown pixelformat")
}
if (r := dllcall(IDirect3DDevice9.CreateTexture, uint, pDevice, uint, DDS_HEADER.dwWidth, uint, DDS_HEADER.dwHeight, uint, 1
, uint, 0, uint, D3D9SetPixelFormat(pixelformat), uint, 1, "uint*", pTexture, uint, 0)!= 0)
return printl("Failed to create managed texture " r " " D3D9.err[r . ""])
if (r := dllcall(IDirect3DTexture9.LockRect, uint, pTexture, uint, 0, uint, D3DLOCKED_RECT[], uint, 0, uint, 0)!= 0)
return printl("Failed to lock system memory texture " r " " D3D8.err[r . ""])
else
{
bytesperpixel := instr(pixelformat, "8") ? 4 : 2
dllcall(pLoadData2Surface, uint, D3DLOCKED_RECT.pBits, uint, hFile, uint, D3DLOCKED_RECT.pitch, uint, DDS_HEADER.dwWidth
, uint, DDS_HEADER.dwHeight, uint, bytesperpixel)
dllcall(IDirect3DTexture9.UnLockRect, uint, pTexture, uint, 0)
}
return pTexture
}
class Proxie9 {
__new(w, h, f, zf="", m=0)
{
u := m ? 0:1
r := dllcall(IDirect3DDevice9.CreateTexture, uint, g_.pDevice9, uint, w, uint, h, uint, 1
, uint, u, uint, f, uint, m, "uint*", t:=0, uint, 0, uint)
Logerr("Proxie: color buffer:         " r " " D3D9.err[r . ""] " " w "x" h " " D3D9GetPixelFormat(f))
if (r)
return r
r := dllcall(IDirect3DTexture9.GetSurfaceLevel, uint, t, uint, 0, "uint*", s:=0)
Logerr("Proxie: color buffer level 0: " r D3D9.err[r . ""])
if (r)
return r
this.t  := t
this.s  := s
this.zs := 0
if zf
{
r := dllcall(IDirect3DDevice9.CreateTexture, uint, g_.pDevice9, uint, w, uint, h, uint, 1
, uint, 2, uint, zf, uint, 0, "uint*", t:=0, uint, 0)
Logerr("Proxie: z buffer:             " r " " D3D9.err[r . ""])
if (r)
return r
r := dllcall(IDirect3DTexture9.GetSurfaceLevel, uint, t, uint, 0, "uint*", s:=0)
Logerr("Proxie: z buffer level 0:     " r D3D9.err[r . ""])
if (r)
return r
this.zt := t
this.zs := s
}
}
Set()
{
logerr("set target " dllcall(IDirect3DDevice9.SetRenderTarget, uint, g_.pDevice9, uint, 0, uint, this.s) " " this.s)
dllcall(IDirect3DDevice9.SetDepthStencilSurface, uint, g_.pDevice9, uint, this.zs)
}
__delete()
{
(this.t)?logerr("Release " dllcall(numget(numget(this.t+0, "ptr")+A_PtrSize*2, "ptr"), uint, this.t))
(this.s)?logerr("Release " dllcall(numget(numget(this.s+0, "ptr")+A_PtrSize*2, "ptr"), uint, this.s))
(this.zt)?logerr("Release " dllcall(numget(numget(this.zt+0, "ptr")+A_PtrSize*2, "ptr"), uint, this.zt))
(this.zs)?logerr("Release " dllcall(numget(numget(this.zs+0, "ptr")+A_PtrSize*2, "ptr"), uint, this.zs))
}
}
class SProxie9 {
__new(w, h, f, aa, q, zf="", d=0, m=0)
{
r := dllcall(IDirect3DDevice9.CreateRenderTarget, uint, g_.pDevice9, uint, w, uint, h, uint, f, uint, aa
, uint, q, uint, 0, "uint*", s:=0, uint, 0)
this.s  := s
this.zs := 0
if zf
{
r := dllcall(IDirect3DDevice9.CreateDepthStencilSurface, uint, g_.pDevice9, uint, w, uint, h, uint, zf
, uint, aa, uint, q, uint, d, "uint*", s:=0, uint, 0)
Logerr("Proxie: z buffer:             " r " " w " x " h " " D3D9GetPixelFormat(zf) " " D3D9.err[r . ""])
if (r)
return r
this.zs := s
}
}
Set()
{
logerr("set target " dllcall(IDirect3DDevice9.SetRenderTarget, uint, g_.pDevice9, uint, 0, uint, this.s) " " this.s)
logerr("set Z " dllcall(IDirect3DDevice9.SetDepthStencilSurface, uint, g_.pDevice9, uint, this.zs))
}
__delete()
{
(this.zs)?logerr("Release " dllcall(numget(numget(this.zs+0, "ptr")+A_PtrSize*2, "ptr"), uint, this.zs))
(this.s)?logerr("Release " dllcall(numget(numget(this.s+0, "ptr")+A_PtrSize*2, "ptr"), uint, this.s))
}
}
ReleaseDirect3D9()
{
return
IDirect3DStateBlock9.__release()
IDirect3DSwapChain9.__release()
IDirect3DPixelShader9.__release()
IDirect3DVertexBuffer9.__release()
IDirect3DSurface9.__release()
IDirect3DTexture9.__release()
IDirect3DCubeTexture9.__release()
IDirect3DCubeFace9.__release()
logerr("D3D9Device Release " IDirect3DDevice9.__release())
logerr("D3D9 Release " IDirect3D9.__release())
}
D3D9_HOOKS :=
(
"
LPVOID AhkDvc;
DWORD sdk;
DWORD BLNK;
DWORD DblTxlSz;
DWORD W, H, HD_W, HD_H, HD_X, rx, ry, rw, rh;
float scale;
LPVOID GtMntrNfoA; GtSysMtrcs;
LPVOID xBR;
LPVOID StFVF, STVxShdr, STVxDcl, StStream, EndBlck, ApplyBlck, RlsBlck;
LPVOID CrtVtxB, CrtIdxB;
LPVOID CreateTxHD, CreateCube, CreateRT, CreateZS;
LPVOID Draw, DrawIdx, DrawUp, DrawIdxUp, CFill, Clr, StrtchRct, Prsnt, StVW, GtVW, StScsr, GtScsr;
LPVOID GtRTDt, GtSrfcDsc, GtRTDsc, GtBck, GtDpth, StDpth, GtTrgt, StTrgt, RTLOck, RTUnlock;
LPVOID UPdateHDSrfc, UPdateHDTxtr;
LPVOID HDSrfc, HDZSrfc, SDSrfc, SDZSrfc, HlfSrfc;
LPVOID Srfcs;
LPVOID vrtx;
BOOL Pow2;
BOOL FixvPos;
LPVOID vPosFix;
DWORD Fltr;
LPVOID StSS;
LPVOID End; LPVOID Callback; LPVOID Font; DWORD fntx,fnty,fntw,fnth; LPCTSTR tex; DWORD color;
LPVOID t; LPVOID px; DWORD tx,ty,tw,th; LPVOID SetTexture; LPVOID ReleaseShader; LPCTSTR dump;
LPVOID pIDirect3DDevice9_CreateTexture;
LPVOID pIDirect3DDevice9_UpdateTexture;
LPVOID UpdtSrfc;
LPVOID pIDirect3DDevice9_StretchRect;
LPVOID pIDirect3DDevice9_SetTexture;
LPVOID pIDirect3DTexture9_GetSurfaceLevel;
LPVOID pIDirect3DTexture9_LockRect;
LPVOID pIDirect3DTexture9_UnlockRect;
LPVOID pIDirect3DTexture9_QueryInterface;
LPVOID pIDirect3DTexture9_Release;
LPVOID pIDirect3DSurface9_LockRect;
LPVOID pIDirect3DSurface9_UnlockRect;
LPVOID pIDirect3DSurface9_Release;
LPVOID RTRelease;
LPVOID CbtRls;
LPVOID CbsRls;
LPVOID pTextureFound;
BOOL   autodmp;
BOOl   dyntxts;
BOOL   safe;
BOOL   ignore_release;
BOOL   searching;
LPVOID Currentexture9;
LPVOID Textures;
LPVOID Surfaces;
LPVOID Replacements;
LPVOID Paths;
LPVOID Dev9;
LPVOID CreatePixelShader;
LPVOID SetPixelShader;
LPVOID GetFunction;
LPVOID Release;
LPVOID pShaderFound;
LPVOID Override;
BOOL   s_ignore_release;
BOOL   srchng;
BOOL   enabled;
LPVOID IsSelected;
LPVOID CurrentSelectedShader;
LPVOID Current;
LPVOID Shaders;
LPVOID Overrides;
LPVOID Blobs;
DWORD  SDumpsSize;
LPVOID SDumps;
LPCTSTR SPath;
LPCTSTR StxtPath;
"
)
global D3D9_HOOKS := struct(D3D9_HOOKS)
global D3D9_RECT  := struct("LPVOID t; LPVOID Px; DWORD x, y, w, h; LPVOID SetTx; LPVOID ShdrRelease;")
D3D9_HOOKS.color  := 0x00ffffff
g_.p.DrawRect9    := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "D3D9_DrawRect", uint)
global g_tswap9 := {}
Global DDSD_CAPS        := 0x00000001
Global DDSD_HEIGHT      := 0x00000002
Global DDSD_PITCH       := 0x00000008
Global DDSD_PIXELFORMAT := 0x00001000
Global DDSD_WIDTH       := 0x00000004
_TS9Init()
{
logerr(IDirect3DDevice9.dllHook("CreateTexture", "CreateTexture9Hook"))
logerr(IDirect3DDevice9.dllHook("SetTexture", "SetTexture9Hook"))
logerr(IDirect3DTexture9.dllHook("Release", "ReleaseTexture9Hook"))
logerr(IDirect3DSurface9.dllHook("Release", "ReleaseSurface9Hook"))
logerr(IDirect3DDevice9.dllHook("UpdateSurface", "UpdateSurface9Hook"))
D3D9_HOOKS.pIDirect3DDevice9_CreateTexture := IDirect3DDevice9.CreateTexture
D3D9_HOOKS.pIDirect3DDevice9_SetTexture    := IDirect3DDevice9.SetTexture
D3D9_HOOKS.pIDirect3DTexture9_Release      := IDirect3DTexture9.Release
D3D9_HOOKS.pIDirect3DSurface9_Release      := IDirect3DSurface9.Release
D3D9_HOOKS.UpdtSrfc                        := IDirect3DDevice9.UpdateSurface
g_tswap9.textures        := new Collection()
D3D9_HOOKS.Textures      := g_tswap9.textures.pc
g_tswap9.Replacements    := new Collection()
D3D9_HOOKS.Replacements  := g_tswap9.Replacements.pc
g_tswap9.Surfaces        := new Collection()
D3D9_HOOKS.Surfaces      := g_tswap9.Surfaces.pc
g_tswap9.paths           := new Collection()
D3D9_HOOKS.Paths         := g_tswap9.paths.pc
}
TS9Init(byref cfg)
{
g_tswap9      := parsecfg(cfg)
g_tswap9.srch := False
g_tswap9.path := g_.cfg.path g_tswap9.path
if ! g_tswap9.path
return
if (g_.cfg.common_path)
g_tswap9.path := g_.cfg.Mydocs "\WineHooks\Games\Textures"
for k, v in ["Dumps", "Replacements"]
{
if not fileexist(g_tswap9.path "\" v)
{
path := g_tswap9.path
FileCreateDir, %path%\%v%
}
}
D3D9_HOOKS.dyntxts := g_tswap9.l
g_tswap9.entry     := struct("LPVOID pTexture; DWORD ww; DWORD hh; DWORD type; DWORD format; LPVOID pData;"
. " DWORD pitch; DWORD bypp; BOOL DXT; LPVOID level0; BOOL warn; LPVOID hwnd")
dllcall("peixoto.dll\SetSampleCount", uint, g_tswap9.s)
dllcall("peixoto.dll\SetTexturePaths", str, g_tswap9.path "/dumps/", astr, g_.cfg.MyDocs "\WineHooks\checkerboard.dds")
if fileexist((comp := g_tswap9.path "\Dumps\dump._dds"))
LoadCompiledDumpCollection(comp, lst := [])
else LoadDumpCollection(g_tswap9.path "\Dumps", lst := [])
g_tswap9.dumps := []
D3D9_HOOKS.pTextureFound := RegisterCallback("TextSwap9LoadReplacement", "F")
D3D9_HOOKS.autodmp       := g_tswap9.a
_TS9Init()
return
logerr(IDirect3DDevice9.dllHook("UpdateTexture", "UpdateTexture9Hook"))
logerr(IDirect3DMTexture9.dllHook("GetSurfaceLevel", "GetSurfaceLevel9Hook"))
logerr(IDirect3DMTexture9.dllHook("LockRect", "LockTexture9RectHook"))
logerr(IDirect3DMTexture9.dllHook("UnLockRect", "UnLockTexture9RectHook"))
logerr(IDirect3DMSurface9.dllHook("LockRect", "LockManagedSurface9RectHook"))
logerr(IDirect3DMSurface9.dllHook("UnLockRect", "UnLockManagedSurface9RectHook"))
D3D9_HOOKS.pIDirect3DDevice9_UpdateTexture     := IDirect3DDevice9.UpdateTexture
D3D9_HOOKS.pIDirect3DMTexture9_GetSurfaceLevel := IDirect3DMTexture9.GetSurfaceLevel
D3D9_HOOKS.pIDirect3DMTexture9_LockRect        := IDirect3DMTexture9.LockRect
D3D9_HOOKS.pIDirect3DMTexture9_UnLockRect      := IDirect3DMTexture9.UnLockRect
D3D9_HOOKS.pIDirect3DMSurface9_LockRect        := IDirect3DMSurface9.LockRect
D3D9_HOOKS.pIDirect3DMSurface9_UnLockRect      := IDirect3DMSurface9.UnLockRect
}
TextSwap9LoadReplacement(index, pOriginal)
{
printl("Found " index " " pOriginal)
if (tex := D3D9LoadManagedTexture(g_.pDevice9, g_tswap9.dumps[index].replacement))
{
dllcall(g_.p_Critical, uint, 1)
if (old := g_tswap9.Replacements.value(pOriginal))
dllcall(IDirect3DTexture9.release, uint, old)
g_tswap9.Replacements._add(pOriginal, tex)
dllcall(g_.p_Critical, uint, 0)
}
return
}
BrowseTextures9(pDevice)
{
static idx :=0, _type := ["Video memory", "Managed", "System memory (don't dump)", "Scratch (don't dump)", "Dynamic"]
(idx >= g_tswap9.textures.Count()) ? idx := 0 : (idx < 0 )
?idx := g_tswap9.textures.Count() - 1
fnc := getkeystate(g_tswap9.q, "p") ? "getkeystate" : "keyevent"
e   := g_tswap9.entry
if ! (e[] := g_tswap9.textures.ValueAt(idx))
return
dump := 0
if %fnc%(g_tswap9.n, "p")
idx += 1
else if %fnc%(g_tswap9.p, "p")
idx -= 1
else if keyevent(g_tswap9.d)
{
dump := 1
n    := 0
file := "dump" n ".dds"
while fileexist(g_tswap9.path "\dumps\" file)
{
n += 1
file := "dump" n ".dds"
}
D3D9_HOOKS.dump := g_tswap9.path "\dumps\" file
}
keyevent(g_tswap9.c) ? D3D9_HOOKS.color := CicleColor(D3D9_HOOKS.color)
tx     := e.pTexture
fmt    := D3D9GetPixelFormat(e.format)
count  := g_tswap9.textures.Count()
DXT    := e.DXT
draw   := (e.type < 2)
warn   := (e.warn) ? "Can't dump. Activate search before the texture is loaded`n" : _type[e.type+1] "`n"
level0 := (e.level0) ? "Level0: OK" : "Level0: NO"
D3D9_HOOKS.Currentexture9 := e.pTexture
D3D9_HOOKS.t              := e.pTexture
D3D9_HOOKS.tex            := "D3D9 - "  g_tswap9.Replacements.count() " replacements`n"
. "Texture " idx "/" count " - " e.format " " fmt "(" DXT ")"  e.ww "x" e.hh "`n" warn . level0 ", active surfaces: " . count "`n" e.ww "x" e.hh
. "`nReplacement: " g_tswap9.Replacements.Value(e.pTexture)
return ((e.type = 2) || (e.type = 3)) ? 3 : dump+1
}
global g_pswap9 := {}
PS9LdDmps(d)
{
n := g_pswap9.dumps.Length() + 1
loop, %d%\*.bin, 0, 0
{
f := fileopen(A_loopfilefullpath, "r")
p := dllcall("VirtualAlloc", uint, 0, uint, f.Length+4, "Int", 0x1000, uint, (PAGE_READWRITE := 0x04))
printl("file " A_loopfilename " " g_pswap9[A_loopfilename] " " f.Length)
numput(f.Length, p+0, "uint")
f.RawRead(p+4, f.Length)
if fileexist( (file := strsplit(A_loopfilefullpath, ".bin")[1] ".hlsl") )
{
fileread, code, %file%
g_pswap9.dumps[n] := {"p" : p, "mode" : "hlsl", "code" : code}
r := D3DX9.HLSLtoDXBC(code, "main", blob)
if (r)
logerr("Compilation failed " r)
else
{
logerr("HLSL shader OK =) " n " " blob " " g_pswap9.Blobs._add(n, blob) )
}
}
else if fileexist( (file := strsplit(A_loopfilefullpath, ".bin")[1] ".txt") )
{
fileread, code, %file%
g_pswap9.dumps[n] := {"p" : p, "mode" : "Asm", "code" : code}
r := D3DX9.Asm2DXBC(code, blob)
if (r)
logerr("Compilation failed")
else
{
logerr("Asm shader OK =)")
g_pswap9.Blobs._add(n, blob)
}
}
else g_pswap9.dumps[n] := {"p" : p, "mode" : ""}
n += 1
f.close()
}
logerr(g_pswap9.Blobs.Count() " Shaders " IsObject(g_pswap9.Blobs) " " IsObject(g_pswap9.shaders))
}
_PS9Init()
{
logerr(IDirect3DDevice9.dllHook("CreatePixelShader", "CreatePixelShader9Hook"))
logerr(IDirect3DDevice9.dllHook("SetPixelShader", (g_pswap9.dev) ? "SetPixelShader9HookD" : "SetPixelShader9Hook"))
logerr(IDirect3DPixelShader9.dllHook("Release", "ReleasePixelShader9Hook"))
D3D9_HOOKS.CreatePixelShader       := IDirect3DDevice9.CreatePixelShader
D3D9_HOOKS.SetPixelShader          := IDirect3DDevice9.SetPixelShader
D3D9_HOOKS.Release                 := IDirect3DPixelShader9.release
g_pswap9.shaders       := new Collection()
D3D9_HOOKS.Shaders     := g_pswap9.shaders.pc
g_pswap9.Overrides     := new Collection()
D3D9_HOOKS.Overrides   := g_pswap9.Overrides.pc
g_pswap9.Blobs         := new Collection()
D3D9_HOOKS.Blobs       := g_pswap9.Blobs.pc
}
PS9Init(byref cfg)
{
g_pswap9 := parsecfg(cfg)
g_pswap9.code := "sampler s0 : register(s0);`nfloat4 main(float2 tex: TEXCOORD0) : COLOR0`n{`nreturn tex2D(s0, tex);`n};"
D3D9_HOOKS.enabled	   := 1
g_pswap9.user_path := g_.cfg.path "pixelshaders"
if ! fileexist(g_pswap9.user_path)
{
path := g_pswap9.user_path
FileCreateDir, %path%
}
name           := g_.cfg.target_name
StringLower, name, name
name           := strsplit(name, ".exe")[1]
g_pswap9.path  := g_.cfg.injector_dir "\patches\" name
logerr("Shader dumps Path: " g_pswap9.path " " g_pswap9.user_path)
_PS9Init()
g_pswap9.dumps := []
PS9LdDmps(g_pswap9.path)
PS9LdDmps(g_pswap9.user_path)
n := g_pswap9.dumps.Length()
D3D9_HOOKS.SDumpsSize := n
D3D9_HOOKS.Sdumps     := dllcall("VirtualAlloc", uint, 0, uint, n*4, "Int", 0x1000, uint, (PAGE_READWRITE := 0x04))
for k, v in g_pswap9.dumps
{
numput(v.p, D3D9_HOOKS.Sdumps + (k-1)*4, "uint")
}
D3D9_HOOKS.pShaderFound := RegisterCallback("d3D9ShaderFound", "f")
}
D3D9ShaderFound(index, Original, sz, szb)
{
logerr("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
if (g_pswap9.dumps[index].mode = "Asm")
{
err := D3DX9.AssembleShader(g_.pDevice9, g_pswap9.dumps[index].code, pShader)
if ! err
g_pswap9.Overrides._add(Original, pShader)
printl("Shader substitution: " err "`n" g_pswap9.dumps[index].code)
}
else if (g_pswap9.dumps[index].mode = "hlsl")
{
err := D3DX9.CompileShader(g_.pDevice9, g_pswap9.dumps[index].code, "main", pShader)
if ! err
g_pswap9.Overrides._add(Original, pShader)
printl("Shader hlsl substitution: " err "`n" g_pswap9.dumps[index].code)
}
}
BrowseShaders9(pDevice)
{
static i = 0
fn := getkeystate(g_pswap9.q, "p") ? "getkeystate" : "keyevent"
if ! ( c := g_pswap9.shaders.ValueAt(i))
return
D3D9_HOOKS.CurrentSelectedShader := c
if %fn%(g_pswap9.n, "p")
{
i += 1
if (i >= g_pswap9.shaders.Count())
i := 0
}
else if %fn%(g_pswap9.p, "p")
{
i -= 1
if (i < 0)
i := g_pswap9.shaders.Count() - 1
}
else if keyevent(g_pswap9.d)
{
n     := 0
file  := g_pswap9.path "\dump" n ".bin"
ufile := g_pswap9.user_path "\dump" n ".bin"
while fileexist(file) or fileexist(ufile)
{
n     += 1
file  := g_pswap9.path "\dump" n ".bin"
ufile := g_pswap9.user_path "\dump" n ".bin"
}
D3D9_HOOKS.SPath := ufile
stringreplace, ufile, ufile, .bin, .txt
D3D9_HOOKS.StxtPath := ufile
return 5
f := FileOpen(ufile, "w")
f.RawWrite(&d, sz)
f.close()
code := D3DX9.DisassembleShader(&d)
logerr("Disassembled")
stringreplace, ufile, ufile, .bin, .txt
if not fileexist(ufile)
fileappend, % code, % ufile
}
return 4
D3DX9.DrawText(g_.D3D9Font, "shader " i "/" g_pswap9.shaders.Count() " " current
, 0xFFFF0000,"0|0|255|255")
}
global VW9 := struct(D3DVIEWPORT9)
D3D9_HOOKS.vrtx := dllcall("VirtualAlloc", uint, 0, uint, 2097152, Int, 0x00001000, uint, 0x04)
D3D9CreateHook(p1){
logerr("==================================================================")
D3DPRESENT_PARAMETERS.hDeviceWindow := ""
g_.Proxies     := {}
g_.pDevice9    := ""
D3D9_HOOKS.sdk := p1
return dllcall(g_.pD3D9Create, uint, p1)
}
D3D9CreateExHook(p1, p2){
logerr("==================================================================")
D3DPRESENT_PARAMETERS.hDeviceWindow := ""
g_.Proxies     := {}
g_.pDevice9    := ""
D3D9_HOOKS.sdk := p1
return dllcall(g_.pD3D9CreateEx, uint, p1, ptr p2)
}
HookD3D9Create(){
VarSetCapacity(SysDir, 261)
DllCall("GetSystemDirectoryW", Str, SysDir, UInt, 261)
logerr("D3D9Create Hook: " InstallHook(isfunc("AltD3D9Create") ? "AltD3D9Create" : "D3D9CreateHook", p, SysDir "\d3d9.dll", "Direct3DCreate9"))
g_.pD3D9Create   := p
logerr("D3D9Create Hook: " InstallHook(isfunc("AltD3D9CreateEx") ? "AltD3D9CreateEx" : "D3D9CreateExHook", pEx, SysDir "\d3d9.dll", "Direct3DCreate9Ex"))
g_.pD3D9CreateEx := pEx
}
D3D9IsLinux(){
if (!FileExist(GetSystemDir() "\wined3d.dll"))
return False
if (dllcall("LoadLibraryW", str, "wined3d.dll"))
{
if (h_d3d9 := dllcall("LoadLibraryW", str, "d3d9.dll"))
{
if dllcall("GetProcAddress", uint, h_d3d9, astr, "Direct3DCreate9On12")
{
dllcall("peixoto.dll\D3D12Config", astr, "DXVK", uint, 9)
return "dxvk"
}
return "wined"
}
}
RETURN False
}
D3D9LoadWine(){
logerr("Linux: " D3D9IsLinux() " SysDir: " GetSystemDir() " Exists: " FileExist(GetSystemDir() "\wined3d.dll"))
if (D3D9IsLinux())
return
logerr("Loading WineD3D")
arch  := A_PtrSize = 8 ? "System32" : "SysWOW64"
if (g_.cfg.dxvk)
h_wined3d9  := dllcall("LoadLibraryW", str, g_.cfg.injector_dir . "\dxvk\" . g_.cfg.dxvkv "\" arch "\d3d9.dll")
else {
dllcall("LoadLibraryW", str,  g_.cfg.injector_dir . "\wined3d\"  g_.cfg.wine "\" arch "\wined3d.dll")
h_wined3d9  := dllcall("LoadLibraryW", str, g_.cfg.injector_dir . "\wined3d\" . g_.cfg.wine . "\" arch "\d3d9.dll")
}
g_.pD3D9Create   :=  dllcall("GetProcAddress", ptr, h_wined3d9, astr, "Direct3DCreate9")
g_.pD3D9CreateEx :=  dllcall("GetProcAddress", ptr, h_wined3d9, astr, "Direct3DCreate9Ex")
}
D3D9IniHooks()
D3D9IniHooks()
{
dllcall(g_.p.Critical, uint, 1)
HookD3D9Create()
D3D9LoadWine()
logerr(GetDirect3D9())
logerr(IDirect3D9.Hook("CreateDevice"))
logerr(IDirect3DDevice9.Hook("Reset"))
logerr(IDirect3DDevice9.Hook("BeginStateBlock"))
logerr(IDirect3DDevice9.dllHook("EndScene", "D3D9_EndSceneHook"))
D3D9_HOOKS.End        := IDirect3DDevice9.EndScene
D3D9_HOOKS.Callback   := Registercallback(Isfunc("Alt_EndScene") ? "Alt_EndScene" : "IDirect3DDevice9_EndScene", "F")
D3D9_HOOKS.AhkDvc     := IDirect3DDevice9.p
D3D9_HOOKS.BLNK       := g_.cfg.BLNK
D3D9_HOOKS.BLNK       := 0
(parsecfg(g_.cfg.TextSwap).e) ? TS9Init(g_.cfg.TextSwap)
(parsecfg(g_.cfg.PxSwap).e)   ? PS9Init(g_.cfg.PxSwap)
GetKeyState(g_tswap9.sw, "P") ? g_tswap9.srch := True
D3D9_RECT.SetTx       := IDirect3DDevice9.SetTexture
D3D9_RECT.ShdrRelease := IDirect3DPixelShader9.Release
g_.cfg.FLTR := ""
if (g_.cfg.xBR)
g_.cfg.FLTR := 1
if (g_.cfg.TxlSz)
{
D3D9_HOOKS.DblTxlSz := g_.cfg.TxlSz+1
if (g_.cfg.TxlSz > 2)
D3D9_HOOKS.DblTxlSz := D3D9_HOOKS.DblTxlSz-2 | 0xf0
}
D3D9_HOOKS.Fltr |= g_.cfg.FLTR
(g_tswap9.Fltr) ? D3D9_HOOKS.Fltr |= 0xf0
if (D3D9_HOOKS.Fltr)
{
logerr(IDirect3DDevice9.dllHook("SetSamplerState", "SetSamplerState9Hook"))
D3D9_HOOKS.StSS := IDirect3DDevice9.SetSamplerState
}
if (g_.cfg.HD)
{
d := desk()
D3D9_HOOKS.HD_W := d.W
D3D9_HOOKS.HD_H := d.H
D3D9_HOOKS.W := d.W
D3D9_HOOKS.H := d.H
if (g_.cfg.RLMT)
{
r := strsplit(["640x480", "800x600", "1024x768", "960x540", "1280x720", "1366x768", "1600x900", "1920x1080", "2560x1440", "3840x2160"][g_.cfg.RLMT], "x" )
D3D9_HOOKS.W := r[1]
D3D9_HOOKS.H := r[2]
}
if (!g_.cfg.dxvk and !(D3D9IsLinux()="dxvk") )
logerr(IDirect3DSwapChain9.Hook("Present"))
logerr(IDirect3DDevice9.dllHook("Present", (g_.cfg.xBR) ? "xBRPresent9Hook":"Present9Hook"))
D3D9_HOOKS.Prsnt     := IDirect3DDevice9.Present
logerr(IDirect3DDevice9.dllHook("StretchRect", "StretchRect9Hook"))
D3D9_HOOKS.StrtchRct := IDirect3DDevice9.StretchRect
logerr(IDirect3DDevice9.dllHook("GetBackBuffer", "GetBackBuffer9Hook"))
D3D9_HOOKS.GtBck     := IDirect3DDevice9.GetBackBuffer
logerr(IDirect3DSurface9.dllHook("GetDesc", "GetDesc9Hook"))
D3D9_HOOKS.GtSrfcDsc := IDirect3DSurface9.GetDesc
logerr(IDirect3DDevice9.dllHook("GetDepthStencilSurface", "GetDepthStencilSurface9Hook"))
D3D9_HOOKS.GtDpth  := IDirect3DDevice9.GetDepthStencilSurface
logerr(IDirect3DDevice9.dllHook("SetDepthStencilSurface", "SetDepthStencilSurface9Hook"))
D3D9_HOOKS.StDpth  := IDirect3DDevice9.SetDepthStencilSurface
logerr(IDirect3DDevice9.dllHook("SetRenderTarget", "SetRenderTarget9Hook"))
D3D9_HOOKS.StTrgt  := IDirect3DDevice9.SetRenderTarget
logerr(IDirect3DDevice9.dllHook("GetRenderTarget", "GetRenderTarget9Hook"))
D3D9_HOOKS.GtTrgt  := IDirect3DDevice9.GetRenderTarget
logerr(IDirect3DDevice9.dllHook("GetViewPort", "GetViewPort9Hook"))
D3D9_HOOKS.GtVW    := IDirect3DDevice9.GetViewPort
logerr(IDirect3DDevice9.dllHook("SetViewPort", "SetViewPort9Hook"))
D3D9_HOOKS.StVW    := IDirect3DDevice9.SetViewPort
logerr(IDirect3DDevice9.dllHook("SetScissorRect", "SetScissorRect9Hook"))
D3D9_HOOKS.StScsr  := IDirect3DDevice9.SetScissorRect
logerr(IDirect3DDevice9.dllHook("GetScissorRect", "GetScissorRect9Hook"))
D3D9_HOOKS.GtScsr  := IDirect3DDevice9.SetScissorRect
logerr(IDirect3D9.hook("EnumAdapterModes"))
logerr(IDirect3D9.hook("GetAdapterDisplaymode"))
logerr(IDirect3DDevice9.PatchVtable("GetDisplaymode"))
logerr(IDirect3DDevice9.dllHook("Clear", "Clear9Hook"))
D3D9_HOOKS.Clr    := IDirect3DDevice9.Clear
logerr(IDirect3DDevice9.dllHook("ColorFill", "ColorFill9Hook"))
D3D9_HOOKS.CFill  := IDirect3DDevice9.ColorFill
D3D9_HOOKS.CrtIdxB  := IDirect3DDevice9.CreateIndexBuffer
D3D9_HOOKS.CrtVtxB  := IDirect3DDevice9.CreateVertexBuffer
logerr(IDirect3DDevice9.dllHook("GetRenderTargetData", "GetRenderTargetData9Hook"))
D3D9_HOOKS.GtRTDt := IDirect3DDevice9.GetRenderTargetData
(parsecfg(g_.cfg.TextSwap).e) ?: _TS9Init()
(parsecfg(g_.cfg.PxSwap).e)   ?: _PS9Init()
D3D9_HOOKS.DrawUp    := IDirect3DDevice9.DrawPrimitiveUp
D3D9_HOOKS.Draw      := IDirect3DDevice9.DrawPrimitive
D3D9_HOOKS.DrawIdx   := IDirect3DDevice9.DrawIndexedPrimitive
D3D9_HOOKS.DrawIdxUp := IDirect3DDevice9.DrawIndexedPrimitiveUp
pex := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
if (!g_.cfg.xBR)
{
Hook := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "CreateTx9HD")
H    :=	dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "CreateTexture9Hook")
logerr("CreateTexture Hook: " AltInstallHook(Hook, H))
D3D9_HOOKS.CreateTxHD := H
Hook := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "UpdateHDSurface9Hook")
H    :=	dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "UpdateSurface9Hook")
logerr("UpdateSurface Hook: " AltInstallHook(Hook, H))
D3D9_HOOKS.UPdateHDSrfc := H
logerr(IDirect3DDevice9.dllHook("CreateCubeTexture", "CreateCubeTexture9Hook"))
D3D9_HOOKS.CreateCube := IDirect3DDevice9.CreateCubeTexture
logerr(IDirect3DDevice9.dllHook("CreateRenderTarget", "CreateRenderTarget9Hook"))
D3D9_HOOKS.CreateRT   := IDirect3DDevice9.CreateRenderTarget
logerr(IDirect3DDevice9.dllHook("CreateDepthStencilSurface", "CreateDepthStencilSurface9Hook"))
D3D9_HOOKS.CreateZS   := IDirect3DDevice9.CreateDepthStencilSurface
logerr(IDirect3DDevice9.dllHook("DrawPrimitiveUp", "DrawPrimitiveUp9Hook"))
D3D9_HOOKS.DrawUp    := IDirect3DDevice9.DrawPrimitiveUp
logerr(IDirect3DDevice9.dllHook("DrawPrimitive", "DrawPrimitive9Hook"))
D3D9_HOOKS.Draw      := IDirect3DDevice9.DrawPrimitive
logerr(IDirect3DDevice9.dllHook("DrawIndexedPrimitive", "DrawIndexedPrimitive9Hook"))
D3D9_HOOKS.DrawIdx   := IDirect3DDevice9.DrawIndexedPrimitive
logerr(IDirect3DDevice9.dllHook("DrawIndexedPrimitiveUp", "DrawIndexedPrimitiveUP9Hook"))
D3D9_HOOKS.DrawIdxUp := IDirect3DDevice9.DrawIndexedPrimitiveUp
D3D9_HOOKS.EndBlck   := IDirect3DDevice9.EndStateBlock
D3D9_HOOKS.ApplyBlck := IDirect3DStateBlock9.Apply
D3D9_HOOKS.RlsBlck   := IDirect3DStateBlock9.Release
D3D9_HOOKS.STVxShdr  := IDirect3DDevice9.SetVertexShader
logerr(IDirect3DCubeTexture9.dllHook("Release", "ReleaseCubeTexture9Hook"))
D3D9_HOOKS.CbtRls    := IDirect3DCubeTexture9.Release
D3D9_HOOKS.POW2    := (g_.cfg.POW2) ? 1 : 0
D3D9_HOOKS.FixvPos := (g_.cfg.vPos) ? 1 : 0
D3D9_HOOKS.vPosFix := RegisterCallback("vPosFix", "F")
}
if g_.cfg.RLMT
{
h := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "D3D9GetMonitorInfoAHook", ptr)
f := dllcall("GetProcAddress", ptr, dllcall("GetModuleHandleA", astr, "User32.dll", ptr), astr, "GetMonitorInfoA", ptr)
D3D9_HOOKS.GtMntrNfoA := f
logerr("GetMonitorInfoA Hook: " s)
h := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "D3D9GetSystemMetricsHook", ptr)
f := dllcall("GetProcAddress", ptr, dllcall("GetModuleHandleA", astr, "User32.dll", ptr), astr, "GetSystemMetrics", ptr)
D3D9_HOOKS.GtSysMtrcs := f
logerr("GetSystemMetrics Hook: " s)
d            := strsplit(["640x480", "800x600", "1024x768", "960x540", "1280x720", "1366x768", "1920x1080"][g_.cfg.RLMT], "x" )
D3D9_HOOKS.W := d[1]
D3D9_HOOKS.H := d[2]
}
(g_.cfg.MHKS) ? dllcall("Peixoto.dll\InitMouseHooks")
g_.WnAPI := {}
logerr("ChangeDisplaySettingsA Hook: " InstallHook("D3D9ChangeDisplaySettingsA", pChangeDisplaySettingsA, "User32.dll", "ChangeDisplaySettingsA"))
if (g_.cfg.MCLP)
{
logerr("ClipCursor Hook" InstallHook("ClipCursor9", p, "User32.dll", "ClipCursor"))
g_.WnAPI.ClpCrsr := p
}
else g_.WnAPI.ClpCrsr := dllcall("GetProcAddress", uint, dllcall("GetModuleHandleA", astr, "User32.dll", uint), astr, "ClipCursor")
if (g_.cfg.WHKS=2)
{
InstallHook("SetWindowPos9", p, "User32.dll", "SetWindowPos")
g_.WnAPI.SetWindowPos := p
InstallHook("MoveWindow9", p, "User32.dll", "MoveWindow")
g_.WnAPI.MoveWindow := p
}
}
D3D9_HOOKS.StFVF    := IDirect3DDevice9.SetFVF
D3D9_HOOKS.STVxShdr := IDirect3DDevice9.SetVertexShader
D3D9_HOOKS.STVxDcl  := IDirect3DDevice9.SetVertexDeclaration
D3D9_HOOKS.StStream := IDirect3DDevice9.SetStreamSource
for k, v in g_.WnAPI
printl(k " " v)
g_.RTrgts        := new Collection()
D3D9_HOOKS.Srfcs := g_.RTrgts.pc
f := g_.cfg.HD
if (g_.cfg.RLMT)
f |= 0xf0
dllcall("Peixoto.dll\InitHDHooks9", ptr, D3D9_HOOKS[], uint, f)
if (g_.cfg.console)
dllcall("peixoto.dll\D3D12Config", astr, "DBUG", uint, 1)
if (g_.cfg.dxvk)
dllcall("peixoto.dll\D3D12Config", astr, "DXVK", uint, 9)
if (g_.cfg.WHKS)
dllcall("peixoto.dll\D3D12Config", astr, "FIXWINSIZE", uint, 1)
if (g_.cfg.FLTR)
logerr(IDirect3DDevice9.Hook("SetSamplerState"))
ReleaseDirect3D9()
dllcall(g_.p.Critical, uint, 0)
}
vPosFix(asm)
{
static n := 0
s := strget(asm+0, "cp0")
if instr(s, " vPos", 2)
{
n += 1
logerr(n "vPos shaders found")
s := "    ps_3_0" . strsplit(s, "ps_3_0")[2]
c  := 0
while instr(s, "c" . c)
c  += 1
p  := instr(s, "dcl_")
v  := 1/D3D9_HOOKS.scale
ss := SubStr(s, 1, p-1) . "def c" c ", " v ", " v ", " v ", " v
. "`n    " SubStr(s, p)
r := 1
while instr(s, "r" . r)
r += 1
p := instr(ss, "dcl_", ,-1)
p := instr(ss, "`n", ,p)
s := SubStr(ss, 1, p-1) . "`n    mul r" r ".xy, c" c ".xy, vPos"
ss := SubStr(ss, p)
stringreplace, ss, ss, vPos.x, r%r%.x, 1
stringreplace, ss, ss, vPos.y, r%r%.y, 1
stringreplace, ss, ss, vPos.xy, r%r%.xy, 1
stringreplace, ss, ss, vPos, r%r%.xy, 1
s .= ss
logerr("...." s)
err := D3DX9.Asm2DXBC(s, blob)
if (err)
logerr("vPos fix: " err "`n" s)
else
{
logerr("vPos fix: OK =)" s)
return blob
}
}
}
D3D9ChangeDisplaySettingsA(p1, p2)
{
if (!p1)
{
w := D3D9_HOOKS.HD_W
h := D3D9_HOOKS.HD_H
} else {
w := numget(p3+108, "int")
h := numget(p3+112, "int")
}
return 0
}
IDirect3D9_GetAdapterDisplaymode(p1, p2, p3)
{
r := dllcall(IDirect3D9.GetAdapterDisplaymode, uint, p1, uint, p2, uint, p3)
if (r)
return r
logerr("==================================================================")
DMD   := struct("UINT w, h, r, f;")
DMD[] := p3
DMD.w := D3D9_HOOKS.w
DMD.h := D3D9_HOOKS.h
return r
}
IDirect3D9_EnumAdapterModes(p1, p2, p3, p4, p5)
{
r := dllcall(IDirect3D9.EnumAdapterModes, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5)
if (r=0)
{
DMD   := struct("UINT w, h;")
DMD[] := p5
if (DMD.w = 720)
{
if (DMD.h = 480)
{
DMD.h := 540
DMD.w := 540*D3D9_HOOKS.HD_W/D3D9_HOOKS.HD_H
}
else if (DMD.h = 576)
{
DMD.h := 540
DMD.w := DMD.h *4/3
}
}
if (g_.cfg.RLMT)
{
r := strsplit(["640x480", "800x600", "1024x768", "960x540", "1280x720", "1366x768", "1600x900", "1920x1080", "2560x1440", "3840x2160"][g_.cfg.RLMT], "x" )
if (DMD.h > r[2])
DMD.h := r[2]
if (DMD.w > r[1])
DMD.w := r[1]
}
}
return r
}
IDirect3DSwapChain9_GetBackBuffer(p1, p2, p3, p4)
{
if (dllcall(IDirect3DSwapChain9.GetDevice, ptr, p1, "ptr*", Dvc:=0))
return dllcall(IDirect3DSwapChain9.GetBackBuffer, ptr, p1, uint, p2, uint, p3, ptr, p4)
dllcall(IDirect3DDevice9.release, ptr, Dvc)
return dllcall("peixoto.dll\GetBackBuffer9Hook", ptr, Dvc, uint, 0, uint, p2, uint, p3, ptr, p4)
}
IDirect3DSwapChain9_Present(p1, p2, p3, p4, p5, p6)
{
if (dllcall(IDirect3DSwapChain9.GetDevice, ptr, p1, "ptr*", Dvc:=0))
return dllcall(IDirect3DSwapChain9.Present, ptr, p1, ptr, p2, ptr, p3, ptr, p4, ptr, p5, uint, p6)
dllcall(IDirect3DDevice9.release, ptr, Dvc)
return dllcall("peixoto.dll\Present9Hook", uint, Dvc, uint, 0, uint, 0, uint, 0, uint, 0)
return dllcall("peixoto.dll\Present9Hook", uint, g_.pDevice9, uint, 0, uint, 0, uint, 0, uint, 0)
}
IDirect3DDevice9_BeginStateBlock(p1)
{
logerr("BeginStateBlock")
d 		    := new ComInterfaceWrapper(D3D9.IDirect3DDevice9, p1, True)
d.released  := True
r           := d.reset
hr          := dllcall(IDirect3DDevice9.BeginStateBlock, uint, p1)
d 		    := new ComInterfaceWrapper(D3D9.IDirect3DDevice9, p1, True)
d.released  := True
if (d.reset != r)
{
logerr(d.hook("Reset", isfunc("Alt_Reset") ? "Alt_Reset" : "IDirect3DDevice9_reset"))
logerr(IDirect3DDevice9.Unhook("BeginStateBlock"))
IDirect3DDevice9.reset := d.reset
}
return hr
}
IDirect3DDevice9_GetDisplaymode(p1, p2, p3)
{
D       := struct(D3DDISPLAYMODE)
D[]     := p3
D.Width  := D3D9_HOOKS.W
D.Height := D3D9_HOOKS.H
D.Format := D3D9SetPixelFormat("X8RGB")
return r
}
D3D9CleanUp(pp)
{
if ( g_.cfg.HD && pp )
{
D3D9_HOOKS.Srfc	 := 0
D3D9_HOOKS.ZSrfc := 0
D3D9_HOOKS.Txtr  := 0
D3D9_HOOKS.ZTxtr := 0
D3D9_HOOKS.W := D3DPRESENT_PARAMETERS.BackBufferWidth
D3D9_HOOKS.H := D3DPRESENT_PARAMETERS.BackBufferHeight
D3D9_HOOKS.scale :=  D3D9_HOOKS.HD_H/D3DPRESENT_PARAMETERS.BackBufferHeight
D3D9_HOOKS.HD_X  := (D3D9_HOOKS.HD_W - D3DPRESENT_PARAMETERS.BackBufferWidth*D3D9_HOOKS.scale)/2
D3D9_HOOKS.rx  := 0
D3D9_HOOKS.rw  := D3DPRESENT_PARAMETERS.BackBufferWidth * D3D9_HOOKS.scale
D3D9_HOOKS.rh  := D3D9_HOOKS.HD_H
dllcall("Peixoto.dll\SetMouseHooksParams", float, D3D9_HOOKS.HD_W/D3D9_HOOKS.w, float, D3D9_HOOKS.scale
, uint, D3D9_HOOKS.HD_X, uint, D3D9_HOOKS.w, uint, D3D9_HOOKS.h)
D3DPRESENT_PARAMETERS.BackBufferWidth   := D3D9_HOOKS.HD_W
D3DPRESENT_PARAMETERS.BackBufferHeight  := D3D9_HOOKS.HD_H
DllCall("Peixoto.dll\D3D9HDSetUP", uint, D3D9_HOOKS.W, uint, D3D9_HOOKS.h)
}
g_.D3D9Font          := ""
D3D9_HOOKS.Font      := ""
(D3D9_HOOKS.override) ? D3D9_HOOKS.override := dllcall(IDirect3DPixelShader9.release, uint, D3D9_HOOKS.override)
(D3D9_HOOKS.px)       ? D3D9_HOOKS.px       := dllcall(IDirect3DPixelShader9.release, uint, D3D9_HOOKS.px)
(D3D9_HOOKS.xBR)      ? D3D9_HOOKS.xBR      := dllcall(IDirect3DPixelShader9.release, uint, D3D9_HOOKS.xBR)
}
D3D9Setup()
{
dllcall("peixoto.dll\D3D12Config", str, "HWND", ptr, D3DPRESENT_PARAMETERS.hDeviceWindow)
if (D3D9_HOOKS.Fltr & 0xf)
{
loop, 4
dllcall(IDirect3DDevice9.SetSamplerState, uint, g_.pDevice9, uint, A_index-1, uint, 5, uint, D3D9_HOOKS.Fltr & 0xf)
}
if (D3D9_HOOKS.Fltr & 0xf0)
{
loop, 4
{
dllcall(IDirect3DDevice9.SetSamplerState, uint, g_.pDevice9, uint, A_index-1, uint, 6, uint, 3)
dllcall(IDirect3DDevice9.SetSamplerState, uint, g_.pDevice9, uint, A_index-1, uint, 10, uint, 16)
dllcall(IDirect3DDevice9.SetSamplerState, uint, g_.pDevice9, uint, A_index-1, uint, 7, uint, 2)
}
}
fileread, xBR, % g_.cfg.injector_dir "\Shaders\xBRz.fx"
if (parsecfg(g_.cfg.pswap).e)
{
logerr(g_pswap9.code)
logerr("Compiling shader " D3DX9.CompileShader(g_.pDevice9, g_pswap9.code, "main", pShader))
logerr("Compiling shader " D3DX9.CompileShader(g_.pDevice9, g_pswap9.code, "main", tShader))
}
logerr("Compiling shader " D3DX9.CompileShader(g_.pDevice9, xBR, "main_fragment", hxBR) )
D3D9_HOOKS.xBR      := hxBR
D3D9_HOOKS.override := pShader
D3D9_HOOKS.Dev9     := g_.pDevice9
D3D9_HOOKS.px       := tShader
D3D9_HOOKS.fntx := 0
D3D9_HOOKS.fnty := g_tswap9.sz
D3D9_HOOKS.fntw := g_tswap9.sz
D3D9_HOOKS.fnth := g_tswap9.sz+64
D3D9_HOOKS.tx := 0
D3D9_HOOKS.ty := 0
D3D9_HOOKS.tw := g_tswap9.sz
D3D9_HOOKS.th := g_tswap9.sz
D3D9_HOOKS.SetTexture    := IDirect3DDevice9.SetTexture
D3D9_HOOKS.ReleaseShader := IDirect3DPixelShader9.Release
if g_.cfg.HD
{
p := D3DPRESENT_PARAMETERS
if (p.BackBufferFormat =0)
p.BackBufferFormat:=22
if (g_.cfg.SSAA)
D3D9_HOOKS.scale := g_.cfg.SSAA * ceil(D3D9_HOOKS.scale)
if (g_.cfg.xBR)
D3D9_HOOKS.scale := 1
w := D3D9_HOOKS.w*D3D9_HOOKS.scale
h := D3D9_HOOKS.h*D3D9_HOOKS.scale
g_.Proxies.hlf   := ""
if (g_.cfg.SSAA)
g_.Proxies.hlf := new SProxie9(w/2, h/2, p.BackBufferFormat, 0, 0)
g_.Proxies.rt    := ""
if (g_.cfg.xBR)
g_.Proxies.rt    := new Proxie9(w, h, p.BackBufferFormat, p.EnableAutoDepthStencil ? p.AutoDepthStencilFormat : "")
else
g_.Proxies.rt    := new SProxie9(w, h, p.BackBufferFormat, p.MultiSampleType, p.MultiSampleQuality
,p.EnableAutoDepthStencil ? p.AutoDepthStencilFormat : "", p.Flags & 0x2)
g_.Proxies.rt.Set()
D3D9_HOOKS.HlfSrfc   := g_.Proxies.hlf.s
D3D9_HOOKS.HDSrfc	 := g_.Proxies.rt.s
D3D9_HOOKS.HDZSrfc   := g_.Proxies.rt.zs
D3D9_HOOKS.rx  += D3D9_HOOKS.HD_X
D3D9_HOOKS.rw  += D3D9_HOOKS.HD_X
logerr(D3D9_HOOKS.rw "x" D3D9_HOOKS.rh "x" D3D9_HOOKS.rx ":" D3D9_HOOKS.scale " " p.BackBufferFormat)
if ! isobject(g_.Proxies.clr)
{
isobject(g_.Proxies.clr := new Proxie9(1, 1, p.BackBufferFormat, ,1))
? :      g_.Proxies.clr := new Proxie9(1, 1, p.BackBufferFormat, ,0)
isobject(g_.Proxies.z   := new Proxie9(1, 1, p.BackBufferFormat, ,1))
? :      g_.Proxies.z   := new Proxie9(1, 1, p.BackBufferFormat, ,0)
D3D9_HOOKS.SDSrfc  := g_.Proxies.clr.s
D3D9_HOOKS.SDZSrfc := g_.Proxies.z.s
}
dllcall("Peixoto.dll\SetRenderTarget9Hook", uint, g_.pDevice9, UINT, 0, UINT, g_.Proxies.clr.s)
logerr("Requested  " D3D9_HOOKS.W " x "	D3D9_HOOKS.H)
logerr("Real       " D3D9_HOOKS.HD_W " x "	D3D9_HOOKS.HD_H)
logerr("Scale      " D3D9_HOOKS.scale)
logerr("Viewport X " D3D9_HOOKS.HD_X)
logerr("Rect:      " D3D9_HOOKS.rx " " D3D9_HOOKS.ry " " D3D9_HOOKS.rw " " D3D9_HOOKS.rh " ")
dllcall("peixoto.dll\ResetViewPortPort9", uint)
if g_.cfg.MCLP
ClipCursor9(0)
}
}
IDirect3D9_CreateDevice(p1, p2, p3, p4, p5, p6, p7)
{
dllcall(g_.p.Critical, uint, 1)
Logerr("CREATE DEVICE")
if (p6)
dllcall("RtlMoveMemory", ptr, D3DPRESENT_PARAMETERS[], ptr, p6, int, D3DPRESENT_PARAMETERS.size())
D3D9CleanUp(p6)
if (g_.cfg.hd)
{
if (!D3DPRESENT_PARAMETERS.hDeviceWindow)
D3DPRESENT_PARAMETERS.hDeviceWindow             := p4
p5 &= ~ 0x00000010
if (g_.cfg.WNWM = 2)
D3DPRESENT_PARAMETERS.Windowed := 0
else if (g_.cfg.WNWM = 1)
{
D3DPRESENT_PARAMETERS.Windowed                   := 1
D3DPRESENT_PARAMETERS.BackBufferCount            := 1
D3DPRESENT_PARAMETERS.SwapEffect                 := 2
D3DPRESENT_PARAMETERS.FullScreen_RefreshRateInHz := 0
}
}
(g_.pDevice9)           ? logerr("Ref: " dllcall(IDirect3DDevice9.AddRef, uint, g_.pDevice9))
logerr("About to create device:"), g_.proxies := {}
(g_tswap9.Replacements) ? logerr(g_tswap9.Replacements.count() " Replacements")
(g_.RTrgts)             ? logerr(g_.RTrgts.count() " Render surfaces")
(g_.pDevice9)           ? logerr("Ref: " dllcall(IDirect3DDevice9.release, uint, g_.pDevice9))
for k, v in D3DPRESENT_PARAMETERS
logerr(k "->" v)
logerr("Focus " p4)
D3DPRESENT_PARAMETERS.PresentationInterval := 1
if (g_.cfg.SYNC)
D3DPRESENT_PARAMETERS.BackBufferCount := 2
if ! (r := dllcall(IDirect3D9.CreateDevice, uint, p1, uint, p2, uint, p3, uint, p4, uint, p5, uint, D3DPRESENT_PARAMETERS[], uint, p7, uint))
{
D3D9_HOOKS.safe := (p5 & D3DCREATE_MULTITHREADED) ? 1: 0
g_.pDevice9 := numget(p7+0, "ptr")
d 		    := new ComInterfaceWrapper(D3D9.IDirect3DDevice9, g_.pDevice9, True)
d.released  := True
logerr("multithread " D3D9_HOOKS.safe)
D3D9Setup()
if (g_.cfg.WHKSEX && g_.cfg.HD)
{
logerr("MoveWindow " dllcall("MoveWindow", ptr, D3DPRESENT_PARAMETERS.hDeviceWindow, uint, 0, uint, 0, uint, D3D9_HOOKS.HD_W, uint, D3D9_HOOKS.HD_H, uint, 0))
dllcall("SendMessage", ptr, D3DPRESENT_PARAMETERS.hDeviceWindow, uint, 0x5, ptr, 0, ptr, D3D9_HOOKS.W|(D3D9_HOOKS.H<<16))
dllcall("peixoto.dll\D3D12Config", astr, "HWND", ptr,  D3DPRESENT_PARAMETERS.hDeviceWindow)
}
if (g_.cfg.FLTR){
loop, 4 {
IDirect3DDevice9_SetSamplerState(numget(p7+0, "ptr"), A_index-1, 5, 1)
IDirect3DDevice9_SetSamplerState(numget(p7+0, "ptr"), A_index-1, 6, 3)
IDirect3DDevice9_SetSamplerState(numget(p7+0, "ptr"), A_index-1, 10, 16)
}
}
} else Logerr("CREATE DEVICE FAILED")
dllcall(g_.p.Critical, uint, 0)
return r
}
IDirect3DDevice9_Reset(p1, p2)
{
dllcall(g_.p.Critical, uint, 1)
g_.pDevice9  := p1
Logerr("RESET " p2)
if g_.cfg.HD
{
hwin := D3DPRESENT_PARAMETERS.hDeviceWindow
if (p2)
{
dllcall("RtlMoveMemory", ptr, D3DPRESENT_PARAMETERS[], ptr, p2, int, D3DPRESENT_PARAMETERS.size())
if (!D3DPRESENT_PARAMETERS.hDeviceWindow)
D3DPRESENT_PARAMETERS.hDeviceWindow := hwin
}
D3D9CleanUp(p2)
D3D9Setup()
dllcall("peixoto.dll\vPosReset9", uint, p1)
} else	r := dllcall(IDirect3DDevice9.Reset, uint, p1, uint, p2)
dllcall(g_.p.Critical, uint, 0)
return r
}
IDirect3DDevice9_EndScene(p1)
{
keyevent(g_tswap9.sw)
? g_tswap9.srch        := (g_tswap9.srch) ? False : True
, D3D9_HOOKS.searching :=  g_tswap9.srch
keyevent(g_pswap9.sw)
? g_pswap9.srch        := (g_pswap9.srch) ? False : True
, D3D9_HOOKS.srchng    := g_pswap9.srch
if (g_pswap9.srch)
return BrowseShaders9(p1)
if (g_tswap9.srch)
return BrowseTextures9(p1)
return 0
}
ClipCursor9(p1)
{
if (g_.cfg.MCLP=2)
{
VarSetCapacity(r, 8, 0)
numput(D3D9_HOOKS.HD_X-1, &r+08, "uint")
numput(D3D9_HOOKS.HD_W-D3D9_HOOKS.HD_X, &r+08, "uint")
numput(D3D9_HOOKS.HD_H-1, &r+12, "uint")
return dllcall(g_.WnAPI.ClpCrsr, uint, &r)
}
VarSetCapacity(r, 8, 0)
numput(D3D9_HOOKS.HD_W/D3D9_HOOKS.scale-1, &r+08, "uint")
numput(D3D9_HOOKS.HD_H/D3D9_HOOKS.scale-1, &r+12, "uint")
return dllcall(g_.WnAPI.ClpCrsr, uint, &r)
}
MoveWindow9(p1, p2, p3, p4, p5, p6)
{
if (p1 = D3DPRESENT_PARAMETERS.hDeviceWindow)
{
p5 := D3D9_HOOKS.HD_H
p4 := D3D9_HOOKS.HD_W
p3 := 0
p2 := 0
}
r := dllcall(g_.WnAPI.MoveWindow, ptr, p1, uint, p2, uint, p3, uint, p4, uint, p5, uint, p6)
return r
}
SetWindowPos9(p1, p2, p3, p4, p5, p6, p7)
{
if (p1 = D3DPRESENT_PARAMETERS.hDeviceWindow)
{
p6 := D3D9_HOOKS.HD_H
p5 := D3D9_HOOKS.HD_W
p4 := 0
p3 := 0
}
r := dllcall(g_.WnAPI.SetWindowPos, ptr, p1, uint, p2, uint, p3, uint, p4, uint, p5, uint, p6, uint, p7)
return r
}
GetClientRect9(h, rr)
{
if (h = D3DPRESENT_PARAMETERS.hDeviceWindow)
{
r    := struct("DWORD x, y, w, h")
r[]  := rr
r.x  :=
r.y  := 0
r.w  := D3D9_HOOKS.W
r.h  := D3D9_HOOKS.H
return 1
}
return dllcall(g_.WnAPI.GetClientRect, uint, h, uint, rr)
}
GetWindowRect9(h, rr)
{
if (h = D3DPRESENT_PARAMETERS.hDeviceWindow)
{
r    := struct("DWORD x, y, w, h")
r[]  := rr
r.x  :=
r.y  := 0
r.w  := D3D9_HOOKS.W
r.h  := D3D9_HOOKS.H
return 1
}
return dllcall(g_.WnAPI.GetWindowRect, uint, h, uint, rr)
}
GetDeviceCaps9(p1, p2)
{
if      (p2 = 8)
return D3D9_HOOKS.W
else if	(p2 = 10)
return D3D9_HOOKS.H
return dllcall(g_.WnAPI.GetDeviceCaps9, uint, p1, uint, p2)
}
IDirect3DDevice9_SetSamplerState(p1, p2, p3, p4)
{
p4 := p3 = 5 ? 1 : p3 = 6 ? 3 : p3 = 10 ? 16 : p4
return dllcall(IDirect3DDevice9.SetSamplerState, ptr, p1, uint, p2, uint, p3, uint, p4)
}


g_pswap9.override_code := 
(
"
sampler s0 : register(s0);
float4 main(float2 tex : TEXCOORD0, float4 diff : COLOR0) : COLOR0
{
	return tex2D(s0, tex) * diff;
}
"
)
/* The launcher will edit this everytime the game starts,
 * so we either edit again or set it to read only
 */

 
SOTInit()
SOTInit()
{
	if fileexist("Hardware.ini")
	{
		f=Hardware.ini
		IniWrite, 1, %f%, CAPS, ForceVSFog
		IniWrite, 0, %f%, CAPS, InvertFogRange
		IniWrite, 0, %f%, CAPS, ZEnableFix
	}
	res := Desk()
	w   := res.w
	h   := res.h
	if fileexist("POP.ini")
	{
		f=POP.ini
		IniWrite, %w%, %f%, MAIN, Width 
		IniWrite, %h%, %f%, MAIN, Height 
	}	
}	

printl()
resume()
global g_MainThreadID := 6524 ;<Tag> 
global g_cmdstring := "-Target^C:\Games\Crysis 2 Maximum Edition\bin32\Crysis2.exe^-D3D^11^-path^Crysis\Crysis 2^/dxvk^-HD^UPSCALE|USEINTEROP|HDPROXIES|USEPROXIES|SSAA^/WHKS^/MHKS^/VPOS^-Textswap^e=true;sw=End;n=>;p=<;d=Home;q=Shift;sz=384;s=4;path=Textures\VOKSI;^-J2K^mds=0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;a=,,,,,,,,,,,,,,,,,,,;b=,,,,,,,,,,,,,,,,,,,;x=,,,,,,,,,,,,,,,,,,,;y=,,,,,,,,,,,,,,,,,,,;rs=False;u=false;FF=False;^-k2k^r0e=false;r1e=false;s0e=false;s1e=false;s2e=false;s3e=false;s4e=false;s5e=false;t0e=false;^-PxSwap^e=true;^-script_hwnd^0x70498^-error_log^C:\Users\Peixoto\Documents\CODE\WineHooks\Ahk\error.log^-Mydocs^C:\Users\Peixoto\Documents^-injector_dir^C:\Users\Peixoto\Documents\CODE\WineHooks\Ahk^-rlst^640x480 720x480 720x576 800x600 1024x768 1152x864 1176x664 1280x720 1280x768 1280x800 1280x960 1280x1024 1360x768 1366x768 1440x1080 1600x900 1600x1024 1680x1050 1920x1080 1440x900 ^-max_4x3_res^1440x1080^-dsk^1920x1080^-D3D_Driver^C:\WINDOWS\System32\DriverStore\FileRepository\nv_dispsig.inf_amd64_e6cac7f31a92d62e\nvldumd.dll^-os_version^10.000000^^-target_dir^C:\Games\Crysis 2 Maximum Edition\bin32^-target_name^Crysis2.exe^-wine^9_0^-dxvkv^2_4^-common_path^1"
; <COMPILER: v1.1.15.03>
#NoEnv
#persistent
#notrayicon
#KeyHistory 0
#MaxThreads 1
critical, 0xFFFFFFFF
ListLines, Off
SetBatchLines, -1
InstallHook(hook_function_name, byref function2hook, dll = "", function2hook_name = ""
,callback_options = "F", event_info = "")
{
static hdtrs = "", sethooks = ""
if not hdtrs
{
hdtrs  := dllcall("GetModuleHandle", "str", A_Ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll", ptr)
sethooks := dllcall("GetProcAddress", "ptr", hdtrs, "astr", "sethook", ptr)
}
if not hdtrs  or not sethooks
return 1
if hook_function_name is Number
hook_function := hook_function_name
else hook_function := registercallback(hook_function_name, callback_options, "", event_info)
if not hook_function
return 2
if ! (dll = "")
{
hdll := dllcall("LoadLibrary", str, dll, ptr)
if not hdll
{
if (A_lasterror = 126)
return 3
else return 4
}
function2hook := dllcall("GetProcAddress", "ptr", hdll, "astr", function2hook_name, "ptr")
if not function2hook
return 5
}
return dllcall(sethooks, "Ptr*", function2hook, "Ptr", hook_function, int)
}
AltInstallHook(hook, byref original)
{
static hdtrs = "", sethooks = ""
if not hdtrs
{
hdtrs  := dllcall("GetModuleHandle", "str", A_Ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll", ptr)
sethooks := dllcall("GetProcAddress", "ptr", hdtrs, "astr", "sethook", ptr)
}
if not hdtrs or not sethooks
return 1
return dllcall(sethooks, "Ptr*", original, "Ptr", hook)
}
UnHook(Original, Trampoline)
{
static hdtrs = "", unhook = ""
if not hdtrs
{
hdtrs  := dllcall("GetModuleHandle", "str", "peixoto.dll")
unhook := dllcall("GetProcAddress", "int", hdtrs , "astr", "unhook")
}
if not hdtrs or not unhook
return 11
return dllcall(unhook, "Ptr*", Original, "Ptr", Trampoline)
}
InstallComHook(pInterface, byref pHooked, hook_name, offset, release = True)
{
static hdtrs = "", sethooks = ""
if not hdtrs
{
hdtrs  := dllcall("GetModuleHandle", "str", "peixoto.dll")
sethooks := dllcall("GetProcAddress", "int", hdtrs , "astr", "sethook")
}
if not hdtrs  or not sethooks
return 1
pInterface_Vtbl := numget(pInterface+0, "Ptr")
pHooked := numget(pInterface_Vtbl + offset, "Ptr")
pHook := registerCallback(hook_name)
if not pHook
return 2
if release
dllcall(numget(pInterface_Vtbl + 8), "Ptr", pInterface)
return dllcall(sethooks, "Ptr*", pHooked , "Ptr", pHook)
}
ReleaseHooks()
{
static hdll = "", release = ""
if not hdll
{
hdll  := dllcall("GetModuleHandle", "str", "peixoto.dll")
release := dllcall("GetProcAddress", "int", hdll, "astr", "ReleaseAllHooks")
}
if not hdll or not release
return [-2, 0]
varsetcapacity(err, 4, 0)
index := dllcall(release, "int*", &err)
return [index, numget(err, 0, "int")]
}
RedirectCall(_add, _func, options = "F")
{
callBack := RegisterCallback(_func, options)
VarSetCapacity(offset, 4)
numput(callBack - (_add + 5), &offset+0, "int")
old_protect := 0, dummy := 0
if not dllcall("VirtualProtect", uint, _add, uint, 4, uint, (PAGE_READWRITE := 0x04), "uint*", old_protect)
return
loop, 4
numput(numget(&offset + A_index - 1, "uchar"), _add + A_index, "uchar")
dllcall("VirtualProtect", uint, _add, uint, 4, uint, old_protect, "uint*", dummy)
return callBack
}
RedirectCallD(_add, _func, options = "F")
{
callBack := RegisterCallback(_func, options)
VarSetCapacity(offset, 4)
numput(callBack - (_add + 5), &offset+0, "int")
static hdtrs = "", sethooks = ""
if not hdtrs
{
hdtrs  := dllcall("GetModuleHandle", "str", "peixoto.dll")
sethooks := dllcall("GetProcAddress", "int", hdtrs , "astr", "sethook")
}
if not hdtrs  or not sethooks
return 1
return dllcall(sethooks, "Ptr*", _add, "Ptr", callBack)
}
GUID_FromString(ByRef GUID, String) {
VarSetCapacity(GUID, 16, 0)
StringReplace,String,String,-,,All
NumPut("0x" . SubStr(String, 2, 8), GUID, 0, "UInt")
NumPut("0x" . SubStr(String, 10, 4), GUID, 4, "UShort")
NumPut("0x" . SubStr(String, 14, 4), GUID, 6, "UShort")
Loop, 8
NumPut("0x" . SubStr(String, 16+(A_Index*2), 2), GUID, 7+A_Index, "UChar")
}
GUID_ToString(ByRef GUID) {
format := A_FormatInteger
SetFormat, Integer, H
str .= SubStr(NumGet(GUID, 0, "UInt"),3) . "-"
str .= SubStr(NumGet(GUID, 4, "UShort"),3) . "-"
str .= SubStr(NumGet(GUID, 6, "UShort"),3) . "-"
Loop, 8
str .= (A_Index = 2) ? SubStr(NumGet(GUID, 7+A_Index, "UChar"),3) . "-" : SubStr(NumGet(GUID, 7+A_Index, "UChar"),3)
SetFormat, Integer, %format%
return "{" . str . "}"
}
global DDS_PIXELFORMAT := "DWORD dwSize; DWORD dwFlags; DWORD dwFourCC; DWORD dwRGBBitCount; DWORD dwRBitMask; "
.  "DWORD dwGBitMask; DWORD dwBBitMask; DWORD dwABitMask;"
global DDS_HEADER := struct("DWORD dwSize; DWORD  dwFlags; DWORD dwHeight; DWORD dwWidth; DWORD dwPitchOrLinearSize; "
.  "DWORD dwDepth; DWORD dwMipMapCount; DWORD dwReserved1[11]; DDS_PIXELFORMAT ddspf; DWORD dwCaps; DWORD dwCaps2; "
.  "DWORD dwCaps3; DWORD dwCaps4; DWORD dwReserved2;")
DDS_PIXELFORMAT         := struct(DDS_PIXELFORMAT)
global DDPF_RGB         := 0x00000040
global DDPF_ALPHAPIXELS := 0x00000001
global DDPF_BUMPDUDV    := 0x00080000
global BITMAPINFOHEADER := "DWORD biSize, LONG biWidth, LONG biHeight, DWORD biPlanesAndbiBitCount, DWORD biCompression,"
. " DWORD biSizeImage, LONG biXPelsPerMeter, LONG biYPelsPerMeter, DWORD biClrUsed, DWORD biClrImportant"
BITMAPINFOHEADER := struct(BITMAPINFOHEADER)
global BITMAPFILEHEADER := struct("WORD bfType; DWORD bfSize; WORD bfReserved1; WORD bfReserved2; DWORD bfOffBits;")
SetFilePixelFormat(format = "RG6B")
{
if (format = "RG6B") 	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size()
DDS_PIXELFORMAT.dwRGBBitCount := 16
DDS_PIXELFORMAT.dwRBitMask := 0xF800
DDS_PIXELFORMAT.dwGBitMask := 0x07e0
DDS_PIXELFORMAT.dwBBitMask := 0x001F
DDS_PIXELFORMAT.dwABitMask := 0
}
else if (format = "RGB") 	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size()
DDS_PIXELFORMAT.dwRGBBitCount := 24
DDS_PIXELFORMAT.dwRBitMask := 0x00FF0000
DDS_PIXELFORMAT.dwGBitMask := 0x0000FF00
DDS_PIXELFORMAT.dwBBitMask := 0x000000FF
DDS_PIXELFORMAT.dwABitMask := 0
}
else if (format = "X1RGB") 	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size()
DDS_PIXELFORMAT.dwRGBBitCount := 16
DDS_PIXELFORMAT.dwRBitMask := 0x00007C00
DDS_PIXELFORMAT.dwGBitMask := 0x000003E0
DDS_PIXELFORMAT.dwBBitMask := 0x0000001F
DDS_PIXELFORMAT.dwABitMask := 0
}
else if (format = "A1RGB") 	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB | DDPF_ALPHAPIXELS
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size()
DDS_PIXELFORMAT.dwRGBBitCount := 16
DDS_PIXELFORMAT.dwRBitMask := 0x00007C00
DDS_PIXELFORMAT.dwGBitMask := 0x000003E0
DDS_PIXELFORMAT.dwBBitMask := 0x0000001F
DDS_PIXELFORMAT.dwABitMask := 0x00008000
}
else if (format = "A4RGB") 	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB | DDPF_ALPHAPIXELS
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size()
DDS_PIXELFORMAT.dwRGBBitCount := 16
DDS_PIXELFORMAT.dwRBitMask := 0xf00
DDS_PIXELFORMAT.dwGBitMask := 0xf0
DDS_PIXELFORMAT.dwBBitMask := 0xf
DDS_PIXELFORMAT.dwABitMask := 0xf000
}
else if (format = "A8RGB")	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB | DDPF_ALPHAPIXELS
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size("ddpfPixelFormat")
DDS_PIXELFORMAT.dwRGBBitCount := 32
DDS_PIXELFORMAT.dwRBitMask := 0x00FF0000
DDS_PIXELFORMAT.dwGBitMask := 0x0000FF00
DDS_PIXELFORMAT.dwBBitMask := 0x000000FF
DDS_PIXELFORMAT.dwABitMask := 0xFF000000
}
else if (format = "X8RGB")	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size("ddpfPixelFormat")
DDS_PIXELFORMAT.dwRGBBitCount := 32
DDS_PIXELFORMAT.dwRBitMask := 0x00FF0000
DDS_PIXELFORMAT.dwGBitMask := 0x0000FF00
DDS_PIXELFORMAT.dwBBitMask := 0x000000FF
DDS_PIXELFORMAT.dwABitMask := 0
}
else if (format = "A8BGR")	{
DDS_PIXELFORMAT.dwFlags := DDPF_RGB | DDPF_ALPHAPIXELS
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size("ddpfPixelFormat")
DDS_PIXELFORMAT.dwRGBBitCount := 32
DDS_PIXELFORMAT.dwRBitMask := 0x000000FF
DDS_PIXELFORMAT.dwGBitMask := 0x0000FF00
DDS_PIXELFORMAT.dwBBitMask := 0x00FF0000
DDS_PIXELFORMAT.dwABitMask := 0xFF000000
}
else if (format = "V8U8")	{
DDS_PIXELFORMAT.dwFlags := 0x80000
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size("ddpfPixelFormat")
DDS_PIXELFORMAT.dwFourCC := 16
DDS_PIXELFORMAT.dwRBitMask := 0xFF
DDS_PIXELFORMAT.dwGBitMask := 0xFF00
DDS_PIXELFORMAT.dwBBitMask := 0
DDS_PIXELFORMAT.dwABitMask := 0
}
else if instr(format, "D"){
DDS_PIXELFORMAT.dwFlags := 0x4
DDS_PIXELFORMAT.dwSize := DDS_PIXELFORMAT.size("ddpfPixelFormat")
DDS_PIXELFORMAT.dwFourCC := FourCC(format)
}
}
GetFilePixelFormat(byref fileHeader)
{
FMT := "_Unsupported format_"
dllcall(g_.p.GetDDSFilePxFmt, ptr, FileHeader[], astr, FMT)
return FMT
}
LoadDDS(file, byref pData)
{
hFile := dllcall("CreateFileW", str, file, uint, 0x80000000, uint, 0, uint, 0, uint, 3, uint, 0x80, uint, 0)
dllcall("GetFileSizeEx", uint, hFile, "int64*", size)
VarSetCapacity(pData, size)
dllcall("ReadFile", uint, hFile, uint, &pData, uint, size, "uint*", read_, uint, 0)
dllcall("RtlMoveMemory", ptr, DDS_HEADER[], ptr, &pData + 4, int, DDS_HEADER.size())
pixelformat := getFilePixelFormat(DDS_HEADER)
printl("Pixelformat: " pixelformat "  " DDS_HEADER.dwWidth "x" DDS_HEADER.dwHeight)
dllcall("CloseHandle", uint, hFile)
return pixelformat
}
OpenDDS(file, byref hFile)
{
size:=0, signature:=0,
hFile := dllcall("CreateFileW", str, file, uint, 0x80000000, uint, 0x00000001, uint, 0, uint, 3, uint, 0x80, uint, 0)
(hFile=-1)?	logerr("error " A_lasterror " opening file " file)
dllcall("GetFileSizeEx", uint, hFile, "int64*", size)
dllcall("ReadFile", uint, hFile, "uint*", signature, uint, 4, "uint*", (rd:=0), uint, 0)
dllcall("ReadFile", uint, hFile, uint, DDS_HEADER[], uint, DDS_HEADER.size(), "uint*", (rd:=0), uint, 0)
pixelformat := GetFilePixelFormat(DDS_HEADER)
printl("Pixelformat: " pixelformat "  " DDS_HEADER.dwWidth "x" DDS_HEADER.dwHeight)
return pixelformat
}
LoadDumpCollection(dir, byref lst)
{
FileGetAttrib, att, %dir%
if not instr(att, "D")
return
loop, %dir%\*.dds, 0, 0
{
LoadSingleDump(A_LoopFileFullPath, A_LoopFileName)
}
}
LoadSingleDump(path, name)
{
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
dllcall(dll "\AppendDump", astr, path)
}
LoadCompiledDumpCollection(file, byref lst)
{
SplitPath, file, , dir
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
dllcall(dll "\LoadDumps", astr, file, astr, dir)
}
IsDump(o, f)
{
return
return dllcall("peixoto.dll\IsDump", astr, f)
}
FourCC(code)
{
if code is not number
{
VarSetCapacity(format, 4)
strput(code, &format, 4, "CP0")
return numget(&format+0, "uint")
} else {
VarSetCapacity(format, 4)
numput(code, &format, "uint")
return strget(&format, 4, "CP0")
}
}
Class ComInterfaceWrapper
{
__New(byref definition, ppIface, D3D8 = False)
{
this.Adds    := {}
this.offsets := {}
n            := 0
def          := definition.def
loop, parse, def, `n
{
if instr(A_loopfield , "STDMETHOD")
{
method := trim(strsplit(A_loopfield, "(")[2])
method := strsplit(method, ")")[1]
if instr(method, ",")
{
stringsplit, method_, method,`,
method := trim(method_2)
}
this.offsets[method] := n * A_ptrsize
n += 1
}
}
pIface := D3D8 ? ppIface : numget(ppIface+0, "ptr")
if pIface
{
Vtbl := numget(pIface + 0, "Ptr")
for k, v in this.offsets
{
value        := numget(Vtbl + v, "Ptr")
this[k]      := value
this.Adds[k] := value
}
}
this.dwSize        := n*A_ptrsize
this.pVTbl         := Vtbl
this.p             := pIface
this.def           := def
this.name          := definition.name
this.released      := False
this.Hooks         := {}
this.Mthds         := {}
this.Hooked        := {}
}
Hook(Method, hook = "", options = "F", EventInfo="")
{
if this.Hooked[Method]
return this.name "::" Method " is already hooked"
if not this.pVTbl
return "Failed to hook " this.name "::" Method " - The interface pointer is not valid"
hook ?:	hook := isfunc("Alt_" Method) ? "Alt_" Method : isfunc("Alt" this.name "_" Method)
? "Alt" this.name "_" Method : this.name "_" Method
pHook := registerCallback(hook, options, ,EventInfo)
if not pHook
return "Failed to hook " this.name "::" Method " - could not create callback"
pInterface_Vtbl    := this.pVTbl
pHooked            := numget(pInterface_Vtbl + this.offsets[Method], "Ptr")
this.Mthds[Method] := pHooked
r                  := dllcall(ComInterfaceWrapper.sethooks, "Ptr*", pHooked, "Ptr", pHook)
this[Method]       := pHooked
if r
return "Failed to hook " this.name "::" Method " - detours error " r
else
{
this.Hooked[Method] := True
this.hooks[hook]    := pHook
}
return "Succeeded to hook " this.name "::" Method
}
dllHook(Method, hook, dll = "peixoto.dll")
{
if this.Hooked[Method]
return this.name "::" Method " is already hooked"
if not this.pVTbl
return "Failed to hook " this.name "::" Method " - The interface pointer is not valid"
pHook := dllcall("GetProcAddress", ptr, dllcall("GetModuleHandle", str, dll, ptr), astr, hook, ptr)
if not pHook
return "Failed to hook " this.name "::" Method " - could not create callback"
pInterface_Vtbl    := this.pVTbl
pHooked            := numget(pInterface_Vtbl + this.offsets[Method], "Ptr")
this.Mthds[Method] := pHooked
r                  := dllcall(ComInterfaceWrapper.sethooks, "Ptr*", pHooked, "Ptr", pHook)
this[Method]       := pHooked
if r
return "Failed to hook " this.name "::" Method " - detours error " r
else
{
this.Hooked[Method] := "dll"
this.hooks[hook]    := pHook
}
return "Succeeded to hook " this.name "::" Method
}
PatchVtable(method, EventInfo="", HookFunc="")
{
table       := this.pVTbl
target      := table+this.offsets[method]
if ! (hook := RegisterCallback(HookFunc ? HookFunc :Isfunc("Alt_" Method) ? "Alt_" Method : isfunc("Alt" this.name "_" Method)
? "Alt" this.name "_" Method : this.name "_" Method , "F",,EventInfo))
return "Failed to hook " this.name "::" Method " - could not create callback"
if ! isobject(p := new Prtct(target, A_ptrsize))
return "Failed to hook " this.name "::" Method " - VirtualProtect failed"
numput(hook, table+this.offsets[method], "ptr")
return "Succeeded to hook " this.name "::" Method
}
PatchVtableWithDll(method, hook, dll = "peixoto.dll")
{
table  := this.pVTbl
target := table+this.offsets[method]
p      := new Prtct(target, A_ptrsize)
if not (hook := dllcall("GetProcAddress", ptr, dllcall("GetModuleHandle", str, dll, ptr), astr, hook, ptr))
return "Failed to hook " this.name "::" Method " - could not create callback"
if ! isobject(p := new Prtct(target, A_ptrsize))
return "Failed to hook " this.name "::" Method " - VirtualProtect failed"
numput(hook, table+this.offsets[method], "ptr")
return "Succeeded to hook " this.name "::" Method
}
__delete()
{
if not this.released
dllcall(this.release, uint, this.p, uint)
}
__release()
{
this.released := True
r := dllcall(this.Release, uint, this.p, uint)
return r
}
UnHook(Method, hook = "")
{
logerr("unhook " ComInterfaceWrapper._unhook)
if not this.Hooked[Method]
return "Method " Method " is not hooked yet"
if not hook
hook := this.name "_" Method
r := dllcall(ComInterfaceWrapper._unhook, "Ptr*", this.Mthds[Method], "Ptr", this.hooks[hook])
if r
return "Failed to unhook " this.name "::" Method " - detours error " r
else
{
if not this.Hooked[Method] = "dll"
DllCall("GlobalFree", "Ptr", this.hooks[hook], "Ptr")
this.hooks.remove(hook)
this.Hooked.remove(Method)
}
return "Succeeded to unhook " this.name "::" Method
}
Compare(interfaces)
{
r=
for method, adress in this.adds
{
reimp=
for k, i in interfaces
{
if (i.adds[method] != adress)
reimp .= i.name "[" i.adds[method] "], "
}
if (reimp)
r .= Trim(this.name "::" method "[" adress "] reimplement in " reimp "`n", ",")
}
return Trim(r, "`n")
}
}
class Memory {
__new(sz) {
this.p := dllcall("VirtualAlloc", ptr, 0, ptr, sz, uint, 0x00001000, uint, 0x04)
}
__delete() {
dllcall("VirtualFree", ptr, this.p, ptr, 0x00008000, uint, 0x04)
}
}
Class Prtct{
__new(a, s)
{
if !dllcall("VirtualProtect", uint, a, uint, s, uint, 0x04, "uint*", o:=0)
return
this.a := a
this.s := s
this.o := o
}
__delete()
{
dllcall("VirtualProtect", uint, this.a, uint, this.s, uint, this.o, "uint*", o:=0)
}
}
Class Collection {
__new(ThreadSafe=False)
{
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
hdll := dllcall("GetModuleHandle", str, dll, ptr)
this.pc     := dllcall(dllcall("GetProcAddress", ptr, hdll, astr, "PointerCollectionCreate", ptr), ptr)
this.vtbl   := struct("LPVOID insert; LPVOID insert_disposable; LPVOID remove; LPVOID discard; LPVOID Value; LPVOID Key; LPVOID ValueAt; LPVOID KeyAt; LPVOID Count")
this.vtbl[] := numget(this.pc+0, "ptr")
this.size := 0
}
_add(key, data){
return (this.size := dllcall(this.vtbl.Insert_disposable, ptr, this.pc, ptr, key, ptr, data, uint))
}
_Insert(key, memsize)
{
pData := dllcall("VirtualAlloc", ptr, 0, ptr, memsize, uint, 0x00001000 | 0x00002000, uint, 0x04, ptr)
dllcall("RtlZeroMemory", ptr, pData, uint, memsize)
this.size := dllcall(this.vtbl.insert, ptr, this.pc, ptr, key, ptr, pData, uint)
return pData
}
PutStr(key, s){
Strput(s, this._insert(key, strlen(s)+1)+0, "CP0")
}
GetStr(key){
return Strget(this.value(key)+0, "CP0")
}
Value(key) {
return dllcall(this.vtbl.Value, ptr, this.pc, ptr, key, ptr)
}
Key(value) {
return dllcall(this.vtbl.Key, ptr, this.pc, ptr, value, ptr)
}
ValueAt(index) {
return dllcall(this.vtbl.ValueAt, ptr, this.pc, ptr, index, ptr)
}
KeyAt(index) {
return dllcall(this.vtbl.KeyAt, ptr, this.pc, ptr, index, ptr)
}
Remove(key) {
return (this.size := dllcall(this.vtbl.Remove, ptr, this.pc, ptr, key, uint))
}
Discard(key) {
return (this.size := dllcall(this.vtbl.Discard, ptr, this.pc, ptr, key, uint))
}
Count(){
return dllcall(this.vtbl.Count, ptr, this.pc)
}
}
keyevent(key, dummy="")
{
static state := {}
state[key] ?: state[key] := getkeystate(key, "p") ? 1 :-1
event := False
newstate := getkeystate(key, "p") ? 1 :-1
if ( (newstate = 1) and (state[key] = -1)  )
event := True
state[key] := newstate
return event
}
StringFromIID(pIID)
{
dllcall("Ole32.dll\StringFromIID", uint, pIID, "uint*", GUID)
rtn := StrGet(GUID)
dllcall("Ole32.dll\CoTaskMemFree", uint, GUID)
return rtn
}
zeromem(struct){
varsetcapacity(struct[], struct.size(), 0)
}
newmem(struct){
VarSetCapacity(st, struct.size(), 0)
struct[] := &st
}
class Loger
{
__new(logpath, maxlogs=1000)
{
this.f     := logpath
this.hnd   := DllCall("GetStdHandle", "int", -11, ptr)
this.count := 0
this.max   := maxlogs
FileDelete, % logpath
}
err(msg)
{
fileAppend, %msg%`n, % this.f
dllcall("WriteConsole", "ptr", this.hnd, "ptr", &msg, "int", strlen(msg), uint, 0, ptr, 0)
}
log(msg)
{
if (this.count > this.max)
return
this.count += 1
return this.err(msg)
}
}
logErr(msg){
static file="", call="", maxlogs = 10
call += 1
if not file
{
file := strsplit(msg, "|")[1]
maxlogs := strsplit(msg, "|")[2]
filedelete, %file%
return
}
if (call < maxlogs + 2)
fileAppend, %msg%`n, %file%
printl(msg)
}
Ciclecolor(c)
{
static clrs := [0x00000000, 0x00FFFFFF, 0x00ff0000, 0x0000ff00, 0x000000ff, 0x00ffff00, 0x00ff00ff
,0x0000ffff, 0x00000000]
for k, v in clrs
{
if (c = v)
{
c := clrs[k+1]
break
}
}return c
}
print(msg = "")
{
static hnd=""
if ! hnd
{
VarSetCapacity(name, 260)
dllcall("GetModuleFileNameA", ptr, 0, "ptr", &name, int, 260)
name := strget(&name+0, "CP0")
splitpath, name, fname
if !isfunc("CreateProcessA_hook")
DllCall("AllocConsole")
else DllCall("AttachConsole", uint, (ATTACH_PARENT_PROCESS := -1))
hnd := DllCall("GetStdHandle", "int", -11, ptr)
}
return dllcall("WriteConsole", "ptr", hnd , "ptr", &msg, "int", strlen(msg), uint, 0, ptr, 0)
}
printl(msg = "") {
return msg ? print(msg . "`n") : (g_.cfg.console) ?: DllCall("FreeConsole")
}
Parsecfg(item = "")
{
if not item
{
cfg  := strsplit(g_cmdstring, "^")
globals := {}
globals.cfg := {}
for k, v in cfg
{
Key := SubStr(v, 1, 1)
_Key := SubStr(v, 2, strlen(v)-1)
if _Key is number
continue
if (Key = "-")
globals.cfg[SubStr(v, 2, strlen(v)-1)] := cfg[k + 1]
else if (Key = "/")
globals.cfg[SubStr(v, 2, strlen(v)-1)] := True
}
return globals
} else {
cfg := {}
for k, v in strsplit(item, ";")
{
split := strsplit(v, "=")
key := split[1]
val := split[2]
if not split[2]
{
continue
}
(val = "True") ? val := True
(val = "False") ? val := False
cfg[key] := val
}
return cfg
}
}
resume()
{
if (hThread := dllcall("OpenThread", uint, 0x0002, uint, 0, uint, g_MainThreadID, ptr))
{
dllcall("ResumeThread", "ptr", hThread, "uint")
dllcall("CloseHandle", ptr, hThread)
} else {
dllcall("ddraw.dll\ProxyResume")
}
dllcall("SendMessageW", uint, g_.cfg.script_hwnd, uint, dllcall("RegisterWindowMessageW", str, "Peixoto.Thread"), uint, 0, uint, 0)
}
GetDesktopResolution()
{
if g_.cfg.DSR
{
res := strsplit(g_.cfg.DSR, "x")
return  {"w" : res[1], "h" : res[2]}
}
r := {"w" : dllcall("GetSystemMetrics", uint, 0) , "h" : dllcall("GetSystemMetrics", uint, 1)}
res := r.w "x" r.h
if ( r.w/r.h < 1.33	)
{
res := strsplit(g_.cfg.max_4x3_res, "x")
r := {"w" : res[1], "h" : res[2]}
}
return r
}
Desk()
{
r := strsplit(g_.cfg.DSR ? g_.cfg.DSR : g_.cfg.dsk, "x")
return {"w" : r[1], "h" : r[2]}
}
CreateLinksCollection(links)
{
target_dir := g_.cfg.path
FileCreateDir, %target_dir%
for k, v in  links {
printl("Simbolic link : " v "-> " target_dir v " Succes= " dllcall("CreateSymbolicLinkW", str, A_workingdir "\" v
, str, target_dir v, uint, 0, uint) " code= " A_lasterror " "  )
}
}
FOV(oldfov, ratio)
{
ratio := strsplit(ratio, ":")
oldfov *= 0.01745329252 / 2
return 2 * (ATan(tan(oldfov) * ratio[1]/ratio[2]) * 57.29578)
}
Matrix2String(pMatrix)
{
D3DMATRIX[] := pMatrix
str := 	D3DMATRIX.m11 " " D3DMATRIX.m12 " " D3DMATRIX.m13 " " D3DMATRIX.m14 "`n"
str .= 	D3DMATRIX.m21 " " D3DMATRIX.m22 " " D3DMATRIX.m23 " " D3DMATRIX.m24 "`n"
str .= 	D3DMATRIX.m31 " " D3DMATRIX.m32 " " D3DMATRIX.m33 " " D3DMATRIX.m34 "`n"
str .= 	D3DMATRIX.m41 " " D3DMATRIX.m42 " " D3DMATRIX.m43 " " D3DMATRIX.m44 "`n"
return str
}
ProcessD3DShader(code, w=0, h=0, tw=1, th=1)
{
c := ""
w ? c .= "`n#define w " w "."
h ? c .= "`n#define h " h "."
c .= "`n#define tw 1./" tw "."
c .= "`n#define th 1./" th "."
return c . "`n" code
}
class Comptr {
__new(ptr, obj=""){
this.p   := ptr
this.obj := obj
}
__delete(){
if (this.obj)
dllcall(this.obj.release, prt, this.p)
else dllcall(numget(numget(this.p+0, "ptr")+A_PtrSize*2, "ptr"), prt, this.p)
}
}
Release(o){
return dllcall(numget(numget(o+0, "ptr")+A_PtrSize*2, "ptr"), uint, o)
}
AddRef(o){
return dllcall(numget(numget(o+0, "ptr")+A_PtrSize*1, "ptr"), uint, o)
}
global GUID := "DWORD Data1; WORD  Data2;  WORD  Data3;  BYTE  Data4[8]"
global g_fhks := {}
global CSIDL_FLAG_CREATE    := 0x8000
global CSIDL_COMMON_APPDATA := 35
global CSIDL_LOCAL_APPDATA  := 28
global CSIDL_APPDATA        := 26
global CSIDL_PERSONAL       := 5
global CSIDL_WINDOWS     := 36
global CSIDL_SYSTEM	     := 37
global CSIDL_SYSTEMX86	 := 41
InitFileHooks(byref cfg)
{
flags       := 0
g_fhks.docs := g_.cfg.path
path        := g_fhks.docs
FileCreateDir, %path%\Saves
FileCreateDir, %path%\mods
FileCreateDir, %path%\cfg
g_fhks.files     := new Collection()
f := HasFiles(path "cfg")
if isfunc("AltCreateFileA")
{
if (g_.cfg.mods)
logerr("CreateFileA_Hook : " InstallHook("AltCreateFileA", pCreateFileA, "peixoto.dll", "CreateFileA_Hook") " <- 0 means no error")
else logerr("CreateFileA_Hook : " InstallHook("AltCreateFileA", pCreateFileA, "Kernel32.dll", "CreateFileA") " <- 0 means no error")
g_fhks.pCreateFileA := pCreateFileA
}
if isfunc("AltCreateFileW")
{
if (g_.cfg.mods or f)
logerr("CreateFileW_Hook : " InstallHook("AltCreateFileW", pCreateFileW, "peixoto.dll", "CreateFileW_Hook") " <- 0 means no error")
else logerr("CreateFileW_Hook : " InstallHook("AltCreateFileW", pCreateFileW, "Kernel32.dll", "CreateFileW") " <- 0 means no error")
g_fhks.pCreateFileW := pCreateFileW
}
f := HasFiles(path "cfg")
if (g_.cfg.mods or f)
{
flags        |= 0x10
g_fhks.paths := []
for k, v in strsplit(g_.cfg.mods, ";")
g_fhks.paths.insert(g_.cfg.path "mods\" v)
if (f)
g_fhks.paths.insert(g_.cfg.path "cfg")
Buildfileslist()
}
path := StrReplace(path "\Saves\", "\\", "\")
pex  := A_PtrSize=8 ? "peixoto64.dll\" : "peixoto.dll\"
dllcall(pex "InitFileHooks", str, path, astr, path, ptr, g_fhks.files.pc, ptr, 0, uint, flags)
return
for k, v in g_fhks.filesList
{
logerr(k " " v)
dllcall(pex "FileHooksInsertFile", wstr, k, wstr, v)
logerr(errorlevel)
}
}
HasFiles(dir)
{
logerr(dir "Files: " )
loop, %dir%\*.*, 0, 0
{
logerr(A_loopfilefullpath)
FileGetAttrib, att, %A_loopfilefullpath%
if not instr(att, "D"){
logerr("HasFiles 1")
return 1
}
}
logerr("HasFiles 0")
}
InitSteamFileHooks()
{
name    := "INIT_STEAM_FILE_HOOKS: "
hSteam  := dllcall("GetModuleHandleA", astr, A_PtrSize=4 ? "steamclient.dll" : "steamclient64.dll", ptr)
if (!hSteam)
return logerr(name "no handle " errorlevel)
pFunc   := dllcall("GetProcAddress", ptr, hSteam, astr, "CreateInterface", ptr)
if (!pFunc)
return logerr(name "no adress " errorlevel)
pIntrfc := DllCall(pFunc, astr, "SteamUser018", "int*", r:=0, ptr)
if (!pIntrfc)
return logerr(name "no pointer " errorlevel)
pTable  := numget(pIntrfc+0, "ptr")
pGtFldr := numget(pTable+A_ptrsize*6, "ptr")
VarSetCapacity(path, 260)
logerr(name dllcall(pGtFldr, ptr, pIntrfc, ptr, &path, int, 260) " " errorlevel)
logerr(name strget(&path+0, "CP0"))
h := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "ISteamUser_GetUserDataFolder_Hook", ptr)
logerr(name AltInstallHook(h, pGtFldr))
logerr(name "OK")
}
IsSteamCloudnabled(steam)
{
logerr("IsSteamCloudnabled ==========================================")
return 0
}
OpenFile(p1, p2, p3)
{
file := strget(p1, "CP0")
printl("open " file)
stringreplace, file, file, /, \, 1
Splitpath, file, filename, filedir, ext
g_fhks.filesList[filename] ? file := g_fhks.filesList[filename]
r := dllcall(g_fhks.pOpenFile , astr, file, uint, p2, uint, p3)
return r
}
BuildDirFlslst(dir, byref collec)
{
logerr("isobject " isobject(collec))
loop, %dir%\*.*, 1, 0
{
if (instr(FileExist(A_LoopFileFullPath), "D"))
{
name  := A_loopfilename
g_fhks.fldrs.lst[A_loopfilename] := new Collection()
pK := dllcall("VirtualAlloc", ptr, 0, ptr, (strlen(name)+1)*2, uint, 0x00003000, uint, 0x04, ptr)
strput(name, pK, "UTF-16")
g_fhks.fldrs._add(pK, g_fhks.fldrs.lst[A_loopfilename].pc)
BuildDirFlslst(A_LoopFileFullPath, g_fhks.fldrs.lst[A_loopfilename])
} else
{
name  := A_loopfilename
logerr("Found file" A_LoopFileFullPath)
pK := dllcall("VirtualAlloc", ptr, 0, ptr, (strlen(name)+1)*2, uint, 0x00003000, uint, 0x04, ptr)
strput(name, pK, "UTF-16")
strput(A_loopfilefullpath, collec._Insert(pK, (strlen(A_loopfilefullpath)+1)*2, "UTF-16"))
}
}
logerr("Collection size " collec.Count())
}
Buildfileslist()
{
folders          := g_fhks.paths
g_fhks.filesList := {}
for k, v in folders
{
loop, %v%\*.*, 0, 1
{
StringLower, name, A_loopfilename
if (name = "error.log")
continue
pK := dllcall("VirtualAlloc", ptr, 0, ptr, (strlen(name)+1)*2, uint, 0x00003000, uint, 0x04, ptr)
strput(name, pK, "UTF-16")
strput(A_loopfilefullpath, g_fhks.files._Insert(pK, (strlen(A_loopfilefullpath)+1)*2, "UTF-16"))
g_fhks.filesList[name] := A_loopfilefullpath
}
}
err := g_.cfg.error_log
splitpath, err, errofile
g_fhks.filesList.remove(errofile)
}
global g_                    := ParseCfg()
g_cmdstring                  := ""
g_.h_PeixotoDll              := dllcall("GetModuleHandleW", str, (A_ptrsize = 4) ? "peixoto.dll" : "peixoto64.dll", ptr)
g_.p                         := {}
g_.p.Scale                   := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "Scale", uint)
g_.p.Critical                := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "Critical")
g_.p.GetDDSFilePxFmt         := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "GetDDSFileFormat", ptr)
g_.p.LoadSurfData            := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "LoadData2Surface", uint)
g_.p.GetTicks                := dllcall("GetProcAddress", uint, g_.h_PeixotoDll, astr, "TimeGetTimeF", uint)
ComInterfaceWrapper.sethooks := dllcall("GetProcAddress", "ptr", g_.h_PeixotoDll, "astr", "sethook", ptr)
ComInterfaceWrapper._unhook  := dllcall("GetProcAddress", "ptr", g_.h_PeixotoDll, "astr", "unhook", ptr)
g_.s := {}
InitGlobals()
InitGlobals()
{
if ! g_.cfg.path
{
path := g_.cfg.target
splitpath, path, , , ,name
g_.cfg.path := g_.cfg.MyDocs "\WineHooks\Games\" name "\"
} else 	g_.cfg.path :=  g_.cfg.MyDocs "\WineHooks\Games\" g_.cfg.path "\"
if !fileexist((mds := g_.cfg.path "mods"))
FileCreateDir, % mds
cfg := "Peixotos's patch remote settings:`nCommand Line: " dllcall("GetCommandLineA", astr) "`n"
for kk, vv in g_.cfg
cfg .= kk ": " vv "`n"
if g_.cfg.console
logErr(g_.cfg.error_log "|10000")
else
logErr(g_.cfg.error_log "|100")
logerr(cfg)
logerr("Working directory: " A_workingdir)
InitFileHooks(g_.cfg)
if (g_.cfg.HRT)
{
logerr("TimeGetTime Hook " AltInstallHook(dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "TimeGetTimeHook")
, dllcall("GetProcAddress", ptr, dllcall("LoadLibrary", str, "Winmm.dll"), astr, "timeGetTime")))
logerr("GetTckCount Hook " AltInstallHook(dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "TimeGetTimeHook")
, dllcall("GetProcAddress", ptr, dllcall("LoadLibrary", str, "Kernel32.dll"), astr, "GetTickCount")))
g_.cfg.HRT := ""
}
if (g_.cfg.QPCFix)
dllcall("peixoto.dll\HookQueryPerformanceCounter")
g_.cfg.QPCFix := ""
if (g_.cfg.iso)
new VirtualDisk().Mount("E:\Users\dllob\Downloads\Game ISOS\" trim(g_.cfg.iso), "D")
}
sleephook(p1){
return
}
GlobalMemHook(p1)
{
dllcall(g_.p.GlobalMem, uint, p1)
m   := struct("DWORD Length; DWORD Load; SIZE_T TotalPhys; SIZE_T AvailPhys; SIZE_T TotalPage; SIZE_T AvailPage; SIZE_T TotalVirt; SIZE_T AvailVirt;")
m[] := p1
mg  := 1024*1024
logerr("&&&&&&&&&&&&&&&&&&&& " m.AvailPage)
if (m.AvailPage >= 0x7fffffff)
m.AvailPage := 256*mg
}
SdbGetMatchingExe()
{
return
}
DWMShimCallOut()
{
logerr("DWMShimCallOut " dllcall(g_.DWMShimCallOut))
return 0
}
wait()
{
static l = 0
n := dllcall(g_.p.GetTicks, double)
while ( n - l < g_.cfg.LMT )
n := dllcall(g_.p.GetTicks, double)
l := n
}
Class VirtualDisk
{
Mount(path, drv)
{
dllcall("Kernel32.dll\DeleteVolumeMountPointW", str, drv ":\")
vol := this.EnumVolumes()
dllcall("peixoto.dll\MountISO", str, path)
for k, v in this.EnumVolumes()
{
if ! vol[k]
{
FileAppend, % "Mounted " k "`n", *
if (dllcall("Kernel32.dll\SetVolumeMountPointW", str, drv ":\", str, k) = 0)
return A_Lasterror
}
}
}
EnumVolumes()
{
VarSetCapacity(VolName, 1024)
Volumes  := []
hFVol    := dllcall("Kernel32.dll\FindFirstVolumeW", str, VolName, uint, 1024)
if (hFVol = -1)
{
FileAppend, % "FindFirstVolumeW Failed`n", *
}
Volumes[VolName] := True
success := 1
while (success)
{
success          := dllcall("Kernel32.dll\FindNextVolumeW", ptr, hFVol, str, VolName, uint, 1024)
Volumes[VolName] := True
}
for k, v in Volumes
{
dllcall("GetVolumePathNameW", str, v, str, VolName, uint, 1024)
FileAppend, % v " " k " " VolName "`n", *
}
return Volumes
}
}

; <COMPILER: v1.1.15.03>
memlib_sound(sound) {
return (sound=1) ? A_windir "\media\Windows Foreground.wav"  : (sound=0) ? A_windir "\media\Windows Ding.wav"
:  A_windir "\media\Windows Critical Stop.wav"
}
get_process_list()
{
process_list := {}
snapshot_handle := dllcall("CreateToolhelp32Snapshot", "int", 0x00000002, int, 0)
varsetcapacity(lppe, 556 , 0),	numput(556, lppe, 0,Int)
success :=  dllcall("Process32First", "Ptr", snapshot_handle, "Ptr", &lppe)
process_list.insert({"name" : StrGet(&lppe + 36, 520, 0), "ID" : NumGet(lppe, 8, "Int")})
offset := (A_ptrsize=4) ? 36 : 44
while (success = 1)
{
varsetcapacity(lppe, 556 , 0),	numput(556, lppe, 0,Int)
success := dllcall("Process32Next", "Ptr", snapshot_handle, "Ptr", &lppe)
process_list.insert({"name" : StrGet(&lppe + offset, 520, 0), "ID" : NumGet(lppe, 8, "Int")})
}
return 	process_list
}
open_process(ProcessID, access = "", InheritHandle = 0)
{
if access =
access := 0x0008 | 0x0010 | 0x0020 |  0x0400
return DllCall("OpenProcess", "Int", access, "Char", InheritHandle, "UInt", ProcessID, "Uint")
}
get_process_handle(process_, access = "")
{
for k, v in get_process_list()
{
if v.name = process_
return open_process(v.ID, access)
}
}
close_process_handle(hProcess){
return dllcall("CloseHandle", "int", hProcess)
}
write_process_memory(hProcess, adress, type_, value)
{
size := {"char": 1, "uchar": 1, "short": 2, "int": 4, "array": value._MaxIndex()
, "float" : 4, "str" : (StrLen(value)+1) * 2}
if (type_ = "array")
{
varsetcapacity(buffer, size[type_], 0)
loop, % value._MaxIndex()
Numput(value[A_index], buffer, A_index - 1, "UChar")
}
else if  (type_ = "str")
{
varsetcapacity(buffer, size[type_], 0)
StrPut(value, &buffer, size[type_], "UTF-16")
}
else
{
varsetcapacity(buffer, size[type_], 0)
Numput(value, buffer, 0, type_)
}
r := dllcall("WriteProcessMemory"
,"Ptr", hProcess
,"Ptr", adress
,"Ptr", &buffer
,"Ptr", size[type_]
,"Ptr", 0
,"uint")
return r
}
read_process_memory(hProcess, adress, type_, arraysize = "")
{
size := {"char": 1, "UChar": 1, "short": 2, "int": 4, "Uint": 4, "Ptr": 4, "array": arraysize
, "float" : 4}
if (type_ = "array")
varsetcapacity(buffer, arraysize, 0)
else
varsetcapacity(buffer, size[type_], 0)
r := dllcall("ReadProcessMemory"
,"Int", hProcess
,"Ptr", adress
,"Ptr", &buffer
,"UInt", size[type_]
,"Int", 0
,"Uint")
if ! r
return
if (type_ = "array")
{
return_value := []
loop, % arraysize
return_value.insert(Numget(buffer,  A_index - 1, "UChar"))
}
else return_value := Numget(buffer,  0, type_)
return return_value
}
read_pointer_sequence(hprocess, baseadress, offsets)
{
pointer := read_process_memory(hprocess, baseadress, "Ptr")
for k, offset in offsets
{
adress := pointer + offset
pointer := read_process_memory(hprocess, adress, "Ptr")
}
return [adress, pointer]
}
class CodeInjection
{
__New(hprocess, addy, newcode)
{
format := A_FormatInteger
setformat, integer, H
this.process_ := hprocess
this.addy := addy
this.newcode := newcode
this.original_code := read_process_memory(hprocess, this.addy, "array", this.newcode._maxIndex())
setformat, integer, %format%
}
_enable()
{
return write_process_memory(this.process_, this.addy, "array", this.newcode)
}
_disable()
{
return write_process_memory(this.process_, this.addy, "array", this.original_code)
}
switch()
{
current_code := read_process_memory(this.process_, this.addy, "array", this.newcode._maxIndex())
for k, v in current_code
fileappend, % v ":" this.original_code[k] ":" this.newcode[k]"`n", *
if arrays_are_equal(current_code, this.original_code)
{
if this._enable()
return memlib_sound(1)
else return memlib_sound(-1)
}
else if arrays_are_equal(current_code, this.newcode)
{
if this._disable()
return memlib_sound(0)
else return memlib_sound(-1)
}
}
__Delete()	{
this._disable()
}
}
VirtualAllocEx(hProcess, mem_size)
{
adress := dllcall("VirtualAllocEx"
,"ptr", hProcess
,"ptr", 0
,"ptr", mem_size
,"uint", 0x00001000 | 0x00002000
,"uint", 0x04
,"ptr")
return adress
}
dllcallEx(h_process, Lib, function, argument)
{
if (Lib = "Kernel32.dll")
procedure := dllcall("Kernel32.dll\GetProcAddress", ptr, dllcall("LoadLibraryW", str, Lib, ptr), astr, function, ptr)
else
procedure := GetProcAddressEx(h_process, Lib, function)
if not procedure
return 1
adress := VirtualAllocEx(h_process, StrLen(argument) * 2)
if not adress
return 2
if not write_process_memory(h_process, adress, "str", argument) {
dllcall("VirtualFreeEx", ptr, h_process, ptr, adress, ptr, 0, uint, 0x8000)
return 3
}
VarSetCapacity(out, StrLen(argument) * 2)
r := dllcall("ReadProcessMemory"
,"Int", h_process
,"Ptr", adress
,"ptr", &out
,"UInt", StrLen(argument) * 2
,"Int", 0
,"Uint")
if ! (hThread := dllcall("CreateRemoteThread"
,ptr, h_process
,ptr, 0
,ptr, 0
,ptr, procedure
,ptr, adress
,uint, 0
,ptr, 0
,ptr) )
{
dllcall("VirtualFreeEx", ptr, h_process, ptr, adress, ptr, StrLen(argument) * 2, uint, 0x4000 | 0x8000)
return 4
} else {
dllcall("WaitForSingleObject", "ptr", hThread, "uint", 0xffffffff)
dllcall("VirtualFreeEx", ptr, h_process, ptr, adress, ptr, 0, uint, 0x8000)
dllcall("CloseHandle", ptr, hThread)
return 0
}
}
GetProcAddressEx(h_process, module, function)
{
this_fucntion_add := dllcall("Kernel32.dll\GetProcAddress", ptr, dllcall("LoadLibraryW", str, module, ptr), astr, function, ptr)
this_module_info  := find_module(module, DllCall("GetCurrentProcessId"))
offset            := this_fucntion_add - this_module_info.BaseAddr
module_info := find_module(module, dllcall("GetProcessId", uint, h_process, uint))
address     := module_info.BaseAddr + offset
return address
}
ReverseInt32bytes(int32)
{
format := A_FormatInteger
setformat, integer, H
stringreplace, int32, int32, 0x, ,
while (strlen(int32) < 8)
int32 := "0" int32
add_ := []
loop, 4
add_.insert("0x" substr(int32, 7 - (A_index - 1)*2, 2))
setformat, integer, %format%
return add_
}
Class CodeCave
{
__New(hprocess, from, code, nops = 0)
{
format := A_FormatInteger
setformat, integer, H
to := VirtualAllocEx(hprocess, code._MaxIndex() + 6 + nops)
if not to
return
this.orginal_code := read_process_memory(hProcess, from, "array", 6 + nops)
this.code := code
this.from := from
this.to := to
this.hprocess := hprocess
adress2go := ReverseInt32bytes(to)
adress2return := ReverseInt32bytes(from + 6 + nops)
this.jump_instruction := [0x68]
loop, 4
this.jump_instruction.insert(adress2go[A_index])
this.jump_instruction.insert(0xc3)
loop, % nops
this.jump_instruction.insert(0x90)
this.jumpback_instruction := [0x68]
loop, 4
this.jumpback_instruction.insert(adress2return[A_index])
this.jumpback_instruction.insert(0xc3)
setformat, integer, %format%
}
_enable()
{
if not write_process_memory(this.hprocess, this.from, "array", this.jump_instruction)
return
for k, v in this.jumpback_instruction
this.code.insert(v)
return write_process_memory(this.hprocess, this.to, "array", this.code)
}
_disable()	{
return write_process_memory(this.hprocess, this.from, "array", this.orginal_code)
}
switch()
{
if arrays_are_equal(read_process_memory(this.hprocess, this.from, "array"
,this.orginal_code._MaxIndex()), this.orginal_code)
{
if this._enable()
return memlib_sound(1)
else return memlib_sound(-1)
}
else if arrays_are_equal(read_process_memory(this.hprocess, this.from, "array"
,this.jump_instruction._MaxIndex()), this.jump_instruction)
{
if this._disable()
return memlib_sound(0)
else return memlib_sound(-1)
}
}
__Delete()	{
this._disable()
return dllcall("VirtualFreeEx", uint, this.hprocess, uint, this.to, uint, 0, uint, (MEM_RELEASE := 0x8000) )
}
}
GetSystemInfo()
{
varsetcapacity(lpSystemInfo, (A_ptrsize=4) ? 36 : 48)
dllcall("GetSystemInfo", "Int", &lpSystemInfo)
MinimumApplicationAddres := numget(lpSystemInfo, 8, "ptr")
MaximumApplicationAddress := numget(lpSystemInfo, 8+A_ptrsize, "ptr")
fileappend, % MinimumApplicationAddres	" " MaximumApplicationAddress "`n", *
return [MinimumApplicationAddres, MaximumApplicationAddress]
}
VirtualQueryEx(hprocess, base_adress)
{
varsetcapacity(MEMORY_BASIC_INFORMATION, (A_ptrsize=4)?28:48)
success := dllcall("VirtualQueryEx"
,"Int", hProcess
,"Int", base_adress
,"Ptr", &MEMORY_BASIC_INFORMATION
,"Int", (A_ptrsize=4)?28:48)
if not success
return False
return [numget(MEMORY_BASIC_INFORMATION, 0, "ptr"), numget(MEMORY_BASIC_INFORMATION, A_ptrsize*2, "int32")
,numget(MEMORY_BASIC_INFORMATION, A_ptrsize*3, "ptr"), numget(MEMORY_BASIC_INFORMATION, (A_ptrsize=4)?20:36, "int32")]
}
find_memory_pages(hprocess)
{
r := GetSystemInfo()
Min := r[1]
Max := r[2]
pages := []
result := True
while result
{
result :=  VirtualQueryEx(hprocess, Min)
if (result[4] && 0x10) and (result[2] && 0x10)
pages.insert({"base_" : result[1], "Alocation" : result[4], "Size" : result[3]})
Min := result[1] + result[3]
}
for k, v in pages
{
Execute := v.Alocation && 0x10
}
return pages
}
arrays_are_equal(a1, a2)
{
format := A_FormatInteger
setformat, integer, H
if not (isobject(a1) or not isobject(a2)) {
setformat, integer, %format%
return 0
}
for k, v in a1
{
if a2[k] is not number {
setformat, integer, %format%
return 0
}
if (v != a2[k]) {
setformat, integer, %format%
return 0
}
}
for k, v in a1
fileappend, % "arrays " v " " a2[k] "`n", *
setformat, integer, %format%
return 1
}
get_process_ID(_process)
{
for k, v in get_process_list() {
if (v.name = _process)
return v.ID
}
}
get_modules_list64(proccessID)
{
hProcess := open_process(proccessID)
dllcall("Psapi.dll\EnumProcessModules", ptr, hProcess, ptr, 0, uint, 0, "uint*", required)
VarSetCapacity(Modules, required)
dllcall("Psapi.dll\EnumProcessModules", ptr, hProcess, ptr, &Modules, uint, required, "uint*", required)
VarSetCapacity(name, 256 * 2)
VarSetCapacity(info, 24)
mods := []
loop, % required/A_ptrsize
{
hModule := numget(&Modules + (A_index - 1) * A_ptrsize, "ptr")
n := dllcall("Psapi.dll\GetModuleBaseNameW", ptr, hProcess, ptr, hModule, ptr, &name, uint, 256 * 2)
i := dllcall("Psapi.dll\GetModuleInformation", ptr, hProcess, ptr, hModule, ptr, &info, uint, 24)
mName := strget(&name+0, "UTF-16")
baseAdd := numget(&info+0, "ptr")
size := numget(&info+A_ptrsize, "uint")
mods.insert({"BaseAddr" : baseAdd, "BaseSize" : size, "Name" : mName})
}
close_process_handle(hProcess)
return mods
}
get_modules_list(proccessID)
{
if (A_ptrsize = 8)
return get_modules_list64(proccessID)
snapshot_handle := 24
while snapshot_handle = 24
snapshot_handle := dllcall("CreateToolhelp32Snapshot"
,"int", (TH32CS_SNAPMODULE := 0x00000008)
,"int", proccessID)
modules := []
varsetcapacity(module_info, 1061 , 0),	numput(1061, module_info, 0, "Int")
success := dllcall("Module32First", "Ptr", snapshot_handle, "Ptr", &module_info)
modules.insert({"BaseAddr"   : numget(module_info, 20, "UInt")
,"BaseSize"   : numget(module_info, 24, "UInt")
,"Name"       : strget(&module_info+32, 512, "UTF-8")})
while success
{
varsetcapacity(module_info, 2061 , 0),	numput(1061, module_info, 0, "Int")
success := dllcall("Module32Next", "Ptr", snapshot_handle, "Ptr", &module_info)
modules.insert({"BaseAddr"   : numget(module_info, 20, "UInt")
,"BaseSize"   : numget(module_info, 24, "UInt")
,"Name"       : strget(&module_info+32, 512, "UTF-8")})
}
return modules
}
find_pages_in_range(hprocess, start, end_)
{
pages := []
for k, v in find_memory_pages(hprocess)
{
if  ((v.base_ >= start) and (v.base_ + v.size <= end_))
{
pages.insert(v)
}
}
return pages
}
read_process_struct(hProcess, byref struct, size, adress)
{
varsetcapacity(bytes_read, A_ptrsize, 0)
r := dllcall("ReadProcessMemory"
,"Ptr", hProcess
,"Ptr", adress
,"Ptr", &struct
,"Ptr", size
,"Ptr", &bytes_read
,"Ptr")
return numget(bytes_read, 0, "int")
}
find_module(name, id_process)
{
for k, v in get_modules_list(id_process)
{
if (name = v.name)
return v
}
}
aobscan(hprocess, id_process, module_name, bytes, dllname = "peixoto.dll", range_ = 1)
{
static sigscan:=0
if not sigscan
{
if not DllCall("LoadLibrary", "Str", dllname, "Ptr")
return "L " . dllname
dllModule := DllCall("GetModuleHandle", "wstr", dllname, "ptr")
if not dllModule
return "G " . dllname
sigscan := dllCall("GetProcAddress", "int", dllModule, "astr", "sigscan", "ptr")
if not sigscan
return "S " . A_lasterror
}
module := find_module(module_name, id_process)
if not module
return "M " module_name
if (range_ = 1)
pages := find_pages_in_range(hprocess, module.BaseAddr, module.BaseAddr + module.BaseSize)
else if (range_ = 0)
pages := find_memory_pages(hprocess)
else if (range_ > 1)
pages := find_pages_in_range(hprocess, range_, 0xffffffff)
if not isobject(pages)
return "P " range_
varsetcapacity(buffer, bytes._maxindex(), 0)
loop, % bytes._MaxIndex()
Numput(bytes[A_index], buffer, A_index - 1, "UChar")
for k, v in pages
{
varsetcapacity(pagemem, v.size)
r := read_process_struct(hProcess, pagemem, v.size, v.base_)
s := dllcall(sigscan
,"ptr", &pagemem, "int", v.size
,"ptr", &buffer, "int", bytes._maxindex())
varsetcapacity(pagemem, 0)
if (s > 0)
return v.base_ + s
}
return
}
CreateIdleProcess(Target, workingdir = "", args = "", nowindow = "", rn="")
{
varsetcapacity(SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(THREAD_SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(PROCESS_INFORMATION, 8 + A_ptrsize * 2)
varsetcapacity(STARTUPINFO, 9*4 + 2*2 + 7*A_ptrsize)
numput(9*4 + 2*2 + 7*A_ptrsize, STARTUPINFO, 0 , "uint")
if not workingdir
{
SplitPath, Target, OutFileName, OutDir
if not OutDir
workingdir := A_WorkingDir
else workingdir := OutDir
}
flags := rn ? 0 : (CREATE_SUSPENDED := 0x00000004)
if nowindow
flags |= (CREATE_NO_WINDOW := 0x08000000)
r := dllcall("CreateProcess"
,"ptr", 0
,"str", """" Target """ " args
,"Ptr", &SECURITY_ATTRIBUTES
,"Ptr", &THREAD_SECURITY_ATTRIBUTES
,"uint", 1
,"int", flags
,"Ptr", 0
,"Str", workingdir
,"Ptr", &STARTUPINFO
,"Ptr", &PROCESS_INFORMATION)
if (r = 0)
{
return A_lasterror
}
else
{
pInfo            := {}
pInfo.hProcess   := numget(PROCESS_INFORMATION, 0, "ptr")
pInfo.hThread    := numget(PROCESS_INFORMATION, A_ptrsize, "ptr")
pInfo.Process_id := numget(PROCESS_INFORMATION, A_ptrsize*2, "UInt")
pInfo.Thread_id  := numget(PROCESS_INFORMATION, A_ptrsize*2 + 4, "UInt")
return pInfo
}
}
ResumeProcess(hThread){
return dllcall("ResumeThread", "ptr", hThread, "uint")
}
BlockNewProcess(parent_id, child_list)
{
if not isobject(child_list)
child_list := [child_list]
for k, v in child_list
{
h_app := ""
while not h_app
{
process, exist, %parent_id%
if not errorlevel
return
h_app := get_process_handle(v, (PROCESS_CREATE_THREAD := 0x0002)
| (PROCESS_QUERY_INFORMATION := 0x0400)
| (PROCESS_VM_OPERATION := 0x0008)
| (PROCESS_VM_READ := 0x0010)
| (PROCESS_VM_WRITE := 0x0020))
sleep, 100
}
dllcallEx(h_app, "Kernel32.dll", "ExitProcess", "0")
}
}
memlib_Number2String(num, typ, reverse = False)
{
format := A_FormatInteger
VarSetCapacity(var, 4)
numput(num, var, typ)
setformat, integer, h
string :=
if not reverse
{
loop, 4
string .= numget(var, A_index-1, "uchar") " "
}
else
{
loop, 4
string .= numget(var, 4-A_index, "uchar") " "
}
setformat, integer, %format%
return string
}
memlib_String2ByteArray(string)
{
ret := []
loop, parse, string, %A_space%
{
if instr(A_loopfield, "0x")
field := A_loopfield
else field := "0x" A_loopfield
ret.insert(field + 0)
}
return ret
}
if (A_ptrsize = 4)
{
g_.pCreateProcessA := dllcall("GetProcAddress", ptr, dllcall("GetModuleHandle", str, "Kernel32.dll", ptr), astr, "CreateProcessA")
g_.pCreateProcessW := dllcall("GetProcAddress", ptr, dllcall("GetModuleHandle", str, "Kernel32.dll", ptr), astr, "CreateProcessW")
logerr("CreateProcessA Hook: " AltInstallHook(dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "CreateProcessAHook"), pCA := g_.pCreateProcessA))
logerr("CreateProcessW Hook: " AltInstallHook(dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "CreateProcessWHook"), pCW := g_.pCreateProcessW))
g_.pCreateProcessA := pCA
g_.pCreateProcessW := pCW
dllcall("Peixoto.dll\InitCreateProcessHook", uint, RegisterCallback("CreateProcessA_hook", "F", ,0), uint, RegisterCallback("CreateProcessA_hook", "F", ,1))
logerr("ShellExecuteA Hook  :" InstallHook("ShellExecuteA", pSEA, "Shell32.dll", "ShellExecuteA"))
g_.p.ShellExecA := pSEA
logerr("ShellExecuteExW Hook  :" InstallHook("ShellExecuteExW", pSEW, "Shell32.dll", "ShellExecuteExW"))
g_.p.ShellExecExW := pSEW
} else {
logerr("CreateProcessA Hook: " InstallHook("CreateProcessA_hook", pCA:=0, "Kernel32.dll", "CreateProcessA", "F", 0))
logerr("CreateProcessW Hook: " InstallHook("CreateProcessA_hook", pCW:=0, "Kernel32.dll", "CreateProcessW", "F", 1))
g_.pCreateProcessA := pCA
g_.pCreateProcessW := pCW
}
ShellExecuteA(p1, p2, p3, p4, p5, p6)
{
if (instr(strget(p3+0, "CP0"), ".exe"))
{
varsetcapacity(SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(THREAD_SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(PROCESS_INFORMATION, 8 + A_ptrsize * 2)
varsetcapacity(STARTUPINFO, 9*4 + 2*2 + 7*A_ptrsize)
numput(9*4 + 2*2 + 7*A_ptrsize, STARTUPINFO, 0 , "uint")
r := dllcall("CreateProcessA", ptr, p3, ptr, p4, Ptr, &SECURITY_ATTRIBUTES, Ptr, &THREAD_SECURITY_ATTRIBUTES
, uint, 0, uint, 0, Ptr, 0, ptr, p5, Ptr, &STARTUPINFO, Ptr, &PROCESS_INFORMATION)
if (r)
return 33
}
return dllcall(g_.p.ShellExecA, ptr, p1, ptr, p2, ptr, p3, ptr, p4, ptr, p5, uint, p6)
}
ShellExecuteExW(p1)
{
info   := struct("DWORD Size; ULONG Mask; HWND hwnd; LPCWSTR Verb; LPCWSTR File; LPCWSTR Params; LPCSTR Dir;")
info[] := p1
logerr("ShellExecuteExW " info.File)
if (instr(info.File, ".exe") && info.Params = "")
{
varsetcapacity(SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(THREAD_SECURITY_ATTRIBUTES, 8 + A_ptrsize)
varsetcapacity(PROCESS_INFORMATION, 8 + A_ptrsize * 2)
varsetcapacity(STARTUPINFO, 9*4 + 2*2 + 7*A_ptrsize)
numput(9*4 + 2*2 + 7*A_ptrsize, STARTUPINFO, 0 , "uint")
r := dllcall("CreateProcessA", astr, info.File, ptr, 0, Ptr, &SECURITY_ATTRIBUTES, Ptr, &THREAD_SECURITY_ATTRIBUTES
, uint, 0, uint, 0, Ptr, 0, ptr, 0, Ptr, &STARTUPINFO, Ptr, &PROCESS_INFORMATION)
logerr("ShellExecuteExW " info.File " " info.Params " " info.Dir " " r " " A_lasterror)
if (r)
return 33
}
return dllcall(g_.p.ShellExecExW, ptr, p1, ptr, p2, ptr, p3, ptr, p4, ptr, p5, uint, p6)
}
CreateProcessA_hook(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
{
encode := A_eventinfo ? "UTF-16" : "CP0"
args  := strget(p2+0, encode)
if (p1)
trgt := strget(p1+0, encode)
else
{
trgt  := ""
quote := False
for k, v in strsplit(args)
{
if (v = """")
{
if quote
break
else quote := True
}
if ( (v = A_space) && (!quote) )
break
trgt .= v
}
}
p := g_.target_dir
StringReplace, trgt, trgt, .\ ,%p%
if ! instr(trgt, ":")
trgt := A_workingdir "\" trgt
t    := strget(p1+0, encode)
StringToSend := trgt
SizeInBytes  := (StrLen(StringToSend) + 1) * (A_IsUnicode ? 2 : 1)
VarSetCapacity(CopyDataStruct, 3*A_PtrSize, 0)
NumPut(SizeInBytes, CopyDataStruct, A_PtrSize)
NumPut(&StringToSend, CopyDataStruct, 2*A_PtrSize)
dllcall("SendMessageW", ptr, g_.cfg.script_hwnd, uint, 0x4a, uint, 0, ptr, &CopyDataStruct)
logerr("CreateProcess " " lpApplicationName:" strget(p1, encode) " lpCommandLine:" strget(p2,  encode) " trgt: " trgt " args: " args)
if (A_eventinfo)
{
if (p1)
r := dllcall(g_.pCreateProcessW, str, t, str, args, ptr, p3, ptr, p4, uint, 1, uint, p6|(CREATE_SUSPENDED := 0x00000004)
, ptr, p7, ptr, p8, ptr, p9, ptr, p10)
else
r := dllcall(g_.pCreateProcessW, ptr, 0, str, args, ptr, p3, ptr, p4, uint, 1, uint, p6|(CREATE_SUSPENDED := 0x00000004)
, ptr, p7, ptr, p8, ptr, p9, ptr, p10)
} else {
if (p1)
r := dllcall(g_.pCreateProcessA, astr, t, astr, args, ptr, p3, ptr, p4, uint, 1, uint, p6|(CREATE_SUSPENDED := 0x00000004)
, ptr, p7, ptr, p8, ptr, p9, ptr, p10)
else
r := dllcall(g_.pCreateProcessA, ptr, 0, astr, args, ptr, p3, ptr, p4, uint, 1, uint, p6|(CREATE_SUSPENDED := 0x00000004)
, ptr, p7, ptr, p8, ptr, p9, ptr, p10)
}
if !r
return r
g_.hChildProcess                 := numget(p10+0, 0, "ptr")
g_.hChildProcessId               := numget(p10+0, A_ptrsize*2, "ptr")
g_.hChildProcessThread           := numget(p10+0, A_ptrsize, "ptr")
g_.ChildProcessThreadID          := numget(p10+0, (A_ptrsize*2)+4, "ptr")
dllcall("SendMessageW", ptr, g_.cfg.script_hwnd, uint, dllcall("RegisterWindowMessageW", str, "Peixoto.Hwnd")
, uint, g_.ChildProcessThreadID, uint, g_.hChildProcessId)
return r
}
Is64Bit(trgt)
{
r := dllcall("GetBinaryType", astr, trgt, "uint*", btype)
if (btype = 6)
return true
}


; <COMPILER: v1.1.15.03>
global D3D11_QUERY_EVENT              := 0
global D3D11_COUNTER_TYPE_FLOAT32     := 0
global D3D11_DEVICE_CONTEXT_IMMEDIATE := 0
global D3D11_FEATURE_THREADING        := 0
global D3D11_LOGIC_OP_CLEAR           := 0
Global D3D10 := {}
D3D10.IID_ID3D10DeviceChild := "{9B7E4C00-342C-4106-A19F-4F2704F689F0}"
D3D10.IID_ID3D10DepthStencilState := "{2B4B1CC8-A4AD-41f8-8322-CA86FC3EC675}"
D3D10.IID_ID3D10BlendState := "{EDAD8D19-8A35-4d6d-8566-2EA276CDE161}"
D3D10.IID_ID3D10RasterizerState := "{A2A07292-89AF-4345-BE2E-C53D9FBB6E9F}"
D3D10.IID_ID3D10Resource := "{9B7E4C01-342C-4106-A19F-4F2704F689F0}"
D3D10.IID_ID3D10Buffer := "{9B7E4C02-342C-4106-A19F-4F2704F689F0}"
D3D10.IID_ID3D10Texture1D := "{9B7E4C03-342C-4106-A19F-4F2704F689F0}"
D3D10.IID_ID3D10Texture2D := "{9B7E4C04-342C-4106-A19F-4F2704F689F0}"
D3D10.IID_ID3D10Texture3D := "{9B7E4C05-342C-4106-A19F-4F2704F689F0}"
D3D10.IID_ID3D10View := "{C902B03F-60A7-49BA-9936-2A3AB37A7E33}"
D3D10.IID_ID3D10ShaderResourceView := "{9B7E4C07-342C-4106-A19F-4F2704F689F0}"
D3D10.IID_ID3D10RenderTargetView := "{9B7E4C08-342C-4106-A19F-4F2704F689F0}"
D3D10.IID_ID3D10DepthStencilView := "{9B7E4C09-342C-4106-A19F-4F2704F689F0}"
D3D10.IID_ID3D10VertexShader := "{9B7E4C0A-342C-4106-A19F-4F2704F689F0}"
D3D10.IID_ID3D10GeometryShader := "{6316BE88-54CD-4040-AB44-20461BC81F68}"
D3D10.IID_ID3D10PixelShader := "{4968B601-9D00-4cde-8346-8E7F675819B6}"
D3D10.IID_ID3D10InputLayout := "{9B7E4C0B-342C-4106-A19F-4F2704F689F0}"
D3D10.IID_ID3D10SamplerState := "{9B7E4C0C-342C-4106-A19F-4F2704F689F0}"
D3D10.IID_ID3D10Asynchronous := "{9B7E4C0D-342C-4106-A19F-4F2704F689F0}"
D3D10.IID_ID3D10Query := "{9B7E4C0E-342C-4106-A19F-4F2704F689F0}"
D3D10.IID_ID3D10Predicate := "{9B7E4C10-342C-4106-A19F-4F2704F689F0}"
D3D10.IID_ID3D10Counter := "{9B7E4C11-342C-4106-A19F-4F2704F689F0}"
D3D10.IID_ID3D10Device := "{9B7E4C0F-342C-4106-A19F-4F2704F689F0}"
D3D10.IID_ID3D10Multithread := "{9B7E4E00-342C-4106-A19F-4F2704F689F0}"
D3D10.ID3D10Asynchronous:= {}
D3D10.ID3D10Asynchronous.name := "ID3D10Asynchronous"
D3D10.ID3D10Asynchronous.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(Begin)(This)
STDMETHOD(End)(This)
STDMETHOD(GetData)(This,pData,DataSize,GetDataFlags)
STDMETHOD(GetDataSize)(This)
"
)
D3D10.ID3D10BlendState:= {}
D3D10.ID3D10BlendState.name := "ID3D10BlendState"
D3D10.ID3D10BlendState.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D10.ID3D10Buffer:= {}
D3D10.ID3D10Buffer.name := "ID3D10Buffer"
D3D10.ID3D10Buffer.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetType)(This,rType)
STDMETHOD(SetEvictionPriority)(This,EvictionPriority)
STDMETHOD(GetEvictionPriority)(This)
STDMETHOD(Map)(This,MapType,MapFlags,ppData)
STDMETHOD(Unmap)(This)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D10.ID3D10Counter:= {}
D3D10.ID3D10Counter.name := "ID3D10Counter"
D3D10.ID3D10Counter.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(Begin)(This)
STDMETHOD(End)(This)
STDMETHOD(GetData)(This,pData,DataSize,GetDataFlags)
STDMETHOD(GetDataSize)(This)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D10.ID3D10DepthStencilState:= {}
D3D10.ID3D10DepthStencilState.name := "ID3D10DepthStencilState"
D3D10.ID3D10DepthStencilState.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D10.ID3D10DepthStencilView:= {}
D3D10.ID3D10DepthStencilView.name := "ID3D10DepthStencilView"
D3D10.ID3D10DepthStencilView.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetResource)(This,ppResource)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D10.ID3D10Device:= {}
D3D10.ID3D10Device.name := "ID3D10Device"
D3D10.ID3D10Device.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(VSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(PSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(PSSetShader)(This,pPixelShader)
STDMETHOD(PSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(VSSetShader)(This,pVertexShader)
STDMETHOD(DrawIndexed)(This,IndexCount,StartIndexLocation,BaseVertexLocation)
STDMETHOD(Draw)(This,VertexCount,StartVertexLocation)
STDMETHOD(PSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(IASetInputLayout)(This,pInputLayout)
STDMETHOD(IASetVertexBuffers)(This,StartSlot,NumBuffers,ppVertexBuffers,pStrides,pOffsets)
STDMETHOD(IASetIndexBuffer)(This,pIndexBuffer,Format,Offset)
STDMETHOD(DrawIndexedInstanced)(This,IndexCountPerInstance,InstanceCount,StartIndexLocation,BaseVertexLocation,StartInstanceLocation)
STDMETHOD(DrawInstanced)(This,VertexCountPerInstance,InstanceCount,StartVertexLocation,StartInstanceLocation)
STDMETHOD(GSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(GSSetShader)(This,pShader)
STDMETHOD(IASetPrimitiveTopology)(This,Topology)
STDMETHOD(VSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(VSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(SetPredication)(This,pPredicate,PredicateValue)
STDMETHOD(GSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(GSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(OMSetRenderTargets)(This,NumViews,ppRenderTargetViews,pDepthStencilView)
STDMETHOD(OMSetBlendState)(This,pBlendState,BlendFactor,SampleMask)
STDMETHOD(OMSetDepthStencilState)(This,pDepthStencilState,StencilRef)
STDMETHOD(SOSetTargets)(This,NumBuffers,ppSOTargets,pOffsets)
STDMETHOD(DrawAuto)(This)
STDMETHOD(RSSetState)(This,pRasterizerState)
STDMETHOD(RSSetViewports)(This,NumViewports,pViewports)
STDMETHOD(RSSetScissorRects)(This,NumRects,pRects)
STDMETHOD(CopySubresourceRegion)(This,pDstResource,DstSubresource,DstX,DstY,DstZ,pSrcResource,SrcSubresource,pSrcBox)
STDMETHOD(CopyResource)(This,pDstResource,pSrcResource)
STDMETHOD(UpdateSubresource)(This,pDstResource,DstSubresource,pDstBox,pSrcData,SrcRowPitch,SrcDepthPitch)
STDMETHOD(ClearRenderTargetView)(This,pRenderTargetView,ColorRGBA)
STDMETHOD(ClearDepthStencilView)(This,pDepthStencilView,ClearFlags,Depth,Stencil)
STDMETHOD(GenerateMips)(This,pShaderResourceView)
STDMETHOD(ResolveSubresource)(This,pDstResource,DstSubresource,pSrcResource,SrcSubresource,Format)
STDMETHOD(VSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(PSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(PSGetShader)(This,ppPixelShader)
STDMETHOD(PSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(VSGetShader)(This,ppVertexShader)
STDMETHOD(PSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(IAGetInputLayout)(This,ppInputLayout)
STDMETHOD(IAGetVertexBuffers)(This,StartSlot,NumBuffers,ppVertexBuffers,pStrides,pOffsets)
STDMETHOD(IAGetIndexBuffer)(This,pIndexBuffer,Format,Offset)
STDMETHOD(GSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(GSGetShader)(This,ppGeometryShader)
STDMETHOD(IAGetPrimitiveTopology)(This,pTopology)
STDMETHOD(VSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(VSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(GetPredication)(This,ppPredicate,pPredicateValue)
STDMETHOD(GSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(GSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(OMGetRenderTargets)(This,NumViews,ppRenderTargetViews,ppDepthStencilView)
STDMETHOD(OMGetBlendState)(This,ppBlendState,BlendFactor,pSampleMask)
STDMETHOD(OMGetDepthStencilState)(This,ppDepthStencilState,pStencilRef)
STDMETHOD(SOGetTargets)(This,NumBuffers,ppSOTargets,pOffsets)
STDMETHOD(RSGetState)(This,ppRasterizerState)
STDMETHOD(RSGetViewports)(This,NumViewports,pViewports)
STDMETHOD(RSGetScissorRects)(This,NumRects,pRects)
STDMETHOD(GetDeviceRemovedReason)(This)
STDMETHOD(SetExceptionMode)(This,RaiseFlags)
STDMETHOD(GetExceptionMode)(This)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(ClearState)(This)
STDMETHOD(Flush)(This)
STDMETHOD(CreateBuffer)(This,pDesc,pInitialData,ppBuffer)
STDMETHOD(CreateTexture1D)(This,pDesc,pInitialData,ppTexture1D)
STDMETHOD(CreateTexture2D)(This,pDesc,pInitialData,ppTexture2D)
STDMETHOD(CreateTexture3D)(This,pDesc,pInitialData,ppTexture3D)
STDMETHOD(CreateShaderResourceView)(This,pResource,pDesc,ppSRView)
STDMETHOD(CreateRenderTargetView)(This,pResource,pDesc,ppRTView)
STDMETHOD(CreateDepthStencilView)(This,pResource,pDesc,ppDepthStencilView)
STDMETHOD(CreateInputLayout)(This,pInputElementDescs,NumElements,pShaderBytecodeWithInputSignature,BytecodeLength,ppInputLayout)
STDMETHOD(CreateVertexShader)(This,pShaderBytecode,BytecodeLength,ppVertexShader)
STDMETHOD(CreateGeometryShader)(This,pShaderBytecode,BytecodeLength,ppGeometryShader)
STDMETHOD(CreateGeometryShaderWithStreamOutput)(This,pShaderBytecode,BytecodeLength,pSODeclaration,NumEntries,OutputStreamStride,ppGeometryShader)
STDMETHOD(CreatePixelShader)(This,pShaderBytecode,BytecodeLength,ppPixelShader)
STDMETHOD(CreateBlendState)(This,pBlendStateDesc,ppBlendState)
STDMETHOD(CreateDepthStencilState)(This,pDepthStencilDesc,ppDepthStencilState)
STDMETHOD(CreateRasterizerState)(This,pRasterizerDesc,ppRasterizerState)
STDMETHOD(CreateSamplerState)(This,pSamplerDesc,ppSamplerState)
STDMETHOD(CreateQuery)(This,pQueryDesc,ppQuery)
STDMETHOD(CreatePredicate)(This,pPredicateDesc,ppPredicate)
STDMETHOD(CreateCounter)(This,pCounterDesc,ppCounter)
STDMETHOD(CheckFormatSupport)(This,Format,pFormatSupport)
STDMETHOD(CheckMultisampleQualityLevels)(This,Format,SampleCount,pNumQualityLevels)
STDMETHOD(CheckCounterInfo)(This,pCounterInfo)
STDMETHOD(CheckCounter)(This,pDesc,pType,pActiveCounters,szName,pNameLength,szUnits,pUnitsLength,szDescription,pDescriptionLength)
STDMETHOD(GetCreationFlags)(This)
STDMETHOD(OpenSharedResource)(This,hResource,ReturnedInterface,ppResource)
STDMETHOD(SetTextFilterSize)(This,Width,Height)
STDMETHOD(GetTextFilterSize)(This,pWidth,pHeight)
"
)
D3D10.ID3D10DeviceChild:= {}
D3D10.ID3D10DeviceChild.name := "ID3D10DeviceChild"
D3D10.ID3D10DeviceChild.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
"
)
D3D10.ID3D10GeometryShader:= {}
D3D10.ID3D10GeometryShader.name := "ID3D10GeometryShader"
D3D10.ID3D10GeometryShader.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
"
)
D3D10.ID3D10InputLayout:= {}
D3D10.ID3D10InputLayout.name := "ID3D10InputLayout"
D3D10.ID3D10InputLayout.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
"
)
D3D10.ID3D10Multithread:= {}
D3D10.ID3D10Multithread.name := "ID3D10Multithread"
D3D10.ID3D10Multithread.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(Enter)(This)
STDMETHOD(Leave)(This)
STDMETHOD(SetMultithreadProtected)(This,bMTProtect)
STDMETHOD(GetMultithreadProtected)(This)
"
)
D3D10.ID3D10PixelShader:= {}
D3D10.ID3D10PixelShader.name := "ID3D10PixelShader"
D3D10.ID3D10PixelShader.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
"
)
D3D10.ID3D10Predicate:= {}
D3D10.ID3D10Predicate.name := "ID3D10Predicate"
D3D10.ID3D10Predicate.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(Begin)(This)
STDMETHOD(End)(This)
STDMETHOD(GetData)(This,pData,DataSize,GetDataFlags)
STDMETHOD(GetDataSize)(This)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D10.ID3D10Query:= {}
D3D10.ID3D10Query.name := "ID3D10Query"
D3D10.ID3D10Query.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(Begin)(This)
STDMETHOD(End)(This)
STDMETHOD(GetData)(This,pData,DataSize,GetDataFlags)
STDMETHOD(GetDataSize)(This)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D10.ID3D10RasterizerState:= {}
D3D10.ID3D10RasterizerState.name := "ID3D10RasterizerState"
D3D10.ID3D10RasterizerState.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D10.ID3D10RenderTargetView:= {}
D3D10.ID3D10RenderTargetView.name := "ID3D10RenderTargetView"
D3D10.ID3D10RenderTargetView.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetResource)(This,ppResource)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D10.ID3D10Resource:= {}
D3D10.ID3D10Resource.name := "ID3D10Resource"
D3D10.ID3D10Resource.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetType)(This,rType)
STDMETHOD(SetEvictionPriority)(This,EvictionPriority)
STDMETHOD(GetEvictionPriority)(This)
"
)
D3D10.ID3D10SamplerState:= {}
D3D10.ID3D10SamplerState.name := "ID3D10SamplerState"
D3D10.ID3D10SamplerState.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D10.ID3D10ShaderResourceView:= {}
D3D10.ID3D10ShaderResourceView.name := "ID3D10ShaderResourceView"
D3D10.ID3D10ShaderResourceView.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetResource)(This,ppResource)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D10.ID3D10Texture1D:= {}
D3D10.ID3D10Texture1D.name := "ID3D10Texture1D"
D3D10.ID3D10Texture1D.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetType)(This,rType)
STDMETHOD(SetEvictionPriority)(This,EvictionPriority)
STDMETHOD(GetEvictionPriority)(This)
STDMETHOD(Map)(This,Subresource,MapType,MapFlags,ppData)
STDMETHOD(Unmap)(This,Subresource)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D10.ID3D10Texture2D:= {}
D3D10.ID3D10Texture2D.name := "ID3D10Texture2D"
D3D10.ID3D10Texture2D.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetType)(This,rType)
STDMETHOD(SetEvictionPriority)(This,EvictionPriority)
STDMETHOD(GetEvictionPriority)(This)
STDMETHOD(Map)(This,Subresource,MapType,MapFlags,pMappedTex2D)
STDMETHOD(Unmap)(This,Subresource)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D10.ID3D10Texture3D:= {}
D3D10.ID3D10Texture3D.name := "ID3D10Texture3D"
D3D10.ID3D10Texture3D.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetType)(This,rType)
STDMETHOD(SetEvictionPriority)(This,EvictionPriority)
STDMETHOD(GetEvictionPriority)(This)
STDMETHOD(Map)(This,Subresource,MapType,MapFlags,pMappedTex3D)
STDMETHOD(Unmap)(This,Subresource)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D10.ID3D10VertexShader:= {}
D3D10.ID3D10VertexShader.name := "ID3D10VertexShader"
D3D10.ID3D10VertexShader.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
"
)
D3D10.ID3D10View:= {}
D3D10.ID3D10View.name := "ID3D10View"
D3D10.ID3D10View.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetResource)(This,ppResource)
"
)
Global _FACD3D10 := 2169
Global D3D10_16BIT_INDEX_STRIP_CUT_VALUE := 65535
Global D3D10_32BIT_INDEX_STRIP_CUT_VALUE := 4294967295
Global D3D10_8BIT_INDEX_STRIP_CUT_VALUE := 255
Global D3D10_ANISOTROPIC_FILTERING_BIT := 64
Global D3D10_APPEND_ALIGNED_ELEMENT := 4294967295
Global D3D10_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT := 9
Global D3D10_CLIP_OR_CULL_DISTANCE_COUNT := 8
Global D3D10_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT := 2
Global D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT := 14
Global D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT := 32
Global D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS := 4
Global D3D10_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT := 15
Global D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS := 4
Global D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT := 15
Global D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS := 1
Global D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST := 1
Global D3D10_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT := 64
Global D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS := 4
Global D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT := 1
Global D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS := 1
Global D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST := 1
Global D3D10_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT := 32
Global D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS := 1
Global D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT := 128
Global D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS := 1
Global D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST := 1
Global D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT := 128
Global D3D10_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS := 1
Global D3D10_COMMONSHADER_SAMPLER_REGISTER_COUNT := 16
Global D3D10_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS := 1
Global D3D10_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST := 1
Global D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT := 16
Global D3D10_COMMONSHADER_SUBROUTINE_NESTING_LIMIT := 32
Global D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENTS := 4
Global D3D10_COMMONSHADER_TEMP_REGISTER_COUNT := 4096
Global D3D10_COMMONSHADER_TEMP_REGISTER_READ_PORTS := 3
Global D3D10_COMMONSHADER_TEMP_REGISTER_READS_PER_INST := 3
Global D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX := 10
Global D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN := -10
Global D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE := -8
Global D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE := 7
Global D3D10_COMPARISON_FILTERING_BIT := 128
Global D3D10_DEFAULT_DEPTH_BIAS := 0
Global D3D10_DEFAULT_RENDER_TARGET_ARRAY_INDEX := 0
Global D3D10_DEFAULT_SAMPLE_MASK := 4294967295
Global D3D10_DEFAULT_SCISSOR_ENDX := 0
Global D3D10_DEFAULT_SCISSOR_ENDY := 0
Global D3D10_DEFAULT_SCISSOR_STARTX := 0
Global D3D10_DEFAULT_SCISSOR_STARTY := 0
Global D3D10_DEFAULT_STENCIL_READ_MASK := 255
Global D3D10_DEFAULT_STENCIL_REFERENCE := 0
Global D3D10_DEFAULT_STENCIL_WRITE_MASK := 255
Global D3D10_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX := 0
Global D3D10_DEFAULT_VIEWPORT_HEIGHT := 0
Global D3D10_DEFAULT_VIEWPORT_TOPLEFTX := 0
Global D3D10_DEFAULT_VIEWPORT_TOPLEFTY := 0
Global D3D10_DEFAULT_VIEWPORT_WIDTH := 0
Global D3D10_FILTER_TYPE_MASK := 3
Global D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS := 1
Global D3D10_GS_INPUT_PRIM_CONST_REGISTER_COUNT := 1
Global D3D10_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS := 1
Global D3D10_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST := 2
Global D3D10_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D10_GS_INPUT_REGISTER_COMPONENTS := 4
Global D3D10_GS_INPUT_REGISTER_COUNT := 16
Global D3D10_GS_INPUT_REGISTER_READ_PORTS := 1
Global D3D10_GS_INPUT_REGISTER_READS_PER_INST := 2
Global D3D10_GS_INPUT_REGISTER_VERTICES := 6
Global D3D10_GS_OUTPUT_ELEMENTS := 32
Global D3D10_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D10_GS_OUTPUT_REGISTER_COMPONENTS := 4
Global D3D10_GS_OUTPUT_REGISTER_COUNT := 32
Global D3D10_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES := 0
Global D3D10_IA_DEFAULT_PRIMITIVE_TOPOLOGY := 0
Global D3D10_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES := 0
Global D3D10_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT := 1
Global D3D10_IA_INSTANCE_ID_BIT_COUNT := 32
Global D3D10_IA_INTEGER_ARITHMETIC_BIT_COUNT := 32
Global D3D10_IA_PRIMITIVE_ID_BIT_COUNT := 32
Global D3D10_IA_VERTEX_ID_BIT_COUNT := 32
Global D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT := 16
Global D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT := 16
Global D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS := 64
Global D3D10_INTEGER_DIVIDE_BY_ZERO_QUOTIENT := 4294967295
Global D3D10_INTEGER_DIVIDE_BY_ZERO_REMAINDER := 4294967295
Global D3D10_MAG_FILTER_SHIFT := 2
Global D3D10_MAX_MAXANISOTROPY := 16
Global D3D10_MAX_MULTISAMPLE_SAMPLE_COUNT := 32
Global D3D10_MAX_TEXTURE_DIMENSION_2_TO_EXP := 17
Global D3D10_MIN_FILTER_SHIFT := 4
Global D3D10_MIN_MAXANISOTROPY := 0
Global D3D10_MIP_FILTER_SHIFT := 0
Global D3D10_MIP_LOD_FRACTIONAL_BIT_COUNT := 6
Global D3D10_MIP_LOD_RANGE_BIT_COUNT := 8
Global D3D10_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT := 0
Global D3D10_PIXEL_ADDRESS_RANGE_BIT_COUNT := 13
Global D3D10_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT := 15
Global D3D10_PS_FRONTFACING_DEFAULT_VALUE := 4294967295
Global D3D10_PS_FRONTFACING_FALSE_VALUE := 0
Global D3D10_PS_FRONTFACING_TRUE_VALUE := 4294967295
Global D3D10_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D10_PS_INPUT_REGISTER_COMPONENTS := 4
Global D3D10_PS_INPUT_REGISTER_COUNT := 32
Global D3D10_PS_INPUT_REGISTER_READ_PORTS := 1
Global D3D10_PS_INPUT_REGISTER_READS_PER_INST := 2
Global D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS := 1
Global D3D10_PS_OUTPUT_DEPTH_REGISTER_COUNT := 1
Global D3D10_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D10_PS_OUTPUT_REGISTER_COMPONENTS := 4
Global D3D10_PS_OUTPUT_REGISTER_COUNT := 8
Global D3D10_REQ_BLEND_OBJECT_COUNT_PER_CONTEXT := 4096
Global D3D10_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP := 27
Global D3D10_REQ_CONSTANT_BUFFER_ELEMENT_COUNT := 4096
Global D3D10_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_CONTEXT := 4096
Global D3D10_REQ_DRAW_VERTEX_COUNT_2_TO_EXP := 32
Global D3D10_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP := 32
Global D3D10_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION := 8192
Global D3D10_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT := 1024
Global D3D10_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT := 4096
Global D3D10_REQ_MAXANISOTROPY := 16
Global D3D10_REQ_MIP_LEVELS := 14
Global D3D10_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES := 2048
Global D3D10_REQ_RASTERIZER_OBJECT_COUNT_PER_CONTEXT := 4096
Global D3D10_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH := 8192
Global D3D10_REQ_RESOURCE_SIZE_IN_MEGABYTES := 128
Global D3D10_REQ_RESOURCE_VIEW_COUNT_PER_CONTEXT_2_TO_EXP := 20
Global D3D10_REQ_SAMPLER_OBJECT_COUNT_PER_CONTEXT := 4096
Global D3D10_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION := 512
Global D3D10_REQ_TEXTURE1D_U_DIMENSION := 8192
Global D3D10_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION := 512
Global D3D10_REQ_TEXTURE2D_U_OR_V_DIMENSION := 8192
Global D3D10_REQ_TEXTURE3D_U_V_OR_W_DIMENSION := 2048
Global D3D10_REQ_TEXTURECUBE_DIMENSION := 8192
Global D3D10_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL := 0
Global D3D10_SDK_VERSION := 29
Global D3D10_SHADER_MAJOR_VERSION := 4
Global D3D10_SHADER_MINOR_VERSION := 0
Global D3D10_SHIFT_INSTRUCTION_PAD_VALUE := 0
Global D3D10_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT := 5
Global D3D10_SIMULTANEOUS_RENDER_TARGET_COUNT := 8
Global D3D10_SO_BUFFER_MAX_STRIDE_IN_BYTES := 2048
Global D3D10_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES := 256
Global D3D10_SO_BUFFER_SLOT_COUNT := 4
Global D3D10_SO_DDI_REGISTER_INDEX_DENOTING_GAP := 4294967295
Global D3D10_SO_MULTIPLE_BUFFER_ELEMENTS_PER_BUFFER := 1
Global D3D10_SO_SINGLE_BUFFER_COMPONENT_LIMIT := 64
Global D3D10_STANDARD_COMPONENT_BIT_COUNT := 32
Global D3D10_STANDARD_COMPONENT_BIT_COUNT_DOUBLED := 64
Global D3D10_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE := 4
Global D3D10_STANDARD_PIXEL_COMPONENT_COUNT := 128
Global D3D10_STANDARD_PIXEL_ELEMENT_COUNT := 32
Global D3D10_STANDARD_VECTOR_SIZE := 4
Global D3D10_STANDARD_VERTEX_ELEMENT_COUNT := 16
Global D3D10_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT := 64
Global D3D10_SUBPIXEL_FRACTIONAL_BIT_COUNT := 8
Global D3D10_SUBTEXEL_FRACTIONAL_BIT_COUNT := 6
Global D3D10_TEXEL_ADDRESS_RANGE_BIT_COUNT := 18
Global D3D10_TEXT_1BIT_BIT := 2147483648
Global D3D10_UNBOUND_MEMORY_ACCESS_RESULT := 0
Global D3D10_VIEWPORT_AND_SCISSORRECT_MAX_INDEX := 15
Global D3D10_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE := 16
Global D3D10_VIEWPORT_BOUNDS_MAX := 16383
Global D3D10_VIEWPORT_BOUNDS_MIN := -16384
Global D3D10_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D10_VS_INPUT_REGISTER_COMPONENTS := 4
Global D3D10_VS_INPUT_REGISTER_COUNT := 16
Global D3D10_VS_INPUT_REGISTER_READ_PORTS := 1
Global D3D10_VS_INPUT_REGISTER_READS_PER_INST := 2
Global D3D10_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D10_VS_OUTPUT_REGISTER_COMPONENTS := 4
Global D3D10_VS_OUTPUT_REGISTER_COUNT := 16
Global D3D10_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT := 10
Global D3D10_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP := 25
Global D3D10_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP := 25
Global D3D_MAJOR_VERSION := 10
Global D3D_MINOR_VERSION := 0
Global D3D_SPEC_DATE_DAY := 8
Global D3D_SPEC_DATE_MONTH := 8
Global D3D_SPEC_DATE_YEAR := 2006
D3D10.err := {}
Global D3D11 := {}
D3D11.IID_ID3D11DeviceChild := "{1841e5c8-16b0-489b-bcc8-44cfb0d5deae}"
D3D11.IID_ID3D11DepthStencilState := "{03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1}"
D3D11.IID_ID3D11BlendState := "{75b68faa-347d-4159-8f45-a0640f01cd9a}"
D3D11.IID_ID3D11RasterizerState := "{9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7}"
D3D11.IID_ID3D11Resource := "{dc8e63f3-d12b-4952-b47b-5e45026a862d}"
D3D11.IID_ID3D11Buffer := "{48570b85-d1ee-4fcd-a250-eb350722b037}"
D3D11.IID_ID3D11Texture1D := "{f8fb5c27-c6b3-4f75-a4c8-439af2ef564c}"
D3D11.IID_ID3D11Texture2D := "{6f15aaf2-d208-4e89-9ab4-489535d34f9c}"
D3D11.IID_ID3D11Texture3D := "{037e866e-f56d-4357-a8af-9dabbe6e250e}"
D3D11.IID_ID3D11View := "{839d1216-bb2e-412b-b7f4-a9dbebe08ed1}"
D3D11.IID_ID3D11ShaderResourceView := "{b0e06fe0-8192-4e1a-b1ca-36d7414710b2}"
D3D11.IID_ID3D11RenderTargetView := "{dfdba067-0b8d-4865-875b-d7b4516cc164}"
D3D11.IID_ID3D11DepthStencilView := "{9fdac92a-1876-48c3-afad-25b94f84a9b6}"
D3D11.IID_ID3D11UnorderedAccessView := "{28acf509-7f5c-48f6-8611-f316010a6380}"
D3D11.IID_ID3D11VertexShader := "{3b301d64-d678-4289-8897-22f8928b72f3}"
D3D11.IID_ID3D11HullShader := "{8e5c6061-628a-4c8e-8264-bbe45cb3d5dd}"
D3D11.IID_ID3D11DomainShader := "{f582c508-0f36-490c-9977-31eece268cfa}"
D3D11.IID_ID3D11GeometryShader := "{38325b96-effb-4022-ba02-2e795b70275c}"
D3D11.IID_ID3D11PixelShader := "{ea82e40d-51dc-4f33-93d4-db7c9125ae8c}"
D3D11.IID_ID3D11ComputeShader := "{4f5b196e-c2bd-495e-bd01-1fded38e4969}"
D3D11.IID_ID3D11InputLayout := "{e4819ddc-4cf0-4025-bd26-5de82a3e07b7}"
D3D11.IID_ID3D11SamplerState := "{da6fea51-564c-4487-9810-f0d0f9b4e3a5}"
D3D11.IID_ID3D11Asynchronous := "{4b35d0cd-1e15-4258-9c98-1b1333f6dd3b}"
D3D11.IID_ID3D11Query := "{d6c00747-87b7-425e-b84d-44d108560afd}"
D3D11.IID_ID3D11Predicate := "{9eb576dd-9f77-4d86-81aa-8bab5fe490e2}"
D3D11.IID_ID3D11Counter := "{6e8c49fb-a371-4770-b440-29086022b741}"
D3D11.IID_ID3D11ClassInstance := "{a6cd7faa-b0b7-4a2f-9436-8662a65797cb}"
D3D11.IID_ID3D11ClassLinkage := "{ddf57cba-9543-46e4-a12b-f207a0fe7fed}"
D3D11.IID_ID3D11CommandList := "{a24bc4d1-769e-43f7-8013-98ff566c18e2}"
D3D11.IID_ID3D11DeviceContext := "{c0bfa96c-e089-44fb-8eaf-26f8796190da}"
D3D11.IID_ID3D11Device := "{db6f6ddb-ac77-4e88-8253-819df9bbf140}"
D3D11.ID3D11Asynchronous := {}
D3D11.ID3D11Asynchronous.name := "ID3D11Asynchronous"
D3D11.ID3D11Asynchronous.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetDataSize)(This)
"
)
D3D11.ID3D11BlendState := {}
D3D11.ID3D11BlendState.name := "ID3D11BlendState"
D3D11.ID3D11BlendState.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D11.ID3D11Buffer := {}
D3D11.ID3D11Buffer.name := "ID3D11Buffer"
D3D11.ID3D11Buffer.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetType)(This,pResourceDimension)
STDMETHOD(SetEvictionPriority)(This,EvictionPriority)
STDMETHOD(GetEvictionPriority)(This)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D11.ID3D11ClassInstance := {}
D3D11.ID3D11ClassInstance.name := "ID3D11ClassInstance"
D3D11.ID3D11ClassInstance.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetClassLinkage)(This,ppLinkage)
STDMETHOD(GetDesc)(This,pDesc)
STDMETHOD(GetInstanceName)(This,pInstanceName,pBufferLength)
STDMETHOD(GetTypeName)(This,pTypeName,pBufferLength)
"
)
D3D11.ID3D11ClassLinkage := {}
D3D11.ID3D11ClassLinkage.name := "ID3D11ClassLinkage"
D3D11.ID3D11ClassLinkage.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetClassInstance)(This,pClassInstanceName,InstanceIndex,ppInstance)
STDMETHOD(CreateClassInstance)(This,pClassTypeName,ConstantBufferOffset,ConstantVectorOffset,TextureOffset,SamplerOffset,ppInstance)
"
)
D3D11.ID3D11CommandList := {}
D3D11.ID3D11CommandList.name := "ID3D11CommandList"
D3D11.ID3D11CommandList.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetContextFlags)(This)
"
)
D3D11.ID3D11ComputeShader := {}
D3D11.ID3D11ComputeShader.name := "ID3D11ComputeShader"
D3D11.ID3D11ComputeShader.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
"
)
D3D11.ID3D11Counter := {}
D3D11.ID3D11Counter.name := "ID3D11Counter"
D3D11.ID3D11Counter.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetDataSize)(This)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D11.ID3D11DepthStencilState := {}
D3D11.ID3D11DepthStencilState.name := "ID3D11DepthStencilState"
D3D11.ID3D11DepthStencilState.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D11.ID3D11DepthStencilView := {}
D3D11.ID3D11DepthStencilView.name := "ID3D11DepthStencilView"
D3D11.ID3D11DepthStencilView.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetResource)(This,ppResource)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D11.ID3D11Device := {}
D3D11.ID3D11Device.name := "ID3D11Device"
D3D11.ID3D11Device.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(CreateBuffer)(This,pDesc,pInitialData,ppBuffer)
STDMETHOD(CreateTexture1D)(This,pDesc,pInitialData,ppTexture1D)
STDMETHOD(CreateTexture2D)(This,pDesc,pInitialData,ppTexture2D)
STDMETHOD(CreateTexture3D)(This,pDesc,pInitialData,ppTexture3D)
STDMETHOD(CreateShaderResourceView)(This,pResource,pDesc,ppSRView)
STDMETHOD(CreateUnorderedAccessView)(This,pResource,pDesc,ppUAView)
STDMETHOD(CreateRenderTargetView)(This,pResource,pDesc,ppRTView)
STDMETHOD(CreateDepthStencilView)(This,pResource,pDesc,ppDepthStencilView)
STDMETHOD(CreateInputLayout)(This,pInputElementDescs,NumElements,pShaderBytecodeWithInputSignature,BytecodeLength,ppInputLayout)
STDMETHOD(CreateVertexShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppVertexShader)
STDMETHOD(CreateGeometryShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppGeometryShader)
STDMETHOD(CreateGeometryShaderWithStreamOutput)(This,pShaderBytecode,BytecodeLength,pSODeclaration,NumEntries,pBufferStrides,NumStrides,RasterizedStream,pClassLinkage,ppGeometryShader)
STDMETHOD(CreatePixelShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppPixelShader)
STDMETHOD(CreateHullShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppHullShader)
STDMETHOD(CreateDomainShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppDomainShader)
STDMETHOD(CreateComputeShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppComputeShader)
STDMETHOD(CreateClassLinkage)(This,ppLinkage)
STDMETHOD(CreateBlendState)(This,pBlendStateDesc,ppBlendState)
STDMETHOD(CreateDepthStencilState)(This,pDepthStencilDesc,ppDepthStencilState)
STDMETHOD(CreateRasterizerState)(This,pRasterizerDesc,ppRasterizerState)
STDMETHOD(CreateSamplerState)(This,pSamplerDesc,ppSamplerState)
STDMETHOD(CreateQuery)(This,pQueryDesc,ppQuery)
STDMETHOD(CreatePredicate)(This,pPredicateDesc,ppPredicate)
STDMETHOD(CreateCounter)(This,pCounterDesc,ppCounter)
STDMETHOD(CreateDeferredContext)(This,ContextFlags,ppDeferredContext)
STDMETHOD(OpenSharedResource)(This,hResource,ReturnedInterface,ppResource)
STDMETHOD(CheckFormatSupport)(This,Format,pFormatSupport)
STDMETHOD(CheckMultisampleQualityLevels)(This,Format,SampleCount,pNumQualityLevels)
STDMETHOD(CheckCounterInfo)(This,pCounterInfo)
STDMETHOD(CheckCounter)(This,pDesc,pType,pActiveCounters,szName,pNameLength,szUnits,pUnitsLength,szDescription,pDescriptionLength)
STDMETHOD(CheckFeatureSupport)(This,Feature,pFeatureSupportData,FeatureSupportDataSize)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetFeatureLevel)(This)
STDMETHOD(GetCreationFlags)(This)
STDMETHOD(GetDeviceRemovedReason)(This)
STDMETHOD(GetImmediateContext)(This,ppImmediateContext)
STDMETHOD(SetExceptionMode)(This,RaiseFlags)
STDMETHOD(GetExceptionMode)(This)
"
)
D3D11.ID3D11DeviceChild := {}
D3D11.ID3D11DeviceChild.name := "ID3D11DeviceChild"
D3D11.ID3D11DeviceChild.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
"
)
D3D11.ID3D11DeviceContext := {}
D3D11.ID3D11DeviceContext.name := "ID3D11DeviceContext"
D3D11.ID3D11DeviceContext.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(VSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(PSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(PSSetShader)(This,pPixelShader,ppClassInstances,NumClassInstances)
STDMETHOD(PSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(VSSetShader)(This,pVertexShader,ppClassInstances,NumClassInstances)
STDMETHOD(DrawIndexed)(This,IndexCount,StartIndexLocation,BaseVertexLocation)
STDMETHOD(Draw)(This,VertexCount,StartVertexLocation)
STDMETHOD(Map)(This,pResource,Subresource,MapType,MapFlags,pMappedResource)
STDMETHOD(Unmap)(This,pResource,Subresource)
STDMETHOD(PSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(IASetInputLayout)(This,pInputLayout)
STDMETHOD(IASetVertexBuffers)(This,StartSlot,NumBuffers,ppVertexBuffers,pStrides,pOffsets)
STDMETHOD(IASetIndexBuffer)(This,pIndexBuffer,Format,Offset)
STDMETHOD(DrawIndexedInstanced)(This,IndexCountPerInstance,InstanceCount,StartIndexLocation,BaseVertexLocation,StartInstanceLocation)
STDMETHOD(DrawInstanced)(This,VertexCountPerInstance,InstanceCount,StartVertexLocation,StartInstanceLocation)
STDMETHOD(GSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(GSSetShader)(This,pShader,ppClassInstances,NumClassInstances)
STDMETHOD(IASetPrimitiveTopology)(This,Topology)
STDMETHOD(VSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(VSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(Begin)(This,pAsync)
STDMETHOD(End)(This,pAsync)
STDMETHOD(GetData)(This,pAsync,pData,DataSize,GetDataFlags)
STDMETHOD(SetPredication)(This,pPredicate,PredicateValue)
STDMETHOD(GSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(GSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(OMSetRenderTargets)(This,NumViews,ppRenderTargetViews,pDepthStencilView)
STDMETHOD(OMSetRenderTargetsAndUnorderedAccessViews)(This,NumRTVs,ppRenderTargetViews,pDepthStencilView,UAVStartSlot,NumUAVs,ppUnorderedAccessViews,pUAVInitialCounts)
STDMETHOD(OMSetBlendState)(This,pBlendState,BlendFactor,SampleMask)
STDMETHOD(OMSetDepthStencilState)(This,pDepthStencilState,StencilRef)
STDMETHOD(SOSetTargets)(This,NumBuffers,ppSOTargets,pOffsets)
STDMETHOD(DrawAuto)(This)
STDMETHOD(DrawIndexedInstancedIndirect)(This,pBufferForArgs,AlignedByteOffsetForArgs)
STDMETHOD(DrawInstancedIndirect)(This,pBufferForArgs,AlignedByteOffsetForArgs)
STDMETHOD(Dispatch)(This,ThreadGroupCountX,ThreadGroupCountY,ThreadGroupCountZ)
STDMETHOD(DispatchIndirect)(This,pBufferForArgs,AlignedByteOffsetForArgs)
STDMETHOD(RSSetState)(This,pRasterizerState)
STDMETHOD(RSSetViewports)(This,NumViewports,pViewports)
STDMETHOD(RSSetScissorRects)(This,NumRects,pRects)
STDMETHOD(CopySubresourceRegion)(This,pDstResource,DstSubresource,DstX,DstY,DstZ,pSrcResource,SrcSubresource,pSrcBox)
STDMETHOD(CopyResource)(This,pDstResource,pSrcResource)
STDMETHOD(UpdateSubresource)(This,pDstResource,DstSubresource,pDstBox,pSrcData,SrcRowPitch,SrcDepthPitch)
STDMETHOD(CopyStructureCount)(This,pDstBuffer,DstAlignedByteOffset,pSrcView)
STDMETHOD(ClearRenderTargetView)(This,pRenderTargetView,ColorRGBA)
STDMETHOD(ClearUnorderedAccessViewUint)(This,pUnorderedAccessView,Values)
STDMETHOD(ClearUnorderedAccessViewFloat)(This,pUnorderedAccessView,Values)
STDMETHOD(ClearDepthStencilView)(This,pDepthStencilView,ClearFlags,Depth,Stencil)
STDMETHOD(GenerateMips)(This,pShaderResourceView)
STDMETHOD(SetResourceMinLOD)(This,pResource,MinLOD)
STDMETHOD(GetResourceMinLOD)(This,pResource)
STDMETHOD(ResolveSubresource)(This,pDstResource,DstSubresource,pSrcResource,SrcSubresource,Format)
STDMETHOD(ExecuteCommandList)(This,pCommandList,RestoreContextState)
STDMETHOD(HSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(HSSetShader)(This,pHullShader,ppClassInstances,NumClassInstances)
STDMETHOD(HSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(HSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(DSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(DSSetShader)(This,pDomainShader,ppClassInstances,NumClassInstances)
STDMETHOD(DSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(DSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(CSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(CSSetUnorderedAccessViews)(This,StartSlot,NumUAVs,ppUnorderedAccessViews,pUAVInitialCounts)
STDMETHOD(CSSetShader)(This,pComputeShader,ppClassInstances,NumClassInstances)
STDMETHOD(CSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(CSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(VSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(PSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(PSGetShader)(This,ppPixelShader,ppClassInstances,pNumClassInstances)
STDMETHOD(PSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(VSGetShader)(This,ppVertexShader,ppClassInstances,pNumClassInstances)
STDMETHOD(PSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(IAGetInputLayout)(This,ppInputLayout)
STDMETHOD(IAGetVertexBuffers)(This,StartSlot,NumBuffers,ppVertexBuffers,pStrides,pOffsets)
STDMETHOD(IAGetIndexBuffer)(This,pIndexBuffer,Format,Offset)
STDMETHOD(GSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(GSGetShader)(This,ppGeometryShader,ppClassInstances,pNumClassInstances)
STDMETHOD(IAGetPrimitiveTopology)(This,pTopology)
STDMETHOD(VSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(VSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(GetPredication)(This,ppPredicate,pPredicateValue)
STDMETHOD(GSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(GSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(OMGetRenderTargets)(This,NumViews,ppRenderTargetViews,ppDepthStencilView)
STDMETHOD(OMGetRenderTargetsAndUnorderedAccessViews)(This,NumRTVs,ppRenderTargetViews,ppDepthStencilView,UAVStartSlot,NumUAVs,ppUnorderedAccessViews)
STDMETHOD(OMGetBlendState)(This,ppBlendState,BlendFactor,pSampleMask)
STDMETHOD(OMGetDepthStencilState)(This,ppDepthStencilState,pStencilRef)
STDMETHOD(SOGetTargets)(This,NumBuffers,ppSOTargets)
STDMETHOD(RSGetState)(This,ppRasterizerState)
STDMETHOD(RSGetViewports)(This,pNumViewports,pViewports)
STDMETHOD(RSGetScissorRects)(This,pNumRects,pRects)
STDMETHOD(HSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(HSGetShader)(This,ppHullShader,ppClassInstances,pNumClassInstances)
STDMETHOD(HSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(HSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(DSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(DSGetShader)(This,ppDomainShader,ppClassInstances,pNumClassInstances)
STDMETHOD(DSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(DSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(CSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)
STDMETHOD(CSGetUnorderedAccessViews)(This,StartSlot,NumUAVs,ppUnorderedAccessViews)
STDMETHOD(CSGetShader)(This,ppComputeShader,ppClassInstances,pNumClassInstances)
STDMETHOD(CSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)
STDMETHOD(CSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)
STDMETHOD(ClearState)(This)
STDMETHOD(Flush)(This)
STDMETHOD(GetType)(This)
STDMETHOD(GetContextFlags)(This)
STDMETHOD(FinishCommandList)(This,RestoreDeferredContextState,ppCommandList)
"
)
D3D11.ID3D11DomainShader := {}
D3D11.ID3D11DomainShader.name := "ID3D11DomainShader"
D3D11.ID3D11DomainShader.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
"
)
D3D11.ID3D11GeometryShader := {}
D3D11.ID3D11GeometryShader.name := "ID3D11GeometryShader"
D3D11.ID3D11GeometryShader.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
"
)
D3D11.ID3D11HullShader := {}
D3D11.ID3D11HullShader.name := "ID3D11HullShader"
D3D11.ID3D11HullShader.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
"
)
D3D11.ID3D11InputLayout := {}
D3D11.ID3D11InputLayout.name := "ID3D11InputLayout"
D3D11.ID3D11InputLayout.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
"
)
D3D11.ID3D11PixelShader := {}
D3D11.ID3D11PixelShader.name := "ID3D11PixelShader"
D3D11.ID3D11PixelShader.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
"
)
D3D11.ID3D11Predicate := {}
D3D11.ID3D11Predicate.name := "ID3D11Predicate"
D3D11.ID3D11Predicate.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetDataSize)(This)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D11.ID3D11Query := {}
D3D11.ID3D11Query.name := "ID3D11Query"
D3D11.ID3D11Query.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetDataSize)(This)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D11.ID3D11RasterizerState := {}
D3D11.ID3D11RasterizerState.name := "ID3D11RasterizerState"
D3D11.ID3D11RasterizerState.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D11.ID3D11RenderTargetView := {}
D3D11.ID3D11RenderTargetView.name := "ID3D11RenderTargetView"
D3D11.ID3D11RenderTargetView.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetResource)(This,ppResource)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D11.ID3D11Resource := {}
D3D11.ID3D11Resource.name := "ID3D11Resource"
D3D11.ID3D11Resource.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetType)(This,pResourceDimension)
STDMETHOD(SetEvictionPriority)(This,EvictionPriority)
STDMETHOD(GetEvictionPriority)(This)
"
)
D3D11.ID3D11SamplerState := {}
D3D11.ID3D11SamplerState.name := "ID3D11SamplerState"
D3D11.ID3D11SamplerState.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D11.ID3D11ShaderResourceView := {}
D3D11.ID3D11ShaderResourceView.name := "ID3D11ShaderResourceView"
D3D11.ID3D11ShaderResourceView.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetResource)(This,ppResource)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D11.ID3D11Texture1D := {}
D3D11.ID3D11Texture1D.name := "ID3D11Texture1D"
D3D11.ID3D11Texture1D.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetType)(This,pResourceDimension)
STDMETHOD(SetEvictionPriority)(This,EvictionPriority)
STDMETHOD(GetEvictionPriority)(This)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D11.ID3D11Texture2D := {}
D3D11.ID3D11Texture2D.name := "ID3D11Texture2D"
D3D11.ID3D11Texture2D.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetType)(This,pResourceDimension)
STDMETHOD(SetEvictionPriority)(This,EvictionPriority)
STDMETHOD(GetEvictionPriority)(This)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D11.ID3D11Texture3D := {}
D3D11.ID3D11Texture3D.name := "ID3D11Texture3D"
D3D11.ID3D11Texture3D.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetType)(This,pResourceDimension)
STDMETHOD(SetEvictionPriority)(This,EvictionPriority)
STDMETHOD(GetEvictionPriority)(This)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D11.ID3D11UnorderedAccessView := {}
D3D11.ID3D11UnorderedAccessView.name := "ID3D11UnorderedAccessView"
D3D11.ID3D11UnorderedAccessView.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetResource)(This,ppResource)
STDMETHOD(GetDesc)(This,pDesc)
"
)
D3D11.ID3D11VertexShader := {}
D3D11.ID3D11VertexShader.name := "ID3D11VertexShader"
D3D11.ID3D11VertexShader.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
"
)
D3D11.ID3D11View := {}
D3D11.ID3D11View.name := "ID3D11View"
D3D11.ID3D11View.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetDevice)(This,ppDevice)
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)
STDMETHOD(GetResource)(This,ppResource)
"
)
Global _FACD3D11 := 2172
Global D3D11_16BIT_INDEX_STRIP_CUT_VALUE := 65535
Global D3D11_32BIT_INDEX_STRIP_CUT_VALUE := 4294967295
Global D3D11_8BIT_INDEX_STRIP_CUT_VALUE := 255
Global D3D11_ANISOTROPIC_FILTERING_BIT := 64
Global D3D11_APPEND_ALIGNED_ELEMENT := 4294967295
Global D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT := 9
Global D3D11_CLIP_OR_CULL_DISTANCE_COUNT := 8
Global D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT := 2
Global D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT := 14
Global D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT := 32
Global D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS := 4
Global D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT := 15
Global D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS := 4
Global D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT := 15
Global D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS := 1
Global D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST := 1
Global D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT := 64
Global D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS := 4
Global D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT := 1
Global D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS := 1
Global D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST := 1
Global D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT := 32
Global D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS := 1
Global D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT := 128
Global D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS := 1
Global D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST := 1
Global D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT := 128
Global D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS := 1
Global D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT := 16
Global D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS := 1
Global D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST := 1
Global D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT := 16
Global D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT := 32
Global D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS := 4
Global D3D11_COMMONSHADER_TEMP_REGISTER_COUNT := 4096
Global D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS := 3
Global D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST := 3
Global D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX := 10
Global D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN := -10
Global D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE := -8
Global D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE := 7
Global D3D11_COMPARISON_FILTERING_BIT := 128
Global D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD := 256
Global D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP := 64
Global D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD := 240
Global D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP := 68
Global D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD := 224
Global D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP := 72
Global D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD := 208
Global D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP := 76
Global D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD := 192
Global D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP := 84
Global D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD := 176
Global D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP := 92
Global D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD := 160
Global D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP := 100
Global D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD := 144
Global D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP := 112
Global D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD := 128
Global D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP := 128
Global D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD := 112
Global D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP := 144
Global D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD := 96
Global D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP := 168
Global D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD := 80
Global D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP := 204
Global D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD := 64
Global D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP := 256
Global D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD := 48
Global D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP := 340
Global D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD := 32
Global D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP := 512
Global D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD := 16
Global D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP := 768
Global D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION := 1
Global D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT := 256
Global D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP := 768
Global D3D11_CS_4_X_THREAD_GROUP_MAX_X := 768
Global D3D11_CS_4_X_THREAD_GROUP_MAX_Y := 768
Global D3D11_CS_4_X_UAV_REGISTER_COUNT := 1
Global D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION := 65535
Global D3D11_CS_TGSM_REGISTER_COUNT := 8192
Global D3D11_CS_TGSM_REGISTER_READS_PER_INST := 1
Global D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS := 1
Global D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS := 1
Global D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP := 1024
Global D3D11_CS_THREAD_GROUP_MAX_X := 1024
Global D3D11_CS_THREAD_GROUP_MAX_Y := 1024
Global D3D11_CS_THREAD_GROUP_MAX_Z := 64
Global D3D11_CS_THREAD_GROUP_MIN_X := 1
Global D3D11_CS_THREAD_GROUP_MIN_Y := 1
Global D3D11_CS_THREAD_GROUP_MIN_Z := 1
Global D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL := 16384
Global D3D11_DEFAULT_DEPTH_BIAS := 0
Global D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX := 0
Global D3D11_DEFAULT_SAMPLE_MASK := 4294967295
Global D3D11_DEFAULT_SCISSOR_ENDX := 0
Global D3D11_DEFAULT_SCISSOR_ENDY := 0
Global D3D11_DEFAULT_SCISSOR_STARTX := 0
Global D3D11_DEFAULT_SCISSOR_STARTY := 0
Global D3D11_DEFAULT_STENCIL_READ_MASK := 255
Global D3D11_DEFAULT_STENCIL_REFERENCE := 0
Global D3D11_DEFAULT_STENCIL_WRITE_MASK := 255
Global D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX := 0
Global D3D11_DEFAULT_VIEWPORT_HEIGHT := 0
Global D3D11_DEFAULT_VIEWPORT_TOPLEFTX := 0
Global D3D11_DEFAULT_VIEWPORT_TOPLEFTY := 0
Global D3D11_DEFAULT_VIEWPORT_WIDTH := 0
Global D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS := 4
Global D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT := 32
Global D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS := 1
Global D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST := 2
Global D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS := 3968
Global D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS := 3
Global D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT := 1
Global D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS := 1
Global D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST := 2
Global D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS := 4
Global D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT := 32
Global D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS := 1
Global D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST := 2
Global D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_DS_OUTPUT_REGISTER_COMPONENTS := 4
Global D3D11_DS_OUTPUT_REGISTER_COUNT := 32
Global D3D11_FILTER_TYPE_MASK := 3
Global D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS := 1
Global D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST := 2
Global D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS := 1
Global D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT := 1
Global D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS := 1
Global D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT := 1
Global D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS := 1
Global D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST := 2
Global D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_GS_INPUT_REGISTER_COMPONENTS := 4
Global D3D11_GS_INPUT_REGISTER_COUNT := 32
Global D3D11_GS_INPUT_REGISTER_READ_PORTS := 1
Global D3D11_GS_INPUT_REGISTER_READS_PER_INST := 2
Global D3D11_GS_INPUT_REGISTER_VERTICES := 32
Global D3D11_GS_MAX_INSTANCE_COUNT := 32
Global D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES := 1024
Global D3D11_GS_OUTPUT_ELEMENTS := 32
Global D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_GS_OUTPUT_REGISTER_COMPONENTS := 4
Global D3D11_GS_OUTPUT_REGISTER_COUNT := 32
Global D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT := 32
Global D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT := 32
Global D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS := 4
Global D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS := 1
Global D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST := 2
Global D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND := 4294967295
Global D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS := 1
Global D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT := 1
Global D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS := 1
Global D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST := 2
Global D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS := 1
Global D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT := 1
Global D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS := 1
Global D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST := 2
Global D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS := 1
Global D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT := 1
Global D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS := 1
Global D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST := 2
Global D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND := 4294967295
Global D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS := 1
Global D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT := 1
Global D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS := 1
Global D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST := 2
Global D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS := 3968
Global D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS := 4
Global D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT := 32
Global D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS := 1
Global D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST := 2
Global D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES := 0
Global D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY := 0
Global D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES := 0
Global D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT := 1
Global D3D11_IA_INSTANCE_ID_BIT_COUNT := 32
Global D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT := 32
Global D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT := 32
Global D3D11_IA_PRIMITIVE_ID_BIT_COUNT := 32
Global D3D11_IA_VERTEX_ID_BIT_COUNT := 32
Global D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT := 32
Global D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT := 32
Global D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS := 128
Global D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT := 4294967295
Global D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER := 4294967295
Global D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL := 4294967295
Global D3D11_KEEP_UNORDERED_ACCESS_VIEWS := 4294967295
Global D3D11_MAG_FILTER_SHIFT := 2
Global D3D11_MAJOR_VERSION := 11
Global D3D11_MAX_MAXANISOTROPY := 16
Global D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT := 32
Global D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP := 17
Global D3D11_MIN_FILTER_SHIFT := 4
Global D3D11_MIN_MAXANISOTROPY := 0
Global D3D11_MINOR_VERSION := 0
Global D3D11_MIP_FILTER_SHIFT := 0
Global D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT := 8
Global D3D11_MIP_LOD_RANGE_BIT_COUNT := 8
Global D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT := 0
Global D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT := 15
Global D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT := 16
Global D3D11_PS_CS_UAV_REGISTER_COMPONENTS := 1
Global D3D11_PS_CS_UAV_REGISTER_COUNT := 8
Global D3D11_PS_CS_UAV_REGISTER_READ_PORTS := 1
Global D3D11_PS_CS_UAV_REGISTER_READS_PER_INST := 1
Global D3D11_PS_FRONTFACING_DEFAULT_VALUE := 4294967295
Global D3D11_PS_FRONTFACING_FALSE_VALUE := 0
Global D3D11_PS_FRONTFACING_TRUE_VALUE := 4294967295
Global D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_PS_INPUT_REGISTER_COMPONENTS := 4
Global D3D11_PS_INPUT_REGISTER_COUNT := 32
Global D3D11_PS_INPUT_REGISTER_READ_PORTS := 1
Global D3D11_PS_INPUT_REGISTER_READS_PER_INST := 2
Global D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS := 1
Global D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT := 1
Global D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS := 1
Global D3D11_PS_OUTPUT_MASK_REGISTER_COUNT := 1
Global D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_PS_OUTPUT_REGISTER_COMPONENTS := 4
Global D3D11_PS_OUTPUT_REGISTER_COUNT := 8
Global D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT := 16
Global D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE := 4096
Global D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP := 27
Global D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT := 4096
Global D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE := 4096
Global D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP := 32
Global D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP := 32
Global D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION := 16384
Global D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT := 1024
Global D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT := 4096
Global D3D11_REQ_MAXANISOTROPY := 16
Global D3D11_REQ_MIP_LEVELS := 15
Global D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES := 2048
Global D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE := 4096
Global D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH := 16384
Global D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM := 128
Global D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP := 20
Global D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE := 4096
Global D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION := 2048
Global D3D11_REQ_TEXTURE1D_U_DIMENSION := 16384
Global D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION := 2048
Global D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION := 16384
Global D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION := 2048
Global D3D11_REQ_TEXTURECUBE_DIMENSION := 16384
Global D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL := 0
Global D3D11_SDK_VERSION := 7
Global D3D11_SHADER_MAJOR_VERSION := 5
Global D3D11_SHADER_MAX_INSTANCES := 65535
Global D3D11_SHADER_MAX_INTERFACE_CALL_SITES := 4096
Global D3D11_SHADER_MAX_INTERFACES := 253
Global D3D11_SHADER_MAX_TYPES := 65535
Global D3D11_SHADER_MINOR_VERSION := 0
Global D3D11_SHIFT_INSTRUCTION_PAD_VALUE := 0
Global D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT := 5
Global D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT := 8
Global D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES := 2048
Global D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES := 512
Global D3D11_SO_BUFFER_SLOT_COUNT := 4
Global D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP := 4294967295
Global D3D11_SO_NO_RASTERIZED_STREAM := 4294967295
Global D3D11_SO_OUTPUT_COMPONENT_COUNT := 128
Global D3D11_SO_STREAM_COUNT := 4
Global D3D11_SPEC_DATE_DAY := 4
Global D3D11_SPEC_DATE_MONTH := 6
Global D3D11_SPEC_DATE_YEAR := 2009
Global D3D11_STANDARD_COMPONENT_BIT_COUNT := 32
Global D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED := 64
Global D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE := 4
Global D3D11_STANDARD_PIXEL_COMPONENT_COUNT := 128
Global D3D11_STANDARD_PIXEL_ELEMENT_COUNT := 32
Global D3D11_STANDARD_VECTOR_SIZE := 4
Global D3D11_STANDARD_VERTEX_ELEMENT_COUNT := 32
Global D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT := 64
Global D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT := 8
Global D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT := 8
Global D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR := 64
Global D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR := 64
Global D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR := 63
Global D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR := 64
Global D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR := 2
Global D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR := 1
Global D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR := 1
Global D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT := 16
Global D3D11_UNBOUND_MEMORY_ACCESS_RESULT := 0
Global D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX := 15
Global D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE := 16
Global D3D11_VIEWPORT_BOUNDS_MAX := 32767
Global D3D11_VIEWPORT_BOUNDS_MIN := -32768
Global D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_VS_INPUT_REGISTER_COMPONENTS := 4
Global D3D11_VS_INPUT_REGISTER_COUNT := 32
Global D3D11_VS_INPUT_REGISTER_READ_PORTS := 1
Global D3D11_VS_INPUT_REGISTER_READS_PER_INST := 2
Global D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT := 32
Global D3D11_VS_OUTPUT_REGISTER_COMPONENTS := 4
Global D3D11_VS_OUTPUT_REGISTER_COUNT := 32
Global D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT := 10
Global D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP := 25
Global D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP := 25
Global D3D11_INPUT_PER_INSTANCE_DATA := 1
Global D3D11_FILL_WIREFRAME := 2
Global D3D11_FILL_SOLID := 3
Global D3D11_CULL_NONE := 1
Global D3D11_CULL_FRONT := 2
Global D3D11_CULL_BACK := 3
Global D3D11_DSV_DIMENSION_TEXTURE1D := 1
Global D3D11_DSV_DIMENSION_TEXTURE1DARRAY := 2
Global D3D11_DSV_DIMENSION_TEXTURE2D := 3
Global D3D11_DSV_DIMENSION_TEXTURE2DARRAY := 4
Global D3D11_DSV_DIMENSION_TEXTURE2DMS := 5
Global D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY := 6
Global D3D11_RTV_DIMENSION_BUFFER := 1
Global D3D11_RTV_DIMENSION_TEXTURE1D := 2
Global D3D11_RTV_DIMENSION_TEXTURE1DARRAY := 3
Global D3D11_RTV_DIMENSION_TEXTURE2D := 4
Global D3D11_RTV_DIMENSION_TEXTURE2DARRAY := 5
Global D3D11_RTV_DIMENSION_TEXTURE2DMS := 6
Global D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY := 7
Global D3D11_RTV_DIMENSION_TEXTURE3D := 8
Global D3D11_UAV_DIMENSION_BUFFER := 1
Global D3D11_UAV_DIMENSION_TEXTURE1D := 2
Global D3D11_UAV_DIMENSION_TEXTURE1DARRAY := 3
Global D3D11_UAV_DIMENSION_TEXTURE2D := 4
Global D3D11_UAV_DIMENSION_TEXTURE2DARRAY := 5
Global D3D11_UAV_DIMENSION_TEXTURE3D := 8
Global D3D11_USAGE_IMMUTABLE := 1
Global D3D11_USAGE_DYNAMIC := 2
Global D3D11_USAGE_STAGING := 3
Global D3D11_BIND_VERTEX_BUFFER := 0x1
Global D3D11_BIND_INDEX_BUFFER := 0x2
Global D3D11_BIND_CONSTANT_BUFFER := 0x4
Global D3D11_BIND_SHADER_RESOURCE := 0x8
Global D3D11_BIND_STREAM_OUTPUT := 0x10
Global D3D11_BIND_RENDER_TARGET := 0x20
Global D3D11_BIND_DEPTH_STENCIL := 0x40
Global D3D11_BIND_UNORDERED_ACCESS := 0x80
Global D3D11_CPU_ACCESS_WRITE := 0x10000
Global D3D11_CPU_ACCESS_READ := 0x20000
Global D3D11_RESOURCE_MISC_GENERATE_MIPS := 0x1
Global D3D11_RESOURCE_MISC_SHARED := 0x2
Global D3D11_RESOURCE_MISC_TEXTURECUBE := 0x4
Global D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS := 0x10
Global D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS := 0x20
Global D3D11_RESOURCE_MISC_BUFFER_STRUCTURED := 0x40
Global D3D11_RESOURCE_MISC_RESOURCE_CLAMP := 0x80
Global D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX := 0x100
Global D3D11_RESOURCE_MISC_GDI_COMPATIBLE := 0x200
Global D3D11_MAP_READ := 1
Global D3D11_MAP_WRITE := 2
Global D3D11_MAP_READ_WRITE := 3
Global D3D11_MAP_WRITE_DISCARD := 4
Global D3D11_MAP_WRITE_NO_OVERWRITE := 5
Global D3D11_MAP_FLAG_DO_NOT_WAIT := 0x100000
Global D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR := 0x1
Global D3D11_CLEAR_DEPTH := 0x1
Global D3D11_CLEAR_STENCIL := 0x2
Global D3D11_COMPARISON_NEVER := 1
Global D3D11_COMPARISON_LESS := 2
Global D3D11_COMPARISON_EQUAL := 3
Global D3D11_COMPARISON_LESS_EQUAL := 4
Global D3D11_COMPARISON_GREATER := 5
Global D3D11_COMPARISON_NOT_EQUAL := 6
Global D3D11_COMPARISON_GREATER_EQUAL := 7
Global D3D11_COMPARISON_ALWAYS := 8
Global D3D11_DEPTH_WRITE_MASK_ALL := 1
Global D3D11_STENCIL_OP_KEEP := 1
Global D3D11_STENCIL_OP_ZERO := 2
Global D3D11_STENCIL_OP_REPLACE := 3
Global D3D11_STENCIL_OP_INCR_SAT := 4
Global D3D11_STENCIL_OP_DECR_SAT := 5
Global D3D11_STENCIL_OP_INVERT := 6
Global D3D11_STENCIL_OP_INCR := 7
Global D3D11_STENCIL_OP_DECR := 8
Global D3D11_BLEND_ZERO := 1
Global D3D11_BLEND_ONE := 2
Global D3D11_BLEND_SRC_COLOR := 3
Global D3D11_BLEND_INV_SRC_COLOR := 4
Global D3D11_BLEND_SRC_ALPHA := 5
Global D3D11_BLEND_INV_SRC_ALPHA := 6
Global D3D11_BLEND_DEST_ALPHA := 7
Global D3D11_BLEND_INV_DEST_ALPHA := 8
Global D3D11_BLEND_DEST_COLOR := 9
Global D3D11_BLEND_INV_DEST_COLOR := 10
Global D3D11_BLEND_SRC_ALPHA_SAT := 11
Global D3D11_BLEND_BLEND_FACTOR := 14
Global D3D11_BLEND_INV_BLEND_FACTOR := 15
Global D3D11_BLEND_SRC1_COLOR := 16
Global D3D11_BLEND_INV_SRC1_COLOR := 17
Global D3D11_BLEND_SRC1_ALPHA := 18
Global D3D11_BLEND_INV_SRC1_ALPHA := 19
Global D3D11_BLEND_OP_ADD := 1
Global D3D11_BLEND_OP_SUBTRACT := 2
Global D3D11_BLEND_OP_REV_SUBTRACT := 3
Global D3D11_BLEND_OP_MIN := 4
Global D3D11_BLEND_OP_MAX := 5
Global D3D11_COLOR_WRITE_ENABLE_RED := 1
Global D3D11_COLOR_WRITE_ENABLE_GREEN := 2
Global D3D11_COLOR_WRITE_ENABLE_BLUE := 4
Global D3D11_COLOR_WRITE_ENABLE_ALPHA := 8
Global D3D11_COLOR_WRITE_ENABLE_ALL := ( ( ( D3D11_COLOR_WRITE_ENABLE_RED | D3D11_COLOR_WRITE_ENABLE_GREEN )  | D3D11_COLOR_WRITE_ENABLE_BLUE )  | D3D11_COLOR_WRITE_ENABLE_ALPHA )
Global D3D11_TEXTURECUBE_FACE_NEGATIVE_X := 1
Global D3D11_TEXTURECUBE_FACE_POSITIVE_Y := 2
Global D3D11_TEXTURECUBE_FACE_NEGATIVE_Y := 3
Global D3D11_TEXTURECUBE_FACE_POSITIVE_Z := 4
Global D3D11_TEXTURECUBE_FACE_NEGATIVE_Z := 5
Global D3D11_BUFFEREX_SRV_FLAG_RAW := 0x1
Global D3D11_DSV_READ_ONLY_DEPTH := 0x1
Global D3D11_DSV_READ_ONLY_STENCIL := 0x2
Global D3D11_BUFFER_UAV_FLAG_RAW := 0x1
Global D3D11_BUFFER_UAV_FLAG_APPEND := 0x2
Global D3D11_BUFFER_UAV_FLAG_COUNTER := 0x4
Global D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR := 0x1
Global D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT := 0x4
Global D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR := 0x5
Global D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT := 0x10
Global D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR := 0x11
Global D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT := 0x14
Global D3D11_FILTER_MIN_MAG_MIP_LINEAR := 0x15
Global D3D11_FILTER_ANISOTROPIC := 0x55
Global D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT := 0x80
Global D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR := 0x81
Global D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT := 0x84
Global D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR := 0x85
Global D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT := 0x90
Global D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR := 0x91
Global D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT := 0x94
Global D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR := 0x95
Global D3D11_FILTER_COMPARISON_ANISOTROPIC := 0xd5
Global D3D11_FILTER_TYPE_LINEAR := 1
Global D3D11_TEXTURE_ADDRESS_WRAP := 1
Global D3D11_TEXTURE_ADDRESS_MIRROR := 2
Global D3D11_TEXTURE_ADDRESS_CLAMP := 3
Global D3D11_TEXTURE_ADDRESS_BORDER := 4
Global D3D11_TEXTURE_ADDRESS_MIRROR_ONCE := 5
Global D3D11_FORMAT_SUPPORT_BUFFER := 0x1
Global D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER := 0x2
Global D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER := 0x4
Global D3D11_FORMAT_SUPPORT_SO_BUFFER := 0x8
Global D3D11_FORMAT_SUPPORT_TEXTURE1D := 0x10
Global D3D11_FORMAT_SUPPORT_TEXTURE2D := 0x20
Global D3D11_FORMAT_SUPPORT_TEXTURE3D := 0x40
Global D3D11_FORMAT_SUPPORT_TEXTURECUBE := 0x80
Global D3D11_FORMAT_SUPPORT_SHADER_LOAD := 0x100
Global D3D11_FORMAT_SUPPORT_SHADER_SAMPLE := 0x200
Global D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON := 0x400
Global D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT := 0x800
Global D3D11_FORMAT_SUPPORT_MIP := 0x1000
Global D3D11_FORMAT_SUPPORT_MIP_AUTOGEN := 0x2000
Global D3D11_FORMAT_SUPPORT_RENDER_TARGET := 0x4000
Global D3D11_FORMAT_SUPPORT_BLENDABLE := 0x8000
Global D3D11_FORMAT_SUPPORT_DEPTH_STENCIL := 0x10000
Global D3D11_FORMAT_SUPPORT_CPU_LOCKABLE := 0x20000
Global D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE := 0x40000
Global D3D11_FORMAT_SUPPORT_DISPLAY := 0x80000
Global D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT := 0x100000
Global D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET := 0x200000
Global D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD := 0x400000
Global D3D11_FORMAT_SUPPORT_SHADER_GATHER := 0x800000
Global D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST := 0x1000000
Global D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW := 0x2000000
Global D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON := 0x4000000
Global D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD := 0x1
Global D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS := 0x2
Global D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE := 0x4
Global D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE := 0x8
Global D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX := 0x10
Global D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX := 0x20
Global D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD := 0x40
Global D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE := 0x80
Global D3D11_ASYNC_GETDATA_DONOTFLUSH := 0x1
Global D3D11_QUERY_OCCLUSION := ( D3D11_QUERY_EVENT + 1 )
Global D3D11_QUERY_TIMESTAMP := ( D3D11_QUERY_OCCLUSION + 1 )
Global D3D11_QUERY_TIMESTAMP_DISJOINT := ( D3D11_QUERY_TIMESTAMP + 1 )
Global D3D11_QUERY_PIPELINE_STATISTICS := ( D3D11_QUERY_TIMESTAMP_DISJOINT + 1 )
Global D3D11_QUERY_OCCLUSION_PREDICATE := ( D3D11_QUERY_PIPELINE_STATISTICS + 1 )
Global D3D11_QUERY_SO_STATISTICS := ( D3D11_QUERY_OCCLUSION_PREDICATE + 1 )
Global D3D11_QUERY_SO_OVERFLOW_PREDICATE := ( D3D11_QUERY_SO_STATISTICS + 1 )
Global D3D11_QUERY_SO_STATISTICS_STREAM0 := ( D3D11_QUERY_SO_OVERFLOW_PREDICATE + 1 )
Global D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 := ( D3D11_QUERY_SO_STATISTICS_STREAM0 + 1 )
Global D3D11_QUERY_SO_STATISTICS_STREAM1 := ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 + 1 )
Global D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 := ( D3D11_QUERY_SO_STATISTICS_STREAM1 + 1 )
Global D3D11_QUERY_SO_STATISTICS_STREAM2 := ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 + 1 )
Global D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 := ( D3D11_QUERY_SO_STATISTICS_STREAM2 + 1 )
Global D3D11_QUERY_SO_STATISTICS_STREAM3 := ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 + 1 )
Global D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 := ( D3D11_QUERY_SO_STATISTICS_STREAM3 + 1 )
Global D3D11_QUERY_MISC_PREDICATEHINT := 0x1
Global D3D11_COUNTER_DEVICE_DEPENDENT_0 := 0x40000000
Global D3D11_COUNTER_TYPE_UINT16 := ( D3D11_COUNTER_TYPE_FLOAT32 + 1 )
Global D3D11_COUNTER_TYPE_UINT32 := ( D3D11_COUNTER_TYPE_UINT16 + 1 )
Global D3D11_COUNTER_TYPE_UINT64 := ( D3D11_COUNTER_TYPE_UINT32 + 1 )
Global D3D11_STANDARD_MULTISAMPLE_PATTERN := 0xffffffff
Global D3D11_CENTER_MULTISAMPLE_PATTERN := 0xfffffffe
Global D3D11_DEVICE_CONTEXT_DEFERRED := ( D3D11_DEVICE_CONTEXT_IMMEDIATE + 1 )
Global D3D11_FEATURE_DOUBLES := ( D3D11_FEATURE_THREADING + 1 )
Global D3D11_FEATURE_FORMAT_SUPPORT := ( D3D11_FEATURE_DOUBLES + 1 )
Global D3D11_FEATURE_FORMAT_SUPPORT2 := ( D3D11_FEATURE_FORMAT_SUPPORT + 1 )
Global D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS := ( D3D11_FEATURE_FORMAT_SUPPORT2 + 1 )
Global D3D11_CREATE_DEVICE_SINGLETHREADED := 0x1
Global D3D11_CREATE_DEVICE_DEBUG := 0x2
Global D3D11_CREATE_DEVICE_SWITCH_TO_REF := 0x4
Global D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS := 0x8
Global D3D11_CREATE_DEVICE_BGRA_SUPPORT := 0x20
D3D11.err := {}
D3D11.err[2289827844 . ""] := "D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD"
D3D11.err[2289827842 . ""] := "D3D11_ERROR_FILE_NOT_FOUND"
D3D11.err[2289827841 . ""] := "D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS"
D3D11.err[2289827843 . ""] := "D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS"
Global D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD := 2289827844
Global D3D11_ERROR_FILE_NOT_FOUND := 2289827842
Global D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS := 2289827841
Global D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS := 2289827843
Global d3DCommon := {}
d3DCommon.IID_ID3D10Blob := "{8ba5fb08-5195-40e2-ac58-0d989c3a0102}"
d3DCommon.WKPDID_D3DDebugObjectName := "{429b8c22-9188-4b0c-8742-acb0bf85c200}"
d3DCommon.ID3D10Blob:= {}
d3DCommon.ID3D10Blob.name := "ID3D10Blob"
d3DCommon.ID3D10Blob.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(GetBufferPointer)(This)
STDMETHOD(GetBufferSize)(This)
"
)
d3DCommon.err := {}
Global D3D11_3 := {}
D3D11_3.IID_ID3D11Texture3D1 := "{0C711683-2853-4846-9BB0-F3E60639E46A}"
D3D11_3.IID_ID3D11RasterizerState2 := "{6fbd02fb-209f-46c4-b059-2ed15586a6ac}"
D3D11_3.IID_ID3D11ShaderResourceView1 := "{91308b87-9040-411d-8c67-c39253ce3802}"
D3D11_3.IID_ID3D11RenderTargetView1 := "{ffbe2e23-f011-418a-ac56-5ceed7c5b94b}"
D3D11_3.IID_ID3D11UnorderedAccessView1 := "{7b3b6153-a886-4544-ab37-6537c8500403}"
D3D11_3.IID_ID3D11Query1 := "{631b4766-36dc-461d-8db6-c47e13e60916}"
D3D11_3.IID_ID3D11DeviceContext3 := "{b4e3c01d-e79e-4637-91b2-510e9f4c9b8f}"
D3D11_3.IID_ID3D11Fence := "{affde9d1-1df7-4bb7-8a34-0f46251dab80}"
D3D11_3.IID_ID3D11DeviceContext4 := "{917600da-f58c-4c33-98d8-3e15b390fa24}"
D3D11_3.IID_ID3D11Device3 := "{A05C8C37-D2C6-4732-B3A0-9CE0B0DC9AE6}"
D3D11_3.ID3D11Device3 := {}
D3D11_3.ID3D11Device3.name := "ID3D11Device3"
D3D11_3.ID3D11Device3.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(CreateBuffer)(This,pDesc,pInitialData,ppBuffer)	\
STDMETHOD(CreateTexture1D)(This,pDesc,pInitialData,ppTexture1D)	\
STDMETHOD(CreateTexture2D)(This,pDesc,pInitialData,ppTexture2D)	\
STDMETHOD(CreateTexture3D)(This,pDesc,pInitialData,ppTexture3D)	\
STDMETHOD(CreateShaderResourceView)(This,pResource,pDesc,ppSRView)	\
STDMETHOD(CreateUnorderedAccessView)(This,pResource,pDesc,ppUAView)	\
STDMETHOD(CreateRenderTargetView)(This,pResource,pDesc,ppRTView)	\
STDMETHOD(CreateDepthStencilView)(This,pResource,pDesc,ppDepthStencilView)	\
STDMETHOD(CreateInputLayout)(This,pInputElementDescs,NumElements,pShaderBytecodeWithInputSignature,BytecodeLength,ppInputLayout)	\
STDMETHOD(CreateVertexShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppVertexShader)	\
STDMETHOD(CreateGeometryShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppGeometryShader)	\
STDMETHOD(CreateGeometryShaderWithStreamOutput)(This,pShaderBytecode,BytecodeLength,pSODeclaration,NumEntries,pBufferStrides,NumStrides,RasterizedStream,pClassLinkage,ppGeometryShader)	\
STDMETHOD(CreatePixelShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppPixelShader)	\
STDMETHOD(CreateHullShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppHullShader)	\
STDMETHOD(CreateDomainShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppDomainShader)	\
STDMETHOD(CreateComputeShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppComputeShader)	\
STDMETHOD(CreateClassLinkage)(This,ppLinkage)	\
STDMETHOD(CreateBlendState)(This,pBlendStateDesc,ppBlendState)	\
STDMETHOD(CreateDepthStencilState)(This,pDepthStencilDesc,ppDepthStencilState)	\
STDMETHOD(CreateRasterizerState)(This,pRasterizerDesc,ppRasterizerState)	\
STDMETHOD(CreateSamplerState)(This,pSamplerDesc,ppSamplerState)	\
STDMETHOD(CreateQuery)(This,pQueryDesc,ppQuery)	\
STDMETHOD(CreatePredicate)(This,pPredicateDesc,ppPredicate)	\
STDMETHOD(CreateCounter)(This,pCounterDesc,ppCounter)	\
STDMETHOD(CreateDeferredContext)(This,ContextFlags,ppDeferredContext)	\
STDMETHOD(OpenSharedResource)(This,hResource,ReturnedInterface,ppResource)	\
STDMETHOD(CheckFormatSupport)(This,Format,pFormatSupport)	\
STDMETHOD(CheckMultisampleQualityLevels)(This,Format,SampleCount,pNumQualityLevels)	\
STDMETHOD(CheckCounterInfo)(This,pCounterInfo)	\
STDMETHOD(CheckCounter)(This,pDesc,pType,pActiveCounters,szName,pNameLength,szUnits,pUnitsLength,szDescription,pDescriptionLength)	\
STDMETHOD(CheckFeatureSupport)(This,Feature,pFeatureSupportData,FeatureSupportDataSize)	\
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)	\
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)	\
STDMETHOD(GetFeatureLevel)(This)	\
STDMETHOD(GetCreationFlags)(This)	\
STDMETHOD(GetDeviceRemovedReason)(This)	\
STDMETHOD(GetImmediateContext)(This,ppImmediateContext)	\
STDMETHOD(SetExceptionMode)(This,RaiseFlags)	\
STDMETHOD(GetExceptionMode)(This)	\
STDMETHOD(GetImmediateContext1)(This,ppImmediateContext)	\
STDMETHOD(CreateDeferredContext1)(This,ContextFlags,ppDeferredContext)	\
STDMETHOD(CreateBlendState1)(This,pBlendStateDesc,ppBlendState)	\
STDMETHOD(CreateRasterizerState1)(This,pRasterizerDesc,ppRasterizerState)	\
STDMETHOD(CreateDeviceContextState)(This,Flags,pFeatureLevels,FeatureLevels,SDKVersion,EmulatedInterface,pChosenFeatureLevel,ppContextState)	\
STDMETHOD(OpenSharedResource1)(This,hResource,returnedInterface,ppResource)	\
STDMETHOD(OpenSharedResourceByName)(This,lpName,dwDesiredAccess,returnedInterface,ppResource)	\
STDMETHOD(GetImmediateContext2)(This,ppImmediateContext)	\
STDMETHOD(CreateDeferredContext2)(This,ContextFlags,ppDeferredContext)	\
STDMETHOD(GetResourceTiling)(This,pTiledResource,pNumTilesForEntireResource,pPackedMipDesc,pStandardTileShapeForNonPackedMips,pNumSubresourceTilings,FirstSubresourceTilingToGet,pSubresourceTilingsForNonPackedMips)	\
STDMETHOD(CheckMultisampleQualityLevels1)(This,Format,SampleCount,Flags,pNumQualityLevels)	\
STDMETHOD(CreateTexture2D1)(This,pDesc1,pInitialData,ppTexture2D)	\
STDMETHOD(CreateTexture3D1)(This,pDesc1,pInitialData,ppTexture3D)	\
STDMETHOD(CreateRasterizerState2)(This,pRasterizerDesc,ppRasterizerState)	\
STDMETHOD(CreateShaderResourceView1)(This,pResource,pDesc1,ppSRView1)	\
STDMETHOD(CreateUnorderedAccessView1)(This,pResource,pDesc1,ppUAView1)	\
STDMETHOD(CreateRenderTargetView1)(This,pResource,pDesc1,ppRTView1)	\
STDMETHOD(CreateQuery1)(This,pQueryDesc1,ppQuery1)	\
STDMETHOD(GetImmediateContext3)(This,ppImmediateContext)	\
STDMETHOD(CreateDeferredContext3)(This,ContextFlags,ppDeferredContext)	\
STDMETHOD(WriteToSubresource)(This,pDstResource,DstSubresource,pDstBox,pSrcData,SrcRowPitch,SrcDepthPitch)	\
STDMETHOD(ReadFromSubresource)(This,pDstData,DstRowPitch,DstDepthPitch,pSrcResource,SrcSubresource,pSrcBox)	\
"
)
D3D11_3.ID3D11DeviceContext3 := {}
D3D11_3.ID3D11DeviceContext3.name := "ID3D11DeviceContext3"
D3D11_3.ID3D11DeviceContext3.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(GetDevice)(This,ppDevice)	\
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)	\
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)	\
STDMETHOD(VSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(PSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(PSSetShader)(This,pPixelShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(PSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(VSSetShader)(This,pVertexShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(DrawIndexed)(This,IndexCount,StartIndexLocation,BaseVertexLocation)	\
STDMETHOD(Draw)(This,VertexCount,StartVertexLocation)	\
STDMETHOD(Map)(This,pResource,Subresource,MapType,MapFlags,pMappedResource)	\
STDMETHOD(Unmap)(This,pResource,Subresource)	\
STDMETHOD(PSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(IASetInputLayout)(This,pInputLayout)	\
STDMETHOD(IASetVertexBuffers)(This,StartSlot,NumBuffers,ppVertexBuffers,pStrides,pOffsets)	\
STDMETHOD(IASetIndexBuffer)(This,pIndexBuffer,Format,Offset)	\
STDMETHOD(DrawIndexedInstanced)(This,IndexCountPerInstance,InstanceCount,StartIndexLocation,BaseVertexLocation,StartInstanceLocation)	\
STDMETHOD(DrawInstanced)(This,VertexCountPerInstance,InstanceCount,StartVertexLocation,StartInstanceLocation)	\
STDMETHOD(GSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(GSSetShader)(This,pShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(IASetPrimitiveTopology)(This,Topology)	\
STDMETHOD(VSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(VSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(Begin)(This,pAsync)	\
STDMETHOD(End)(This,pAsync)	\
STDMETHOD(GetData)(This,pAsync,pData,DataSize,GetDataFlags)	\
STDMETHOD(SetPredication)(This,pPredicate,PredicateValue)	\
STDMETHOD(GSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(GSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(OMSetRenderTargets)(This,NumViews,ppRenderTargetViews,pDepthStencilView)	\
STDMETHOD(OMSetRenderTargetsAndUnorderedAccessViews)(This,NumRTVs,ppRenderTargetViews,pDepthStencilView,UAVStartSlot,NumUAVs,ppUnorderedAccessViews,pUAVInitialCounts)	\
STDMETHOD(OMSetBlendState)(This,pBlendState,BlendFactor,SampleMask)	\
STDMETHOD(OMSetDepthStencilState)(This,pDepthStencilState,StencilRef)	\
STDMETHOD(SOSetTargets)(This,NumBuffers,ppSOTargets,pOffsets)	\
STDMETHOD(DrawAuto)(This)	\
STDMETHOD(DrawIndexedInstancedIndirect)(This,pBufferForArgs,AlignedByteOffsetForArgs)	\
STDMETHOD(DrawInstancedIndirect)(This,pBufferForArgs,AlignedByteOffsetForArgs)	\
STDMETHOD(Dispatch)(This,ThreadGroupCountX,ThreadGroupCountY,ThreadGroupCountZ)	\
STDMETHOD(DispatchIndirect)(This,pBufferForArgs,AlignedByteOffsetForArgs)	\
STDMETHOD(RSSetState)(This,pRasterizerState)	\
STDMETHOD(RSSetViewports)(This,NumViewports,pViewports)	\
STDMETHOD(RSSetScissorRects)(This,NumRects,pRects)	\
STDMETHOD(CopySubresourceRegion)(This,pDstResource,DstSubresource,DstX,DstY,DstZ,pSrcResource,SrcSubresource,pSrcBox)	\
STDMETHOD(CopyResource)(This,pDstResource,pSrcResource)	\
STDMETHOD(UpdateSubresource)(This,pDstResource,DstSubresource,pDstBox,pSrcData,SrcRowPitch,SrcDepthPitch)	\
STDMETHOD(CopyStructureCount)(This,pDstBuffer,DstAlignedByteOffset,pSrcView)	\
STDMETHOD(ClearRenderTargetView)(This,pRenderTargetView,ColorRGBA)	\
STDMETHOD(ClearUnorderedAccessViewUint)(This,pUnorderedAccessView,Values)	\
STDMETHOD(ClearUnorderedAccessViewFloat)(This,pUnorderedAccessView,Values)	\
STDMETHOD(ClearDepthStencilView)(This,pDepthStencilView,ClearFlags,Depth,Stencil)	\
STDMETHOD(GenerateMips)(This,pShaderResourceView)	\
STDMETHOD(SetResourceMinLOD)(This,pResource,MinLOD)	\
STDMETHOD(GetResourceMinLOD)(This,pResource)	\
STDMETHOD(ResolveSubresource)(This,pDstResource,DstSubresource,pSrcResource,SrcSubresource,Format)	\
STDMETHOD(ExecuteCommandList)(This,pCommandList,RestoreContextState)	\
STDMETHOD(HSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(HSSetShader)(This,pHullShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(HSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(HSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(DSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(DSSetShader)(This,pDomainShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(DSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(DSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(CSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(CSSetUnorderedAccessViews)(This,StartSlot,NumUAVs,ppUnorderedAccessViews,pUAVInitialCounts)	\
STDMETHOD(CSSetShader)(This,pComputeShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(CSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(CSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(VSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(PSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(PSGetShader)(This,ppPixelShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(PSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(VSGetShader)(This,ppVertexShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(PSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(IAGetInputLayout)(This,ppInputLayout)	\
STDMETHOD(IAGetVertexBuffers)(This,StartSlot,NumBuffers,ppVertexBuffers,pStrides,pOffsets)	\
STDMETHOD(IAGetIndexBuffer)(This,pIndexBuffer,Format,Offset)	\
STDMETHOD(GSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(GSGetShader)(This,ppGeometryShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(IAGetPrimitiveTopology)(This,pTopology)	\
STDMETHOD(VSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(VSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(GetPredication)(This,ppPredicate,pPredicateValue)	\
STDMETHOD(GSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(GSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(OMGetRenderTargets)(This,NumViews,ppRenderTargetViews,ppDepthStencilView)	\
STDMETHOD(OMGetRenderTargetsAndUnorderedAccessViews)(This,NumRTVs,ppRenderTargetViews,ppDepthStencilView,UAVStartSlot,NumUAVs,ppUnorderedAccessViews)	\
STDMETHOD(OMGetBlendState)(This,ppBlendState,BlendFactor,pSampleMask)	\
STDMETHOD(OMGetDepthStencilState)(This,ppDepthStencilState,pStencilRef)	\
STDMETHOD(SOGetTargets)(This,NumBuffers,ppSOTargets)	\
STDMETHOD(RSGetState)(This,ppRasterizerState)	\
STDMETHOD(RSGetViewports)(This,pNumViewports,pViewports)	\
STDMETHOD(RSGetScissorRects)(This,pNumRects,pRects)	\
STDMETHOD(HSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(HSGetShader)(This,ppHullShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(HSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(HSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(DSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(DSGetShader)(This,ppDomainShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(DSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(DSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(CSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(CSGetUnorderedAccessViews)(This,StartSlot,NumUAVs,ppUnorderedAccessViews)	\
STDMETHOD(CSGetShader)(This,ppComputeShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(CSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(CSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(ClearState)(This)	\
STDMETHOD(Flush)(This)	\
STDMETHOD(GetType)(This)	\
STDMETHOD(GetContextFlags)(This)	\
STDMETHOD(FinishCommandList)(This,RestoreDeferredContextState,ppCommandList)	\
STDMETHOD(CopySubresourceRegion1)(This,pDstResource,DstSubresource,DstX,DstY,DstZ,pSrcResource,SrcSubresource,pSrcBox,CopyFlags)	\
STDMETHOD(UpdateSubresource1)(This,pDstResource,DstSubresource,pDstBox,pSrcData,SrcRowPitch,SrcDepthPitch,CopyFlags)	\
STDMETHOD(DiscardResource)(This,pResource)	\
STDMETHOD(DiscardView)(This,pResourceView)	\
STDMETHOD(VSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(HSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(DSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(GSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(PSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(CSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(VSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(HSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(DSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(GSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(PSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(CSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(SwapDeviceContextState)(This,pState,ppPreviousState)	\
STDMETHOD(ClearView)(This,pView,Color,pRect,NumRects)	\
STDMETHOD(DiscardView1)(This,pResourceView,pRects,NumRects)	\
STDMETHOD(UpdateTileMappings)(This,pTiledResource,NumTiledResourceRegions,pTiledResourceRegionStartCoordinates,pTiledResourceRegionSizes,pTilePool,NumRanges,pRangeFlags,pTilePoolStartOffsets,pRangeTileCounts,Flags)	\
STDMETHOD(CopyTileMappings)(This,pDestTiledResource,pDestRegionStartCoordinate,pSourceTiledResource,pSourceRegionStartCoordinate,pTileRegionSize,Flags)	\
STDMETHOD(CopyTiles)(This,pTiledResource,pTileRegionStartCoordinate,pTileRegionSize,pBuffer,BufferStartOffsetInBytes,Flags)	\
STDMETHOD(UpdateTiles)(This,pDestTiledResource,pDestTileRegionStartCoordinate,pDestTileRegionSize,pSourceTileData,Flags)	\
STDMETHOD(ResizeTilePool)(This,pTilePool,NewSizeInBytes)	\
STDMETHOD(TiledResourceBarrier)(This,pTiledResourceOrViewAccessBeforeBarrier,pTiledResourceOrViewAccessAfterBarrier)	\
STDMETHOD(IsAnnotationEnabled)(This)	\
STDMETHOD(SetMarkerInt)(This,pLabel,Data)	\
STDMETHOD(BeginEventInt)(This,pLabel,Data)	\
STDMETHOD(EndEvent)(This)	\
STDMETHOD(Flush1)(This,ContextType,hEvent)	\
STDMETHOD(SetHardwareProtectionState)(This,HwProtectionEnable)	\
STDMETHOD(GetHardwareProtectionState)(This,pHwProtectionEnable)	\
"
)
D3D11_3.ID3D11DeviceContext4 := {}
D3D11_3.ID3D11DeviceContext4.name := "ID3D11DeviceContext4"
D3D11_3.ID3D11DeviceContext4.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(GetDevice)(This,ppDevice)	\
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)	\
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)	\
STDMETHOD(VSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(PSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(PSSetShader)(This,pPixelShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(PSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(VSSetShader)(This,pVertexShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(DrawIndexed)(This,IndexCount,StartIndexLocation,BaseVertexLocation)	\
STDMETHOD(Draw)(This,VertexCount,StartVertexLocation)	\
STDMETHOD(Map)(This,pResource,Subresource,MapType,MapFlags,pMappedResource)	\
STDMETHOD(Unmap)(This,pResource,Subresource)	\
STDMETHOD(PSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(IASetInputLayout)(This,pInputLayout)	\
STDMETHOD(IASetVertexBuffers)(This,StartSlot,NumBuffers,ppVertexBuffers,pStrides,pOffsets)	\
STDMETHOD(IASetIndexBuffer)(This,pIndexBuffer,Format,Offset)	\
STDMETHOD(DrawIndexedInstanced)(This,IndexCountPerInstance,InstanceCount,StartIndexLocation,BaseVertexLocation,StartInstanceLocation)	\
STDMETHOD(DrawInstanced)(This,VertexCountPerInstance,InstanceCount,StartVertexLocation,StartInstanceLocation)	\
STDMETHOD(GSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(GSSetShader)(This,pShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(IASetPrimitiveTopology)(This,Topology)	\
STDMETHOD(VSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(VSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(Begin)(This,pAsync)	\
STDMETHOD(End)(This,pAsync)	\
STDMETHOD(GetData)(This,pAsync,pData,DataSize,GetDataFlags)	\
STDMETHOD(SetPredication)(This,pPredicate,PredicateValue)	\
STDMETHOD(GSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(GSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(OMSetRenderTargets)(This,NumViews,ppRenderTargetViews,pDepthStencilView)	\
STDMETHOD(OMSetRenderTargetsAndUnorderedAccessViews)(This,NumRTVs,ppRenderTargetViews,pDepthStencilView,UAVStartSlot,NumUAVs,ppUnorderedAccessViews,pUAVInitialCounts)	\
STDMETHOD(OMSetBlendState)(This,pBlendState,BlendFactor,SampleMask)	\
STDMETHOD(OMSetDepthStencilState)(This,pDepthStencilState,StencilRef)	\
STDMETHOD(SOSetTargets)(This,NumBuffers,ppSOTargets,pOffsets)	\
STDMETHOD(DrawAuto)(This)	\
STDMETHOD(DrawIndexedInstancedIndirect)(This,pBufferForArgs,AlignedByteOffsetForArgs)	\
STDMETHOD(DrawInstancedIndirect)(This,pBufferForArgs,AlignedByteOffsetForArgs)	\
STDMETHOD(Dispatch)(This,ThreadGroupCountX,ThreadGroupCountY,ThreadGroupCountZ)	\
STDMETHOD(DispatchIndirect)(This,pBufferForArgs,AlignedByteOffsetForArgs)	\
STDMETHOD(RSSetState)(This,pRasterizerState)	\
STDMETHOD(RSSetViewports)(This,NumViewports,pViewports)	\
STDMETHOD(RSSetScissorRects)(This,NumRects,pRects)	\
STDMETHOD(CopySubresourceRegion)(This,pDstResource,DstSubresource,DstX,DstY,DstZ,pSrcResource,SrcSubresource,pSrcBox)	\
STDMETHOD(CopyResource)(This,pDstResource,pSrcResource)	\
STDMETHOD(UpdateSubresource)(This,pDstResource,DstSubresource,pDstBox,pSrcData,SrcRowPitch,SrcDepthPitch)	\
STDMETHOD(CopyStructureCount)(This,pDstBuffer,DstAlignedByteOffset,pSrcView)	\
STDMETHOD(ClearRenderTargetView)(This,pRenderTargetView,ColorRGBA)	\
STDMETHOD(ClearUnorderedAccessViewUint)(This,pUnorderedAccessView,Values)	\
STDMETHOD(ClearUnorderedAccessViewFloat)(This,pUnorderedAccessView,Values)	\
STDMETHOD(ClearDepthStencilView)(This,pDepthStencilView,ClearFlags,Depth,Stencil)	\
STDMETHOD(GenerateMips)(This,pShaderResourceView)	\
STDMETHOD(SetResourceMinLOD)(This,pResource,MinLOD)	\
STDMETHOD(GetResourceMinLOD)(This,pResource)	\
STDMETHOD(ResolveSubresource)(This,pDstResource,DstSubresource,pSrcResource,SrcSubresource,Format)	\
STDMETHOD(ExecuteCommandList)(This,pCommandList,RestoreContextState)	\
STDMETHOD(HSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(HSSetShader)(This,pHullShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(HSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(HSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(DSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(DSSetShader)(This,pDomainShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(DSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(DSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(CSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(CSSetUnorderedAccessViews)(This,StartSlot,NumUAVs,ppUnorderedAccessViews,pUAVInitialCounts)	\
STDMETHOD(CSSetShader)(This,pComputeShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(CSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(CSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(VSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(PSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(PSGetShader)(This,ppPixelShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(PSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(VSGetShader)(This,ppVertexShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(PSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(IAGetInputLayout)(This,ppInputLayout)	\
STDMETHOD(IAGetVertexBuffers)(This,StartSlot,NumBuffers,ppVertexBuffers,pStrides,pOffsets)	\
STDMETHOD(IAGetIndexBuffer)(This,pIndexBuffer,Format,Offset)	\
STDMETHOD(GSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(GSGetShader)(This,ppGeometryShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(IAGetPrimitiveTopology)(This,pTopology)	\
STDMETHOD(VSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(VSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(GetPredication)(This,ppPredicate,pPredicateValue)	\
STDMETHOD(GSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(GSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(OMGetRenderTargets)(This,NumViews,ppRenderTargetViews,ppDepthStencilView)	\
STDMETHOD(OMGetRenderTargetsAndUnorderedAccessViews)(This,NumRTVs,ppRenderTargetViews,ppDepthStencilView,UAVStartSlot,NumUAVs,ppUnorderedAccessViews)	\
STDMETHOD(OMGetBlendState)(This,ppBlendState,BlendFactor,pSampleMask)	\
STDMETHOD(OMGetDepthStencilState)(This,ppDepthStencilState,pStencilRef)	\
STDMETHOD(SOGetTargets)(This,NumBuffers,ppSOTargets)	\
STDMETHOD(RSGetState)(This,ppRasterizerState)	\
STDMETHOD(RSGetViewports)(This,pNumViewports,pViewports)	\
STDMETHOD(RSGetScissorRects)(This,pNumRects,pRects)	\
STDMETHOD(HSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(HSGetShader)(This,ppHullShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(HSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(HSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(DSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(DSGetShader)(This,ppDomainShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(DSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(DSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(CSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(CSGetUnorderedAccessViews)(This,StartSlot,NumUAVs,ppUnorderedAccessViews)	\
STDMETHOD(CSGetShader)(This,ppComputeShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(CSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(CSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(ClearState)(This)	\
STDMETHOD(Flush)(This)	\
STDMETHOD(GetType)(This)	\
STDMETHOD(GetContextFlags)(This)	\
STDMETHOD(FinishCommandList)(This,RestoreDeferredContextState,ppCommandList)	\
STDMETHOD(CopySubresourceRegion1)(This,pDstResource,DstSubresource,DstX,DstY,DstZ,pSrcResource,SrcSubresource,pSrcBox,CopyFlags)	\
STDMETHOD(UpdateSubresource1)(This,pDstResource,DstSubresource,pDstBox,pSrcData,SrcRowPitch,SrcDepthPitch,CopyFlags)	\
STDMETHOD(DiscardResource)(This,pResource)	\
STDMETHOD(DiscardView)(This,pResourceView)	\
STDMETHOD(VSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(HSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(DSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(GSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(PSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(CSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(VSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(HSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(DSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(GSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(PSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(CSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(SwapDeviceContextState)(This,pState,ppPreviousState)	\
STDMETHOD(ClearView)(This,pView,Color,pRect,NumRects)	\
STDMETHOD(DiscardView1)(This,pResourceView,pRects,NumRects)	\
STDMETHOD(UpdateTileMappings)(This,pTiledResource,NumTiledResourceRegions,pTiledResourceRegionStartCoordinates,pTiledResourceRegionSizes,pTilePool,NumRanges,pRangeFlags,pTilePoolStartOffsets,pRangeTileCounts,Flags)	\
STDMETHOD(CopyTileMappings)(This,pDestTiledResource,pDestRegionStartCoordinate,pSourceTiledResource,pSourceRegionStartCoordinate,pTileRegionSize,Flags)	\
STDMETHOD(CopyTiles)(This,pTiledResource,pTileRegionStartCoordinate,pTileRegionSize,pBuffer,BufferStartOffsetInBytes,Flags)	\
STDMETHOD(UpdateTiles)(This,pDestTiledResource,pDestTileRegionStartCoordinate,pDestTileRegionSize,pSourceTileData,Flags)	\
STDMETHOD(ResizeTilePool)(This,pTilePool,NewSizeInBytes)	\
STDMETHOD(TiledResourceBarrier)(This,pTiledResourceOrViewAccessBeforeBarrier,pTiledResourceOrViewAccessAfterBarrier)	\
STDMETHOD(IsAnnotationEnabled)(This)	\
STDMETHOD(SetMarkerInt)(This,pLabel,Data)	\
STDMETHOD(BeginEventInt)(This,pLabel,Data)	\
STDMETHOD(EndEvent)(This)	\
STDMETHOD(Flush1)(This,ContextType,hEvent)	\
STDMETHOD(SetHardwareProtectionState)(This,HwProtectionEnable)	\
STDMETHOD(GetHardwareProtectionState)(This,pHwProtectionEnable)	\
STDMETHOD(Signal)(This,pFence,Value)	\
STDMETHOD(Wait)(This,pFence,Value)	\
"
)
D3D11_3.ID3D11Fence := {}
D3D11_3.ID3D11Fence.name := "ID3D11Fence"
D3D11_3.ID3D11Fence.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(GetDevice)(This,ppDevice)	\
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)	\
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)	\
STDMETHOD(CreateSharedHandle)(This,pAttributes,dwAccess,lpName,pHandle)	\
STDMETHOD(GetCompletedValue)(This)	\
STDMETHOD(SetEventOnCompletion)(This,Value,hEvent)	\
"
)
D3D11_3.ID3D11Query1 := {}
D3D11_3.ID3D11Query1.name := "ID3D11Query1"
D3D11_3.ID3D11Query1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(GetDevice)(This,ppDevice)	\
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)	\
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)	\
STDMETHOD(GetDataSize)(This)	\
STDMETHOD(GetDesc)(This,pDesc)	\
STDMETHOD(GetDesc1)(This,pDesc1)	\
"
)
D3D11_3.ID3D11RasterizerState2 := {}
D3D11_3.ID3D11RasterizerState2.name := "ID3D11RasterizerState2"
D3D11_3.ID3D11RasterizerState2.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(GetDevice)(This,ppDevice)	\
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)	\
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)	\
STDMETHOD(GetDesc)(This,pDesc)	\
STDMETHOD(GetDesc1)(This,pDesc)	\
STDMETHOD(GetDesc2)(This,pDesc)	\
"
)
D3D11_3.ID3D11RenderTargetView1 := {}
D3D11_3.ID3D11RenderTargetView1.name := "ID3D11RenderTargetView1"
D3D11_3.ID3D11RenderTargetView1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(GetDevice)(This,ppDevice)	\
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)	\
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)	\
STDMETHOD(GetResource)(This,ppResource)	\
STDMETHOD(GetDesc)(This,pDesc)	\
STDMETHOD(GetDesc1)(This,pDesc1)	\
"
)
D3D11_3.ID3D11ShaderResourceView1 := {}
D3D11_3.ID3D11ShaderResourceView1.name := "ID3D11ShaderResourceView1"
D3D11_3.ID3D11ShaderResourceView1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(GetDevice)(This,ppDevice)	\
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)	\
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)	\
STDMETHOD(GetResource)(This,ppResource)	\
STDMETHOD(GetDesc)(This,pDesc)	\
STDMETHOD(GetDesc1)(This,pDesc1)	\
"
)
D3D11_3.ID3D11Texture3D1 := {}
D3D11_3.ID3D11Texture3D1.name := "ID3D11Texture3D1"
D3D11_3.ID3D11Texture3D1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(GetDevice)(This,ppDevice)	\
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)	\
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)	\
STDMETHOD(GetType)(This,pResourceDimension)	\
STDMETHOD(SetEvictionPriority)(This,EvictionPriority)	\
STDMETHOD(GetEvictionPriority)(This)	\
STDMETHOD(GetDesc)(This,pDesc)	\
STDMETHOD(GetDesc1)(This,pDesc)	\
"
)
D3D11_3.ID3D11UnorderedAccessView1 := {}
D3D11_3.ID3D11UnorderedAccessView1.name := "ID3D11UnorderedAccessView1"
D3D11_3.ID3D11UnorderedAccessView1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(GetDevice)(This,ppDevice)	\
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)	\
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)	\
STDMETHOD(GetResource)(This,ppResource)	\
STDMETHOD(GetDesc)(This,pDesc)	\
STDMETHOD(GetDesc1)(This,pDesc1)	\
"
)
Global D3D11_TEXTURE_LAYOUT_ROW_MAJOR := 1
Global D3D11_TEXTURE_LAYOUT_64K_STANDARD_SWIZZLE := 2
Global D3D11_CONSERVATIVE_RASTERIZATION_MODE_ON := 1
Global D3D11_FENCE_FLAG_NONE := 0x1
Global D3D11_FENCE_FLAG_SHARED := 0x2
Global D3D11_FENCE_FLAG_SHARED_CROSS_ADAPTER := 0x4
D3D11_3.err := {}
Global D3D11_1 := {}
D3D11_1.IID_ID3D11RasterizerState1 := "{1217d7a6-5039-418c-b042-9cbe256afd6e}"
D3D11_1.IID_ID3DDeviceContextState := "{5c1e0d8a-7c23-48f9-8c59-a92958ceff11}"
D3D11_1.IID_ID3D11DeviceContext1 := "{bb2c6faa-b5fb-4082-8e6b-388b8cfa90e1}"
D3D11_1.IID_ID3D11VideoContext1 := "{A7F026DA-A5F8-4487-A564-15E34357651E}"
D3D11_1.IID_ID3D11VideoDevice1 := "{29DA1D51-1321-4454-804B-F5FC9F861F0F}"
D3D11_1.IID_ID3D11VideoProcessorEnumerator1 := "{465217F2-5568-43CF-B5B9-F61D54531CA1}"
D3D11_1.IID_ID3D11Device1 := "{a04bfb29-08ef-43d6-a49c-a9bdbdcbe686}"
D3D11_1.IID_ID3DUserDefinedAnnotation := "{b2daad8b-03d4-4dbf-95eb-32ab4b63d0ab}"
D3D11_1.ID3D11Device1 := {}
D3D11_1.ID3D11Device1.name := "ID3D11Device1"
D3D11_1.ID3D11Device1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(CreateBuffer)(This,pDesc,pInitialData,ppBuffer)	\
STDMETHOD(CreateTexture1D)(This,pDesc,pInitialData,ppTexture1D)	\
STDMETHOD(CreateTexture2D)(This,pDesc,pInitialData,ppTexture2D)	\
STDMETHOD(CreateTexture3D)(This,pDesc,pInitialData,ppTexture3D)	\
STDMETHOD(CreateShaderResourceView)(This,pResource,pDesc,ppSRView)	\
STDMETHOD(CreateUnorderedAccessView)(This,pResource,pDesc,ppUAView)	\
STDMETHOD(CreateRenderTargetView)(This,pResource,pDesc,ppRTView)	\
STDMETHOD(CreateDepthStencilView)(This,pResource,pDesc,ppDepthStencilView)	\
STDMETHOD(CreateInputLayout)(This,pInputElementDescs,NumElements,pShaderBytecodeWithInputSignature,BytecodeLength,ppInputLayout)	\
STDMETHOD(CreateVertexShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppVertexShader)	\
STDMETHOD(CreateGeometryShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppGeometryShader)	\
STDMETHOD(CreateGeometryShaderWithStreamOutput)(This,pShaderBytecode,BytecodeLength,pSODeclaration,NumEntries,pBufferStrides,NumStrides,RasterizedStream,pClassLinkage,ppGeometryShader)	\
STDMETHOD(CreatePixelShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppPixelShader)	\
STDMETHOD(CreateHullShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppHullShader)	\
STDMETHOD(CreateDomainShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppDomainShader)	\
STDMETHOD(CreateComputeShader)(This,pShaderBytecode,BytecodeLength,pClassLinkage,ppComputeShader)	\
STDMETHOD(CreateClassLinkage)(This,ppLinkage)	\
STDMETHOD(CreateBlendState)(This,pBlendStateDesc,ppBlendState)	\
STDMETHOD(CreateDepthStencilState)(This,pDepthStencilDesc,ppDepthStencilState)	\
STDMETHOD(CreateRasterizerState)(This,pRasterizerDesc,ppRasterizerState)	\
STDMETHOD(CreateSamplerState)(This,pSamplerDesc,ppSamplerState)	\
STDMETHOD(CreateQuery)(This,pQueryDesc,ppQuery)	\
STDMETHOD(CreatePredicate)(This,pPredicateDesc,ppPredicate)	\
STDMETHOD(CreateCounter)(This,pCounterDesc,ppCounter)	\
STDMETHOD(CreateDeferredContext)(This,ContextFlags,ppDeferredContext)	\
STDMETHOD(OpenSharedResource)(This,hResource,ReturnedInterface,ppResource)	\
STDMETHOD(CheckFormatSupport)(This,Format,pFormatSupport)	\
STDMETHOD(CheckMultisampleQualityLevels)(This,Format,SampleCount,pNumQualityLevels)	\
STDMETHOD(CheckCounterInfo)(This,pCounterInfo)	\
STDMETHOD(CheckCounter)(This,pDesc,pType,pActiveCounters,szName,pNameLength,szUnits,pUnitsLength,szDescription,pDescriptionLength)	\
STDMETHOD(CheckFeatureSupport)(This,Feature,pFeatureSupportData,FeatureSupportDataSize)	\
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)	\
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)	\
STDMETHOD(GetFeatureLevel)(This)	\
STDMETHOD(GetCreationFlags)(This)	\
STDMETHOD(GetDeviceRemovedReason)(This)	\
STDMETHOD(GetImmediateContext)(This,ppImmediateContext)	\
STDMETHOD(SetExceptionMode)(This,RaiseFlags)	\
STDMETHOD(GetExceptionMode)(This)	\
STDMETHOD(GetImmediateContext1)(This,ppImmediateContext)	\
STDMETHOD(CreateDeferredContext1)(This,ContextFlags,ppDeferredContext)	\
STDMETHOD(CreateBlendState1)(This,pBlendStateDesc,ppBlendState)	\
STDMETHOD(CreateRasterizerState1)(This,pRasterizerDesc,ppRasterizerState)	\
STDMETHOD(CreateDeviceContextState)(This,Flags,pFeatureLevels,FeatureLevels,SDKVersion,EmulatedInterface,pChosenFeatureLevel,ppContextState)	\
STDMETHOD(OpenSharedResource1)(This,hResource,returnedInterface,ppResource)	\
STDMETHOD(OpenSharedResourceByName)(This,lpName,dwDesiredAccess,returnedInterface,ppResource)	\
"
)
D3D11_1.ID3D11DeviceContext1 := {}
D3D11_1.ID3D11DeviceContext1.name := "ID3D11DeviceContext1"
D3D11_1.ID3D11DeviceContext1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(GetDevice)(This,ppDevice)	\
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)	\
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)	\
STDMETHOD(VSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(PSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(PSSetShader)(This,pPixelShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(PSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(VSSetShader)(This,pVertexShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(DrawIndexed)(This,IndexCount,StartIndexLocation,BaseVertexLocation)	\
STDMETHOD(Draw)(This,VertexCount,StartVertexLocation)	\
STDMETHOD(Map)(This,pResource,Subresource,MapType,MapFlags,pMappedResource)	\
STDMETHOD(Unmap)(This,pResource,Subresource)	\
STDMETHOD(PSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(IASetInputLayout)(This,pInputLayout)	\
STDMETHOD(IASetVertexBuffers)(This,StartSlot,NumBuffers,ppVertexBuffers,pStrides,pOffsets)	\
STDMETHOD(IASetIndexBuffer)(This,pIndexBuffer,Format,Offset)	\
STDMETHOD(DrawIndexedInstanced)(This,IndexCountPerInstance,InstanceCount,StartIndexLocation,BaseVertexLocation,StartInstanceLocation)	\
STDMETHOD(DrawInstanced)(This,VertexCountPerInstance,InstanceCount,StartVertexLocation,StartInstanceLocation)	\
STDMETHOD(GSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(GSSetShader)(This,pShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(IASetPrimitiveTopology)(This,Topology)	\
STDMETHOD(VSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(VSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(Begin)(This,pAsync)	\
STDMETHOD(End)(This,pAsync)	\
STDMETHOD(GetData)(This,pAsync,pData,DataSize,GetDataFlags)	\
STDMETHOD(SetPredication)(This,pPredicate,PredicateValue)	\
STDMETHOD(GSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(GSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(OMSetRenderTargets)(This,NumViews,ppRenderTargetViews,pDepthStencilView)	\
STDMETHOD(OMSetRenderTargetsAndUnorderedAccessViews)(This,NumRTVs,ppRenderTargetViews,pDepthStencilView,UAVStartSlot,NumUAVs,ppUnorderedAccessViews,pUAVInitialCounts)	\
STDMETHOD(OMSetBlendState)(This,pBlendState,BlendFactor,SampleMask)	\
STDMETHOD(OMSetDepthStencilState)(This,pDepthStencilState,StencilRef)	\
STDMETHOD(SOSetTargets)(This,NumBuffers,ppSOTargets,pOffsets)	\
STDMETHOD(DrawAuto)(This)	\
STDMETHOD(DrawIndexedInstancedIndirect)(This,pBufferForArgs,AlignedByteOffsetForArgs)	\
STDMETHOD(DrawInstancedIndirect)(This,pBufferForArgs,AlignedByteOffsetForArgs)	\
STDMETHOD(Dispatch)(This,ThreadGroupCountX,ThreadGroupCountY,ThreadGroupCountZ)	\
STDMETHOD(DispatchIndirect)(This,pBufferForArgs,AlignedByteOffsetForArgs)	\
STDMETHOD(RSSetState)(This,pRasterizerState)	\
STDMETHOD(RSSetViewports)(This,NumViewports,pViewports)	\
STDMETHOD(RSSetScissorRects)(This,NumRects,pRects)	\
STDMETHOD(CopySubresourceRegion)(This,pDstResource,DstSubresource,DstX,DstY,DstZ,pSrcResource,SrcSubresource,pSrcBox)	\
STDMETHOD(CopyResource)(This,pDstResource,pSrcResource)	\
STDMETHOD(UpdateSubresource)(This,pDstResource,DstSubresource,pDstBox,pSrcData,SrcRowPitch,SrcDepthPitch)	\
STDMETHOD(CopyStructureCount)(This,pDstBuffer,DstAlignedByteOffset,pSrcView)	\
STDMETHOD(ClearRenderTargetView)(This,pRenderTargetView,ColorRGBA)	\
STDMETHOD(ClearUnorderedAccessViewUint)(This,pUnorderedAccessView,Values)	\
STDMETHOD(ClearUnorderedAccessViewFloat)(This,pUnorderedAccessView,Values)	\
STDMETHOD(ClearDepthStencilView)(This,pDepthStencilView,ClearFlags,Depth,Stencil)	\
STDMETHOD(GenerateMips)(This,pShaderResourceView)	\
STDMETHOD(SetResourceMinLOD)(This,pResource,MinLOD)	\
STDMETHOD(GetResourceMinLOD)(This,pResource)	\
STDMETHOD(ResolveSubresource)(This,pDstResource,DstSubresource,pSrcResource,SrcSubresource,Format)	\
STDMETHOD(ExecuteCommandList)(This,pCommandList,RestoreContextState)	\
STDMETHOD(HSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(HSSetShader)(This,pHullShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(HSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(HSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(DSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(DSSetShader)(This,pDomainShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(DSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(DSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(CSSetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(CSSetUnorderedAccessViews)(This,StartSlot,NumUAVs,ppUnorderedAccessViews,pUAVInitialCounts)	\
STDMETHOD(CSSetShader)(This,pComputeShader,ppClassInstances,NumClassInstances)	\
STDMETHOD(CSSetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(CSSetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(VSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(PSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(PSGetShader)(This,ppPixelShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(PSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(VSGetShader)(This,ppVertexShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(PSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(IAGetInputLayout)(This,ppInputLayout)	\
STDMETHOD(IAGetVertexBuffers)(This,StartSlot,NumBuffers,ppVertexBuffers,pStrides,pOffsets)	\
STDMETHOD(IAGetIndexBuffer)(This,pIndexBuffer,Format,Offset)	\
STDMETHOD(GSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(GSGetShader)(This,ppGeometryShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(IAGetPrimitiveTopology)(This,pTopology)	\
STDMETHOD(VSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(VSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(GetPredication)(This,ppPredicate,pPredicateValue)	\
STDMETHOD(GSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(GSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(OMGetRenderTargets)(This,NumViews,ppRenderTargetViews,ppDepthStencilView)	\
STDMETHOD(OMGetRenderTargetsAndUnorderedAccessViews)(This,NumRTVs,ppRenderTargetViews,ppDepthStencilView,UAVStartSlot,NumUAVs,ppUnorderedAccessViews)	\
STDMETHOD(OMGetBlendState)(This,ppBlendState,BlendFactor,pSampleMask)	\
STDMETHOD(OMGetDepthStencilState)(This,ppDepthStencilState,pStencilRef)	\
STDMETHOD(SOGetTargets)(This,NumBuffers,ppSOTargets)	\
STDMETHOD(RSGetState)(This,ppRasterizerState)	\
STDMETHOD(RSGetViewports)(This,pNumViewports,pViewports)	\
STDMETHOD(RSGetScissorRects)(This,pNumRects,pRects)	\
STDMETHOD(HSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(HSGetShader)(This,ppHullShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(HSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(HSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(DSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(DSGetShader)(This,ppDomainShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(DSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(DSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(CSGetShaderResources)(This,StartSlot,NumViews,ppShaderResourceViews)	\
STDMETHOD(CSGetUnorderedAccessViews)(This,StartSlot,NumUAVs,ppUnorderedAccessViews)	\
STDMETHOD(CSGetShader)(This,ppComputeShader,ppClassInstances,pNumClassInstances)	\
STDMETHOD(CSGetSamplers)(This,StartSlot,NumSamplers,ppSamplers)	\
STDMETHOD(CSGetConstantBuffers)(This,StartSlot,NumBuffers,ppConstantBuffers)	\
STDMETHOD(ClearState)(This)	\
STDMETHOD(Flush)(This)	\
STDMETHOD(GetType)(This)	\
STDMETHOD(GetContextFlags)(This)	\
STDMETHOD(FinishCommandList)(This,RestoreDeferredContextState,ppCommandList)	\
STDMETHOD(CopySubresourceRegion1)(This,pDstResource,DstSubresource,DstX,DstY,DstZ,pSrcResource,SrcSubresource,pSrcBox,CopyFlags)	\
STDMETHOD(UpdateSubresource1)(This,pDstResource,DstSubresource,pDstBox,pSrcData,SrcRowPitch,SrcDepthPitch,CopyFlags)	\
STDMETHOD(DiscardResource)(This,pResource)	\
STDMETHOD(DiscardView)(This,pResourceView)	\
STDMETHOD(VSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(HSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(DSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(GSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(PSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(CSSetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(VSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(HSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(DSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(GSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(PSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(CSGetConstantBuffers1)(This,StartSlot,NumBuffers,ppConstantBuffers,pFirstConstant,pNumConstants)	\
STDMETHOD(SwapDeviceContextState)(This,pState,ppPreviousState)	\
STDMETHOD(ClearView)(This,pView,Color,pRect,NumRects)	\
STDMETHOD(DiscardView1)(This,pResourceView,pRects,NumRects)	\
"
)
D3D11_1.ID3D11RasterizerState1 := {}
D3D11_1.ID3D11RasterizerState1.name := "ID3D11RasterizerState1"
D3D11_1.ID3D11RasterizerState1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(GetDevice)(This,ppDevice)	\
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)	\
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)	\
STDMETHOD(GetDesc)(This,pDesc)	\
STDMETHOD(GetDesc1)(This,pDesc)	\
"
)
D3D11_1.ID3D11VideoContext1 := {}
D3D11_1.ID3D11VideoContext1.name := "ID3D11VideoContext1"
D3D11_1.ID3D11VideoContext1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(GetDevice)(This,ppDevice)	\
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)	\
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)	\
STDMETHOD(GetDecoderBuffer)(This,pDecoder,Type,pBufferSize,ppBuffer)	\
STDMETHOD(ReleaseDecoderBuffer)(This,pDecoder,Type)	\
STDMETHOD(DecoderBeginFrame)(This,pDecoder,pView,ContentKeySize,pContentKey)	\
STDMETHOD(DecoderEndFrame)(This,pDecoder)	\
STDMETHOD(SubmitDecoderBuffers)(This,pDecoder,NumBuffers,pBufferDesc)	\
STDMETHOD(DecoderExtension)(This,pDecoder,pExtensionData)	\
STDMETHOD(VideoProcessorSetOutputTargetRect)(This,pVideoProcessor,Enable,pRect)	\
STDMETHOD(VideoProcessorSetOutputBackgroundColor)(This,pVideoProcessor,YCbCr,pColor)	\
STDMETHOD(VideoProcessorSetOutputColorSpace)(This,pVideoProcessor,pColorSpace)	\
STDMETHOD(VideoProcessorSetOutputAlphaFillMode)(This,pVideoProcessor,AlphaFillMode,StreamIndex)	\
STDMETHOD(VideoProcessorSetOutputConstriction)(This,pVideoProcessor,Enable,Size)	\
STDMETHOD(VideoProcessorSetOutputStereoMode)(This,pVideoProcessor,Enable)	\
STDMETHOD(VideoProcessorSetOutputExtension)(This,pVideoProcessor,pExtensionGuid,DataSize,pData)	\
STDMETHOD(VideoProcessorGetOutputTargetRect)(This,pVideoProcessor,Enabled,pRect)	\
STDMETHOD(VideoProcessorGetOutputBackgroundColor)(This,pVideoProcessor,pYCbCr,pColor)	\
STDMETHOD(VideoProcessorGetOutputColorSpace)(This,pVideoProcessor,pColorSpace)	\
STDMETHOD(VideoProcessorGetOutputAlphaFillMode)(This,pVideoProcessor,pAlphaFillMode,pStreamIndex)	\
STDMETHOD(VideoProcessorGetOutputConstriction)(This,pVideoProcessor,pEnabled,pSize)	\
STDMETHOD(VideoProcessorGetOutputStereoMode)(This,pVideoProcessor,pEnabled)	\
STDMETHOD(VideoProcessorGetOutputExtension)(This,pVideoProcessor,pExtensionGuid,DataSize,pData)	\
STDMETHOD(VideoProcessorSetStreamFrameFormat)(This,pVideoProcessor,StreamIndex,FrameFormat)	\
STDMETHOD(VideoProcessorSetStreamColorSpace)(This,pVideoProcessor,StreamIndex,pColorSpace)	\
STDMETHOD(VideoProcessorSetStreamOutputRate)(This,pVideoProcessor,StreamIndex,OutputRate,RepeatFrame,pCustomRate)	\
STDMETHOD(VideoProcessorSetStreamSourceRect)(This,pVideoProcessor,StreamIndex,Enable,pRect)	\
STDMETHOD(VideoProcessorSetStreamDestRect)(This,pVideoProcessor,StreamIndex,Enable,pRect)	\
STDMETHOD(VideoProcessorSetStreamAlpha)(This,pVideoProcessor,StreamIndex,Enable,Alpha)	\
STDMETHOD(VideoProcessorSetStreamPalette)(This,pVideoProcessor,StreamIndex,Count,pEntries)	\
STDMETHOD(VideoProcessorSetStreamPixelAspectRatio)(This,pVideoProcessor,StreamIndex,Enable,pSourceAspectRatio,pDestinationAspectRatio)	\
STDMETHOD(VideoProcessorSetStreamLumaKey)(This,pVideoProcessor,StreamIndex,Enable,Lower,Upper)	\
STDMETHOD(VideoProcessorSetStreamStereoFormat)(This,pVideoProcessor,StreamIndex,Enable,Format,LeftViewFrame0,BaseViewFrame0,FlipMode,MonoOffset)	\
STDMETHOD(VideoProcessorSetStreamAutoProcessingMode)(This,pVideoProcessor,StreamIndex,Enable)	\
STDMETHOD(VideoProcessorSetStreamFilter)(This,pVideoProcessor,StreamIndex,Filter,Enable,Level)	\
STDMETHOD(VideoProcessorSetStreamExtension)(This,pVideoProcessor,StreamIndex,pExtensionGuid,DataSize,pData)	\
STDMETHOD(VideoProcessorGetStreamFrameFormat)(This,pVideoProcessor,StreamIndex,pFrameFormat)	\
STDMETHOD(VideoProcessorGetStreamColorSpace)(This,pVideoProcessor,StreamIndex,pColorSpace)	\
STDMETHOD(VideoProcessorGetStreamOutputRate)(This,pVideoProcessor,StreamIndex,pOutputRate,pRepeatFrame,pCustomRate)	\
STDMETHOD(VideoProcessorGetStreamSourceRect)(This,pVideoProcessor,StreamIndex,pEnabled,pRect)	\
STDMETHOD(VideoProcessorGetStreamDestRect)(This,pVideoProcessor,StreamIndex,pEnabled,pRect)	\
STDMETHOD(VideoProcessorGetStreamAlpha)(This,pVideoProcessor,StreamIndex,pEnabled,pAlpha)	\
STDMETHOD(VideoProcessorGetStreamPalette)(This,pVideoProcessor,StreamIndex,Count,pEntries)	\
STDMETHOD(VideoProcessorGetStreamPixelAspectRatio)(This,pVideoProcessor,StreamIndex,pEnabled,pSourceAspectRatio,pDestinationAspectRatio)	\
STDMETHOD(VideoProcessorGetStreamLumaKey)(This,pVideoProcessor,StreamIndex,pEnabled,pLower,pUpper)	\
STDMETHOD(VideoProcessorGetStreamStereoFormat)(This,pVideoProcessor,StreamIndex,pEnable,pFormat,pLeftViewFrame0,pBaseViewFrame0,pFlipMode,MonoOffset)	\
STDMETHOD(VideoProcessorGetStreamAutoProcessingMode)(This,pVideoProcessor,StreamIndex,pEnabled)	\
STDMETHOD(VideoProcessorGetStreamFilter)(This,pVideoProcessor,StreamIndex,Filter,pEnabled,pLevel)	\
STDMETHOD(VideoProcessorGetStreamExtension)(This,pVideoProcessor,StreamIndex,pExtensionGuid,DataSize,pData)	\
STDMETHOD(VideoProcessorBlt)(This,pVideoProcessor,pView,OutputFrame,StreamCount,pStreams)	\
STDMETHOD(NegotiateCryptoSessionKeyExchange)(This,pCryptoSession,DataSize,pData)	\
STDMETHOD(EncryptionBlt)(This,pCryptoSession,pSrcSurface,pDstSurface,IVSize,pIV)	\
STDMETHOD(DecryptionBlt)(This,pCryptoSession,pSrcSurface,pDstSurface,pEncryptedBlockInfo,ContentKeySize,pContentKey,IVSize,pIV)	\
STDMETHOD(StartSessionKeyRefresh)(This,pCryptoSession,RandomNumberSize,pRandomNumber)	\
STDMETHOD(FinishSessionKeyRefresh)(This,pCryptoSession)	\
STDMETHOD(GetEncryptionBltKey)(This,pCryptoSession,KeySize,pReadbackKey)	\
STDMETHOD(NegotiateAuthenticatedChannelKeyExchange)(This,pChannel,DataSize,pData)	\
STDMETHOD(QueryAuthenticatedChannel)(This,pChannel,InputSize,pInput,OutputSize,pOutput)	\
STDMETHOD(ConfigureAuthenticatedChannel)(This,pChannel,InputSize,pInput,pOutput)	\
STDMETHOD(VideoProcessorSetStreamRotation)(This,pVideoProcessor,StreamIndex,Enable,Rotation)	\
STDMETHOD(VideoProcessorGetStreamRotation)(This,pVideoProcessor,StreamIndex,pEnable,pRotation)	\
STDMETHOD(SubmitDecoderBuffers1)(This,pDecoder,NumBuffers,pBufferDesc)	\
STDMETHOD(GetDataForNewHardwareKey)(This,pCryptoSession,PrivateInputSize,pPrivatInputData,pPrivateOutputData)	\
STDMETHOD(CheckCryptoSessionStatus)(This,pCryptoSession,pStatus)	\
STDMETHOD(DecoderEnableDownsampling)(This,pDecoder,InputColorSpace,pOutputDesc,ReferenceFrameCount)	\
STDMETHOD(DecoderUpdateDownsampling)(This,pDecoder,pOutputDesc)	\
STDMETHOD(VideoProcessorSetOutputColorSpace1)(This,pVideoProcessor,ColorSpace)	\
STDMETHOD(VideoProcessorSetOutputShaderUsage)(This,pVideoProcessor,ShaderUsage)	\
STDMETHOD(VideoProcessorGetOutputColorSpace1)(This,pVideoProcessor,pColorSpace)	\
STDMETHOD(VideoProcessorGetOutputShaderUsage)(This,pVideoProcessor,pShaderUsage)	\
STDMETHOD(VideoProcessorSetStreamColorSpace1)(This,pVideoProcessor,StreamIndex,ColorSpace)	\
STDMETHOD(VideoProcessorSetStreamMirror)(This,pVideoProcessor,StreamIndex,Enable,FlipHorizontal,FlipVertical)	\
STDMETHOD(VideoProcessorGetStreamColorSpace1)(This,pVideoProcessor,StreamIndex,pColorSpace)	\
STDMETHOD(VideoProcessorGetStreamMirror)(This,pVideoProcessor,StreamIndex,pEnable,pFlipHorizontal,pFlipVertical)	\
STDMETHOD(VideoProcessorGetBehaviorHints)(This,pVideoProcessor,OutputWidth,OutputHeight,OutputFormat,StreamCount,pStreams,pBehaviorHints)	\
"
)
D3D11_1.ID3D11VideoDevice1 := {}
D3D11_1.ID3D11VideoDevice1.name := "ID3D11VideoDevice1"
D3D11_1.ID3D11VideoDevice1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(CreateVideoDecoder)(This,pVideoDesc,pConfig,ppDecoder)	\
STDMETHOD(CreateVideoProcessor)(This,pEnum,RateConversionIndex,ppVideoProcessor)	\
STDMETHOD(CreateAuthenticatedChannel)(This,ChannelType,ppAuthenticatedChannel)	\
STDMETHOD(CreateCryptoSession)(This,pCryptoType,pDecoderProfile,pKeyExchangeType,ppCryptoSession)	\
STDMETHOD(CreateVideoDecoderOutputView)(This,pResource,pDesc,ppVDOVView)	\
STDMETHOD(CreateVideoProcessorInputView)(This,pResource,pEnum,pDesc,ppVPIView)	\
STDMETHOD(CreateVideoProcessorOutputView)(This,pResource,pEnum,pDesc,ppVPOView)	\
STDMETHOD(CreateVideoProcessorEnumerator)(This,pDesc,ppEnum)	\
STDMETHOD(GetVideoDecoderProfileCount)(This)	\
STDMETHOD(GetVideoDecoderProfile)(This,Index,pDecoderProfile)	\
STDMETHOD(CheckVideoDecoderFormat)(This,pDecoderProfile,Format,pSupported)	\
STDMETHOD(GetVideoDecoderConfigCount)(This,pDesc,pCount)	\
STDMETHOD(GetVideoDecoderConfig)(This,pDesc,Index,pConfig)	\
STDMETHOD(GetContentProtectionCaps)(This,pCryptoType,pDecoderProfile,pCaps)	\
STDMETHOD(CheckCryptoKeyExchange)(This,pCryptoType,pDecoderProfile,Index,pKeyExchangeType)	\
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)	\
STDMETHOD(GetCryptoSessionPrivateDataSize)(This,pCryptoType,pDecoderProfile,pKeyExchangeType,pPrivateInputSize,pPrivateOutputSize)	\
STDMETHOD(GetVideoDecoderCaps)(This,pDecoderProfile,SampleWidth,SampleHeight,pFrameRate,BitRate,pCryptoType,pDecoderCaps)	\
STDMETHOD(CheckVideoDecoderDownsampling)(This,pInputDesc,InputColorSpace,pInputConfig,pFrameRate,pOutputDesc,pSupported,pRealTimeHint)	\
STDMETHOD(RecommendVideoDecoderDownsampleParameters)(This,pInputDesc,InputColorSpace,pInputConfig,pFrameRate,pRecommendedOutputDesc)	\
"
)
D3D11_1.ID3D11VideoProcessorEnumerator1 := {}
D3D11_1.ID3D11VideoProcessorEnumerator1.name := "ID3D11VideoProcessorEnumerator1"
D3D11_1.ID3D11VideoProcessorEnumerator1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(GetDevice)(This,ppDevice)	\
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)	\
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)	\
STDMETHOD(GetVideoProcessorContentDesc)(This,pContentDesc)	\
STDMETHOD(CheckVideoProcessorFormat)(This,Format,pFlags)	\
STDMETHOD(GetVideoProcessorCaps)(This,pCaps)	\
STDMETHOD(GetVideoProcessorRateConversionCaps)(This,TypeIndex,pCaps)	\
STDMETHOD(GetVideoProcessorCustomRate)(This,TypeIndex,CustomRateIndex,pRate)	\
STDMETHOD(GetVideoProcessorFilterRange)(This,Filter,pRange)	\
STDMETHOD(CheckVideoProcessorFormatConversion)(This,InputFormat,InputColorSpace,OutputFormat,OutputColorSpace,pSupported)	\
"
)
D3D11_1.ID3DDeviceContextState := {}
D3D11_1.ID3DDeviceContextState.name := "ID3DDeviceContextState"
D3D11_1.ID3DDeviceContextState.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(GetDevice)(This,ppDevice)	\
STDMETHOD(GetPrivateData)(This,guid,pDataSize,pData)	\
STDMETHOD(SetPrivateData)(This,guid,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,guid,pData)	\
"
)
D3D11_1.ID3DUserDefinedAnnotation := {}
D3D11_1.ID3DUserDefinedAnnotation.name := "ID3DUserDefinedAnnotation"
D3D11_1.ID3DUserDefinedAnnotation.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(BeginEvent)(This,Name)	\
STDMETHOD(EndEvent)(This)	\
STDMETHOD(SetMarker)(This,Name)	\
STDMETHOD(GetStatus)(This)	\
"
)
Global D3D11_LOGIC_OP_SET := ( D3D11_LOGIC_OP_CLEAR + 1 )
Global D3D11_LOGIC_OP_COPY := ( D3D11_LOGIC_OP_SET + 1 )
Global D3D11_LOGIC_OP_COPY_INVERTED := ( D3D11_LOGIC_OP_COPY + 1 )
Global D3D11_LOGIC_OP_NOOP := ( D3D11_LOGIC_OP_COPY_INVERTED + 1 )
Global D3D11_LOGIC_OP_INVERT := ( D3D11_LOGIC_OP_NOOP + 1 )
Global D3D11_LOGIC_OP_AND := ( D3D11_LOGIC_OP_INVERT + 1 )
Global D3D11_LOGIC_OP_NAND := ( D3D11_LOGIC_OP_AND + 1 )
Global D3D11_LOGIC_OP_OR := ( D3D11_LOGIC_OP_NAND + 1 )
Global D3D11_LOGIC_OP_NOR := ( D3D11_LOGIC_OP_OR + 1 )
Global D3D11_LOGIC_OP_XOR := ( D3D11_LOGIC_OP_NOR + 1 )
Global D3D11_LOGIC_OP_EQUIV := ( D3D11_LOGIC_OP_XOR + 1 )
Global D3D11_LOGIC_OP_AND_REVERSE := ( D3D11_LOGIC_OP_EQUIV + 1 )
Global D3D11_LOGIC_OP_AND_INVERTED := ( D3D11_LOGIC_OP_AND_REVERSE + 1 )
Global D3D11_LOGIC_OP_OR_REVERSE := ( D3D11_LOGIC_OP_AND_INVERTED + 1 )
Global D3D11_LOGIC_OP_OR_INVERTED := ( D3D11_LOGIC_OP_OR_REVERSE + 1 )
Global D3D11_1_CREATE_DEVICE_CONTEXT_STATE_SINGLETHREADED := 0x1
Global D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE := 0x1
Global D3D11_VIDEO_DECODER_CAPS_NON_REAL_TIME := 0x2
Global D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE_DYNAMIC := 0x4
Global D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE_REQUIRED := 0x8
Global D3D11_VIDEO_DECODER_CAPS_UNSUPPORTED := 0x10
Global D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_ROTATION := 0x1
Global D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_RESIZE := 0x2
Global D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_COLOR_SPACE_CONVERSION := 0x4
Global D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_TRIPLE_BUFFER_OUTPUT := 0x8
Global D3D11_CRYPTO_SESSION_STATUS_KEY_LOST := 1
Global D3D11_CRYPTO_SESSION_STATUS_KEY_AND_CONTENT_LOST := 2
D3D11_1.err := {}
D3D11.err[2147942487 . ""] := "E_INVALIDARGS"
D3D11_BUFFER_DESC :=
(
"
  UINT        ByteWidth;
  UINT        Usage;
  UINT        BindFlags;
  UINT        CPUAccessFlags;
  UINT        MiscFlags;
  UINT        StructureByteStride;
"
)
D3D11_SUBRESOURCE_DATA :=
(
"
  ptr        pSysMem;
  UINT       SysMemPitch;
  UINT       SysMemSlicePitch;
"
)
D3D11_BUFFEREX_SRV :=
(
"
  UINT FirstElement;
  UINT NumElements;
  UINT Flags;
"
)
D3D11_SHADER_RESOURCE_VIEW_DESC :=
(
"
  int                     Format;
  int                     ViewDimension;
  D3D11_BUFFEREX_SRV      BufferEx;  
"  
)
D3D11_BUFFER_UAV :=
(
" 
  UINT FirstElement;
  UINT NumElements;
  UINT Flags;
"
)
D3D11_UNORDERED_ACCESS_VIEW_DESC :=
(
"
  int                   Format;
  int                   ViewDimension;
  D3D11_BUFFER_UAV      Buffer;
"
)
global D3D11_BUFFER_DESC := Struct(D3D11_BUFFER_DESC)
global D3D11_SUBRESOURCE_DATA := Struct(D3D11_SUBRESOURCE_DATA)
global D3D11_SHADER_RESOURCE_VIEW_DESC := Struct(D3D11_SHADER_RESOURCE_VIEW_DESC)
global D3D11_BUFFEREX_SRV := Struct(D3D11_BUFFEREX_SRV)
global D3D11_UNORDERED_ACCESS_VIEW_DESC := Struct(D3D11_UNORDERED_ACCESS_VIEW_DESC)
global D3D11_BUFFER_UAV := Struct(D3D11_BUFFER_UAV)
D3D11_INPUT_ELEMENT_DESC :=
(
"
  LPCSTR   SemanticName;
  UINT     SemanticIndex;
  UINT     Format;
  UINT     InputSlot;
  UINT     AlignedByteOffset;
  UINT     InputSlotClass;
  UINT     InstanceDataStepRate
"
)
global D3D11_INPUT_ELEMENT_DESC := struct(D3D11_INPUT_ELEMENT_DESC)
global D3D11_RENDER_TARGET_VIEW_DESC :=
(
"
  uint         Format;
  uint         ViewDimension;
  uint         Subresource; 
"
)
D3D11_RENDER_TARGET_VIEW_DESC := struct(D3D11_RENDER_TARGET_VIEW_DESC)
global D3D11_TEXTURE2D_DESC :=
(
"
  UINT             Width;
  UINT             Height;
  UINT             MipLevels;
  UINT             ArraySize;
  UINT             Format;
  UINT             SampleDesc;
  UINT             Usage;
  UINT             BindFlags;
  UINT             CPUAccessFlags;
  UINT             MiscFlags;
"
)
D3D11_TEXTURE2D_DESC := struct(D3D11_TEXTURE2D_DESC)
Global DXGI := {}
DXGI.IID_IDXGIObject := "{aec22fb8-76f3-4639-9be0-28eb43a67a2e}"
DXGI.IID_IDXGIDeviceSubObject := "{3d3e0379-f9de-4d58-bb6c-18d62992f1a6}"
DXGI.IID_IDXGIResource := "{035f3ab4-482e-4e50-b41f-8a7f8bd8960b}"
DXGI.IID_IDXGIKeyedMutex := "{9d8e1289-d7b3-465f-8126-250e349af85d}"
DXGI.IID_IDXGISurface := "{cafcb56c-6ac3-4889-bf47-9e23bbd260ec}"
DXGI.IID_IDXGISurface1 := "{4AE63092-6327-4c1b-80AE-BFE12EA32B86}"
DXGI.IID_IDXGIAdapter := "{2411e7e1-12ac-4ccf-bd14-9798e8534dc0}"
DXGI.IID_IDXGIOutput := "{ae02eedb-c735-4690-8d52-5a8dc20213aa}"
DXGI.IID_IDXGISwapChain := "{310d36a0-d2e7-4c0a-aa04-6a9d23b8886a}"
DXGI.IID_IDXGIFactory := "{7b7166ec-21c7-44ae-b21a-c9ae321ae369}"
DXGI.IID_IDXGIDevice := "{54ec77fa-1377-44e6-8c32-88fd5f44c84c}"
DXGI.IID_IDXGIFactory1 := "{770aae78-f26f-4dba-a829-253c83d1b387}"
DXGI.IID_IDXGIAdapter1 := "{29038f61-3839-4626-91fd-086879011a05}"
DXGI.IID_IDXGIDevice1 := "{77db970f-6276-48ba-ba28-070143b4392c}"
DXGI.IDXGIAdapter:= {}
DXGI.IDXGIAdapter.name := "IDXGIAdapter"
DXGI.IDXGIAdapter.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)
STDMETHOD(GetParent)(This,riid,ppParent)
STDMETHOD(EnumOutputs)(This,Output,ppOutput)
STDMETHOD(GetDesc)(This,pDesc)
STDMETHOD(CheckInterfaceSupport)(This,InterfaceName,pUMDVersion)
"
)
DXGI.IDXGIAdapter1:= {}
DXGI.IDXGIAdapter1.name := "IDXGIAdapter1"
DXGI.IDXGIAdapter1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)
STDMETHOD(GetParent)(This,riid,ppParent)
STDMETHOD(EnumOutputs)(This,Output,ppOutput)
STDMETHOD(GetDesc)(This,pDesc)
STDMETHOD(CheckInterfaceSupport)(This,InterfaceName,pUMDVersion)
STDMETHOD(GetDesc1)(This,pDesc)
"
)
DXGI.IDXGIDevice:= {}
DXGI.IDXGIDevice.name := "IDXGIDevice"
DXGI.IDXGIDevice.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)
STDMETHOD(GetParent)(This,riid,ppParent)
STDMETHOD(GetAdapter)(This,pAdapter)
STDMETHOD(CreateSurface)(This,pDesc,NumSurfaces,Usage,pSharedResource,ppSurface)
STDMETHOD(QueryResourceResidency)(This,ppResources,pResidencyStatus,NumResources)
STDMETHOD(SetGPUThreadPriority)(This,Priority)
STDMETHOD(GetGPUThreadPriority)(This,pPriority)
"
)
DXGI.IDXGIDevice1:= {}
DXGI.IDXGIDevice1.name := "IDXGIDevice1"
DXGI.IDXGIDevice1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)
STDMETHOD(GetParent)(This,riid,ppParent)
STDMETHOD(GetAdapter)(This,pAdapter)
STDMETHOD(CreateSurface)(This,pDesc,NumSurfaces,Usage,pSharedResource,ppSurface)
STDMETHOD(QueryResourceResidency)(This,ppResources,pResidencyStatus,NumResources)
STDMETHOD(SetGPUThreadPriority)(This,Priority)
STDMETHOD(GetGPUThreadPriority)(This,pPriority)
STDMETHOD(SetMaximumFrameLatency)(This,MaxLatency)
STDMETHOD(GetMaximumFrameLatency)(This,pMaxLatency)
"
)
DXGI.IDXGIDeviceSubObject:= {}
DXGI.IDXGIDeviceSubObject.name := "IDXGIDeviceSubObject"
DXGI.IDXGIDeviceSubObject.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)
STDMETHOD(GetParent)(This,riid,ppParent)
STDMETHOD(GetDevice)(This,riid,ppDevice)
"
)
DXGI.IDXGIFactory:= {}
DXGI.IDXGIFactory.name := "IDXGIFactory"
DXGI.IDXGIFactory.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)
STDMETHOD(GetParent)(This,riid,ppParent)
STDMETHOD(EnumAdapters)(This,Adapter,ppAdapter)
STDMETHOD(MakeWindowAssociation)(This,WindowHandle,Flags)
STDMETHOD(GetWindowAssociation)(This,pWindowHandle)
STDMETHOD(CreateSwapChain)(This,pDevice,pDesc,ppSwapChain)
STDMETHOD(CreateSoftwareAdapter)(This,Module,ppAdapter)
"
)
DXGI.IDXGIFactory1:= {}
DXGI.IDXGIFactory1.name := "IDXGIFactory1"
DXGI.IDXGIFactory1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)
STDMETHOD(GetParent)(This,riid,ppParent)
STDMETHOD(EnumAdapters)(This,Adapter,ppAdapter)
STDMETHOD(MakeWindowAssociation)(This,WindowHandle,Flags)
STDMETHOD(GetWindowAssociation)(This,pWindowHandle)
STDMETHOD(CreateSwapChain)(This,pDevice,pDesc,ppSwapChain)
STDMETHOD(CreateSoftwareAdapter)(This,Module,ppAdapter)
STDMETHOD(EnumAdapters1)(This,Adapter,ppAdapter)
STDMETHOD(IsCurrent)(This)
"
)
DXGI.IDXGIKeyedMutex:= {}
DXGI.IDXGIKeyedMutex.name := "IDXGIKeyedMutex"
DXGI.IDXGIKeyedMutex.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)
STDMETHOD(GetParent)(This,riid,ppParent)
STDMETHOD(GetDevice)(This,riid,ppDevice)
STDMETHOD(AcquireSync)(This,Key,dwMilliseconds)
STDMETHOD(ReleaseSync)(This,Key)
"
)
DXGI.IDXGIObject:= {}
DXGI.IDXGIObject.name := "IDXGIObject"
DXGI.IDXGIObject.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)
STDMETHOD(GetParent)(This,riid,ppParent)
"
)
DXGI.IDXGIOutput:= {}
DXGI.IDXGIOutput.name := "IDXGIOutput"
DXGI.IDXGIOutput.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)
STDMETHOD(GetParent)(This,riid,ppParent)
STDMETHOD(GetDesc)(This,pDesc)
STDMETHOD(GetDisplayModeList)(This,EnumFormat,Flags,pNumModes,pDesc)
STDMETHOD(FindClosestMatchingMode)(This,pModeToMatch,pClosestMatch,pConcernedDevice)
STDMETHOD(WaitForVBlank)(This)
STDMETHOD(TakeOwnership)(This,pDevice,Exclusive)
STDMETHOD(ReleaseOwnership)(This)
STDMETHOD(GetGammaControlCapabilities)(This,pGammaCaps)
STDMETHOD(SetGammaControl)(This,pArray)
STDMETHOD(GetGammaControl)(This,pArray)
STDMETHOD(SetDisplaySurface)(This,pScanoutSurface)
STDMETHOD(GetDisplaySurfaceData)(This,pDestination)
STDMETHOD(GetFrameStatistics)(This,pStats)
"
)
DXGI.IDXGIResource:= {}
DXGI.IDXGIResource.name := "IDXGIResource"
DXGI.IDXGIResource.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)
STDMETHOD(GetParent)(This,riid,ppParent)
STDMETHOD(GetDevice)(This,riid,ppDevice)
STDMETHOD(GetSharedHandle)(This,pSharedHandle)
STDMETHOD(GetUsage)(This,pUsage)
STDMETHOD(SetEvictionPriority)(This,EvictionPriority)
STDMETHOD(GetEvictionPriority)(This,pEvictionPriority)
"
)
DXGI.IDXGISurface:= {}
DXGI.IDXGISurface.name := "IDXGISurface"
DXGI.IDXGISurface.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)
STDMETHOD(GetParent)(This,riid,ppParent)
STDMETHOD(GetDevice)(This,riid,ppDevice)
STDMETHOD(GetDesc)(This,pDesc)
STDMETHOD(Map)(This,pLockedRect,MapFlags)
STDMETHOD(Unmap)(This)
"
)
DXGI.IDXGISurface1:= {}
DXGI.IDXGISurface1.name := "IDXGISurface1"
DXGI.IDXGISurface1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)
STDMETHOD(GetParent)(This,riid,ppParent)
STDMETHOD(GetDevice)(This,riid,ppDevice)
STDMETHOD(GetDesc)(This,pDesc)
STDMETHOD(Map)(This,pLockedRect,MapFlags)
STDMETHOD(Unmap)(This)
STDMETHOD(GetDC)(This,Discard,phdc)
STDMETHOD(ReleaseDC)(This,pDirtyRect)
"
)
DXGI.IDXGISwapChain:= {}
DXGI.IDXGISwapChain.name := "IDXGISwapChain"
DXGI.IDXGISwapChain.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)
STDMETHOD(AddRef)(This)
STDMETHOD(Release)(This)
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)
STDMETHOD(GetParent)(This,riid,ppParent)
STDMETHOD(GetDevice)(This,riid,ppDevice)
STDMETHOD(Present)(This,SyncInterval,Flags)
STDMETHOD(GetBuffer)(This,Buffer,riid,ppSurface)
STDMETHOD(SetFullscreenState)(This,Fullscreen,pTarget)
STDMETHOD(GetFullscreenState)(This,pFullscreen,ppTarget)
STDMETHOD(GetDesc)(This,pDesc)
STDMETHOD(ResizeBuffers)(This,BufferCount,Width,Height,NewFormat,SwapChainFlags)
STDMETHOD(ResizeTarget)(This,pNewTargetParameters)
STDMETHOD(GetContainingOutput)(This,ppOutput)
STDMETHOD(GetFrameStatistics)(This,pStats)
STDMETHOD(GetLastPresentCount)(This,pLastPresentCount)
"
)
Global DXGI_RESOURCE_PRIORITY_HIGH := 2684354560
Global DXGI_RESOURCE_PRIORITY_LOW := 1342177280
Global DXGI_RESOURCE_PRIORITY_MAXIMUM := 3355443200
Global DXGI_RESOURCE_PRIORITY_MINIMUM := 671088640
Global DXGI_RESOURCE_PRIORITY_NORMAL := 2013265920
DXGI.err := {}
Global DXGI_RESIDENCY_FULLY_RESIDENT := 1
Global DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY := 2
Global DXGI_RESIDENCY_EVICTED_TO_DISK := 3
Global DXGI_SWAP_EFFECT_DISCARD := 0
Global DXGI_SWAP_EFFECT_SEQUENTIAL := 1
Global DXGI_SWAP_CHAIN_FLAG_NONPREROTATED := 1
Global DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH := 2
Global DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE := 4
Global DXGI_ADAPTER_FLAG_NONE := 0
Global DXGI_ADAPTER_FLAG_REMOTE := 1
Global DXGI_ADAPTER_FLAG_FORCE_DWORD := 0xffffffff
Global DXGIType := {}
DXGIType.err := {}
Global DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED := 0
Global DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE := 1
Global DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST := 2
Global DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST := 3
Global DXGI_MODE_SCALING_UNSPECIFIED := 0
Global DXGI_MODE_SCALING_CENTERED := 1
Global DXGI_MODE_SCALING_STRETCHED := 2
Global DXGI_MODE_ROTATION_UNSPECIFIED := 0
Global DXGI_MODE_ROTATION_IDENTITY := 1
Global DXGI_MODE_ROTATION_ROTATE90 := 2
Global DXGI_MODE_ROTATION_ROTATE180 := 3
Global DXGI_MODE_ROTATION_ROTATE270 := 4
Global DXGIFormat := {}
DXGIFormat.err := {}
Global DXGI_FORMAT_UNKNOWN := 0
Global DXGI_FORMAT_R32G32B32A32_TYPELESS := 1
Global DXGI_FORMAT_R32G32B32A32_FLOAT := 2
Global DXGI_FORMAT_R32G32B32A32_UINT := 3
Global DXGI_FORMAT_R32G32B32A32_SINT := 4
Global DXGI_FORMAT_R32G32B32_TYPELESS := 5
Global DXGI_FORMAT_R32G32B32_FLOAT := 6
Global DXGI_FORMAT_R32G32B32_UINT := 7
Global DXGI_FORMAT_R32G32B32_SINT := 8
Global DXGI_FORMAT_R16G16B16A16_TYPELESS := 9
Global DXGI_FORMAT_R16G16B16A16_FLOAT := 10
Global DXGI_FORMAT_R16G16B16A16_UNORM := 11
Global DXGI_FORMAT_R16G16B16A16_UINT := 12
Global DXGI_FORMAT_R16G16B16A16_SNORM := 13
Global DXGI_FORMAT_R16G16B16A16_SINT := 14
Global DXGI_FORMAT_R32G32_TYPELESS := 15
Global DXGI_FORMAT_R32G32_FLOAT := 16
Global DXGI_FORMAT_R32G32_UINT := 17
Global DXGI_FORMAT_R32G32_SINT := 18
Global DXGI_FORMAT_R32G8X24_TYPELESS := 19
Global DXGI_FORMAT_D32_FLOAT_S8X24_UINT := 20
Global DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS := 21
Global DXGI_FORMAT_X32_TYPELESS_G8X24_UINT := 22
Global DXGI_FORMAT_R10G10B10A2_TYPELESS := 23
Global DXGI_FORMAT_R10G10B10A2_UNORM := 24
Global DXGI_FORMAT_R10G10B10A2_UINT := 25
Global DXGI_FORMAT_R11G11B10_FLOAT := 26
Global DXGI_FORMAT_R8G8B8A8_TYPELESS := 27
Global DXGI_FORMAT_R8G8B8A8_UNORM := 28
Global DXGI_FORMAT_R8G8B8A8_UNORM_SRGB := 29
Global DXGI_FORMAT_R8G8B8A8_UINT := 30
Global DXGI_FORMAT_R8G8B8A8_SNORM := 31
Global DXGI_FORMAT_R8G8B8A8_SINT := 32
Global DXGI_FORMAT_R16G16_TYPELESS := 33
Global DXGI_FORMAT_R16G16_FLOAT := 34
Global DXGI_FORMAT_R16G16_UNORM := 35
Global DXGI_FORMAT_R16G16_UINT := 36
Global DXGI_FORMAT_R16G16_SNORM := 37
Global DXGI_FORMAT_R16G16_SINT := 38
Global DXGI_FORMAT_R32_TYPELESS := 39
Global DXGI_FORMAT_D32_FLOAT := 40
Global DXGI_FORMAT_R32_FLOAT := 41
Global DXGI_FORMAT_R32_UINT := 42
Global DXGI_FORMAT_R32_SINT := 43
Global DXGI_FORMAT_R24G8_TYPELESS := 44
Global DXGI_FORMAT_D24_UNORM_S8_UINT := 45
Global DXGI_FORMAT_R24_UNORM_X8_TYPELESS := 46
Global DXGI_FORMAT_X24_TYPELESS_G8_UINT := 47
Global DXGI_FORMAT_R8G8_TYPELESS := 48
Global DXGI_FORMAT_R8G8_UNORM := 49
Global DXGI_FORMAT_R8G8_UINT := 50
Global DXGI_FORMAT_R8G8_SNORM := 51
Global DXGI_FORMAT_R8G8_SINT := 52
Global DXGI_FORMAT_R16_TYPELESS := 53
Global DXGI_FORMAT_R16_FLOAT := 54
Global DXGI_FORMAT_D16_UNORM := 55
Global DXGI_FORMAT_R16_UNORM := 56
Global DXGI_FORMAT_R16_UINT := 57
Global DXGI_FORMAT_R16_SNORM := 58
Global DXGI_FORMAT_R16_SINT := 59
Global DXGI_FORMAT_R8_TYPELESS := 60
Global DXGI_FORMAT_R8_UNORM := 61
Global DXGI_FORMAT_R8_UINT := 62
Global DXGI_FORMAT_R8_SNORM := 63
Global DXGI_FORMAT_R8_SINT := 64
Global DXGI_FORMAT_A8_UNORM := 65
Global DXGI_FORMAT_R1_UNORM := 66
Global DXGI_FORMAT_R9G9B9E5_SHAREDEXP := 67
Global DXGI_FORMAT_R8G8_B8G8_UNORM := 68
Global DXGI_FORMAT_G8R8_G8B8_UNORM := 69
Global DXGI_FORMAT_BC1_TYPELESS := 70
Global DXGI_FORMAT_BC1_UNORM := 71
Global DXGI_FORMAT_BC1_UNORM_SRGB := 72
Global DXGI_FORMAT_BC2_TYPELESS := 73
Global DXGI_FORMAT_BC2_UNORM := 74
Global DXGI_FORMAT_BC2_UNORM_SRGB := 75
Global DXGI_FORMAT_BC3_TYPELESS := 76
Global DXGI_FORMAT_BC3_UNORM := 77
Global DXGI_FORMAT_BC3_UNORM_SRGB := 78
Global DXGI_FORMAT_BC4_TYPELESS := 79
Global DXGI_FORMAT_BC4_UNORM := 80
Global DXGI_FORMAT_BC4_SNORM := 81
Global DXGI_FORMAT_BC5_TYPELESS := 82
Global DXGI_FORMAT_BC5_UNORM := 83
Global DXGI_FORMAT_BC5_SNORM := 84
Global DXGI_FORMAT_B5G6R5_UNORM := 85
Global DXGI_FORMAT_B5G5R5A1_UNORM := 86
Global DXGI_FORMAT_B8G8R8A8_UNORM := 87
Global DXGI_FORMAT_B8G8R8X8_UNORM := 88
Global DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM := 89
Global DXGI_FORMAT_B8G8R8A8_TYPELESS := 90
Global DXGI_FORMAT_B8G8R8A8_UNORM_SRGB := 91
Global DXGI_FORMAT_B8G8R8X8_TYPELESS := 92
Global DXGI_FORMAT_B8G8R8X8_UNORM_SRGB := 93
Global DXGI_FORMAT_BC6H_TYPELESS := 94
Global DXGI_FORMAT_BC6H_UF16 := 95
Global DXGI_FORMAT_BC6H_SF16 := 96
Global DXGI_FORMAT_BC7_TYPELESS := 97
Global DXGI_FORMAT_BC7_UNORM := 98
Global DXGI_FORMAT_BC7_UNORM_SRGB := 99
Global DXGI_FORMAT_FORCE_UINT := 0xffffffff
Global DXGI1_2 := {}
DXGI1_2.IID_IDXGIOutputDuplication := "{191cfac3-a341-470d-b26e-a864f428319c}"
DXGI1_2.IID_IDXGISurface2 := "{aba496dd-b617-4cb8-a866-bc44d7eb1fa2}"
DXGI1_2.IID_IDXGIResource1 := "{30961379-4609-4a41-998e-54fe567ee0c1}"
DXGI1_2.IID_IDXGIDevice2 := "{05008617-fbfd-4051-a790-144884b4f6a9}"
DXGI1_2.IID_IDXGISwapChain1 := "{790a45f7-0d42-4876-983a-0a55cfe6f4aa}"
DXGI1_2.IID_IDXGIFactory2 := "{50c83a1c-e072-4c48-87b0-3630fa36a6d0}"
DXGI1_2.IID_IDXGIAdapter2 := "{0AA1AE0A-FA0E-4B84-8644-E05FF8E5ACB5}"
DXGI1_2.IID_IDXGIOutput1 := "{00cddea8-939b-4b83-a340-a685226666cc}"
DXGI1_2.IDXGIAdapter2 := {}
DXGI1_2.IDXGIAdapter2.name := "IDXGIAdapter2"
DXGI1_2.IDXGIAdapter2.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)	\
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)	\
STDMETHOD(GetParent)(This,riid,ppParent)	\
STDMETHOD(EnumOutputs)(This,Output,ppOutput)	\
STDMETHOD(GetDesc)(This,pDesc)	\
STDMETHOD(CheckInterfaceSupport)(This,InterfaceName,pUMDVersion)	\
STDMETHOD(GetDesc1)(This,pDesc)	\
STDMETHOD(GetDesc2)(This,pDesc)	\
"
)
DXGI1_2.IDXGIDevice2 := {}
DXGI1_2.IDXGIDevice2.name := "IDXGIDevice2"
DXGI1_2.IDXGIDevice2.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)	\
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)	\
STDMETHOD(GetParent)(This,riid,ppParent)	\
STDMETHOD(GetAdapter)(This,pAdapter)	\
STDMETHOD(CreateSurface)(This,pDesc,NumSurfaces,Usage,pSharedResource,ppSurface)	\
STDMETHOD(QueryResourceResidency)(This,ppResources,pResidencyStatus,NumResources)	\
STDMETHOD(SetGPUThreadPriority)(This,Priority)	\
STDMETHOD(GetGPUThreadPriority)(This,pPriority)	\
STDMETHOD(SetMaximumFrameLatency)(This,MaxLatency)	\
STDMETHOD(GetMaximumFrameLatency)(This,pMaxLatency)	\
STDMETHOD(OfferResources)(This,NumResources,ppResources,Priority)	\
STDMETHOD(ReclaimResources)(This,NumResources,ppResources,pDiscarded)	\
STDMETHOD(EnqueueSetEvent)(This,hEvent)	\
"
)
DXGI1_2.IDXGIFactory2 := {}
DXGI1_2.IDXGIFactory2.name := "IDXGIFactory2"
DXGI1_2.IDXGIFactory2.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)	\
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)	\
STDMETHOD(GetParent)(This,riid,ppParent)	\
STDMETHOD(EnumAdapters)(This,Adapter,ppAdapter)	\
STDMETHOD(MakeWindowAssociation)(This,WindowHandle,Flags)	\
STDMETHOD(GetWindowAssociation)(This,pWindowHandle)	\
STDMETHOD(CreateSwapChain)(This,pDevice,pDesc,ppSwapChain)	\
STDMETHOD(CreateSoftwareAdapter)(This,Module,ppAdapter)	\
STDMETHOD(EnumAdapters1)(This,Adapter,ppAdapter)	\
STDMETHOD(IsCurrent)(This)	\
STDMETHOD(IsWindowedStereoEnabled)(This)	\
STDMETHOD(CreateSwapChainForHwnd)(This,pDevice,hWnd,pDesc,pFullscreenDesc,pRestrictToOutput,ppSwapChain)	\
STDMETHOD(CreateSwapChainForCoreWindow)(This,pDevice,pWindow,pDesc,pRestrictToOutput,ppSwapChain)	\
STDMETHOD(GetSharedResourceAdapterLuid)(This,hResource,pLuid)	\
STDMETHOD(RegisterStereoStatusWindow)(This,WindowHandle,wMsg,pdwCookie)	\
STDMETHOD(RegisterStereoStatusEvent)(This,hEvent,pdwCookie)	\
STDMETHOD(UnregisterStereoStatus)(This,dwCookie)	\
STDMETHOD(RegisterOcclusionStatusWindow)(This,WindowHandle,wMsg,pdwCookie)	\
STDMETHOD(RegisterOcclusionStatusEvent)(This,hEvent,pdwCookie)	\
STDMETHOD(UnregisterOcclusionStatus)(This,dwCookie)	\
STDMETHOD(CreateSwapChainForComposition)(This,pDevice,pDesc,pRestrictToOutput,ppSwapChain)	\
"
)
DXGI1_2.IDXGIOutput1 := {}
DXGI1_2.IDXGIOutput1.name := "IDXGIOutput1"
DXGI1_2.IDXGIOutput1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)	\
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)	\
STDMETHOD(GetParent)(This,riid,ppParent)	\
STDMETHOD(GetDesc)(This,pDesc)	\
STDMETHOD(GetDisplayModeList)(This,EnumFormat,Flags,pNumModes,pDesc)	\
STDMETHOD(FindClosestMatchingMode)(This,pModeToMatch,pClosestMatch,pConcernedDevice)	\
STDMETHOD(WaitForVBlank)(This)	\
STDMETHOD(TakeOwnership)(This,pDevice,Exclusive)	\
STDMETHOD(ReleaseOwnership)(This)	\
STDMETHOD(GetGammaControlCapabilities)(This,pGammaCaps)	\
STDMETHOD(SetGammaControl)(This,pArray)	\
STDMETHOD(GetGammaControl)(This,pArray)	\
STDMETHOD(SetDisplaySurface)(This,pScanoutSurface)	\
STDMETHOD(GetDisplaySurfaceData)(This,pDestination)	\
STDMETHOD(GetFrameStatistics)(This,pStats)	\
STDMETHOD(GetDisplayModeList1)(This,EnumFormat,Flags,pNumModes,pDesc)	\
STDMETHOD(FindClosestMatchingMode1)(This,pModeToMatch,pClosestMatch,pConcernedDevice)	\
STDMETHOD(GetDisplaySurfaceData1)(This,pDestination)	\
STDMETHOD(DuplicateOutput)(This,pDevice,ppOutputDuplication)	\
"
)
DXGI1_2.IDXGIOutputDuplication := {}
DXGI1_2.IDXGIOutputDuplication.name := "IDXGIOutputDuplication"
DXGI1_2.IDXGIOutputDuplication.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)	\
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)	\
STDMETHOD(GetParent)(This,riid,ppParent)	\
STDMETHOD(GetDesc)(This,pDesc)	\
STDMETHOD(AcquireNextFrame)(This,TimeoutInMilliseconds,pFrameInfo,ppDesktopResource)	\
STDMETHOD(GetFrameDirtyRects)(This,DirtyRectsBufferSize,pDirtyRectsBuffer,pDirtyRectsBufferSizeRequired)	\
STDMETHOD(GetFrameMoveRects)(This,MoveRectsBufferSize,pMoveRectBuffer,pMoveRectsBufferSizeRequired)	\
STDMETHOD(GetFramePointerShape)(This,PointerShapeBufferSize,pPointerShapeBuffer,pPointerShapeBufferSizeRequired,pPointerShapeInfo)	\
STDMETHOD(MapDesktopSurface)(This,pLockedRect)	\
STDMETHOD(UnMapDesktopSurface)(This)	\
STDMETHOD(ReleaseFrame)(This)	\
"
)
DXGI1_2.IDXGIResource1 := {}
DXGI1_2.IDXGIResource1.name := "IDXGIResource1"
DXGI1_2.IDXGIResource1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)	\
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)	\
STDMETHOD(GetParent)(This,riid,ppParent)	\
STDMETHOD(GetDevice)(This,riid,ppDevice)	\
STDMETHOD(GetSharedHandle)(This,pSharedHandle)	\
STDMETHOD(GetUsage)(This,pUsage)	\
STDMETHOD(SetEvictionPriority)(This,EvictionPriority)	\
STDMETHOD(GetEvictionPriority)(This,pEvictionPriority)	\
STDMETHOD(CreateSubresourceSurface)(This,index,ppSurface)	\
STDMETHOD(CreateSharedHandle)(This,pAttributes,dwAccess,lpName,pHandle)	\
"
)
DXGI1_2.IDXGISurface2 := {}
DXGI1_2.IDXGISurface2.name := "IDXGISurface2"
DXGI1_2.IDXGISurface2.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)	\
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)	\
STDMETHOD(GetParent)(This,riid,ppParent)	\
STDMETHOD(GetDevice)(This,riid,ppDevice)	\
STDMETHOD(GetDesc)(This,pDesc)	\
STDMETHOD(Map)(This,pLockedRect,MapFlags)	\
STDMETHOD(Unmap)(This)	\
STDMETHOD(GetDC)(This,Discard,phdc)	\
STDMETHOD(ReleaseDC)(This,pDirtyRect)	\
STDMETHOD(GetResource)(This,riid,ppParentResource,pSubresourceIndex)	\
"
)
DXGI1_2.IDXGISwapChain1 := {}
DXGI1_2.IDXGISwapChain1.name := "IDXGISwapChain1"
DXGI1_2.IDXGISwapChain1.def :=
( 
"
STDMETHOD(QueryInterface)(This,riid,ppvObject)	\
STDMETHOD(AddRef)(This)	\
STDMETHOD(Release)(This)	\
STDMETHOD(SetPrivateData)(This,Name,DataSize,pData)	\
STDMETHOD(SetPrivateDataInterface)(This,Name,pUnknown)	\
STDMETHOD(GetPrivateData)(This,Name,pDataSize,pData)	\
STDMETHOD(GetParent)(This,riid,ppParent)	\
STDMETHOD(GetDevice)(This,riid,ppDevice)	\
STDMETHOD(Present)(This,SyncInterval,Flags)	\
STDMETHOD(GetBuffer)(This,Buffer,riid,ppSurface)	\
STDMETHOD(SetFullscreenState)(This,Fullscreen,pTarget)	\
STDMETHOD(GetFullscreenState)(This,pFullscreen,ppTarget)	\
STDMETHOD(GetDesc)(This,pDesc)	\
STDMETHOD(ResizeBuffers)(This,BufferCount,Width,Height,NewFormat,SwapChainFlags)	\
STDMETHOD(ResizeTarget)(This,pNewTargetParameters)	\
STDMETHOD(GetContainingOutput)(This,ppOutput)	\
STDMETHOD(GetFrameStatistics)(This,pStats)	\
STDMETHOD(GetLastPresentCount)(This,pLastPresentCount)	\
STDMETHOD(GetDesc1)(This,pDesc)	\
STDMETHOD(GetFullscreenDesc)(This,pDesc)	\
STDMETHOD(GetHwnd)(This,pHwnd)	\
STDMETHOD(GetCoreWindow)(This,refiid,ppUnk)	\
STDMETHOD(Present1)(This,SyncInterval,PresentFlags,pPresentParameters)	\
STDMETHOD(IsTemporaryMonoSupported)(This)	\
STDMETHOD(GetRestrictToOutput)(This,ppRestrictToOutput)	\
STDMETHOD(SetBackgroundColor)(This,pColor)	\
STDMETHOD(GetBackgroundColor)(This,pColor)	\
STDMETHOD(SetRotation)(This,Rotation)	\
STDMETHOD(GetRotation)(This,pRotation)	\
"
)
Global DXGI_SHARED_RESOURCE_WRITE := 1
Global DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME := 0x1
Global DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR := 0x2
Global DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR := 0x4
Global DXGI_ALPHA_MODE_PREMULTIPLIED := 1
Global DXGI_ALPHA_MODE_STRAIGHT := 2
Global DXGI_ALPHA_MODE_IGNORE := 3
Global DXGI_ALPHA_MODE_FORCE_DWORD := 0xffffffff
Global DXGI_OFFER_RESOURCE_PRIORITY_LOW := 1
Global DXGI_OFFER_RESOURCE_PRIORITY_NORMAL := ( DXGI_OFFER_RESOURCE_PRIORITY_LOW + 1 )
Global DXGI_OFFER_RESOURCE_PRIORITY_HIGH := ( DXGI_OFFER_RESOURCE_PRIORITY_NORMAL + 1 )
Global DXGI_SCALING_NONE := 1
Global DXGI_SCALING_ASPECT_RATIO_STRETCH := 2
Global DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY := 1
Global DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY := 2
Global DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY := 3
Global DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY := 4
Global DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY := 1
Global DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY := 2
Global DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY := 3
Global DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY := 4
DXGI1_2.err := {}
DXGI.IDXGISwapChain1 := {}
DXGI.IDXGISwapChain1.name := "IDXGISwapChain1"
DXGI.IDXGISwapChain1.def :=
( 
"
STDMETHOD(GetBackgroundColor)(This)
STDMETHOD(GetCoreWindow)(This)
STDMETHOD(GetDesc1)(This)
STDMETHOD(GetFullscreenDesc)(This)
STDMETHOD(GetHwnd)(This)
STDMETHOD(GetRestrictToOutput)(This)
STDMETHOD(GetRotation)(This)
STDMETHOD(IsTemporaryMonoSupported)(This)
STDMETHOD(Present1)(This)
STDMETHOD(SetBackgroundColor)(This)
STDMETHOD(SetRotation)(This)
"
)
DXGI.IDXGISwapChain1.def := DXGI.IDXGISwapChain.def "`n" DXGI.IDXGISwapChain1.def
DXGI.IDXGIFactory2 := {}
DXGI.IDXGIFactory2.name := "IDXGIFactory2"
DXGI.IDXGIFactory2.def :=
( 
"
STDMETHOD(IsWindowedStereoEnabled)
STDMETHOD(CreateSwapChainForHwnd)
vSTDMETHOD(CreateSwapChainForCoreWindow)
STDMETHOD(GetSharedResourceAdapterLuid)
STDMETHOD(RegisterOcclusionStatusWindow)
STDMETHOD(RegisterStereoStatusEvent)
STDMETHOD(UnregisterStereoStatus)
STDMETHOD(RegisterStereoStatusWindow)
STDMETHOD(RegisterOcclusionStatusEvent)
STDMETHOD(UnregisterOcclusionStatus)
STDMETHOD(CreateSwapChainForComposition)
"
)
DXGI.IDXGIFactory2.def := DXGI.IDXGIFactory1.def "`n" DXGI.IDXGIFactory2.def
global DXGI_RATIONAL := "UINT Numerator; UINT Denominator;"
global DXGI_MODE_DESC :=
(
"
  UINT          Width;
  UINT          Height;
  DXGI_RATIONAL RefreshRate;
  UINT          Format;
  UINT          ScanlineOrdering;
  UINT          Scaling;
"
)
global DXGI_SAMPLE_DESC := "UINT Count; UINT Quality;"
global DXGI_SWAP_CHAIN_DESC :=
(
"
  DXGI_MODE_DESC   BufferDesc;
  DXGI_SAMPLE_DESC SampleDesc;
  UINT             BufferUsage;
  UINT             BufferCount;
  HWND             OutputWindow;
  BOOL             Windowed;
  UINT             SwapEffect;
  UINT             Flags;
"
)
global DXGI_SWAP_CHAIN_DESC1 := struct("UINT Width; UINT Height; UINT Format; BOOL Stereo; DXGI_SAMPLE_DESC SampleDesc;"
. " UINT BufferUsage; UINT BufferCount; UINT Scaling; UINT SwapEffect; UINT AlphaMode; UINT Flags;")
DXGI_SWAP_CHAIN_DESC := struct(DXGI_SWAP_CHAIN_DESC)
DXGI_RATIONAL        := struct(DXGI_RATIONAL)
DXGI_MODE_DESC       := struct(DXGI_MODE_DESC)
DXGI_SAMPLE_DESC     := struct(DXGI_SAMPLE_DESC)
global DXGI_PRESENT_PARAMETERS := struct("UINT DirtyRectsCount; LPVOID pDirtyRects; LPVOID pScrollRect; LPVOID pScrollOffset;")
global ID3D10Blob
global ID3D10Device, ID3D10Device1, ID3D10Texture2D, ID3D10ShaderResourceView, ID3D10PixelShader
global ID3D11Device, ID3D11DeviceContext, ID3D11ImDeviceContext1, ID3D11ImDeviceContext, ID3D11Buffer, ID3D11Texture2D, pDXGIBackBuffer
global ID3D11ComputeShader, ID3D11PixelShader, ID3D11VShader, ID3D11ShaderResourceView
global IDXGISwapChain, IDXGISwapChain1, IDXGIFactory, IDXGIFactory2, IDXGIOutput
global ID3D11Device3
D3D11Shader()
{
c :=
	(
	"
	sampler   s0;
	texture2D t0;
	float4 Vx(uint VertexID: SV_VertexID) : SV_POSITION {
		return 0;
	}
	float4 Px(float2 coords0 : TEXCOORD0) : SV_TARGET	{
		return t0.Sample(s0, coords0);
	}
	"
)
return c
}
GetDirect3D10()
{
dll    := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
ID3D10 := struct("LPVOID pDvc; LPVOID pDvc1; LPVOID pSwapChain; LPVOID pSwapChain1; LPVOID pFactory; LPVOID pFactory2;")
if (r  := dllcall(dll "\GetDirect3D10", ptr, A_scripthwnd, "ptr", ID3D10[], "ptr*", feature_level:=0) )
return "Failed to create the Direct3D 10 interfaces " r
logerr("GetDirect3D10 " r " " ErrorLevel)
ID3D10Device    := new ComInterfaceWrapper(D3D10.ID3D10Device, ID3D10.pDvc, True)
IDXGISwapChain  := new ComInterfaceWrapper(DXGI.IDXGISwapChain, ID3D10.pSwapChain, True)
IDXGISwapChain1 := new ComInterfaceWrapper(DXGI1_2.IDXGISwapChain1, ID3D10.pSwapChain1, True)
IDXGIFactory    := new ComInterfaceWrapper(DXGI.IDXGIFactory, ID3D10.pFactory, True)
IDXGIFactory2	:= new ComInterfaceWrapper(DXGI1_2.IDXGIFactory2, ID3D10.pFactory2, True)
r := dllcall(IDXGISwapChain.GetContainingOutput, ptr, IDXGISwapChain.p, "ptr*", out:=0)
if r
logerr( "Failed to accuire the IDXGIOutput interface")
else IDXGIOutput := new ComInterfaceWrapper(DXGI.IDXGIOutput, out, True)
D3D11_HOOKS.CreateTex2D   := ID3D10Device.CreateTexture2D
D3D11_HOOKS.CreateResView := ID3D10Device.CreateShaderResourceView
if ! isobject(t := new D3D10Texture(ID3D10Device.p, (1<<16)|1))
return "Failed to create the ID3D11Texture2D and ID3D11ShaderResourceView interfaces"
logerr("Texture " t.t " "  t.v)
ID3D10Texture2D          := new ComInterfaceWrapper(D3D10.ID3D10Texture2D, t.t, True)
ID3D10ShaderResourceView := new ComInterfaceWrapper(D3D10.ID3D10ShaderResourceView, t.v, True)
sys := dllcall(dll "\D3D10CreateSysTexture", ptr, ID3D10Device.p, uint, 1, uint, 1, ptr)
ID3D10SysTexture2D := new ComInterfaceWrapper(D3D10.ID3D10Texture2D, sys, True)
logerr("&&&&&& " ID3D10SysTexture2D.map " " ID3D10Texture2D.map)
r := CompileShader10(pShader, ID3D10Device.p, D3D11Shader(), "Px", "ps_4_0")
if r
return "Failed to create the ID3D10PixelShader interface`n" r
else ID3D10PixelShader := new ComInterfaceWrapper(D3D10.ID3D10PixelShader, pShader, True)
dir:= g_.cfg.injector_dir
fileread, fmt, %dir%\DXGIFormats.txt
DXGI.frmts := {}
loop, parse, fmt, `n`r
{
f := strsplit(A_loopfield, "=")
ff := f[1]
stringreplace, ff, ff , DXGI_FORMAT_, ,
DXGI.frmts[trim(f[2])] := trim(ff)
}
return "Succeded to create the Direct3D10.1 device " ID3D10.pDvc " " ID3D10.pSwapChain
}
GetDirect3D11()
{
static feature_levels := {"0x9100" : "D3D_FEATURE_LEVEL_9_1"
, "37376" : "D3D_FEATURE_LEVEL_9_2"
, "37632" : "D3D_FEATURE_LEVEL_9_3"
, "40960" : "D3D_FEATURE_LEVEL_10_0"
, "41216" : "D3D_FEATURE_LEVEL_10_1"
, "45056" : "D3D_FEATURE_LEVEL_11_0"
, "45312" : "D3D_FEATURE_LEVEL_11_1"}
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
ID3D11 := struct("LPVOID pDev; LPVOID pIContext; LPVOID pContext; LPVOID pSwapChain; LPVOID pSwapChain1; LPVOID pFactory; LPVOID pFactory2;")
r := dllcall(dll "\GetDirect3D11", ptr, A_scripthwnd, "ptr", ID3D11[], "ptr*", feature_level:=0)
if ( r )
return "Failed to create the Direct3D 11 interfaces " r
ID3D11Device            := new ComInterfaceWrapper(D3D11.ID3D11Device, ID3D11.pDev, True)
ID3D11Device.level      := feature_levels[feature_level . ""]
ID3D11ImDeviceContext   := new ComInterfaceWrapper(D3D11.ID3D11DeviceContext, ID3D11.pIContext, True)
ID3D11DeviceContext     := new ComInterfaceWrapper(D3D11.ID3D11DeviceContext, ID3D11.pContext, True)
IDXGISwapChain          := new ComInterfaceWrapper(DXGI.IDXGISwapChain, ID3D11.pSwapChain, True)
IDXGISwapChain1         := new ComInterfaceWrapper(DXGI1_2.IDXGISwapChain1, ID3D11.pSwapChain1, True)
IDXGIFactory	        := new ComInterfaceWrapper(DXGI.IDXGIFactory, ID3D11.pFactory, True)
IDXGIFactory2	        := new ComInterfaceWrapper(DXGI1_2.IDXGIFactory2, ID3D11.pFactory2, True)
out := dllcall(dll "\D3D11GetDeviceOutput", ptr, ID3D11Device.p, ptr)
if !out
logerr( "Failed to accuire the IDXGIOutput interface")
else IDXGIOutput := new ComInterfaceWrapper(DXGI.IDXGIOutput, out, True)
GUID_FromString(IID, D3D11_1.IID_ID3D11DeviceContext1)
r := dllcall(ID3D11ImDeviceContext.QueryInterface, ptr, ID3D11ImDeviceContext.p, ptr, &IID, "ptr*", Ctx1:=0)
if r
logerr( "Failed to query the ID3D11DeviceContext1 interface" )
else ID3D11ImDeviceContext1 := new ComInterfaceWrapper(D3D11_1.ID3D11DeviceContext1, Ctx1, True)
GUID_FromString(IID, D3D11_3.IID_ID3D11Device3)
r := dllcall(ID3D11Device.QueryInterface, ptr, ID3D11Device.p, ptr, &IID, "ptr*", Dev3:=0)
if r
logerr("Failed to query the ID3D11Device3 interface")
ID3D11Device3 := new ComInterfaceWrapper(D3D11_3.ID3D11Device3, Dev3, True)
D3D11_HOOKS.CreateTex2D   := ID3D11Device.CreateTexture2D
D3D11_HOOKS.CreateResView := ID3D11Device.CreateShaderResourceView
if ! isobject(t := new D3D11Texture(ID3D11Device.p, (1<<16)|1))
return "Failed to create the ID3D11Texture2D and ID3D11ShaderResourceView interfaces"
logerr("Texture " t.t " "  t.v)
ID3D11Texture2D          := new ComInterfaceWrapper(D3D11.ID3D11Texture2D, t.t, True)
ID3D11ShaderResourceView := new ComInterfaceWrapper(D3D11.ID3D11ShaderResourceView, t.v, True)
r := CreateVertexBuffer11(pBuffer, 32)
if r
return "Failed to create the ID3D11Buffer interface"
else ID3D11Buffer := new ComInterfaceWrapper(D3D11.ID3D11Buffer, pBuffer, True)
shaderCode := "[numthreads(32, 24, 1)]`n"
. "void CSMain( uint3 dispatchThreadID : SV_DispatchThreadID )`n"
. "{return;}"
r := CompileShader11(pShader, ID3D11Device.p, shaderCode, "CSMain", "cs_4_1")
if r
return "Failed to create the ID3D11ComputeShader interface`n" r
else ID3D11ComputeShader := new ComInterfaceWrapper(D3D11.ID3D11ComputeShader, pShader, True)
r := CompileShader11(pShader, ID3D11Device.p, D3D11Shader(), "Px", "ps_4_1")
if r
return "Failed to create the ID3D11PixelShader interface`n" r
else ID3D11PixelShader := new ComInterfaceWrapper(D3D11.ID3D11PixelShader, pShader, True)
r := CompileShader11(pShader, ID3D11Device.p, D3D11Shader(), "Vx", "vs_4_1")
if r
return "Failed to create the ID3D11VertexShader interface`n" r
else ID3D11VertexShader := new ComInterfaceWrapper(D3D11.ID3D11VertexShader, pShader, True)
dir:= g_.cfg.injector_dir
fileread, fmt, %dir%\DXGIFormats.txt
DXGI.frmts := {}
loop, parse, fmt, `n`r
{
f := strsplit(A_loopfield, "=")
ff := f[1]
stringreplace, ff, ff , DXGI_FORMAT_, ,
DXGI.frmts[trim(f[2])] := trim(ff)
}
return "Succeded to create the Direct3D11 device with feature level " ID3D11Device.level
}
Class D3D11Texture {
__new(d, res)
{
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
this.v := dllcall(dll "\D3D11CreateTexture2D", ptr, d, uint, (res>>16) & 0xffff, uint, res & 0xffff, uint, 0, ptr)
this.t := dllcall(dll "\D3D11GetTexture2D", ptr, this.v, ptr)
}
__delete()
{
(this.t) ? Logerr("Releasing Texture " dllcall(ID3D11Texture2D.Release, ptr, this.t))
(this.v) ? Logerr("Releasing ResView " dllcall(ID3D11ShaderResourceView.Release, ptr, this.v))
}
}
Class D3D10Texture {
__new(d, res)
{
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
this.v := dllcall(dll "\D3D10CreateTexture2D", ptr, d, uint, (res>>16) & 0xffff, uint, res & 0xffff, uint, 0, ptr)
this.t := dllcall(dll "\D3D10GetTexture2D", ptr, this.v, ptr)
}
__delete()
{
(this.t) ? Logerr("Releasing Texture " dllcall(ID3D10Texture2D.Release, ptr, this.t))
(this.v) ? Logerr("Releasing ResView " dllcall(ID3D10ShaderResourceView.Release, ptr, this.v))
}
}
CreateVertexBuffer11(byref pBuffer, size, pData = 0)
{
D3D11_USAGE_DEFAULT            := 0
D3D11_BUFFER_DESC.ByteWidth    := size
D3D11_BUFFER_DESC.Usage        := D3D11_USAGE_DEFAULT
D3D11_BUFFER_DESC.BindFlags    := D3D11_BIND_VERTEX_BUFFER
D3D11_SUBRESOURCE_DATA.pSysMem := pData
return dllcall(ID3D11Device.CreateBuffer, uint, ID3D11Device.p, ptr, D3D11_BUFFER_DESC[]
, ptr, (pData > 0) & True ? D3D11_SUBRESOURCE_DATA[] : 0, "ptr*", pBuffer:=0, uint)
}
LoadD3DX11()
{
if (dllcall("LoadLibraryW", "str", "wined3d.dll", "ptr"))
{
arch := A_PtrSize = 8 ? "\x64\" : "\x86\"
hdll := dllcall("LoadLibraryW", "str", g_.cfg.injector_dir "\D3DCompilers" arch "\d3dx11_43.dll", "ptr")
} else {
hdll         := dllcall("GetModuleHandle", "str", "d3dx11_43.dll", "ptr")
hdll ?: hdll := dllcall("LoadLibraryW", "str", "d3dx11_43.dll", "ptr")
}
if (hdll = 0){
logerr("Failed to load the d3dx11_43.dll, wine=" dllcall("LoadLibraryW", "str", "wined3d.dll", "ptr"))
}
return hdll
}
CompileShaderFromFile11(byref pShader, pDevice, file, entrypoint = "main", pTarget  = "cs_4_1")
{
hdll               := LoadD3DX11()
D3DCompileFromFile := dllcall("GetProcAddress", uint, hdll, astr, "D3DX11CompileFromFileW")
r := dllcall(D3DCompileFromFile, str, file, uint, 0, uint, 0, wstr, entrypoint, wstr, pTarget
, uint, 0, uint, 0, "ptr*", pShader:=0, "ptr*", pError:=0, uint)
use := r ? pError : pShader
_ptr := dllcall(numget(numget(use+0, "ptr")+A_PtrSize*3, "ptr"), ptr, use)
size := dllcall(numget(numget(use+0, "ptr")+A_PtrSize*4, "ptr"), ptr, use)
if r
{
rr := strget(_ptr+0, size, "CP0")
dllcall(numget(numget(use+0, "ptr")+A_PtrSize*2, "ptr"), ptr, use)
return rr
}
else
{
r := dllcall(ID3D11Device.CreateComputeShader, ptr, pDevice, uint, _ptr, ptr, size, uint, 0, "ptr*", pShader)
dllcall(numget(numget(use+0, "ptr")+A_PtrSize*2, "ptr"), ptr, use)
return r
}
}
CompileShader10(byref pShader, pDevice, ShaderCode, entrypoint, pTarget)
{
hdll         := LoadD3DX11()
D3DCompile   := dllcall("GetProcAddress", ptr, hdll, astr, "D3DX11CompileFromMemory", "ptr")
r := dllcall(D3DCompile, astr, ShaderCode, ptr, strlen(ShaderCode), ptr, 0, ptr, 0, ptr, 0
, astr, entrypoint, astr, pTarget, uint, 0, uint, 0, ptr, 0
, "ptr*", pShader:=0, "ptr*", pError:=0, uint, 0, uint)
logerr("D3D 10 Compile shader " r)
use := r ? pError : pShader
_ptr := dllcall(numget(numget(use+0, "ptr")+A_PtrSize*3, "ptr"), ptr, use, "ptr")
size := dllcall(numget(numget(use+0, "ptr")+A_PtrSize*4, "ptr"), ptr, use, "ptr")
if r
{
rr := strget(_ptr+0, size, "CP0")
dllcall(numget(numget(use+0, "ptr")+A_PtrSize*2, "ptr"), ptr, use)
return rr
}
else
{
if instr(pTarget, "ps")
r := dllcall(ID3D10Device.CreatePixelShader, ptr, pDevice, ptr, _ptr, ptr, size, "ptr*", pShader)
else if instr(pTarget, "vs")
r := dllcall(ID3D10Device.CreateVertexShader, ptr, pDevice, ptr, _ptr, ptr, size, "ptr*", pShader)
logerr("D3D 10 Create shader " r " " errorlevel)
dllcall(numget(numget(use+0, "ptr")+A_PtrSize*2, "ptr"), ptr, use)
return r
}
}
CompileShader11(byref pShader, pDevice, ShaderCode, entrypoint, pTarget)
{
hdll         := LoadD3DX11()
D3DCompile   := dllcall("GetProcAddress", ptr, hdll, astr, "D3DX11CompileFromMemory", "ptr")
r := dllcall(D3DCompile, astr, ShaderCode, ptr, strlen(ShaderCode), ptr, 0, ptr, 0, ptr, 0
, astr, entrypoint, astr, pTarget, uint, 0, uint, 0, ptr, 0
, "ptr*", pShader:=0, "ptr*", pError:=0, uint, 0, uint)
use := r ? pError : pShader
_ptr := dllcall(numget(numget(use+0, "ptr")+A_PtrSize*3, "ptr"), ptr, use, "ptr")
size := dllcall(numget(numget(use+0, "ptr")+A_PtrSize*4, "ptr"), ptr, use, "ptr")
if r
{
rr := strget(_ptr+0, size, "CP0")
dllcall(numget(numget(use+0, "ptr")+A_PtrSize*2, "ptr"), ptr, use)
return rr
}
else
{
if instr(pTarget, "cs")
r := dllcall(ID3D11Device.CreateComputeShader, ptr, pDevice, ptr, _ptr, ptr, size, ptr, 0, "ptr*", pShader, ptr)
else if instr(pTarget, "ps")
r := dllcall(ID3D11Device.CreatePixelShader, ptr, pDevice, ptr, _ptr, ptr, size, ptr, 0, "ptr*", pShader, ptr)
else if instr(pTarget, "vs")
r := dllcall(ID3D11Device.CreateVertexShader, ptr, pDevice, ptr, _ptr, ptr, size, ptr, 0, "ptr*", pShader, ptr)
dllcall(numget(numget(use+0, "ptr")+A_PtrSize*2, "ptr"), ptr, use)
return r
}
}
_D3D11Compile(byref blob, hlsl, prfl, entry="main")
{
if (r := D3D11Compile(blob, hlsl, prfl, entry="main"))
return r
blob  := {"p"  : dllcall(numget(numget(blob+0, "ptr")+A_PtrSize*3, "ptr"), ptr, blob, "ptr")
,"sz" : dllcall(numget(numget(blob+0, "ptr")+A_PtrSize*4, "ptr"), ptr, blob, "ptr")}
}
D3D11Compile(byref pShader, hlsl, prfl, entry="main")
{
hdll         := LoadD3DX11()
D3DCompile   := dllcall("GetProcAddress", ptr, hdll, astr, "D3DX11CompileFromMemory", "ptr")
r            := dllcall(D3DCompile, astr, hlsl, ptr, strlen(hlsl), ptr, 0, ptr, 0, ptr, 0, astr, "main"
, astr, prfl, uint, 0, uint, 0, ptr, 0, "ptr*", pShader:=0, "ptr*", pError:=0
, uint, 0, uint)
use  := r ? pError : pShader
_ptr := dllcall(numget(numget(use+0, "ptr")+A_PtrSize*3, "ptr"), ptr, use, "ptr")
size := dllcall(numget(numget(use+0, "ptr")+A_PtrSize*4, "ptr"), ptr, use, "ptr")
if r
{
rr := strget(_ptr+0, size, "CP0")
dllcall(numget(numget(use+0, "ptr")+A_PtrSize*2, "ptr"), ptr, use)
return rr
}
}
D3D11Disasemble(BC, sz, byref code)
{
if (dllcall("GetModuleHandle", "str", "wined3d.dll", "ptr"))
{
arch := A_PtrSize = 8 ? "x64\" : "x86\"
hdll := dllcall("LoadLibraryW", "str", g_.cfg.injector_dir "\" arch "D3dcompiler_47.dll", "ptr")
} else {
hdll         := dllcall("GetModuleHandle", "str", "D3dcompiler_47.dll", "ptr")
hdll ?: hdll := dllcall("LoadLibraryW", "str", "D3dcompiler_47.dll", "ptr")
}
Disassemble  := dllcall("GetProcAddress", ptr, hdll, astr, "D3DDisassemble", "ptr")
dllcall(Disassemble, ptr, BC, ptr, sz, uint, 0, uint, 0, "ptr*", blob:=0)
if (!blob)
return true
_ptr := dllcall(numget(numget(blob+0, "ptr")+A_PtrSize*3, "ptr"), ptr, blob, "ptr")
size := dllcall(numget(numget(blob+0, "ptr")+A_PtrSize*4, "ptr"), ptr, blob, "ptr")
code := strget(_ptr+0, size, "CP0")
dllcall(numget(numget(blob+0, "ptr")+A_PtrSize*2, "ptr"), ptr, blob)
}
D3D11_HOOKS :=
(
"
LPVOID CrtSmplrStt;
DWORD Aniso, Point;
DWORD W, H, WinW, WinH, HD_W, HD_H, VW_X;
float  Scale;
LPVOID AHKSetup;
LPVOID CreateChain;
LPVOID CreateChainForHwnd;
LPVOID GetDesc;
LPVOID GetDesc1;
LPVOID Getbff;
LPVOID Rsz;
LPVOID RszTrgt;
LPVOID GetModes;
LPVOID StVW;   
LPVOID GtVW;
LPVOID StScsr;
LPVOID GtScsr;
LPVOID StTrgt; 
LPVOID GtTrgt;
LPVOID Clear;
LPVOID ClearRT;
LPVOID DscrdRsrc;
LPVOID DscrdVW;
LPVOID StSmplr;
LPVOID PxCreate; 
LPVOID PxRelease; 
LPVOID PxSet;
LPVOID PxShdrs;
LPVOID PxBlob;
LPVOID CrrntPxR;
LPVOID CrrntPx;
LPVOID  present; 
LPVOID _present; 
LPVOID Dev; 
LPVOID Ctx; 
LPVOID Bltvx; 
LPVOID Bltpx;
LPVOID Textpx;
LPVOID Texttx;
LPVOID Textvw;
LPCTSTR tex;
LPCTSTR dump;
DWORD clr;
LPVOID Resolve;
LPVOID Copy;
LPVOID CopyRegion;
LPVOID UpdateSubrsrc;
LPVOID ReadSubresource;
LPVOID map;
LPVOID unmap;
LPVOID ImSetResources;
LPVOID CreateTex2D;
LPVOID ReleaseTex2D;
LPVOID CreateResView;
LPVOID ReleaseResView;
DWORD txt_rct_x;
DWORD txt_rct_y;
DWORD txt_rct_w;
DWORD txt_rct_h;
DWORD img_rct_x;
DWORD img_rct_y;
DWORD img_rct_w;
DWORD img_rct_h;
BOOL search;
LPVOID current;
LPVOID texts;
LPVOID replace;
LPVOID paths;
DWORD autodmp; 
"
)
Global D3D11_HOOKS := struct(D3D11_HOOKS)
D3D11_HOOKS.clr    := 0x00FFFFFF
global g_TSwap     := {"thumb" : 256}
global g_PxOvrrd   := {}
InitD3D10Hooks()
{
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
(g_.cfg.MCLP)   ? dllcall(dll "\D3D12Config", astr, "MOUSECLIP" , str, g_.cfg.MCLP)
for k ,v in strsplit(g_.cfg.HD, "|")
dllcall(dll "\D3D12Config", astr, v, uint, 2)
(g_.cfg.WHKS)   ? dllcall(dll "\D3D12Config", astr, "FIXWINSIZE", ptr, 1)
(g_.cfg.MHKS)   ? dllcall(dll "\D3D12Config", astr, "MOUSEHOOKS", ptr, 1)
(g_.cfg.VSNC)   ? dllcall(dll "\D3D12Config", astr, "VSYNC", ptr, 1)
arch      := A_PtrSize == 8 ? "x64" : "x32"
wine_path := g_.cfg.injector_dir . "\wined3d\"  g_.cfg.wine "\" arch
dxvk_path := g_.cfg.injector_dir . "\dxvk\"  g_.cfg.dxvkv "\" arch
flags     := g_.cfg.dxvk ? 0xd : 0
dllcall(dll "\InitD3D11Hooks", ptr, D3D11_HOOKS[], astr, wine_path, astr, dxvk_path, astr, g_.cfg.target_dir, uint, flags)
logerr(GetDirect3D10())
logerr(IDXGIFactory.Hook("CreateSwapChain", "CreateSwapChain10"))
logerr(IDXGISwapChain.dllHook("Present", "IDXGISwapChainPresentHook", dll))
D3D11_HOOKS.present  := IDXGISwapChain.Present
D3D11_HOOKS._present := RegisterCallback("IDXGISwapChain_Present", "F")
if (parsecfg(g_.cfg.TextSwap).e or g_.cfg.HD)
{
if ! parsecfg(g_.cfg.TextSwap).e
{
g_TSwap             := {}
g_TSwap.texts       := new Collection()
D3D11_HOOKS.texts   := g_TSwap.texts.pc
g_TSwap.replace     := new Collection()
D3D11_HOOKS.replace := g_TSwap.replace.pc
}
else TSwapInit(dll)
logerr(ID3D10Device.dllHook("CopySubresourceRegion", "D3D10CopySubresourceRegionHook", dll))
logerr(ID3D10Device.dllHook("CreateShaderResourceView", "D3D10CreateShaderResourceViewHook", dll))
logerr(ID3D10Device.dllHook("UpdateSubresource", "D3D10UpdateSubresourceHook", dll))
logerr(ID3D10Device.dllHook("PSSetShaderResources", "D3D10PSSetShaderResourcesHook", dll))
logerr(ID3D10ShaderResourceView.dllHook("Release", "D3D10ResourceViewReleaseHook", dll))
logerr(ID3D10Device.dllHook("CreateTexture2D", "D3D10CreateTexture2DHook", dll))
logerr(ID3D10Texture2D.dllHook("Release", "D3D10Texture2DReleaseHook", dll))
logerr(ID3D10Texture2D.dllHook("Map", "D3D10MapHook", dll))
logerr(ID3D10Texture2D.dllHook("Unmap", "D3D10UnmapHook", dll))
}
D3D11_HOOKS.CreateResView  := ID3D10Device.CreateShaderResourceView
D3D11_HOOKS.ReleaseResView := ID3D10ShaderResourceView.Release
D3D11_HOOKS.CreateTex2D    := ID3D10Device.CreateTexture2D
D3D11_HOOKS.ReleaseTex2D   := ID3D10Texture2D.Release
D3D11_HOOKS.map            := ID3D10Texture2D.Map
D3D11_HOOKS.Unmap          := ID3D10Texture2D.Unmap
D3D11_HOOKS.UpdateSubrsrc  := ID3D10Device.UpdateSubresource
D3D11_HOOKS.ImSetResources := ID3D10Device.PSSetShaderResources
D3D11_HOOKS.CopyRegion     := ID3D10Device.CopySubresourceRegion
if (parsecfg(g_.cfg.PxSwap).e or g_.cfg.HD)
{
if (! parsecfg(g_.cfg.PxSwap).e )
{
g_PxOvrrd           := {}
g_PxOvrrd.PxShdrs   := new Collection()
D3D11_HOOKS.PxShdrs := g_PxOvrrd.PxShdrs.pc
} else PxOvrr11dInit()
logerr(ID3D10Device.dllHook("CreatePixelShader", "CreatePixelShader10Hook", dll))
logerr(ID3D10PixelShader.dllHook("Release", "ReleasePixelShader10Hook", dll))
logerr(ID3D10Device.dllHook("PsSetShader", "D3D10PsSetShaderHook", dll))
}
D3D11_HOOKS.PxShdrs   := g_PxOvrrd.PxShdrs.pc
D3D11_HOOKS.PxCreate  := ID3D10Device.CreatePixelShader
D3D11_HOOKS.PxRelease := ID3D10PixelShader.Release
D3D11_HOOKS.PxSet     := ID3D10Device.PsSetShader
if (g_.cfg.HD)
{
logerr(ID3D10Device.dllHook("CopyResource", "D3D10CopyResourceHook", dll))
logerr(ID3D10Device.dllHook("ResolveSubresource", "D3D10ResolveSubresourceHook", dll))
logerr(ID3D10Device.dllHook("OMSetRenderTargets", "D3D10OMSetRenderTargetsHook", dll))
logerr(ID3D10Device.dllHook("OMGetRenderTargets", "D3D10OMGetRenderTargetsHook", dll))
logerr(ID3D10Device.dllHook("ClearDepthStencilView", "D3D10ClearDepthStencilViewHook", dll))
logerr(ID3D10Device.dllHook("ClearRenderTargetView", "D3D10ClearRenderTargetViewHook", dll))
}
D3D11_HOOKS.StTrgt     := ID3D10Device.OMSetRenderTargets
D3D11_HOOKS.GtTrgt     := ID3D10Device.OMGetRenderTargets
D3D11_HOOKS.Clear      := ID3D10Device.ClearDepthStencilView
D3D11_HOOKS.ClearRT    := ID3D10Device.ClearRenderTargetView
D3D11_HOOKS.StVW       := ID3D10Device.RSSetViewports
D3D11_HOOKS.StScsr     := ID3D10Device.RSSetScissorRects
D3D11_HOOKS.GtVW       := ID3D10Device.RSGetViewports
D3D11_HOOKS.GtScsr     := ID3D10Device.RSGetScissorRects
D3D11_HOOKS.Resolve	   := ID3D10Device.ResolveSubresource
D3D11_HOOKS.Copy       := ID3D10Device.CopyResource
D3D11InitHDHooks(dll)
if (g_.cfg.fltr || g_.cfg.TextSwap.a)
logerr(ID3D10Device.dllHook("PSSetSamplers", "D3D10PSSetSamplersHook", dll))
D3D11_HOOKS.StSmplr := ID3D10Device.PSSetSamplers
D3D11_HOOKS.MxOvrrd := g_.cfg.FLTR
D3D11_HOOKS.MnOvrrd := g_.cfg.FLTR
dllcall(dll "\D3D11SetupFinished", ptr, IDXGISwapChain.p)
IDXGISwapChain.GetDesc         := D3D11_HOOKS.GetDesc
IDXGISwapChain1.GetDesc1       := D3D11_HOOKS.GetDesc1
IDXGIOutput.GetDisplayModeList := D3D11_HOOKS.GetModes
}
D3D10UpdateHook(Intrfc, Mthd, Trmpln)
{
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
if !instr(Intrfc.dllHook(Mthd, "D3D10" Mthd "Hook", dll), "FAILED")
D3D11_HOOKS[Trmpln] := Intrfc[Mthd]
}
D3D10ResetPreentCallback(Callback)
{
if (D3D11_HOOKS._present)
dllcall("GlobalFree", ptr, D3D11_HOOKS._present)
D3D11_HOOKS._present := RegisterCallback(Callback, "F")
}
CreateSwapChain10(p1, p2, p3, p4)
{
p3 := D3D11SetUPSwapChain(p3, "IDXGIFactory::CreateSwapChain")
r  := dllcall(IDXGIFactory.CreateSwapChain, ptr, p1, ptr, p2, ptr, p3, ptr, p4)
if (r)
return r
D3D11GetSwapChainDsc(numget(p4+0, "ptr"))
if (DXGI_SWAP_CHAIN_DESC.OutputWindow && g_.cfg.HD)
dllcall("SendMessage", ptr, DXGI_SWAP_CHAIN_DESC.OutputWindow, uint, 0x5, ptr, 0, ptr, D3D11_HOOKS.W|(D3D11_HOOKS.H<<16))
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
dllcall(dll "\D3D10CreateShaders", ptr, numget(p4+0, "ptr"))
return r
}
PxOvrr11dInit()
{
g_PxOvrrd           := parsecfg(g_.cfg.PxSwap)
g_PxOvrrd.user_path := g_.cfg.path "pixelshaders"
if ! fileexist(g_PxOvrrd.user_path)
{
path := g_PxOvrrd.user_path
FileCreateDir, %path%
}
name           := g_.cfg.target_name
StringLower, name, name
name           := strsplit(name, ".exe")[1]
g_PxOvrrd.path := g_.cfg.injector_dir "\patches\" name
g_PxOvrrd.PxShdrs   := new Collection()
D3D11_HOOKS.PxShdrs := g_PxOvrrd.PxShdrs.pc
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
for k, v in [g_PxOvrrd.user_path, g_PxOvrrd.path]
{
loop, % v "\*.hlsl"
{
bin := StrReplace(A_LoopFileFullPath, ".hlsl", ".bin")
if FileExist(bin)
{
VarSetCapacity(dat, (bin := FileOpen(bin, "r")).Length)
bin.RawRead(&dat, bin.Length)
hl    := FileOpen(A_LoopFileFullPath, "r").read()
prfl  := StrSplit( StrSplit(hl, "//")[2], "@" )[1]
if (r := _D3D11Compile(blob, hl, prfl))
{
logerr("Failed to compile " A_LoopFileFullPath ":`n`n" r)
} else
logerr("Inserted Dump " dllcall(dll "\D3D11InsetPxDump", ptr, &dat, ptr, bin.Length, str, A_LoopFileName, ptr, blob.p, ptr, blob.sz, uint) " " A_LoopFileName)
}
}
}
}
TSwapInit(dll)
{
g_TSwap       := parsecfg(g_.cfg.TextSwap)
g_TSwap.path  := g_.cfg.path g_TSwap.path
g_TSwap.thumb := g_TSwap.sz
for k, v in ["Dumps", "Replacements"]
{
if ! fileexist(g_TSwap.path "\" v)
{
path := g_TSwap.path
FileCreateDir, %path%\%v%
}
}
g_TSwap.texts       := new Collection()
D3D11_HOOKS.texts   := g_TSwap.texts.pc
g_TSwap.replace     := new Collection()
D3D11_HOOKS.replace := g_TSwap.replace.pc
g_TSwap.paths       := new Collection()
D3D11_HOOKS.paths   := g_TSwap.paths.pc
D3D11_HOOKS.autodmp := g_TSwap.a
D3D11_HOOKS.txt_rct_x := 0
D3D11_HOOKS.txt_rct_y := g_TSwap.thumb
D3D11_HOOKS.txt_rct_w := g_TSwap.thumb
D3D11_HOOKS.txt_rct_h := g_TSwap.thumb*2
D3D11_HOOKS.img_rct_x :=
D3D11_HOOKS.img_rct_y :=
D3D11_HOOKS.img_rct_w := g_TSwap.thumb
D3D11_HOOKS.img_rct_h := g_TSwap.thumb
dllcall(dll "\SetSampleCount", uint, g_TSwap.s)
dllcall(dll "\SetTexturePaths", str, g_TSwap.path "/dumps/", astr, g_.cfg.MyDocs "\Games\checkerboard.dds")
if fileexist((comp := g_TSwap.path "\Dumps\dump._dds"))
LoadCompiledDumpCollection(comp, lst := [])
else LoadDumpCollection(g_TSwap.path "\Dumps", lst := [])
g_TSwap.dumps := []
return
}
D3D11InitHDHooks(dll)
{
if (g_.cfg.HD)
{
if g_.cfg.MHKS
dllcall(dll "\InitMouseHooks")
g_.WnAPI.SetWindowPos := dllcall("GetProcAddress", ptr, dllcall("LoadLibraryW", astr, "User32.dll", ptr), astr, "SetWindowPos", ptr)
logerr(IDXGISwapChain.dllHook("ResizeTarget", "D3D11ResizeTargetHook", dll))
logerr(IDXGISwapChain.dllHook("ResizeBuffers", "D3D11ResizeBuffersHook", dll))
logerr(IDXGISwapChain.dllHook("GetBuffer", "DXGIGetBufferHook", dll))
}
D3D11_HOOKS.Getbff   := IDXGISwapChain.GetBuffer
D3D11_HOOKS.GetDesc  := IDXGISwapChain.GetDesc
D3D11_HOOKS.GetDesc1 := IDXGISwapChain1.GetDesc1
D3D11_HOOKS.Rsz      := IDXGISwapChain.ResizeBuffers
D3D11_HOOKS.RszTrgt  := IDXGISwapChain.ResizeTarget
D3D11_HOOKS.GetModes := IDXGIOutput.GetDisplayModeList
}
InitD3D11Hooks()
InitD3D11Hooks()
{
g_.p.D3D11HDSetUP  := dllcall("GetProcAddress", ptr, g_.h_PeixotoDll, astr, "D3D11HDSetUP", ptr)
d                  := Desk()
D3D11_HOOKS.HD_W   := d.w
D3D11_HOOKS.HD_H   := d.h
D3D11_HOOKS.W      := d.w
D3D11_HOOKS.H      := d.h
if (g_.cfg.RLMT)
{
d := strsplit(["640x480", "800x600", "1024x768", "960x540", "1280x720", "1366x768", "1600x900", "1920x1080", "2560x1440", "3840x2160", "640x360"][g_.cfg.RLMT], "x" )
D3D11_HOOKS.W    := d[1]
D3D11_HOOKS.H    := d[2]
}
if (g_.cfg.D3D = 10)
return InitD3D10Hooks()
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
dllcall(dll "\D3D12Config", astr, "D3D.VERSION", ptr, 11)
dllcall(dll "\NVIDIA_Set", wstr, g_.cfg.target, uint, g_.cfg.NVAA)
for k ,v in strsplit(g_.cfg.HD, "|")
dllcall(dll "\D3D12Config", astr, v, uint, 2)
(g_.cfg.WHKS)    ? dllcall(dll "\D3D12Config", astr, "FIXWINSIZE", ptr, 1)
(g_.cfg.MHKS)    ? dllcall(dll "\D3D12Config", astr, "MOUSEHOOKS", ptr, 1)
(g_.cfg.gamma)   ? dllcall(dll "\D3D12Config", astr, "GAMMA", ptr, 1)
(g_.cfg.VSNC)    ? dllcall(dll "\D3D12Config", astr, "VSYNC", ptr, 1)
(g_.cfg.MCLP)    ? dllcall(dll "\D3D12Config", astr, "MOUSECLIP" , str, g_.cfg.MCLP)
(g_.cfg.DBLBFF)  ? dllcall(dll "\D3D12Config", astr, "DOUBLEBUFF", uint, 1)
arch      := A_PtrSize == 8 ? "x64" : "x32"
wine_path := g_.cfg.injector_dir . "\wined3d\"  g_.cfg.wine "\" arch
dxvk_path := g_.cfg.injector_dir . "\dxvk\"  g_.cfg.dxvkv "\" arch
flags     := g_.cfg.dxvk ? 0xd : 0
dllcall(dll "\InitD3D11Hooks", ptr, D3D11_HOOKS[], astr, wine_path, astr, dxvk_path, astr, g_.cfg.target_dir, uint, flags)
logerr(GetDirect3D11())
logerr(IDXGIFactory2.dllHook("CreateSwapChainForHwnd", "D3D11CreateSwapChainForHwnd", dll))
logerr(IDXGIFactory.dllHook("CreateSwapChain", "D3D11CreateSwapChain", dll))
D3D11_HOOKS.CreateChainForHwnd := IDXGIFactory2.CreateSwapChainForHwnd
D3D11_HOOKS.CreateChain        := IDXGIFactory.CreateSwapChain
D3D11_HOOKS.AHKSetup           := RegisterCallback("D3D11Setup", "F")
logerr(IDXGISwapChain.dllHook("Present", "IDXGISwapChainPresentHook", dll))
D3D11_HOOKS.present         := IDXGISwapChain.Present
D3D11_HOOKS._present        := RegisterCallback("IDXGISwapChain_Present", "F")
D3D11_HOOKS.ImSetResources  := ID3D11ImDeviceContext.PSSetShaderResources
D3D11_HOOKS.CreateTex2D     := ID3D11Device.CreateTexture2D
D3D11_HOOKS.CreateResView   := ID3D11Device.CreateShaderResourceView
D3D11_HOOKS.ReadSubresource := ID3D11Device3.ReadFromSubresource
D3D11_HOOKS.Map             := ID3D11ImDeviceContext.Map
D3D11_HOOKS.Unmap           := ID3D11ImDeviceContext.Unmap
D3D11_HOOKS.CopyRegion      := ID3D11ImDeviceContext.CopySubresourceRegion
if (parsecfg(g_.cfg.TextSwap).e or instr(g_.cfg.HD, "USEPROXIES"))
{
if ! parsecfg(g_.cfg.TextSwap).e
{
g_TSwap             := {}
g_TSwap.texts       := new Collection()
D3D11_HOOKS.texts   := g_TSwap.texts.pc
g_TSwap.replace     := new Collection()
D3D11_HOOKS.replace := g_TSwap.replace.pc
}
else
{
TSwapInit(dll)
logerr(ID3D11Device.dllHook("CreateTexture2D", "D3D11CreateTexture2DHook", dll))
}
logerr(ID3D11Texture2D.dllHook("Release", "D3D11Texture2DReleaseHook", dll))
logerr(ID3D11ImDeviceContext.dllHook("PSSetShaderResources", "D3D11PSSetShaderResourcesHook", dll))
logerr(ID3D11ImDeviceContext.dllHook("Map", "D3D11MapHook", dll))
logerr(ID3D11ImDeviceContext.dllHook("Unmap", "D3D11UnmapHook", dll))
logerr(ID3D11ImDeviceContext.dllHook("CopySubresourceRegion", "D3D11CopySubresourceRegionHook", dll))
logerr(ID3D11ImDeviceContext.dllHook("UpdateSubresource", "D3D11UpdateSubresourceHook", dll))
}
D3D11_HOOKS.CreateResView  := ID3D11Device.CreateShaderResourceView
D3D11_HOOKS.ReleaseResView := ID3D11ShaderResourceView.Release
D3D11_HOOKS.CreateTex2D    := ID3D11Device.CreateTexture2D
D3D11_HOOKS.ReleaseTex2D   := ID3D11Texture2D.Release
D3D11_HOOKS.ImSetResources := ID3D11ImDeviceContext.PSSetShaderResources
D3D11_HOOKS.map            := ID3D11ImDeviceContext.Map
D3D11_HOOKS.Unmap          := ID3D11ImDeviceContext.Unmap
D3D11_HOOKS.CopyRegion     := ID3D11ImDeviceContext.CopySubresourceRegion
D3D11_HOOKS.UpdateSubrsrc  := ID3D11ImDeviceContext.UpdateSubresource
if (parsecfg(g_.cfg.PxSwap).e or g_.cfg.HD)
{
if (! parsecfg(g_.cfg.PxSwap).e )
{
g_PxOvrrd           := {}
g_PxOvrrd.PxShdrs   := new Collection()
D3D11_HOOKS.PxShdrs := g_PxOvrrd.PxShdrs.pc
} else PxOvrr11dInit()
logerr(ID3D11ImDeviceContext.dllHook("PsSetShader", "D3D11PsSetShaderHook", dll))
logerr(ID3D11Device.dllHook("CreatePixelShader", "CreatePixelShader11Hook", dll))
if ( !parsecfg(g_.cfg.TextSwap).e && !g_.cfg.HD )
logerr(ID3D11PixelShader.dllHook("Release", "ReleasePixelShader11Hook", dll))
}
D3D11_HOOKS.PxCreate  := ID3D11Device.CreatePixelShader
D3D11_HOOKS.PxRelease := ID3D11PixelShader.Release
D3D11_HOOKS.PxSet     := ID3D11ImDeviceContext.PsSetShader
if (g_.cfg.HD)
{
logerr(ID3D11ImDeviceContext.dllHook("ResolveSubresource", "D3D11ResolveSubresourceHook", dll))
logerr(ID3D11ImDeviceContext.dllHook("CopyResource", "D3D11CopyResourceHook", dll))
logerr(ID3D11ImDeviceContext.dllHook("OMSetRenderTargets", "D3D11OMSetRenderTargetsHook", dll))
logerr(ID3D11ImDeviceContext.dllHook("OMGetRenderTargets", "D3D11OMGetRenderTargetsHook", dll))
logerr(ID3D11ImDeviceContext.dllHook("ClearDepthStencilView", "D3D11ClearDepthStencilViewHook", dll) )
logerr(ID3D11ImDeviceContext.dllHook("ClearRenderTargetView", "D3D11ClearRenderTargetViewHook", dll) )
}
D3D11_HOOKS.StTrgt   := ID3D11ImDeviceContext.OMSetRenderTargets
D3D11_HOOKS.GtTrgt   := ID3D11ImDeviceContext.OMGetRenderTargets
D3D11_HOOKS.Clear    := ID3D11ImDeviceContext.ClearDepthStencilView
D3D11_HOOKS.ClearRT  := ID3D11ImDeviceContext.ClearRenderTargetView
D3D11_HOOKS.StVW     := ID3D11ImDeviceContext.RSSetViewports
D3D11_HOOKS.StScsr   := ID3D11ImDeviceContext.RSSetScissorRects
D3D11_HOOKS.GtVW     := ID3D11ImDeviceContext.RSGetViewports
D3D11_HOOKS.GtScsr   := ID3D11ImDeviceContext.RSGetScissorRects
D3D11_HOOKS.Copy     := ID3D11ImDeviceContext.CopyResource
D3D11_HOOKS.Resolve  := ID3D11ImDeviceContext.ResolveSubresource
D3D11_HOOKS.DscrdVW  := ID3D11ImDeviceContext1.DiscardView
D3D11InitHDHooks(dll)
if (g_.cfg.fltr || g_.cfg.TextSwap.a)
logerr(ID3D11ImDeviceContext.dllHook("PSSetSamplers", "D3D11PSSetSamplersHook", dll))
D3D11_HOOKS.StSmplr := ID3D11ImDeviceContext.PSSetSamplers
D3D11_HOOKS.Aniso := g_.cfg.TextSwap.a
D3D11_HOOKS.Point := g_.cfg.FLTR
dllcall(dll "\D3D11SetupFinished", ptr, IDXGISwapChain.p)
IDXGISwapChain.GetDesc         := D3D11_HOOKS.GetDesc
IDXGISwapChain1.GetDesc1       := D3D11_HOOKS.GetDesc1
IDXGIOutput.GetDisplayModeList := D3D11_HOOKS.GetModes
}
D3D11Setup(d, w, h)
{
return
}
D3D11HDSetUP(w, h, c) {
dllcall(g_.p.D3D11HDSetUP, uint, w, uint, h, astr, c)
}
D3D11SetUPSwapChain(desc, c)
{
if (g_.cfg.HD)
{
if (desc)
{
d   := struct(DXGI_SWAP_CHAIN_DESC)
d[] := desc
sps := 	dllcall("SetWindowpos", ptr, d.OutputWindow, int, 0, uint, 0, uint, 0, uint, D3D11_HOOKS.HD_W, uint, D3D11_HOOKS.HD_H, uint, 0x0454)
logerr(c " SetWindowpos: " sps " HWIN: " d.OutputWindow)
dll := A_ptrsize = 4 ? "peixoto.dll" : "peixoto64.dll"
dllcall(dll "\D3D12Config", astr, "HWND", ptr, d.OutputWindow)
dllcall("RtlMoveMemory", ptr, DXGI_SWAP_CHAIN_DESC[], ptr, desc, ptr, DXGI_SWAP_CHAIN_DESC.size())
if (d.BufferDesc.Width && d.BufferDesc.Height && desc != DXGI_SWAP_CHAIN_DESC[])
D3D11HDSetUP(d.BufferDesc.Width, d.BufferDesc.Height, c)
DXGI_SWAP_CHAIN_DESC.BufferDesc.Width  := D3D11_HOOKS.HD_W
DXGI_SWAP_CHAIN_DESC.BufferDesc.Height := D3D11_HOOKS.HD_H
return DXGI_SWAP_CHAIN_DESC[]
}
logerr("NO DESC`n")
} return desc
}
D3D11GetSwapChainDsc(p)
{
logerr("GetDesc " dllcall(IDXGISwapChain.GetDesc, ptr, p, ptr, DXGI_SWAP_CHAIN_DESC[]) " " p)
logerr("GetDesc " DXGI_SWAP_CHAIN_DESC.BufferDesc.Width " x " DXGI_SWAP_CHAIN_DESC.BufferDesc.Height)
}
IDXGISwapChain_Present(p1, p2, p3)
{
keyevent(g_TSwap.c)    ? D3D11_HOOKS.clr    := cicleColor(D3D11_HOOKS.clr)
keyevent(g_TSwap.sw)   ? D3D11_HOOKS.search := (D3D11_HOOKS.search) & True ? False : True
keyevent(g_PxOvrrd.sw) ? D3D11_HOOKS.search := (D3D11_HOOKS.search) ? False : 2
D3D11_HOOKS.current := 0
D3D11_HOOKS.CrrntPx := 0
return (D3D11_HOOKS.search = 2) ? D3D11PxBrowse() : (D3D11_HOOKS.search) ? D3D11Browse() : ""
}
D3D11PxBrowse()
{
static indx     := -1
static prev     := -1
static unrecg   := ""
D3D11_HOOKS.tex := "Shader " indx " of " g_PxOvrrd.PxShdrs.count()
_func := getkeystate(g_PxOvrrd.q) ? "getkeystate" : "keyevent"
%_func%(g_PxOvrrd.n) ? indx += 1 : %_func%(g_PxOvrrd.p) ? indx -= 1 :
if keyevent(g_PxOvrrd.d)
{
D3D11_HOOKS.CrrntPx :=  g_PxOvrrd.PxShdrs.KeyAt(indx)
dump := 1
n    := 0
file := "dump" n
while fileexist(g_PxOvrrd.user_path "\" file ".bin") || fileexist(g_PxOvrrd.user_path "\" file ".txt")
{
n += 1
file := "dump" n
}
D3D11_HOOKS.dump := g_PxOvrrd.user_path "\" file
return 2
}
if (prev != indx)
{
BC := g_PxOvrrd.PxShdrs.ValueAt(indx)
if (BC)
{
if (!D3D11Compile(px, D3D11Shader(), "PS_4_0", "Px") )
D3D11_HOOKS.PxBlob := px
}
}
prev := indx
(indx >= g_PxOvrrd.PxShdrs.count()) ? indx := 0
: (indx < 0 ) ? indx := g_PxOvrrd.PxShdrs.count()-1
D3D11_HOOKS.CrrntPx  := g_PxOvrrd.PxShdrs.KeyAt(indx)
}
D3D11Browse()
{
static index := 0
_func := getkeystate(g_TSwap.q) ? "getkeystate" : "keyevent"
%_func%(g_TSwap.n) ? index += 1 : %_func%(g_TSwap.p) ? index -= 1 :
if keyevent(g_TSwap.d)
{
dump := 1
n    := 0
file := "dump" n ".dds"
while fileexist(g_TSwap.path "\dumps\" file)
{
n += 1
file := "dump" n ".dds"
}
D3D11_HOOKS.dump    := g_TSwap.path "\dumps\" file
D3D11_HOOKS.current := g_TSwap.texts.KeyAt(index)
return 1
}
(index >= g_TSwap.texts.count()) ? index := 0
: (index < 0 ) ? index := g_TSwap.texts.count()-1
D3D11_HOOKS.tex := "Texture " index "/" g_TSwap.texts.count() "`n"
D3D11_HOOKS.tex := "Bite my shiny metal ass"
if (tex := g_TSwap.texts.KeyAt(index))
{
D3D11_HOOKS.current := tex
if (D3D11_TEXTURE2D_DESC[] := g_TSwap.texts.Value(tex))
{
u := ["Default", "Imutable", "Dynamic", "System"][D3D11_TEXTURE2D_DESC.Usage+1]
D3D11_HOOKS.tex := "`nTexture2D[" D3D11_TEXTURE2D_DESC.ArraySize "] " index "/" g_TSwap.texts.count() " " u "`n"
D3D11_HOOKS.tex .= D3D11_TEXTURE2D_DESC.Width "x" D3D11_TEXTURE2D_DESC.Height " => " DXGI.frmts[D3D11_TEXTURE2D_DESC.Format]
D3D11_TEXTURE2D_DESC.Usage = 3 ? D3D11_HOOKS.current := 0
D3D11_HOOKS.tex .=  "`n" g_TSwap.replace.count() " replacements"
}
}
return 0
}


printl()
resume()
class CppWrapperDx11 extends dshow_h_parser {
/*
save(file_)
{
	File := fileopen(file_, "w")
	name := this.filename
	this.ahkcode := ";File automatically generated by CrappyCppHeaderParser.ahk (Copyright@ peixoto)`n`n"
	this.ahkcode .= "Global " name . " := {}`n"
	
	for k, v in this.GUIDs
		this.ahkcode .= name "." v[1] " := " v[2] "`n"
	
	for k, v in this.interfaces {
		this.ahkcode .= "`n" . name "." v[1] ":= {}"
		this.ahkcode .= "`n" . name "." v[1] ".name := """ v[1] """"
		this.ahkcode .= "`n" . name "." v[1] ".def :=`n( " v[2] """`n)`n"
	}
		
	this.ahkcode .= "`n" name ".constant := {}"
	for k, v in this.constants 
		this.ahkcode .= "`n" name ".constant[" v " . """"] := " """" k """"
	
	this.ahkcode .= "`n`n" 
	for k, v in this.constants 
		this.ahkcode .= "`n"  name "." k  " := " v 
			
	this.ahkcode .= "`n"
	
	this.ahkcode .= "`n" name ".err := {}"
	for k, v in this.error_constants
		this.ahkcode .= "`n" name ".err[" v " . """"] := " """" k """"
	
	this.ahkcode .= "`n`n" 	
	for k, v in this.error_constants
		this.ahkcode .= "`n"  name "." k  " := " v 
	
	file.write(this.ahkcode)
	file.close()		
}
*/

_7thpass()
{
	fileappend,	% this.filename ".h: Pass7 - Retriving error constants definitions`n", *
	preproc := this.preproc
	loop, parse, preproc, "`n"
	{
		token := regexreplace(A_loopfield, "\s+", " ")
		stringsplit, token_, token, %A_space%			
		if instr(token_3, "MAKE_D3D11_HRESULT") 
			{
				code := regexreplace(A_loopfield, ".*MAKE_D3D11_HRESULT\(", "")
				stringreplace, code, code, ), ,
				stringreplace, code, code, %A_space%, ,1
				stringreplace, code, code, `r, ,1	
				VarSetCapacity(error_code, 4)					
				error_code := 1<<31 | 0x87c<<16 | code	
				this.error_constants[token_2] := error_code
			}					
	}	
	
}

patch() {	
	for k, v in this.GUIDs
	{
		if (instr(v[1], "(") = 1)
			this.GUIDs.remove(k)
	}
	for k, v in this.enums 
	{
		if ! instr(v[2], "0x")
			continue
		old := v[2]
		StringReplace, vv, old, L, ,
		this.enums[k] := [v[1], vv]
		fileappend,	% this.filename "..." k "=" v "`n" , *
	}
}

}


#include parser DirectShow.ahk
/*
dx11 := new CppWrapperDx11("C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)\Include\D3D11.h")
dx11.save("d3d11.h.ahk")


dx11 := new CppWrapperDx11("C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)\Include\D3D11.h")
dx11.save("d3d11.h.ahk")

;dx10 := new CppWrapperDx11("C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)\Include\D3D10.h")
;dx10.save("d3d10.h.ahk")

;d3DCommon := new CppWrapperDx11("C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)\Include\d3DCommon.h")
;d3DCommon.save("d3dCommon.h.ahk")

DXGI := new CppWrapperDx11("C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)\Include\DXGI.h")
DXGI.save("DXGI.h.ahk")

DXGIFormat := new CppWrapperDx11("C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)\Include\DXGIFormat.h")
DXGIFormat.save("DXGIFormat.h.ahk")

DXGIType := new CppWrapperDx11("C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)\Include\DXGIType.h")
DXGIType.save("DXGIType.h.ahk")


loop, 4 {	
D3D11_%A_index% := new CppWrapperDx11("d3d11_" A_index ".h")
D3D11_%A_index%.save("d3d11_" A_index ".h.ahk")
}


loop, 5 {	
i := A_index+1
DXGI1_%i% := new CppWrapperDx11("DXGI1_" i ".h")
DXGI1_%i%.save("DXGI1_" i ".h.ahk")
}
*/



